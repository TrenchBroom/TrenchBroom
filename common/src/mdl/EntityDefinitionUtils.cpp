/*
 Copyright (C) 2025 Kristian Duske

 This file is part of TrenchBroom.

 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with TrenchBroom. If not, see <http://www.gnu.org/licenses/>.
 */

#include "mdl/EntityDefinitionUtils.h"

#include "mdl/EntityProperties.h"

#include "kdl/string_compare.h"
#include "kdl/string_utils.h"

namespace tb::mdl
{
namespace
{

template <typename ValueType>
auto getPropertyDefinitionsWithType(const EntityDefinition& entityDefinition)
{
  return entityDefinition.propertyDefinitions
         | std::views::filter([](const auto& propertyDefinition) {
             return std::holds_alternative<ValueType>(propertyDefinition.valueType);
           });
}

auto getAllPropertyDefinitions(auto&& entityDefinitions)
{
  return entityDefinitions | std::views::transform([](auto&& entityDefinition) -> auto&& {
           return entityDefinition.propertyDefinitions;
         })
         | std::views::join;
}

bool hasAnyEntityLinkPropertyDefinition(
  const std::vector<EntityDefinition>& entityDefinitions)
{
  return std::ranges::any_of(
    getAllPropertyDefinitions(entityDefinitions), [](const auto& propertyDefinition) {
      return std::holds_alternative<PropertyValueTypes::LinkTarget>(
               propertyDefinition.valueType)
             || std::holds_alternative<PropertyValueTypes::LinkSource>(
               propertyDefinition.valueType);
    });
}

void addOrSetDefaultEntityLinkProperties(EntityDefinition& entityDefinition)
{
  static const auto keysAndValueTypes =
    std::vector<std::tuple<std::string, PropertyValueType, std::string>>{
      {EntityPropertyKeys::Target,
       PropertyValueTypes::LinkSource{},
       "name of entity to trigger"},
      {EntityPropertyKeys::Killtarget,
       PropertyValueTypes::LinkSource{},
       "name of entity to kill"},
      {EntityPropertyKeys::Targetname,
       PropertyValueTypes::LinkTarget{},
       "target name for linking"}};

  for (const auto& [key, valueType, description] : keysAndValueTypes)
  {
    if (auto* propertyDefinition = getPropertyDefinition(entityDefinition, key))
    {
      propertyDefinition->valueType = valueType;
    }
    else
    {
      entityDefinition.propertyDefinitions.push_back(
        PropertyDefinition{key, valueType, description, "generated by TrenchBroom"});
    }
  }
}

void addOrConvertOriginProperties(EntityDefinition& entityDefinition)
{
  const auto isOriginProperty = [](const auto& propertyDefinition) {
    return propertyDefinition.key == EntityPropertyKeys::Origin;
  };

  if (const auto iOriginDefinition =
        std::ranges::find_if(entityDefinition.propertyDefinitions, isOriginProperty);
      iOriginDefinition != entityDefinition.propertyDefinitions.end())
  {
    std::visit(
      kdl::overload(
        [&](PropertyValueTypes::String& stringValueType) {
          iOriginDefinition->valueType =
            PropertyValueTypes::Origin{std::move(stringValueType.defaultValue)};
        },
        [](const auto&) {}),
      iOriginDefinition->valueType);
  }
  else
  {
    entityDefinition.propertyDefinitions.push_back(PropertyDefinition{
      EntityPropertyKeys::Origin,
      PropertyValueTypes::Origin{},
      {"point entity origin"},
      {"generated by TrenchBroom"}});
  }
}

auto makeColor3f(const std::vector<std::optional<float>>& values)
{
  return PropertyValueTypes::Color3f{
    values[0].value_or(0.0f),
    values[1].value_or(0.0f),
    values[2].value_or(0.0f),
  };
}

auto makeColor3i(const std::vector<std::optional<float>>& values)
{
  return PropertyValueTypes::Color3i{
    int(values[0].value_or(0.0f)),
    int(values[1].value_or(0.0f)),
    int(values[2].value_or(0.0f)),
  };
}

using Color3 = std::variant<PropertyValueTypes::Color3f, PropertyValueTypes::Color3i>;

Color3 makeColor3(
  const std::optional<std::string_view>& typeName,
  const std::vector<std::optional<float>>& values)
{
  assert(values.size() >= 3);

  if (typeName)
  {
    if (kdl::ci::str_is_equal(*typeName, "color1"))
    {
      return makeColor3f(values);
    }

    if (kdl::ci::str_is_equal(*typeName, "color255"))
    {
      return makeColor3i(values);
    }
  }

  // guess the type based on the default value - only inspect the first 3 values
  // assume integer if any value is > 1
  if (std::ranges::any_of(
        values | std::views::take(3), [](const auto& value) { return value > 1.0f; }))
  {
    return makeColor3i(values);
  }

  // all values <= 1; assume float if any value is > 0
  if (std::ranges::any_of(
        values | std::views::take(3), [](const auto& value) { return value > 0.0f; }))
  {
    return makeColor3f(values);
  }

  // all values are 0, assume float
  return makeColor3f(values);
}

auto getBrightness(const std::vector<std::optional<float>>& values)
{
  auto brightness = std::optional<float>{};
  if (values.size() > 3)
  {
    brightness = values[3];
  }
  return brightness;
}

auto makeColorValue(Color3 color, const std::optional<float>& brightness)
{
  return std::visit(
    kdl::overload(
      [&](const PropertyValueTypes::Color3f& color3f) -> PropertyValueTypes::ColorValue {
        if (brightness)
        {
          return PropertyValueTypes::ColorWithBrightness3f{color3f, *brightness};
        }
        return color3f;
      },
      [&](const PropertyValueTypes::Color3i& color3i) -> PropertyValueTypes::ColorValue {
        if (brightness)
        {
          return PropertyValueTypes::ColorWithBrightness3i{color3i, *brightness};
        }
        return color3i;
      }),
    color);
}

} // namespace

std::optional<PropertyValueTypes::ColorValue> parseColorPropertyDefaultValue(
  const std::optional<std::string_view>& typeName,
  const std::optional<std::string>& defaultValue)
{
  if (!defaultValue)
  {
    return std::nullopt;
  }

  auto defaultComponentValues = kdl::str_split(*defaultValue, " ")
                                | std::views::transform(kdl::str_to_float)
                                | kdl::ranges::to<std::vector>();

  if (defaultComponentValues.size() < 3)
  {
    defaultComponentValues.resize(3, std::nullopt);
  }

  return makeColorValue(
    makeColor3(typeName, defaultComponentValues), getBrightness(defaultComponentValues));
}

std::vector<const PropertyDefinition*> getLinkSourcePropertyDefinitions(
  const EntityDefinition* entityDefinition)
{
  return entityDefinition
           ? getPropertyDefinitionsWithType<PropertyValueTypes::LinkSource>(
               *entityDefinition)
               | std::views::transform(
                 [](const auto& propertyDefinition) { return &propertyDefinition; })
               | kdl::ranges::to<std::vector>()
           : std::vector<const PropertyDefinition*>{};
}

std::vector<const PropertyDefinition*> getLinkTargetPropertyDefinitions(
  const EntityDefinition* entityDefinition)
{
  return entityDefinition
           ? getPropertyDefinitionsWithType<PropertyValueTypes::LinkTarget>(
               *entityDefinition)
               | std::views::transform(
                 [](const auto& propertyDefinition) { return &propertyDefinition; })
               | kdl::ranges::to<std::vector>()
           : std::vector<const PropertyDefinition*>{};
}

bool isLinkSourceProperty(
  const EntityDefinition* entityDefinition, const std::string& key)
{
  return entityDefinition
         && std::ranges::any_of(
           getPropertyDefinitionsWithType<PropertyValueTypes::LinkSource>(
             *entityDefinition),
           [&](const auto& propertyDefinition) { return propertyDefinition.key == key; });
}

bool isLinkTargetProperty(
  const EntityDefinition* entityDefinition, const std::string& key)
{
  return entityDefinition
         && std::ranges::any_of(
           getPropertyDefinitionsWithType<PropertyValueTypes::LinkTarget>(
             *entityDefinition),
           [&](const auto& propertyDefinition) { return propertyDefinition.key == key; });
}

void addOrSetDefaultEntityLinkProperties(std::vector<EntityDefinition>& entityDefinitions)
{
  if (!hasAnyEntityLinkPropertyDefinition(entityDefinitions))
  {
    for (auto& entityDefinition : entityDefinitions)
    {
      addOrSetDefaultEntityLinkProperties(entityDefinition);
    }
  }
}

void addOrConvertOriginProperties(std::vector<EntityDefinition>& entityDefinitions)
{
  const auto isPointEntity = [](const auto& entityDefinition) {
    return entityDefinition.pointEntityDefinition != std::nullopt;
  };

  for (auto& entityDefinition : entityDefinitions | std::views::filter(isPointEntity))
  {
    addOrConvertOriginProperties(entityDefinition);
  }
}

} // namespace tb::mdl
