/*
 Copyright (C) 2025 Kristian Duske

 This file is part of TrenchBroom.

 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with TrenchBroom. If not, see <http://www.gnu.org/licenses/>.
 */

#include "mdl/EntityDefinitionUtils.h"

#include "mdl/EntityProperties.h"

#include "kdl/string_compare.h"
#include "kdl/string_utils.h"

namespace tb::mdl
{
namespace
{

template <typename ValueType>
auto getPropertyDefinitionsWithType(const EntityDefinition& entityDefinition)
{
  return entityDefinition.propertyDefinitions
         | std::views::filter([](const auto& propertyDefinition) {
             return std::holds_alternative<ValueType>(propertyDefinition.valueType);
           });
}

auto getAllPropertyDefinitions(auto&& entityDefinitions)
{
  return entityDefinitions | std::views::transform([](auto&& entityDefinition) -> auto&& {
           return entityDefinition.propertyDefinitions;
         })
         | std::views::join;
}

bool hasAnyEntityLinkPropertyDefinition(
  const std::vector<EntityDefinition>& entityDefinitions)
{
  return std::ranges::any_of(
    getAllPropertyDefinitions(entityDefinitions), [](const auto& propertyDefinition) {
      return std::holds_alternative<PropertyValueTypes::LinkTarget>(
               propertyDefinition.valueType)
             || std::holds_alternative<PropertyValueTypes::LinkSource>(
               propertyDefinition.valueType);
    });
}

void addOrSetDefaultEntityLinkProperties(EntityDefinition& entityDefinition)
{
  static const auto keysAndValueTypes =
    std::vector<std::tuple<std::string, PropertyValueType, std::string>>{
      {EntityPropertyKeys::Target,
       PropertyValueTypes::LinkSource{},
       "name of entity to trigger"},
      {EntityPropertyKeys::Killtarget,
       PropertyValueTypes::LinkSource{},
       "name of entity to kill"},
      {EntityPropertyKeys::Targetname,
       PropertyValueTypes::LinkTarget{},
       "target name for linking"}};

  for (const auto& [key, valueType, description] : keysAndValueTypes)
  {
    if (auto* propertyDefinition = getPropertyDefinition(entityDefinition, key))
    {
      propertyDefinition->valueType = valueType;
    }
    else
    {
      entityDefinition.propertyDefinitions.push_back(
        PropertyDefinition{key, valueType, description, "generated by TrenchBroom"});
    }
  }
}

void addOrConvertOriginProperties(EntityDefinition& entityDefinition)
{
  const auto isOriginProperty = [](const auto& propertyDefinition) {
    return propertyDefinition.key == EntityPropertyKeys::Origin;
  };

  if (const auto iOriginDefinition =
        std::ranges::find_if(entityDefinition.propertyDefinitions, isOriginProperty);
      iOriginDefinition != entityDefinition.propertyDefinitions.end())
  {
    std::visit(
      kdl::overload(
        [&](PropertyValueTypes::String& stringValueType) {
          iOriginDefinition->valueType =
            PropertyValueTypes::Origin{std::move(stringValueType.defaultValue)};
        },
        [](const auto&) {}),
      iOriginDefinition->valueType);
  }
  else
  {
    entityDefinition.propertyDefinitions.push_back(PropertyDefinition{
      EntityPropertyKeys::Origin,
      PropertyValueTypes::Origin{},
      {"point entity origin"},
      {"generated by TrenchBroom"}});
  }
}

Rgb makeRgb(
  const std::optional<std::string_view>& typeName, const std::vector<float>& values)
{
  assert(values.size() >= 3);

  const auto vec = vm::vec3f{values[0], values[1], values[2]};

  if (typeName)
  {
    if (kdl::ci::str_is_equal(*typeName, "color1"))
    {
      return RgbF{vec};
    }

    if (kdl::ci::str_is_equal(*typeName, "color255"))
    {
      return RgbB{vm::vec<uint8_t, 3>{vec}};
    }
  }

  if (isFloatColorRange(vec))
  {
    return RgbF{vec};
  }

  if (isByteColorRange(vec))
  {
    return RgbB{vm::vec<uint8_t, 3>{vec}};
  }

  // assume float
  return RgbF{vec};
}

auto getBrightness(const std::vector<float>& values)
{
  return values.size() > 3 ? std::optional{values[3]} : std::nullopt;
}

PropertyValueTypes::ColorValue makeColorValue(
  const Rgb& rgb, const std::optional<float>& brightness)
{
  if (brightness)
  {
    return PropertyValueTypes::ColorWithBrightness{rgb, *brightness};
  }
  return rgb;
}

auto convertLegacyColorValueType(const std::optional<std::string>& defaultValueStr)
{
  return PropertyValueTypes::Color{
    parseColorPropertyDefaultValue(std::nullopt, defaultValueStr)};
}

void convertLegacyColorProperties(EntityDefinition& entityDefinition)
{
  const auto isLegacyColorProperty = [](const auto& propertyDefinition) {
    return kdl::ci::str_is_equal(propertyDefinition.key, "color")
           || kdl::ci::str_is_suffix(propertyDefinition.key, "_color")
           || kdl::ci::str_is_suffix(propertyDefinition.key, "_color2")
           || kdl::ci::str_is_suffix(propertyDefinition.key, "_colour");
  };

  for (auto& propertyDefinition :
       entityDefinition.propertyDefinitions | std::views::filter(isLegacyColorProperty))
  {
    std::visit(
      kdl::overload(
        [&](PropertyValueTypes::String& stringValueType) {
          propertyDefinition.valueType =
            convertLegacyColorValueType(stringValueType.defaultValue);
        },
        [&](PropertyValueTypes::Unknown& unknownValueType) {
          propertyDefinition.valueType =
            convertLegacyColorValueType(unknownValueType.defaultValue);
        },
        [](const auto&) {}),
      propertyDefinition.valueType);
  }
}

} // namespace

std::optional<PropertyValueTypes::ColorValue> parseColorPropertyDefaultValue(
  const std::optional<std::string_view>& typeName,
  const std::optional<std::string>& defaultValue)
{
  if (!defaultValue)
  {
    return std::nullopt;
  }

  const auto maybeComponents = kdl::str_split(*defaultValue, " ")
                               | std::views::transform(kdl::str_to_float)
                               | kdl::ranges::to<std::vector>();

  if (
    maybeComponents.size() < 3 || maybeComponents.size() > 4
    || std::ranges::any_of(
      maybeComponents, [](const auto& v) { return v == std::nullopt; }))
  {
    return std::nullopt;
  }

  const auto components = maybeComponents
                          | std::views::transform([](const auto& v) { return *v; })
                          | kdl::ranges::to<std::vector>();

  return makeColorValue(makeRgb(typeName, components), getBrightness(components));
}

std::vector<const PropertyDefinition*> getLinkSourcePropertyDefinitions(
  const EntityDefinition* entityDefinition)
{
  return entityDefinition
           ? getPropertyDefinitionsWithType<PropertyValueTypes::LinkSource>(
               *entityDefinition)
               | std::views::transform(
                 [](const auto& propertyDefinition) { return &propertyDefinition; })
               | kdl::ranges::to<std::vector>()
           : std::vector<const PropertyDefinition*>{};
}

std::vector<const PropertyDefinition*> getLinkTargetPropertyDefinitions(
  const EntityDefinition* entityDefinition)
{
  return entityDefinition
           ? getPropertyDefinitionsWithType<PropertyValueTypes::LinkTarget>(
               *entityDefinition)
               | std::views::transform(
                 [](const auto& propertyDefinition) { return &propertyDefinition; })
               | kdl::ranges::to<std::vector>()
           : std::vector<const PropertyDefinition*>{};
}

bool isLinkSourceProperty(
  const EntityDefinition* entityDefinition, const std::string& key)
{
  return entityDefinition
         && std::ranges::any_of(
           getPropertyDefinitionsWithType<PropertyValueTypes::LinkSource>(
             *entityDefinition),
           [&](const auto& propertyDefinition) { return propertyDefinition.key == key; });
}

bool isLinkTargetProperty(
  const EntityDefinition* entityDefinition, const std::string& key)
{
  return entityDefinition
         && std::ranges::any_of(
           getPropertyDefinitionsWithType<PropertyValueTypes::LinkTarget>(
             *entityDefinition),
           [&](const auto& propertyDefinition) { return propertyDefinition.key == key; });
}

void addOrSetDefaultEntityLinkProperties(std::vector<EntityDefinition>& entityDefinitions)
{
  if (!hasAnyEntityLinkPropertyDefinition(entityDefinitions))
  {
    for (auto& entityDefinition : entityDefinitions)
    {
      addOrSetDefaultEntityLinkProperties(entityDefinition);
    }
  }
}

void addOrConvertOriginProperties(std::vector<EntityDefinition>& entityDefinitions)
{
  const auto isPointEntity = [](const auto& entityDefinition) {
    return entityDefinition.pointEntityDefinition != std::nullopt;
  };

  for (auto& entityDefinition : entityDefinitions | std::views::filter(isPointEntity))
  {
    addOrConvertOriginProperties(entityDefinition);
  }
}

void convertLegacyColorProperties(std::vector<EntityDefinition>& entityDefinitions)
{
  for (auto& entityDefinition : entityDefinitions)
  {
    convertLegacyColorProperties(entityDefinition);
  }
}

} // namespace tb::mdl
