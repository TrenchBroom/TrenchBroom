!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A1	Renderer/VertexSpec.h	/^            typedef _A1 A1;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec1
A1	Renderer/VertexSpec.h	/^            typedef _A1 A1;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec2
A1	Renderer/VertexSpec.h	/^            typedef _A1 A1;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec3
A1	Renderer/VertexSpec.h	/^            typedef _A1 A1;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec4
A1	Renderer/VertexSpec.h	/^            typedef _A1 A1;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
A2	Renderer/VertexSpec.h	/^            typedef _A2 A2;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec2
A2	Renderer/VertexSpec.h	/^            typedef _A2 A2;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec3
A2	Renderer/VertexSpec.h	/^            typedef _A2 A2;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec4
A2	Renderer/VertexSpec.h	/^            typedef _A2 A2;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
A3	Renderer/VertexSpec.h	/^            typedef _A3 A3;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec3
A3	Renderer/VertexSpec.h	/^            typedef _A3 A3;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec4
A3	Renderer/VertexSpec.h	/^            typedef _A3 A3;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
A4	Renderer/VertexSpec.h	/^            typedef _A4 A4;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec4
A4	Renderer/VertexSpec.h	/^            typedef _A4 A4;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
A5	Renderer/VertexSpec.h	/^            typedef _A5 A5;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
AX	MathUtils.h	/^        static const Type AX = 0;$/;"	m	language:C++	namespace:Math::Axis
AY	MathUtils.h	/^        static const Type AY = 1;$/;"	m	language:C++	namespace:Math::Axis
AZ	MathUtils.h	/^        static const Type AZ = 2;$/;"	m	language:C++	namespace:Math::Axis
Action	Controller/AddRemoveObjectsCommand.h	/^            } Action;$/;"	t	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand	typeref:enum:TrenchBroom::Controller::AddRemoveObjectsCommand::__anon7
Action	Controller/EntityPropertyCommand.h	/^            } Action;$/;"	t	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand	typeref:enum:TrenchBroom::Controller::EntityPropertyCommand::__anon9
Action	Controller/FixPlanePointsCommand.h	/^            } Action;$/;"	t	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand	typeref:enum:TrenchBroom::Controller::FixPlanePointsCommand::__anon12
Action	Controller/SelectionCommand.h	/^            } Action;$/;"	t	language:C++	class:TrenchBroom::Controller::SelectionCommand	typeref:enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action	Controller/TextureCollectionCommand.h	/^            } Action;$/;"	t	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand	typeref:enum:TrenchBroom::Controller::TextureCollectionCommand::__anon14
Action_Add	Controller/AddRemoveObjectsCommand.h	/^                Action_Add,$/;"	e	language:C++	enum:TrenchBroom::Controller::AddRemoveObjectsCommand::__anon7
Action_Add	Controller/TextureCollectionCommand.h	/^                Action_Add,$/;"	e	language:C++	enum:TrenchBroom::Controller::TextureCollectionCommand::__anon14
Action_DeselectAll	Controller/SelectionCommand.h	/^                Action_DeselectAll$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_DeselectFaces	Controller/SelectionCommand.h	/^                Action_DeselectFaces,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_DeselectObjects	Controller/SelectionCommand.h	/^                Action_DeselectObjects,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_FindPoints	Controller/FixPlanePointsCommand.h	/^                Action_FindPoints$/;"	e	language:C++	enum:TrenchBroom::Controller::FixPlanePointsCommand::__anon12
Action_MoveDown	Controller/TextureCollectionCommand.h	/^                Action_MoveDown$/;"	e	language:C++	enum:TrenchBroom::Controller::TextureCollectionCommand::__anon14
Action_MoveUp	Controller/TextureCollectionCommand.h	/^                Action_MoveUp,$/;"	e	language:C++	enum:TrenchBroom::Controller::TextureCollectionCommand::__anon14
Action_Remove	Controller/AddRemoveObjectsCommand.h	/^                Action_Remove$/;"	e	language:C++	enum:TrenchBroom::Controller::AddRemoveObjectsCommand::__anon7
Action_Remove	Controller/EntityPropertyCommand.h	/^                Action_Remove$/;"	e	language:C++	enum:TrenchBroom::Controller::EntityPropertyCommand::__anon9
Action_Remove	Controller/TextureCollectionCommand.h	/^                Action_Remove,$/;"	e	language:C++	enum:TrenchBroom::Controller::TextureCollectionCommand::__anon14
Action_Rename	Controller/EntityPropertyCommand.h	/^                Action_Rename,$/;"	e	language:C++	enum:TrenchBroom::Controller::EntityPropertyCommand::__anon9
Action_SelectAllFaces	Controller/SelectionCommand.h	/^                Action_SelectAllFaces,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_SelectAllObjects	Controller/SelectionCommand.h	/^                Action_SelectAllObjects,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_SelectFaces	Controller/SelectionCommand.h	/^                Action_SelectFaces,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_SelectObjects	Controller/SelectionCommand.h	/^                Action_SelectObjects,$/;"	e	language:C++	enum:TrenchBroom::Controller::SelectionCommand::__anon13
Action_Set	Controller/EntityPropertyCommand.h	/^                Action_Set,$/;"	e	language:C++	enum:TrenchBroom::Controller::EntityPropertyCommand::__anon9
Action_SnapPoints	Controller/FixPlanePointsCommand.h	/^                Action_SnapPoints,$/;"	e	language:C++	enum:TrenchBroom::Controller::FixPlanePointsCommand::__anon12
ActivationPolicy	View/Tool.h	/^        class ActivationPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
Active	Renderer/Vbo.h	/^            static const Type Active    = 1;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::VboState
ActiveShader	Renderer/ShaderManager.cpp	/^        ActiveShader::ActiveShader(ShaderManager& shaderManager, const ShaderConfig& shaderConfig) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ActiveShader
ActiveShader	Renderer/ShaderManager.h	/^        class ActiveShader {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AddFaceResult	Model/BrushGeometry.cpp	/^        AddFaceResult::AddFaceResult(const Code i_resultCode, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::AddFaceResult
AddFaceResult	Model/BrushGeometry.h	/^        struct AddFaceResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
AddObjectToDocument	Controller/AddRemoveObjectsCommand.cpp	/^            AddObjectToDocument(View::MapDocumentSPtr document, Model::ObjectList& addedObjects) :$/;"	f	language:C++	struct:TrenchBroom::Controller::AddObjectToDocument
AddObjectToDocument	Controller/AddRemoveObjectsCommand.cpp	/^        struct AddObjectToDocument {$/;"	s	language:C++	namespace:TrenchBroom::Controller	file:
AddObjectToIssueManager	View/MapDocument.cpp	/^            AddObjectToIssueManager(Model::IssueManager& issueManager) :$/;"	f	language:C++	class:TrenchBroom::View::AddObjectToIssueManager
AddObjectToIssueManager	View/MapDocument.cpp	/^        class AddObjectToIssueManager {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
AddObjectToItemArray	View/MapTreeView.cpp	/^            AddObjectToItemArray(wxDataViewItemArray& i_items) :$/;"	f	language:C++	struct:TrenchBroom::View::AddObjectToItemArray
AddObjectToItemArray	View/MapTreeView.cpp	/^        struct AddObjectToItemArray {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
AddRemoveObjectsCommand	Controller/AddRemoveObjectsCommand.cpp	/^        AddRemoveObjectsCommand::AddRemoveObjectsCommand(View::MapDocumentWPtr document, const Action action, const Model::ObjectParentList& objects) :$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
AddRemoveObjectsCommand	Controller/AddRemoveObjectsCommand.h	/^        class AddRemoveObjectsCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
AddToEntity	View/MapDocument.cpp	/^            AddToEntity(Model::Entity& entity) :$/;"	f	language:C++	class:TrenchBroom::View::AddToEntity
AddToEntity	View/MapDocument.cpp	/^        class AddToEntity {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
AddToMap	View/MapDocument.cpp	/^            AddToMap(Model::Map& map) :$/;"	f	language:C++	class:TrenchBroom::View::AddToMap
AddToMap	View/MapDocument.cpp	/^        class AddToMap {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
AddToPicker	View/MapDocument.cpp	/^            AddToPicker(Model::Picker& picker) :$/;"	f	language:C++	class:TrenchBroom::View::AddToPicker
AddToPicker	View/MapDocument.cpp	/^        class AddToPicker {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
AdjustToRange	View/SpinControl.cpp	/^double SpinControl::AdjustToRange(double value) {$/;"	f	language:C++	class:SpinControl
Alignment	Renderer/TextRenderer.h	/^        namespace Alignment {$/;"	n	language:C++	namespace:TrenchBroom::Renderer
Allocator	Allocator.h	/^class Allocator {$/;"	c	language:C++
AlmostZero	MathUtils.h	/^        static const T AlmostZero;$/;"	m	language:C++	class:Math::Constants
AlmostZero	MathUtils.h	/^    const T Constants<T>::AlmostZero           = static_cast<T>(0.001);$/;"	m	language:C++	class:Math::Constants
Angle	Model/EntityProperties.cpp	/^            const PropertyKey Angle             = "angle";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
AngleHandleHit	View/TexturingViewRotateTool.cpp	/^        const Hit::HitType TexturingViewRotateTool::AngleHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool	file:
AngleHandleHit	View/TexturingViewRotateTool.h	/^            static const Hit::HitType AngleHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
AngleKey	View/RotateToolHelper.cpp	/^        const size_t RotateHelper::AngleKey = 2;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper	file:
AngleKey	View/RotateToolHelper.h	/^            static const size_t AngleKey;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
Angles	Model/EntityProperties.cpp	/^            const PropertyKey Angles            = "angles";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
Animation	View/Animation.cpp	/^        Animation::Animation(const Type type, const Curve curve, const wxLongLong duration) :$/;"	f	language:C++	class:TrenchBroom::View::Animation
Animation	View/Animation.h	/^        class Animation {$/;"	c	language:C++	namespace:TrenchBroom::View
AnimationCurve	View/AnimationCurve.h	/^        class AnimationCurve {$/;"	c	language:C++	namespace:TrenchBroom::View
AnimationManager	View/Animation.cpp	/^        AnimationManager::AnimationManager() :$/;"	f	language:C++	class:TrenchBroom::View::AnimationManager
AnimationManager	View/Animation.h	/^        class AnimationManager : public wxThread {$/;"	c	language:C++	namespace:TrenchBroom::View
AnimationMap	View/Animation.h	/^            typedef std::map<Animation::Type, Animation::List> AnimationMap;$/;"	t	language:C++	class:TrenchBroom::View::AnimationManager
AnimationType	View/CameraAnimation.cpp	/^        const Animation::Type CameraAnimation::AnimationType = Animation::freeType();$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation	file:
AnimationType	View/CameraAnimation.h	/^            static const Type AnimationType;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
AnyType	Hit.cpp	/^    const Hit::HitType Hit::AnyType = 0xFFFFFFFF;$/;"	m	language:C++	class:TrenchBroom::Hit	file:
AnyType	Hit.h	/^        static const HitType AnyType;$/;"	m	language:C++	class:TrenchBroom::Hit
AppendRows	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::AppendRows(const size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
AppendRows	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::AppendRows(size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
ApplyEdit	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::ApplyEdit(int row, int col, wxGrid* grid) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
ArrayDeleter	SharedPointer.h	/^struct ArrayDeleter {$/;"	s	language:C++
AssetException	Exceptions.h	/^        AssetException() throw() {}$/;"	f	language:C++	class:TrenchBroom::AssetException
AssetException	Exceptions.h	/^        AssetException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::AssetException
AssetException	Exceptions.h	/^    class AssetException : public ExceptionStream<AssetException> {$/;"	c	language:C++	namespace:TrenchBroom
Assets	Assets/AssetTypes.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/Bsp29Model.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/Bsp29Model.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/EntityDefinition.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/EntityDefinition.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/EntityDefinitionManager.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/EntityDefinitionManager.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/EntityModel.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/EntityModel.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/EntityModelManager.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/EntityModelManager.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/Md2Model.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/Md2Model.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/MdlModel.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/MdlModel.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/ModelDefinition.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/ModelDefinition.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/Palette.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/Palette.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/PropertyDefinition.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/PropertyDefinition.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/Texture.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/Texture.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/TextureCollection.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/TextureCollection.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/TextureCollectionSpec.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/TextureCollectionSpec.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Assets/TextureManager.cpp	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom	file:
Assets	Assets/TextureManager.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Controller/FaceAttributeCommand.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	IO/Bsp29Parser.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	IO/EntityModelParser.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	IO/Md2Parser.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	IO/MdlParser.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Model/Entity.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Model/ModelUtils.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Model/TexCoordSystem.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Renderer/EntityModelRenderer.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Renderer/EntityRenderer.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	Renderer/MeshRenderer.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/ControllerFacade.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/EntityBrowserView.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/FlagChangedCommand.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/SmartChoiceEditor.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/TextureBrowser.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/TextureBrowserView.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/TextureSelectedCommand.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/TexturingViewHelper.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/TexturingViewScaleTool.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
Assets	View/ViewUtils.h	/^    namespace Assets {$/;"	n	language:C++	namespace:TrenchBroom
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_Color, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_Normal, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_Position, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_TexCoord0, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_TexCoord1, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_TexCoord2, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_TexCoord3, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpec	Renderer/AttributeSpec.h	/^        class AttributeSpec<AttributeType_User, D, S> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
AttributeSpecs	Renderer/AttributeSpec.h	/^        namespace AttributeSpecs {$/;"	n	language:C++	namespace:TrenchBroom::Renderer
AttributeType	Renderer/AttributeSpec.h	/^        } AttributeType;$/;"	t	language:C++	namespace:TrenchBroom::Renderer	typeref:enum:TrenchBroom::Renderer::__anon25
AttributeType_Color	Renderer/AttributeSpec.h	/^            AttributeType_Color,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_Normal	Renderer/AttributeSpec.h	/^            AttributeType_Normal,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_Position	Renderer/AttributeSpec.h	/^            AttributeType_Position,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_TexCoord0	Renderer/AttributeSpec.h	/^            AttributeType_TexCoord0,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_TexCoord1	Renderer/AttributeSpec.h	/^            AttributeType_TexCoord1,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_TexCoord2	Renderer/AttributeSpec.h	/^            AttributeType_TexCoord2,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_TexCoord3	Renderer/AttributeSpec.h	/^            AttributeType_TexCoord3$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
AttributeType_User	Renderer/AttributeSpec.h	/^            AttributeType_User,$/;"	e	language:C++	enum:TrenchBroom::Renderer::__anon25
Autosaver	View/Autosaver.cpp	/^        Autosaver::Autosaver(View::MapDocumentWPtr document, const time_t saveInterval, const time_t idleInterval, const size_t maxBackups) :$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
Autosaver	View/Autosaver.h	/^        class Autosaver {$/;"	c	language:C++	namespace:TrenchBroom::View
Axis	MathUtils.h	/^    namespace Axis {$/;"	n	language:C++	namespace:Math
BBox	BBox.h	/^    BBox() :$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const BBox<U,S>& other) :$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const T i_min, const T i_max) {$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const T i_minMax) {$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const Vec<T,S>& center, const T size) {$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const Vec<T,S>& i_min, const Vec<T,S>& i_max) :$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^    BBox(const typename Vec<T,S>::List& vertices) {$/;"	f	language:C++	class:BBox
BBox	BBox.h	/^class BBox {$/;"	c	language:C++
BBox1d	BBox.h	/^typedef BBox<double,1> BBox1d;$/;"	t	language:C++
BBox1f	BBox.h	/^typedef BBox<float,1> BBox1f;$/;"	t	language:C++
BBox2	TrenchBroom.h	/^typedef BBox<FloatType, 2> BBox2;$/;"	t	language:C++
BBox2d	BBox.h	/^typedef BBox<double,2> BBox2d;$/;"	t	language:C++
BBox2f	BBox.h	/^typedef BBox<float,2> BBox2f;$/;"	t	language:C++
BBox3	TrenchBroom.h	/^typedef BBox<FloatType, 3> BBox3;$/;"	t	language:C++
BBox3d	BBox.h	/^typedef BBox<double,3> BBox3d;$/;"	t	language:C++
BBox3f	BBox.h	/^typedef BBox<float,3> BBox3f;$/;"	t	language:C++
Back	View/Clipper.h	/^                Back,$/;"	e	language:C++	enum:TrenchBroom::View::Clipper::ClipSide
BackupFileMatcher	View/Autosaver.cpp	/^            BackupFileMatcher(const IO::Path& i_mapBasename) :$/;"	f	language:C++	struct:TrenchBroom::View::BackupFileMatcher
BackupFileMatcher	View/Autosaver.cpp	/^        struct BackupFileMatcher {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
BaseAxes	Model/ParaxialTexCoordSystem.cpp	/^        const Vec3 ParaxialTexCoordSystem::BaseAxes[] = {$/;"	m	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem	file:
BaseAxes	Model/ParaxialTexCoordSystem.h	/^            static const Vec3 BaseAxes[];$/;"	m	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
BaseHolder	Holder.h	/^class BaseHolder {$/;"	c	language:C++
BaseHolder	Renderer/VertexArray.h	/^        class BaseHolder {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
BeginEdit	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::BeginEdit(int row, int col, wxGrid* grid) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
Border	Renderer/TextureFont.h	/^            static const int Border = 3;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
Both	View/Clipper.h	/^                Both$/;"	e	language:C++	enum:TrenchBroom::View::Clipper::ClipSide
Bottom	Renderer/TextRenderer.h	/^            static const Type Bottom    = 1 << 1;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Alignment
BoundsGuideRenderer	Renderer/BoundsGuideRenderer.cpp	/^        BoundsGuideRenderer::BoundsGuideRenderer(TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
BoundsGuideRenderer	Renderer/BoundsGuideRenderer.h	/^        class BoundsGuideRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
BoundsInfoMinMaxTextAnchor	Renderer/BoundsInfoRenderer.cpp	/^        BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor::BoundsInfoMinMaxTextAnchor(const BBox3& bounds, const BBox3::Corner minMax, const Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
BoundsInfoMinMaxTextAnchor	Renderer/BoundsInfoRenderer.h	/^            class BoundsInfoMinMaxTextAnchor : public TextAnchor {$/;"	c	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
BoundsInfoRenderer	Renderer/BoundsInfoRenderer.cpp	/^        BoundsInfoRenderer::BoundsInfoRenderer(TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
BoundsInfoRenderer	Renderer/BoundsInfoRenderer.h	/^        class BoundsInfoRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
BoundsInfoSizeTextAnchor	Renderer/BoundsInfoRenderer.cpp	/^        BoundsInfoRenderer::BoundsInfoSizeTextAnchor::BoundsInfoSizeTextAnchor(const BBox3& bounds, const Math::Axis::Type axis, const Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
BoundsInfoSizeTextAnchor	Renderer/BoundsInfoRenderer.h	/^            class BoundsInfoSizeTextAnchor : public TextAnchor {$/;"	c	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
BrowserControlsHorizontalMargin	View/ViewConstants.h	/^            static const int BrowserControlsHorizontalMargin    = 3;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
BrowserGroupShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig BrowserGroupShader         = ShaderConfig("Browser Group",                    "BrowserGroup.vertsh",         "BrowserGroup.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
Brush	Model/Brush.cpp	/^        Brush::Brush(const BBox3& worldBounds, const BrushFaceList& faces) :$/;"	f	language:C++	class:TrenchBroom::Model::Brush
Brush	Model/Brush.h	/^        class Brush : public Object, public Allocator<Brush> {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushAlgorithm	Model/BrushAlgorithm.h	/^            BrushAlgorithm(BrushGeometry& geometry) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
BrushAlgorithm	Model/BrushAlgorithm.h	/^        class BrushAlgorithm {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushAlgorithmResult	Model/BrushGeometry.cpp	/^        BrushAlgorithmResult::BrushAlgorithmResult(const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithmResult
BrushAlgorithmResult	Model/BrushGeometry.h	/^        struct BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
BrushEdge	Model/BrushEdge.cpp	/^        BrushEdge::BrushEdge(BrushVertex* i_start, BrushVertex* i_end) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
BrushEdge	Model/BrushEdge.cpp	/^        BrushEdge::BrushEdge(BrushVertex* i_start, BrushVertex* i_end, BrushFaceGeometry* i_left, BrushFaceGeometry* i_right) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
BrushEdge	Model/BrushEdge.h	/^        class BrushEdge : public Allocator<BrushEdge> {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushEdgeList	Model/BrushGeometryTypes.h	/^        typedef std::vector<BrushEdge*> BrushEdgeList;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushEdgesIterator	Model/BrushEdgesIterator.h	/^        struct BrushEdgesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
BrushEdgesMap	Controller/MoveBrushEdgesCommand.h	/^            typedef std::map<Model::Brush*, Edge3::List> BrushEdgesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
BrushEdgesMap	Controller/SplitBrushEdgesCommand.h	/^            typedef std::map<Model::Brush*, Edge3::List> BrushEdgesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
BrushEntityDefinition	Assets/EntityDefinition.cpp	/^        BrushEntityDefinition::BrushEntityDefinition(const String& name, const Color& color, const String& description, const PropertyDefinitionList& propertyDefinitions) :$/;"	f	language:C++	class:TrenchBroom::Assets::BrushEntityDefinition
BrushEntityDefinition	Assets/EntityDefinition.h	/^        class BrushEntityDefinition : public EntityDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
BrushEntityMap	Model/ModelTypes.h	/^        typedef std::map<Brush*, Entity*> BrushEntityMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushFace	Model/BrushFace.cpp	/^        BrushFace::BrushFace(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName, TexCoordSystem* texCoordSystem) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
BrushFace	Model/BrushFace.h	/^        class BrushFace {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushFaceAttribs	Model/BrushFace.cpp	/^        BrushFaceAttribs::BrushFaceAttribs(const String& textureName) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
BrushFaceAttribs	Model/BrushFace.h	/^        class BrushFaceAttribs {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushFaceGeometry	Model/BrushFaceGeometry.cpp	/^        BrushFaceGeometry::BrushFaceGeometry() :$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
BrushFaceGeometry	Model/BrushFaceGeometry.h	/^        class BrushFaceGeometry : public Allocator<BrushFaceGeometry> {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushFaceGeometryList	Model/BrushGeometryTypes.h	/^        typedef std::vector<BrushFaceGeometry*> BrushFaceGeometryList;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushFaceList	Model/ModelTypes.h	/^        typedef std::vector<BrushFace*> BrushFaceList;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushFaceSet	Model/ModelTypes.h	/^        typedef std::set<BrushFace*> BrushFaceSet;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushFaceSnapshot	Model/BrushFace.cpp	/^        BrushFaceSnapshot::BrushFaceSnapshot(BrushFace& face) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceSnapshot
BrushFaceSnapshot	Model/BrushFace.h	/^        class BrushFaceSnapshot {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushFaceSnapshotList	Model/Snapshot.h	/^            typedef std::vector<Model::BrushFaceSnapshot> BrushFaceSnapshotList;$/;"	t	language:C++	class:TrenchBroom::Model::Snapshot
BrushFacesIterator	Model/BrushFacesIterator.h	/^        struct BrushFacesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
BrushFacesMap	Controller/MoveBrushFacesCommand.h	/^            typedef std::map<Model::Brush*, Polygon3::List> BrushFacesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
BrushFacesMap	Controller/SplitBrushFacesCommand.h	/^            typedef std::map<Model::Brush*, Polygon3::List> BrushFacesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
BrushFilter	Renderer/ClipperRenderer.cpp	/^        struct BrushFilter : public Renderer::BrushRenderer::Filter {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
BrushGeometry	Model/BrushGeometry.cpp	/^        BrushGeometry::BrushGeometry(const BBox3& worldBounds) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
BrushGeometry	Model/BrushGeometry.cpp	/^        BrushGeometry::BrushGeometry(const BrushGeometry& original) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
BrushGeometry	Model/BrushGeometry.h	/^        class BrushGeometry {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushHit	Model/Brush.cpp	/^        const Hit::HitType Brush::BrushHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::Model::Brush	file:
BrushHit	Model/Brush.h	/^            static const Hit::HitType BrushHit;$/;"	m	language:C++	class:TrenchBroom::Model::Brush
BrushIssue	Model/Issue.cpp	/^        BrushIssue::BrushIssue(const IssueType type, Brush* brush) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
BrushIssue	Model/Issue.h	/^        class BrushIssue : public Issue {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushList	Model/ModelTypes.h	/^        typedef std::vector<Brush*> BrushList;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushRenderer	Renderer/BrushRenderer.h	/^            BrushRenderer(const FilterT& filter) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
BrushRenderer	Renderer/BrushRenderer.h	/^        class BrushRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
BrushSet	Model/ModelTypes.h	/^        typedef std::set<Brush*> BrushSet;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushSnapshot	Model/Brush.cpp	/^        BrushSnapshot::BrushSnapshot(Brush& brush) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushSnapshot
BrushSnapshot	Model/Brush.h	/^        class BrushSnapshot {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushSnapshotList	Model/Snapshot.h	/^            typedef std::vector<Model::BrushSnapshot> BrushSnapshotList;$/;"	t	language:C++	class:TrenchBroom::Model::Snapshot
BrushVertex	Model/BrushVertex.cpp	/^        BrushVertex::BrushVertex(const Vec3& i_position) :$/;"	f	language:C++	class:TrenchBroom::Model::BrushVertex
BrushVertex	Model/BrushVertex.h	/^        class BrushVertex : public Allocator<BrushVertex> {$/;"	c	language:C++	namespace:TrenchBroom::Model
BrushVertexHandleCommand	Controller/BrushVertexHandleCommand.cpp	/^        BrushVertexHandleCommand::BrushVertexHandleCommand(const CommandType type, const String& name, const bool undoable, const bool modifiesDocument) :$/;"	f	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
BrushVertexHandleCommand	Controller/BrushVertexHandleCommand.h	/^        class BrushVertexHandleCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
BrushVertexList	Model/BrushGeometryTypes.h	/^        typedef std::vector<BrushVertex*> BrushVertexList;$/;"	t	language:C++	namespace:TrenchBroom::Model
BrushVerticesMap	Controller/MoveBrushVerticesCommand.h	/^            typedef std::map<Model::Brush*, Vec3::List> BrushVerticesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
BrushVerticesMap	Controller/RebuildBrushGeometryCommand.h	/^            typedef std::map<Model::Brush*, Vec3::List> BrushVerticesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
BrushVerticesMap	Controller/SnapBrushVerticesCommand.h	/^            typedef std::map<Model::Brush*, Vec3::List> BrushVerticesMap;$/;"	t	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
Bsp29Model	Assets/Bsp29Model.cpp	/^        Bsp29Model::Bsp29Model(const String& name, TextureCollection* textureCollection) :$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
Bsp29Model	Assets/Bsp29Model.h	/^        class Bsp29Model : public EntityModel {$/;"	c	language:C++	namespace:TrenchBroom::Assets
Bsp29Parser	IO/Bsp29Parser.cpp	/^        Bsp29Parser::Bsp29Parser(const String& name, const char* begin, const char* end, const Assets::Palette& palette) :$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
Bsp29Parser	IO/Bsp29Parser.h	/^        class Bsp29Parser : public EntityModelParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
BspLayout	IO/Bsp29Parser.cpp	/^        namespace BspLayout {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
Buffer	ByteBuffer.h	/^    Buffer(const size_t size = 0) :$/;"	f	language:C++	class:Buffer
Buffer	ByteBuffer.h	/^class Buffer {$/;"	c	language:C++
BuildBrushEdges	Renderer/BrushRenderer.cpp	/^        BrushRenderer::BuildBrushEdges::BuildBrushEdges(BrushRenderer::Filter& i_filter) :$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer::BuildBrushEdges
BuildBrushEdges	Renderer/BrushRenderer.h	/^            struct BuildBrushEdges {$/;"	s	language:C++	class:TrenchBroom::Renderer::BrushRenderer
BuildBrushEdges	Renderer/MiniMapRenderer.h	/^            struct BuildBrushEdges {$/;"	s	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
BuildBrushFaceMesh	Renderer/BrushRenderer.h	/^            struct BuildBrushFaceMesh {$/;"	s	language:C++	class:TrenchBroom::Renderer::BrushRenderer
BuildColoredSolidBoundsVertices	Renderer/EntityRenderer.cpp	/^            BuildColoredSolidBoundsVertices(VertexSpecs::P3NC4::Vertex::List& i_vertices, const Color& i_color) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildColoredSolidBoundsVertices
BuildColoredSolidBoundsVertices	Renderer/EntityRenderer.cpp	/^        struct BuildColoredSolidBoundsVertices {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
BuildColoredWireframeBoundsVertices	Renderer/EntityRenderer.cpp	/^            BuildColoredWireframeBoundsVertices(VertexSpecs::P3C4::Vertex::List& i_vertices, const Color& i_color) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildColoredWireframeBoundsVertices
BuildColoredWireframeBoundsVertices	Renderer/EntityRenderer.cpp	/^        struct BuildColoredWireframeBoundsVertices {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
BuildWireframeBoundsVertices	Renderer/EntityRenderer.cpp	/^            BuildWireframeBoundsVertices(VertexSpecs::P3::Vertex::List& i_vertices) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildWireframeBoundsVertices
BuildWireframeBoundsVertices	Renderer/EntityRenderer.cpp	/^        struct BuildWireframeBoundsVertices {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
ByteColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ByteColor::ByteColor(const int r, const int g, const int b) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::ByteColor
ByteColor	View/SmartColorEditor.h	/^            class ByteColor : public Color_<int> {$/;"	c	language:C++	class:TrenchBroom::View::SmartColorEditor
C	TrenchBroom.h	/^    typedef Constants<FloatType> C;$/;"	t	language:C++	namespace:Math
C4	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_Color, GL_FLOAT, 4> C4;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
CBrace	IO/ConfigParser.h	/^            static const Type CBrace        = 1 <<  4; \/\/ closing brace: }$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
CBrace	IO/DefParser.h	/^            static const Type CBrace          = 1 <<  6; \/\/ closing brace: }$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
CBrace	IO/QuakeMapParser.h	/^            static const Type CBrace        = 1 <<  6; \/\/ closing brace: }$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
CBracket	IO/FgdParser.h	/^            static const Type CBracket          = 1 <<  7; \/\/ closing bracket: ]$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
CBracket	IO/QuakeMapParser.h	/^            static const Type CBracket      = 1 <<  8; \/\/ closing bracket: ]$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
CDefinition	IO/DefParser.h	/^            static const Type CDefinition     = 1 << 10; \/\/ entity definition close$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
CObserver	Notifier.h	/^            CObserver(R* receiver, F function) :$/;"	f	language:C++	class:TrenchBroom::Notifier0::CObserver
CObserver	Notifier.h	/^            CObserver(R* receiver, F function) :$/;"	f	language:C++	class:TrenchBroom::Notifier1::CObserver
CObserver	Notifier.h	/^            CObserver(R* receiver, F function) :$/;"	f	language:C++	class:TrenchBroom::Notifier2::CObserver
CObserver	Notifier.h	/^            CObserver(R* receiver, F function) :$/;"	f	language:C++	class:TrenchBroom::Notifier3::CObserver
CObserver	Notifier.h	/^        class CObserver : public Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier0
CObserver	Notifier.h	/^        class CObserver : public Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier1
CObserver	Notifier.h	/^        class CObserver : public Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier2
CObserver	Notifier.h	/^        class CObserver : public Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier3
CParenthesis	IO/DefParser.h	/^            static const Type CParenthesis    = 1 <<  4; \/\/ closing parenthesis: )$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
CParenthesis	IO/FgdParser.h	/^            static const Type CParenthesis      = 1 <<  5; \/\/ closing parenthesis: )$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
CParenthesis	IO/QuakeMapParser.h	/^            static const Type CParenthesis  = 1 <<  4; \/\/ closing parenthesis: )$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
Cache	Assets/EntityDefinitionManager.h	/^            typedef std::map<String, EntityDefinition*> Cache;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
CachingLogger	View/CachingLogger.cpp	/^        CachingLogger::CachingLogger() :$/;"	f	language:C++	class:TrenchBroom::View::CachingLogger
CachingLogger	View/CachingLogger.h	/^        class CachingLogger : public Logger {$/;"	c	language:C++	namespace:TrenchBroom::View
Camera	Renderer/Camera.cpp	/^        Camera::Camera() :$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
Camera	Renderer/Camera.cpp	/^        Camera::Camera(const float nearPlane, const float farPlane, const Viewport& viewport, const Vec3f& position, const Vec3f& direction, const Vec3f& up) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
Camera	Renderer/Camera.h	/^        class Camera {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
CameraAnimation	View/CameraAnimation.cpp	/^        CameraAnimation::CameraAnimation(Renderer::Camera& camera, const Vec3f& targetPosition, const Vec3f& targetDirection, const Vec3f& targetUp, const wxLongLong duration) :$/;"	f	language:C++	class:TrenchBroom::View::CameraAnimation
CameraAnimation	View/CameraAnimation.h	/^        class CameraAnimation : public Animation {$/;"	c	language:C++	namespace:TrenchBroom::View
CameraTool	View/CameraTool.cpp	/^        CameraTool::CameraTool(MapDocumentWPtr document, ControllerWPtr controller, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
CameraTool	View/CameraTool.h	/^        class CameraTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, MousePolicy, MouseDragPolicy, NoDropPolicy, NoRenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
CaseInsensitiveCharCompare	StringUtils.h	/^        CaseInsensitiveCharCompare(std::locale loc = std::locale::classic()) :$/;"	f	language:C++	struct:StringUtils::CaseInsensitiveCharCompare
CaseInsensitiveCharCompare	StringUtils.h	/^    struct CaseInsensitiveCharCompare {$/;"	s	language:C++	namespace:StringUtils
CaseInsensitiveStringLess	StringUtils.h	/^    typedef StringLess<CaseSensitiveCharCompare> CaseInsensitiveStringLess;$/;"	t	language:C++	namespace:StringUtils
CaseSensitiveCharCompare	StringUtils.h	/^    struct CaseSensitiveCharCompare {$/;"	s	language:C++	namespace:StringUtils
CaseSensitiveStringLess	StringUtils.h	/^    typedef StringLess<CaseSensitiveCharCompare> CaseSensitiveStringLess;$/;"	t	language:C++	namespace:StringUtils
CastIterator	CastIterator.h	/^        CastIterator(const Iterator& iterator) :$/;"	f	language:C++	class:TrenchBroom::CastIterator
CastIterator	CastIterator.h	/^    class CastIterator {$/;"	c	language:C++	namespace:TrenchBroom
Cd	MathUtils.h	/^    typedef Constants<double> Cd;$/;"	t	language:C++	namespace:Math
Cell	View/CellLayout.h	/^            typedef LayoutCell<CellType> Cell;$/;"	t	language:C++	class:TrenchBroom::View::LayoutRow
CellLayout	View/CellLayout.h	/^            CellLayout(const size_t maxCellsPerRow = 0) :$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
CellLayout	View/CellLayout.h	/^        class CellLayout {$/;"	c	language:C++	namespace:TrenchBroom::View
CellList	View/CellLayout.h	/^            typedef std::vector<Cell> CellList;$/;"	t	language:C++	class:TrenchBroom::View::LayoutRow
CellView	View/CellView.h	/^            CellView(wxWindow* parent, GLContextHolder::Ptr sharedContext, wxScrollBar* scrollBar = NULL) :$/;"	f	language:C++	class:TrenchBroom::View::CellView
CellView	View/CellView.h	/^        class CellView : public RenderView {$/;"	c	language:C++	namespace:TrenchBroom::View
Center	Model/PlanePointFinder.cpp	/^            static const size_t Center = 4;$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
Center	Renderer/TextRenderer.h	/^            static const Type Center    = 1 << 4;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Alignment
CenterHandleHit	View/TexturingViewRotateTool.cpp	/^        const Hit::HitType TexturingViewRotateTool::CenterHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool	file:
CenterHandleHit	View/TexturingViewRotateTool.h	/^            static const Hit::HitType CenterHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
Cf	MathUtils.h	/^    typedef Constants<float> Cf;$/;"	t	language:C++	namespace:Math
Char	Renderer/TextureFont.cpp	/^        TextureFont::Char::Char(const int i_x, const int i_y, const int i_w, const int i_h, const int i_a) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
Char	Renderer/TextureFont.h	/^            struct Char {$/;"	s	language:C++	class:TrenchBroom::Renderer::TextureFont
CharEqual	StringUtils.h	/^    struct CharEqual {$/;"	s	language:C++	namespace:StringUtils
CharLess	StringUtils.h	/^    struct CharLess {$/;"	s	language:C++	namespace:StringUtils
CharList	Renderer/TextureFont.h	/^            typedef std::vector<Char> CharList;$/;"	t	language:C++	class:TrenchBroom::Renderer::TextureFont
CheckBounds	Model/ModelUtils.cpp	/^        CheckBounds::CheckBounds(const BBox3& bounds) :$/;"	f	language:C++	class:TrenchBroom::Model::CheckBounds
CheckBounds	Model/ModelUtils.h	/^        struct CheckBounds {$/;"	s	language:C++	namespace:TrenchBroom::Model
CheckBoxHierarchyLeftMargin	View/ViewConstants.h	/^            static const int CheckBoxHierarchyLeftMargin        = 20;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
CheckBoxList	View/FlagsEditor.h	/^            typedef std::vector<wxCheckBox*> CheckBoxList;$/;"	t	language:C++	class:TrenchBroom::View::FlagsEditor
CheckBoxVerticalMargin	View/ViewConstants.h	/^            static const int CheckBoxVerticalMargin             = 5;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ChoiceLeftMargin	View/ViewConstants.h	/^            static const int ChoiceLeftMargin                   = 0;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ChoicePropertyDefinition	Assets/PropertyDefinition.cpp	/^        ChoicePropertyDefinition::ChoicePropertyDefinition(const String& name, const String& description, const ChoicePropertyOption::List options) :$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyDefinition
ChoicePropertyDefinition	Assets/PropertyDefinition.cpp	/^        ChoicePropertyDefinition::ChoicePropertyDefinition(const String& name, const String& description, const ChoicePropertyOption::List options, const size_t defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyDefinition
ChoicePropertyDefinition	Assets/PropertyDefinition.h	/^        class ChoicePropertyDefinition : public PropertyDefinitionWithDefaultValue<size_t> {$/;"	c	language:C++	namespace:TrenchBroom::Assets
ChoicePropertyOption	Assets/PropertyDefinition.cpp	/^        ChoicePropertyOption::ChoicePropertyOption(const String& value, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
ChoicePropertyOption	Assets/PropertyDefinition.h	/^        class ChoicePropertyOption {$/;"	c	language:C++	namespace:TrenchBroom::Assets
ChooseGameDialog	View/ChooseGameDialog.cpp	/^        ChooseGameDialog::ChooseGameDialog(wxWindow* parent, const wxString& title, const wxString& infoText) :$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
ChooseGameDialog	View/ChooseGameDialog.h	/^        class ChooseGameDialog : public wxDialog {$/;"	c	language:C++	namespace:TrenchBroom::View
ChooseGameDialogButtonBottomMargin	View/ViewConstants.h	/^            static const int ChooseGameDialogButtonBottomMargin = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ChooseGameDialogButtonSideMargin	View/ViewConstants.h	/^            static const int ChooseGameDialogButtonSideMargin   = 7;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ChooseGameDialogButtonTopMargin	View/ViewConstants.h	/^            static const int ChooseGameDialogButtonTopMargin    = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ChoosePathTypeDialog	View/ChoosePathTypeDialog.cpp	/^        ChoosePathTypeDialog::ChoosePathTypeDialog() :$/;"	f	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
ChoosePathTypeDialog	View/ChoosePathTypeDialog.cpp	/^        ChoosePathTypeDialog::ChoosePathTypeDialog(wxWindow* parent, const IO::Path& absPath, const IO::Path& docPath, const IO::Path& gamePath) :$/;"	f	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
ChoosePathTypeDialog	View/ChoosePathTypeDialog.h	/^        class ChoosePathTypeDialog : public wxDialog {$/;"	c	language:C++	namespace:TrenchBroom::View
Chunk	Allocator.h	/^        Chunk() :$/;"	f	language:C++	class:Allocator::Chunk
Chunk	Allocator.h	/^    class Chunk {$/;"	c	language:C++	class:Allocator
ChunkList	Allocator.h	/^    typedef std::vector<Chunk*> ChunkList;$/;"	t	language:C++	class:Allocator
Circle	Renderer/Circle.cpp	/^        Circle::Circle(const float radius, const size_t segments, const bool filled) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
Circle	Renderer/Circle.cpp	/^        Circle::Circle(const float radius, const size_t segments, const bool filled, const Math::Axis::Type axis, const Vec3f& startAxis, const Vec3f& endAxis) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
Circle	Renderer/Circle.cpp	/^        Circle::Circle(const float radius, const size_t segments, const bool filled, const Math::Axis::Type axis, const float startAngle, const float angleLength) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
Circle	Renderer/Circle.cpp	/^        Circle::Circle(const float radius, const size_t segments, const bool filled, const float startAngle, const float angleLength) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
Circle	Renderer/Circle.h	/^        class Circle {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Classname	Model/EntityProperties.cpp	/^            const PropertyKey Classname         = "classname";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
ClassnameRenderer	Renderer/EntityRenderer.h	/^            typedef TextRenderer<Key> ClassnameRenderer;$/;"	t	language:C++	class:TrenchBroom::Renderer::EntityRenderer
Clear	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::Clear() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
Clear	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::Clear() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
ClipHandlePoint	View/Clipper.h	/^            struct ClipHandlePoint {$/;"	s	language:C++	class:TrenchBroom::View::Clipper
ClipHandlePoints	View/Clipper.cpp	/^        Clipper::ClipHandlePoints::ClipHandlePoints() :$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
ClipHandlePoints	View/Clipper.h	/^            class ClipHandlePoints {$/;"	c	language:C++	class:TrenchBroom::View::Clipper
ClipPoints	View/Clipper.cpp	/^        Clipper::ClipPoints::ClipPoints(const ClipHandlePoints& handlePoints, const Vec3& viewDirection) :$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
ClipPoints	View/Clipper.h	/^            class ClipPoints {$/;"	c	language:C++	class:TrenchBroom::View::Clipper
ClipResult	View/Clipper.h	/^        struct ClipResult {$/;"	s	language:C++	namespace:TrenchBroom::View
ClipSide	View/Clipper.h	/^            enum ClipSide {$/;"	g	language:C++	class:TrenchBroom::View::Clipper
ClipTool	View/ClipTool.cpp	/^        ClipTool::ClipTool(MapDocumentWPtr document, ControllerWPtr controller, const Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
ClipTool	View/ClipTool.h	/^        class ClipTool : public ToolImpl<ActivationPolicy, PickingPolicy, MousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
Clipper	View/Clipper.cpp	/^        Clipper::Clipper(const Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::Clipper
Clipper	View/Clipper.h	/^        class Clipper {$/;"	c	language:C++	namespace:TrenchBroom::View
ClipperRenderer	Renderer/ClipperRenderer.cpp	/^        ClipperRenderer::ClipperRenderer(const View::Clipper& clipper) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
ClipperRenderer	Renderer/ClipperRenderer.h	/^        class ClipperRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Clone	View/ColorTableSelectedCommand.cpp	/^        wxEvent* ColorTableSelectedCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::ColorTableSelectedCommand
Clone	View/EntityPropertySelectedCommand.cpp	/^        wxEvent* EntityPropertySelectedCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertySelectedCommand
Clone	View/ExecutableEvent.cpp	/^        wxEvent* ExecutableEvent::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent
Clone	View/FlagChangedCommand.cpp	/^        wxEvent* FlagChangedCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
Clone	View/GameSelectionCommand.cpp	/^        wxEvent* GameSelectionCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::GameSelectionCommand
Clone	View/KeyboardPreferencePane.cpp	/^        wxGridCellEditor* KeyboardGridCellEditor::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
Clone	View/KeyboardShortcutEvent.cpp	/^        wxEvent* KeyboardShortcutEvent::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
Clone	View/RecentDocumentSelectedCommand.cpp	/^        wxEvent* RecentDocumentSelectedCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentSelectedCommand
Clone	View/SpinControl.cpp	/^wxEvent* SpinControlEvent::Clone() const {$/;"	f	language:C++	class:SpinControlEvent
Clone	View/TextureSelectedCommand.cpp	/^        wxEvent* TextureSelectedCommand::Clone() const {$/;"	f	language:C++	class:TrenchBroom::View::TextureSelectedCommand
Cmp	MathUtils.h	/^        Cmp() {}$/;"	f	language:C++	struct:Math::Cmp
Cmp	MathUtils.h	/^    struct Cmp {$/;"	s	language:C++	namespace:Math
Code	Model/BrushGeometry.h	/^            } Code;$/;"	t	language:C++	struct:TrenchBroom::Model::AddFaceResult	typeref:enum:TrenchBroom::Model::AddFaceResult::__anon19
Code_BrushNull	Model/BrushGeometry.h	/^                Code_BrushNull,$/;"	e	language:C++	enum:TrenchBroom::Model::AddFaceResult::__anon19
Code_BrushSplit	Model/BrushGeometry.h	/^                Code_BrushSplit,$/;"	e	language:C++	enum:TrenchBroom::Model::AddFaceResult::__anon19
Code_FaceRedundant	Model/BrushGeometry.h	/^                Code_FaceRedundant$/;"	e	language:C++	enum:TrenchBroom::Model::AddFaceResult::__anon19
ColinearEpsilon	MathUtils.h	/^        static const T ColinearEpsilon;$/;"	m	language:C++	class:Math::Constants
ColinearEpsilon	MathUtils.h	/^    const T Constants<T>::ColinearEpsilon      = static_cast<T>(0.01);$/;"	m	language:C++	class:Math::Constants
Collect	Model/Selection.cpp	/^        struct Collect {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
CollectBoundsVertices	View/EntityBrowserView.cpp	/^            CollectBoundsVertices(const Mat4x4f& i_transformation, const Color& i_color, typename Vertex::List& i_vertices) :$/;"	f	language:C++	struct:TrenchBroom::View::CollectBoundsVertices
CollectBoundsVertices	View/EntityBrowserView.cpp	/^        struct CollectBoundsVertices {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
CollectDragFaces	View/ResizeBrushesTool.cpp	/^            CollectDragFaces(const Model::BrushFace& dragFace, Model::BrushFaceList& faces) :$/;"	f	language:C++	struct:TrenchBroom::View::CollectDragFaces
CollectDragFaces	View/ResizeBrushesTool.cpp	/^        struct CollectDragFaces {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
CollectFaces	Model/Selection.cpp	/^        struct CollectFaces {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
CollectVertices	View/ResizeBrushesTool.cpp	/^            CollectVertices(Vertex::List& vertices) :$/;"	f	language:C++	struct:TrenchBroom::View::CollectVertices
CollectVertices	View/ResizeBrushesTool.cpp	/^        struct CollectVertices {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
Colon	IO/FgdParser.h	/^            static const Type Colon             = 1 <<  9; \/\/ colon: :$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Color	Color.cpp	/^Color::Color() :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const Color& color, const float a) :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const float r, const float g, const float b, const float a) :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const int r, const int g, const int b, const float a) :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const int r, const int g, const int b, const int a) :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const std::string& str) :$/;"	f	language:C++	class:Color
Color	Color.cpp	/^Color::Color(const unsigned char r, const unsigned char g, const unsigned char b, const unsigned char a) :$/;"	f	language:C++	class:Color
Color	Color.h	/^class Color : public Vec<float, 4> {$/;"	c	language:C++
Color	View/SmartColorEditor.h	/^            class Color : public TrenchBroom::enable_shared_from_this<Color> {$/;"	c	language:C++	class:TrenchBroom::View::SmartColorEditor
ColorCmp	View/SmartColorEditor.cpp	/^        struct ColorCmp {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
ColorHistoryCellSize	View/SmartColorEditor.h	/^            static const size_t ColorHistoryCellSize = 15;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
ColorList	View/ColorTable.h	/^            typedef std::vector<wxColour> ColorList;$/;"	t	language:C++	class:TrenchBroom::View::ColorTable
ColorPtr	View/SmartColorEditor.h	/^            typedef TrenchBroom::shared_ptr<const Color> ColorPtr;$/;"	t	language:C++	class:TrenchBroom::View::SmartColorEditor
ColorRange	View/SmartColorEditor.h	/^            } ColorRange;$/;"	t	language:C++	class:TrenchBroom::View::SmartColorEditor	typeref:enum:TrenchBroom::View::SmartColorEditor::__anon36
ColorRange_Byte	View/SmartColorEditor.h	/^                ColorRange_Byte,$/;"	e	language:C++	enum:TrenchBroom::View::SmartColorEditor::__anon36
ColorRange_Float	View/SmartColorEditor.h	/^                ColorRange_Float,$/;"	e	language:C++	enum:TrenchBroom::View::SmartColorEditor::__anon36
ColorRange_Mixed	View/SmartColorEditor.h	/^                ColorRange_Mixed$/;"	e	language:C++	enum:TrenchBroom::View::SmartColorEditor::__anon36
ColorTable	View/ColorTable.cpp	/^        ColorTable::ColorTable(wxWindow* parent, wxWindowID winId, int cellSize, const wxPoint& pos, const wxSize& size, long style) :$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
ColorTable	View/ColorTable.h	/^        class ColorTable : public wxScrolledWindow {$/;"	c	language:C++	namespace:TrenchBroom::View
ColorTableSelectedCommand	View/ColorTableSelectedCommand.cpp	/^        ColorTableSelectedCommand::ColorTableSelectedCommand() :$/;"	f	language:C++	class:TrenchBroom::View::ColorTableSelectedCommand
ColorTableSelectedCommand	View/ColorTableSelectedCommand.h	/^        class ColorTableSelectedCommand : public wxNotifyEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
Color_	View/SmartColorEditor.h	/^            class Color_ : public Color {$/;"	c	language:C++	class:TrenchBroom::View::SmartColorEditor
ColoredHandleShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig ColoredHandleShader        = ShaderConfig("Colored Handle",                   "ColoredHandle.vertsh",        "Handle.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
ColoredTextShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig ColoredTextShader          = ShaderConfig("Colored Text",                     "ColoredText.vertsh",          "Text.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
Colors	View/ViewConstants.cpp	/^        namespace Colors {$/;"	n	language:C++	namespace:TrenchBroom::View	file:
Colors	View/ViewConstants.h	/^        namespace Colors {$/;"	n	language:C++	namespace:TrenchBroom::View
Cols	Mat.h	/^    static const size_t Cols = C;$/;"	m	language:C++	class:Mat
Comma	IO/ConfigParser.h	/^            static const Type Comma         = 1 <<  5; \/\/ comma: ,$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
Comma	IO/DefParser.h	/^            static const Type Comma           = 1 << 13; \/\/ comma: ,$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Comma	IO/FgdParser.h	/^            static const Type Comma             = 1 << 10; \/\/ comma: ,$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Command	Controller/Command.cpp	/^        Command::Command(const CommandType type, const String& name, const bool undoable, const bool modifiesDocument) :$/;"	f	language:C++	class:TrenchBroom::Controller::Command
Command	Controller/Command.h	/^        class Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
CommandGroup	Controller/CommandProcessor.cpp	/^        CommandGroup::CommandGroup(const String& name, const bool undoable, const Command::List& commands,$/;"	f	language:C++	class:TrenchBroom::Controller::CommandGroup
CommandGroup	Controller/CommandProcessor.h	/^        class CommandGroup : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
CommandIds	View/CommandIds.h	/^        namespace CommandIds {$/;"	n	language:C++	namespace:TrenchBroom::View
CommandProcessor	Controller/CommandProcessor.cpp	/^        CommandProcessor::CommandProcessor() :$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
CommandProcessor	Controller/CommandProcessor.h	/^        class CommandProcessor {$/;"	c	language:C++	namespace:TrenchBroom::Controller
CommandProcessorException	Exceptions.h	/^        CommandProcessorException() throw() {}$/;"	f	language:C++	class:TrenchBroom::CommandProcessorException
CommandProcessorException	Exceptions.h	/^        CommandProcessorException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::CommandProcessorException
CommandProcessorException	Exceptions.h	/^    class CommandProcessorException : public ExceptionStream<CommandProcessorException> {$/;"	c	language:C++	namespace:TrenchBroom
CommandStack	Controller/CommandProcessor.h	/^            typedef Command::List CommandStack;$/;"	t	language:C++	class:TrenchBroom::Controller::CommandProcessor
CommandState	Controller/Command.h	/^            } CommandState;$/;"	t	language:C++	class:TrenchBroom::Controller::Command	typeref:enum:TrenchBroom::Controller::Command::__anon8
CommandState_Default	Controller/Command.h	/^                CommandState_Default,$/;"	e	language:C++	enum:TrenchBroom::Controller::Command::__anon8
CommandState_Doing	Controller/Command.h	/^                CommandState_Doing,$/;"	e	language:C++	enum:TrenchBroom::Controller::Command::__anon8
CommandState_Done	Controller/Command.h	/^                CommandState_Done,$/;"	e	language:C++	enum:TrenchBroom::Controller::Command::__anon8
CommandState_Undoing	Controller/Command.h	/^                CommandState_Undoing$/;"	e	language:C++	enum:TrenchBroom::Controller::Command::__anon8
CommandType	Controller/Command.h	/^            typedef size_t CommandType;$/;"	t	language:C++	class:TrenchBroom::Controller::Command
Comment	IO/ConfigParser.h	/^            static const Type Comment       = 1 <<  7; \/\/ line comment starting with \/\/$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
Comment	IO/QuakeMapParser.h	/^            static const Type Comment       = 1 <<  9; \/\/ line comment starting with \/\/\/$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
CompareByName	Assets/EntityDefinitionManager.cpp	/^            CompareByName(const bool shortName) :$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByName
CompareByName	Assets/EntityDefinitionManager.cpp	/^        class CompareByName {$/;"	c	language:C++	namespace:TrenchBroom::Assets	file:
CompareByName	Assets/TextureManager.cpp	/^            CompareByName() {}$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByName
CompareByName	Assets/TextureManager.cpp	/^        class CompareByName {$/;"	c	language:C++	namespace:TrenchBroom::Assets	file:
CompareByUsage	Assets/EntityDefinitionManager.cpp	/^        class CompareByUsage {$/;"	c	language:C++	namespace:TrenchBroom::Assets	file:
CompareByUsage	Assets/TextureManager.cpp	/^        class CompareByUsage {$/;"	c	language:C++	namespace:TrenchBroom::Assets	file:
CompareObservers	Notifier.h	/^            CompareObservers(const Observer& lhs) : m_lhs(lhs) {}$/;"	f	language:C++	struct:TrenchBroom::Notifier0::CompareObservers
CompareObservers	Notifier.h	/^            CompareObservers(const Observer& lhs) : m_lhs(lhs) {}$/;"	f	language:C++	struct:TrenchBroom::Notifier1::CompareObservers
CompareObservers	Notifier.h	/^            CompareObservers(const Observer& lhs) : m_lhs(lhs) {}$/;"	f	language:C++	struct:TrenchBroom::Notifier2::CompareObservers
CompareObservers	Notifier.h	/^            CompareObservers(const Observer& lhs) : m_lhs(lhs) {}$/;"	f	language:C++	struct:TrenchBroom::Notifier3::CompareObservers
CompareObservers	Notifier.h	/^        struct CompareObservers {$/;"	s	language:C++	class:TrenchBroom::Notifier0
CompareObservers	Notifier.h	/^        struct CompareObservers {$/;"	s	language:C++	class:TrenchBroom::Notifier1
CompareObservers	Notifier.h	/^        struct CompareObservers {$/;"	s	language:C++	class:TrenchBroom::Notifier2
CompareObservers	Notifier.h	/^        struct CompareObservers {$/;"	s	language:C++	class:TrenchBroom::Notifier3
CompareVboBlocksByCapacity	Renderer/Vbo.h	/^        class CompareVboBlocksByCapacity {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Compass	Renderer/Compass.cpp	/^        Compass::Compass() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
Compass	Renderer/Compass.h	/^        class Compass {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
CompassBackgroundShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig CompassBackgroundShader    = ShaderConfig("Compass Background",               "VaryingPUniformC.vertsh",     "VaryingPC.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
CompassOutlineShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig CompassOutlineShader       = ShaderConfig("Compass Outline",                  "CompassOutline.vertsh",       "Compass.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
CompassShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig CompassShader              = ShaderConfig("Compass",                          "Compass.vertsh",              "Compass.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
ConfigEntry	ConfigTypes.cpp	/^    ConfigEntry::ConfigEntry(const Type type) :$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
ConfigEntry	ConfigTypes.h	/^    class ConfigEntry {$/;"	c	language:C++	namespace:TrenchBroom
ConfigList	ConfigTypes.cpp	/^    ConfigList::ConfigList() :$/;"	f	language:C++	class:TrenchBroom::ConfigList
ConfigList	ConfigTypes.h	/^    class ConfigList : public ConfigEntry {$/;"	c	language:C++	namespace:TrenchBroom
ConfigMap	Model/GameFactory.h	/^            typedef std::map<String, GameConfig> ConfigMap;$/;"	t	language:C++	class:TrenchBroom::Model::GameFactory
ConfigParser	IO/ConfigParser.cpp	/^        ConfigParser::ConfigParser(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
ConfigParser	IO/ConfigParser.cpp	/^        ConfigParser::ConfigParser(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
ConfigParser	IO/ConfigParser.h	/^        class ConfigParser :  public Parser<ConfigToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
ConfigTable	ConfigTypes.cpp	/^    ConfigTable::ConfigTable() :$/;"	f	language:C++	class:TrenchBroom::ConfigTable
ConfigTable	ConfigTypes.h	/^    class ConfigTable : public ConfigEntry {$/;"	c	language:C++	namespace:TrenchBroom
ConfigToken	IO/ConfigParser.h	/^        namespace ConfigToken {$/;"	n	language:C++	namespace:TrenchBroom::IO
ConfigTokenizer	IO/ConfigParser.cpp	/^        ConfigTokenizer::ConfigTokenizer(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::ConfigTokenizer
ConfigTokenizer	IO/ConfigParser.cpp	/^        ConfigTokenizer::ConfigTokenizer(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::ConfigTokenizer
ConfigTokenizer	IO/ConfigParser.h	/^        class ConfigTokenizer : public Tokenizer<ConfigToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
ConfigValue	ConfigTypes.cpp	/^    ConfigValue::ConfigValue(const String& value) :$/;"	f	language:C++	class:TrenchBroom::ConfigValue
ConfigValue	ConfigTypes.h	/^    class ConfigValue : public ConfigEntry {$/;"	c	language:C++	namespace:TrenchBroom
ConfigurableEntity	Model/Entity.h	/^            ConfigurableEntity() :$/;"	f	language:C++	class:TrenchBroom::Model::ConfigurableEntity
ConfigurableEntity	Model/Entity.h	/^        class ConfigurableEntity : public Entity, public Allocator<ConfigurableEntity<RotationPolicy> > {$/;"	c	language:C++	namespace:TrenchBroom::Model
Console	View/Console.cpp	/^        Console::Console(wxWindow* parent, wxSimplebook* extraBook) :$/;"	f	language:C++	class:TrenchBroom::View::Console
Console	View/Console.h	/^        class Console : public wxTextCtrl, public Logger {$/;"	c	language:C++	namespace:TrenchBroom::View
Constants	MathUtils.h	/^    class Constants {$/;"	c	language:C++	namespace:Math
ContainerBar	View/ContainerBar.cpp	/^        ContainerBar::ContainerBar(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::ContainerBar
ContainerBar	View/ContainerBar.h	/^        class ContainerBar : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
Context	View/KeyboardShortcut.h	/^            } Context;$/;"	t	language:C++	class:TrenchBroom::View::KeyboardShortcut	typeref:enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_Any	View/KeyboardShortcut.h	/^                Context_Any             = Context_VertexTool | Context_ClipTool | Context_RotateTool | Context_ObjectSelection | Context_FaceSelection$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_ClipTool	View/KeyboardShortcut.h	/^                Context_ClipTool        = 1 << 2,$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_FaceSelection	View/KeyboardShortcut.h	/^                Context_FaceSelection   = 1 << 5,$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_ObjectSelection	View/KeyboardShortcut.h	/^                Context_ObjectSelection = 1 << 4,$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_RotateTool	View/KeyboardShortcut.h	/^                Context_RotateTool      = 1 << 3,$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
Context_VertexTool	View/KeyboardShortcut.h	/^                Context_VertexTool      = 1 << 1,$/;"	e	language:C++	enum:TrenchBroom::View::KeyboardShortcut::__anon30
ControlHorizontalMargin	View/ViewConstants.h	/^            static const int ControlHorizontalMargin            = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ControlMargin	View/ViewConstants.h	/^            static const int ControlMargin                      = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
ControlVerticalMargin	View/ViewConstants.h	/^            static const int ControlVerticalMargin              = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
Controller	Controller/AddRemoveObjectsCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/AddRemoveObjectsCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/BrushVertexHandleCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/BrushVertexHandleCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/Command.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/Command.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/CommandProcessor.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/CommandProcessor.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/EntityPropertyCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/EntityPropertyCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/FaceAttributeCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/FaceAttributeCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/FixPlanePointsCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/FixPlanePointsCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/MoveBrushEdgesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/MoveBrushEdgesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/MoveBrushFacesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/MoveBrushFacesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/MoveBrushVerticesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/MoveBrushVerticesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/MoveTexturesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/MoveTexturesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/NewDocumentCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/NewDocumentCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/OpenDocumentCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/OpenDocumentCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/RebuildBrushGeometryCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/RebuildBrushGeometryCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/ReparentBrushesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/ReparentBrushesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/ResizeBrushesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/ResizeBrushesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/RotateTexturesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/RotateTexturesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SelectionCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SelectionCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SetEntityDefinitionFileCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SetEntityDefinitionFileCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SetModsCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SetModsCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SnapBrushVerticesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SnapBrushVerticesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SplitBrushEdgesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SplitBrushEdgesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/SplitBrushFacesCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/SplitBrushFacesCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/TextureCollectionCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/TextureCollectionCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	Controller/TransformObjectsCommand.cpp	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom	file:
Controller	Controller/TransformObjectsCommand.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
Controller	View/ControllerFacade.h	/^    namespace Controller {$/;"	n	language:C++	namespace:TrenchBroom
ControllerFacade	View/ControllerFacade.cpp	/^        ControllerFacade::ControllerFacade(MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
ControllerFacade	View/ControllerFacade.h	/^        class ControllerFacade {$/;"	c	language:C++	namespace:TrenchBroom::View
ControllerSPtr	View/ViewTypes.h	/^        typedef TrenchBroom::shared_ptr<ControllerFacade> ControllerSPtr;$/;"	t	language:C++	namespace:TrenchBroom::View
ControllerWPtr	View/ViewTypes.h	/^        typedef TrenchBroom::weak_ptr<ControllerFacade> ControllerWPtr;$/;"	t	language:C++	namespace:TrenchBroom::View
ConvertColorRange	View/SmartColorEditor.cpp	/^            ConvertColorRange(View::ControllerSPtr controller, const Model::PropertyKey& key, const SmartColorEditor::ColorRange toRange) :$/;"	f	language:C++	struct:TrenchBroom::View::ConvertColorRange
ConvertColorRange	View/SmartColorEditor.cpp	/^        struct ConvertColorRange {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
Converter	Preference.h	/^    class Converter {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<Color> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<IO::Path> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<String> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<StringMap > {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<View::KeyboardShortcut> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<bool> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<double> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<float> {$/;"	c	language:C++	namespace:TrenchBroom
Converter	Preference.h	/^    class Converter<int> {$/;"	c	language:C++	namespace:TrenchBroom
CoordinatePlane	CoordinatePlane.h	/^    CoordinatePlane(const Vec<T,S> axis) :$/;"	f	language:C++	class:CoordinatePlane
CoordinatePlane	CoordinatePlane.h	/^    CoordinatePlane(const size_t axis) :$/;"	f	language:C++	class:CoordinatePlane
CoordinatePlane	CoordinatePlane.h	/^class CoordinatePlane {$/;"	c	language:C++
CoordinatePlane3	TrenchBroom.h	/^typedef CoordinatePlane<FloatType, 3> CoordinatePlane3;$/;"	t	language:C++
CopyHolder	Renderer/VertexArray.h	/^            CopyHolder(const VertexList& vertices) :$/;"	f	language:C++	class:TrenchBroom::Renderer::CopyHolder
CopyHolder	Renderer/VertexArray.h	/^        class CopyHolder : public Holder<VertexSpec> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
CopyMap	Model/MoveBrushVertexAlgorithm.h	/^                typedef std::map<BrushFace*, BrushFaceSet> CopyMap;$/;"	t	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
Corner	BBox.h	/^    } Corner;$/;"	t	language:C++	class:BBox	typeref:enum:BBox::__anon4
Corner_Max	BBox.h	/^        Corner_Max$/;"	e	language:C++	enum:BBox::__anon4
Corner_Min	BBox.h	/^        Corner_Min,$/;"	e	language:C++	enum:BBox::__anon4
CorrectEpsilon	MathUtils.h	/^        static const T CorrectEpsilon;$/;"	m	language:C++	class:Math::Constants
CorrectEpsilon	MathUtils.h	/^    const T Constants<T>::CorrectEpsilon       = static_cast<T>(0.001); \/\/ this is what QBSP uses$/;"	m	language:C++	class:Math::Constants
CountArray	Renderer/IndexedVertexList.h	/^            typedef std::vector<GLsizei> CountArray;$/;"	t	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
CountArray	Renderer/VertexArray.h	/^            typedef std::vector<GLsizei> CountArray;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexArray
Create	View/ChoosePathTypeDialog.cpp	/^        bool ChoosePathTypeDialog::Create() {$/;"	f	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
Create	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::Create(wxWindow* parent, wxWindowID windowId, wxEvtHandler* evtHandler) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
Create	View/MapFrame.cpp	/^        void MapFrame::Create(FrameManager* frameManager, MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
Create	View/PreferenceDialog.cpp	/^        bool PreferenceDialog::Create() {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
CreateBrushTool	View/CreateBrushTool.cpp	/^        CreateBrushTool::CreateBrushTool(MapDocumentWPtr document, ControllerWPtr controller, const Renderer::Camera& camera, Renderer::TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
CreateBrushTool	View/CreateBrushTool.h	/^        class CreateBrushTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, NoMousePolicy, PlaneDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
CreateEntityPopupMenu	View/CommandIds.h	/^            namespace CreateEntityPopupMenu {$/;"	n	language:C++	namespace:TrenchBroom::View::CommandIds
CreateEntityTool	View/CreateEntityTool.cpp	/^        CreateEntityTool::CreateEntityTool(MapDocumentWPtr document, ControllerWPtr controller, const Renderer::Camera& camera, Renderer::FontManager& fontManager) :$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
CreateEntityTool	View/CreateEntityTool.h	/^        class CreateEntityTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, NoMousePolicy, NoMouseDragPolicy, DropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
Curve	View/Animation.h	/^            } Curve;$/;"	t	language:C++	class:TrenchBroom::View::Animation	typeref:enum:TrenchBroom::View::Animation::__anon29
Curve_EaseInEaseOut	View/Animation.h	/^                Curve_EaseInEaseOut$/;"	e	language:C++	enum:TrenchBroom::View::Animation::__anon29
Curve_Flat	View/Animation.h	/^                Curve_Flat,$/;"	e	language:C++	enum:TrenchBroom::View::Animation::__anon29
DataType	Renderer/AttributeSpec.h	/^            typedef typename DataTypeTraits<D>::Type DataType;$/;"	t	language:C++	class:TrenchBroom::Renderer::AttributeSpec
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_BYTE> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_DOUBLE> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_FLOAT> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_INT> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_SHORT> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_UNSIGNED_BYTE> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_UNSIGNED_INT> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
DataTypeTraits	Renderer/AttributeSpec.h	/^        struct DataTypeTraits<GL_UNSIGNED_SHORT> {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
Decimal	IO/DefParser.h	/^            static const Type Decimal         = 1 <<  1; \/\/ decimal number$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Decimal	IO/FgdParser.h	/^            static const Type Decimal           = 1 <<  1; \/\/ decimal number$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Decimal	IO/QuakeMapParser.h	/^            static const Type Decimal       = 1 <<  1; \/\/ decimal number$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
DefParser	IO/DefParser.cpp	/^        DefParser::DefParser(const String& str, const Color& defaultEntityColor) :$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
DefParser	IO/DefParser.cpp	/^        DefParser::DefParser(const char* begin, const char* end, const Color& defaultEntityColor) :$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
DefParser	IO/DefParser.h	/^        class DefParser : public EntityDefinitionParser, public Parser<DefToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
DefToken	IO/DefParser.h	/^        namespace DefToken {$/;"	n	language:C++	namespace:TrenchBroom::IO
DefTokenizer	IO/DefParser.cpp	/^        DefTokenizer::DefTokenizer(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::DefTokenizer
DefTokenizer	IO/DefParser.cpp	/^        DefTokenizer::DefTokenizer(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::DefTokenizer
DefTokenizer	IO/DefParser.h	/^        class DefTokenizer : public Tokenizer<DefToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
Default	Model/TexCoordSystemHelper.h	/^            static const Mode Default    = 0;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
DefaultBounds	Model/Entity.h	/^            static const BBox3 DefaultBounds;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
DefaultHitFilter	Model/HitAdapter.cpp	/^        DefaultHitFilter::DefaultHitFilter(const ModelFilter& filter) :$/;"	f	language:C++	class:TrenchBroom::Model::DefaultHitFilter
DefaultHitFilter	Model/HitAdapter.h	/^        class DefaultHitFilter : public HitFilter {$/;"	c	language:C++	namespace:TrenchBroom::Model
DefaultKeyComparator	Renderer/TextRenderer.h	/^        class DefaultKeyComparator {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
DefaultPointDistance	Renderer/Camera.cpp	/^        const float Camera::DefaultPointDistance = 256.0f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera	file:
DefaultPointDistance	Renderer/Camera.h	/^            static const float DefaultPointDistance;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
DefaultPropertyValue	Model/Entity.cpp	/^        const String Entity::DefaultPropertyValue = "";$/;"	m	language:C++	class:TrenchBroom::Model::Entity	file:
DefaultPropertyValue	Model/Entity.h	/^            static const String DefaultPropertyValue;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
DefaultRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow::DefaultRow() {}$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
DefaultRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow::DefaultRow(const String& key, const String& value, const String& tooltip) :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
DefaultRow	View/EntityPropertyGridTable.h	/^            class DefaultRow {$/;"	c	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
DefaultVerticalMargin	View/ViewConstants.h	/^            static const int DefaultVerticalMargin              = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
DefaultWorldBounds	View/MapDocument.h	/^            static const BBox3 DefaultWorldBounds;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
DeleteEntityPropertyQuickFix	Model/SharedQuickFixes.cpp	/^        DeleteEntityPropertyQuickFix::DeleteEntityPropertyQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::DeleteEntityPropertyQuickFix
DeleteEntityPropertyQuickFix	Model/SharedQuickFixes.h	/^        class DeleteEntityPropertyQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
DeleteObjectQuickFix	Model/SharedQuickFixes.cpp	/^        DeleteObjectQuickFix::DeleteObjectQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix
DeleteObjectQuickFix	Model/SharedQuickFixes.h	/^        class DeleteObjectQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
DeleteRows	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::DeleteRows(const size_t pos, const size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
DeleteRows	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::DeleteRows(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
Deleter	CollectionUtils.h	/^    struct Deleter {$/;"	s	language:C++	namespace:MapUtils
Deleter	CollectionUtils.h	/^    struct Deleter {$/;"	s	language:C++	namespace:Utils
DialogButtonMargin	View/ViewConstants.h	/^            static const int DialogButtonMargin                 = 7;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
DialogOuterMargin	View/ViewConstants.h	/^            static const int DialogOuterMargin                  = 10;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
DirEdgesAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirEdgesAddress       = 0x64;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirEntryNameOffset	IO/Wad.cpp	/^            static const size_t DirEntryNameOffset    = 3;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
DirEntryNameSize	IO/Wad.cpp	/^            static const size_t DirEntryNameSize      = 16;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
DirEntryTypeOffset	IO/Wad.cpp	/^            static const size_t DirEntryTypeOffset    = 4;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
DirFaceEdgesAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirFaceEdgesAddress   = 0x6C;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirFacesAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirFacesAddress       = 0x3C;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirMap	IO/PakFileSystem.h	/^                typedef std::map<String, Directory> DirMap;$/;"	t	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
DirModelAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirModelAddress       = 0x74;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirOffsetAddress	IO/Wad.cpp	/^            static const size_t DirOffsetAddress      = 8;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
DirTexInfosAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirTexInfosAddress    = 0x34;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirTexturesAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirTexturesAddress    = 0x14;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
DirVerticesAddress	IO/Bsp29Parser.cpp	/^            static const size_t DirVerticesAddress    = 0x1C;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
Direction	MathUtils.h	/^    } Direction;$/;"	t	language:C++	namespace:Math	typeref:enum:Math::__anon17
Direction	Renderer/MoveIndicatorRenderer.h	/^            } Direction;$/;"	t	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer	typeref:enum:TrenchBroom::Renderer::MoveIndicatorRenderer::__anon27
Direction_Backward	MathUtils.h	/^        Direction_Backward,$/;"	e	language:C++	enum:Math::__anon17
Direction_Down	MathUtils.h	/^        Direction_Down$/;"	e	language:C++	enum:Math::__anon17
Direction_Forward	MathUtils.h	/^        Direction_Forward,$/;"	e	language:C++	enum:Math::__anon17
Direction_Left	MathUtils.h	/^        Direction_Left,$/;"	e	language:C++	enum:Math::__anon17
Direction_Right	MathUtils.h	/^        Direction_Right,$/;"	e	language:C++	enum:Math::__anon17
Direction_Up	MathUtils.h	/^        Direction_Up,$/;"	e	language:C++	enum:Math::__anon17
Direction_X	Renderer/MoveIndicatorRenderer.h	/^                Direction_X,$/;"	e	language:C++	enum:TrenchBroom::Renderer::MoveIndicatorRenderer::__anon27
Direction_XY	Renderer/MoveIndicatorRenderer.h	/^                Direction_XY,$/;"	e	language:C++	enum:TrenchBroom::Renderer::MoveIndicatorRenderer::__anon27
Direction_Y	Renderer/MoveIndicatorRenderer.h	/^                Direction_Y,$/;"	e	language:C++	enum:TrenchBroom::Renderer::MoveIndicatorRenderer::__anon27
Direction_Z	Renderer/MoveIndicatorRenderer.h	/^                Direction_Z$/;"	e	language:C++	enum:TrenchBroom::Renderer::MoveIndicatorRenderer::__anon27
Directory	IO/PakFileSystem.cpp	/^        PakFileSystem::Directory::Directory(const Path& path) :$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
Directory	IO/PakFileSystem.h	/^            class Directory {$/;"	c	language:C++	class:TrenchBroom::IO::PakFileSystem
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f	language:Python
Disk	IO/DiskFileSystem.cpp	/^        namespace Disk {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
Disk	IO/DiskFileSystem.h	/^        namespace Disk {$/;"	n	language:C++	namespace:TrenchBroom::IO
DiskFileSystem	IO/DiskFileSystem.cpp	/^        DiskFileSystem::DiskFileSystem(const Path& root, const bool ensureExists) :$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
DiskFileSystem	IO/DiskFileSystem.h	/^        class DiskFileSystem : public FileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
DoGetBestSize	View/SpinControl.cpp	/^wxSize SpinControl::DoGetBestSize() const {$/;"	f	language:C++	class:SpinControl
DoSendEvent	View/SpinControl.cpp	/^void SpinControl::DoSendEvent(const bool spin, const double value) {$/;"	f	language:C++	class:SpinControl
DoSetValue	View/SpinControl.cpp	/^bool SpinControl::DoSetValue(double value) {$/;"	f	language:C++	class:SpinControl
DotOrder	Vec.h	/^        DotOrder(const Vec<T,S>& dir) :$/;"	f	language:C++	class:Vec::DotOrder
DotOrder	Vec.h	/^    class DotOrder {$/;"	c	language:C++	class:Vec
DragImage	View/DragImage.h	/^typedef MacDragImage DragImage;$/;"	t	language:C++
DragImage	View/DragImage.h	/^typedef wxDragImage DragImage;$/;"	t	language:C++
DragMode	View/TexturingViewRotateTool.h	/^            } DragMode;$/;"	t	language:C++	class:TrenchBroom::View::TexturingViewRotateTool	typeref:enum:TrenchBroom::View::TexturingViewRotateTool::__anon37
DragMode_Angle	View/TexturingViewRotateTool.h	/^                DragMode_Angle$/;"	e	language:C++	enum:TrenchBroom::View::TexturingViewRotateTool::__anon37
DragMode_Center	View/TexturingViewRotateTool.h	/^                DragMode_Center,$/;"	e	language:C++	enum:TrenchBroom::View::TexturingViewRotateTool::__anon37
DragMode_None	View/TexturingViewRotateTool.h	/^                DragMode_None,$/;"	e	language:C++	enum:TrenchBroom::View::TexturingViewRotateTool::__anon37
Drop	Model/BrushEdge.h	/^                Drop,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushEdge::Mark
DropPolicy	View/Tool.h	/^        class DropPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
DropSource	View/DragAndDrop.h	/^        typedef GenericDropSource DropSource;$/;"	t	language:C++	namespace:TrenchBroom::View
DynamicModelDefinition	Assets/ModelDefinition.cpp	/^        DynamicModelDefinition::DynamicModelDefinition(const Model::PropertyKey& pathKey, const Model::PropertyKey& skinKey, const Model::PropertyKey& frameKey) :$/;"	f	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
DynamicModelDefinition	Assets/ModelDefinition.h	/^        class DynamicModelDefinition : public ModelDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
E	MathUtils.h	/^        static const T E;$/;"	m	language:C++	class:Math::Constants
E	MathUtils.h	/^    const T Constants<T>:: E                   = static_cast<T>(2.718281828459045);$/;"	m	language:C++	class:Math::Constants
EVT_COLOR_TABLE_SELECTED	View/ColorTableSelectedCommand.h	/^#define EVT_COLOR_TABLE_SELECTED(/;"	d	language:C++
EVT_COLOR_TABLE_SELECTED_HANDLER	View/ColorTableSelectedCommand.h	/^#define EVT_COLOR_TABLE_SELECTED_HANDLER(/;"	d	language:C++
EVT_ENTITY_PROPERTY_SELECTED	View/EntityPropertySelectedCommand.h	/^#define EVT_ENTITY_PROPERTY_SELECTED(/;"	d	language:C++
EVT_ENTITY_PROPERTY_SELECTED_HANDLER	View/EntityPropertySelectedCommand.h	/^#define EVT_ENTITY_PROPERTY_SELECTED_HANDLER(/;"	d	language:C++
EVT_EXECUTABLE	View/ExecutableEvent.h	/^#define EVT_EXECUTABLE(/;"	d	language:C++
EVT_EXECUTABLE_EVENT_HANDLER	View/ExecutableEvent.h	/^#define EVT_EXECUTABLE_EVENT_HANDLER(/;"	d	language:C++
EVT_FLAG_CHANGED	View/FlagChangedCommand.h	/^#define EVT_FLAG_CHANGED(/;"	d	language:C++
EVT_FLAG_CHANGED_HANDLER	View/FlagChangedCommand.h	/^#define EVT_FLAG_CHANGED_HANDLER(/;"	d	language:C++
EVT_GAME_SELECTION_CHANGE	View/GameSelectionCommand.h	/^#define EVT_GAME_SELECTION_CHANGE(/;"	d	language:C++
EVT_GAME_SELECTION_CHANGE_HANDLER	View/GameSelectionCommand.h	/^#define EVT_GAME_SELECTION_CHANGE_HANDLER(/;"	d	language:C++
EVT_GAME_SELECTION_DBLCLICK	View/GameSelectionCommand.h	/^#define EVT_GAME_SELECTION_DBLCLICK(/;"	d	language:C++
EVT_GAME_SELECTION_DBLCLICK_HANDLER	View/GameSelectionCommand.h	/^#define EVT_GAME_SELECTION_DBLCLICK_HANDLER(/;"	d	language:C++
EVT_KEYBOARD_SHORTCUT	View/KeyboardShortcutEvent.h	/^#define EVT_KEYBOARD_SHORTCUT(/;"	d	language:C++
EVT_KEYBOARD_SHORTCUT_HANDLER	View/KeyboardShortcutEvent.h	/^#define EVT_KEYBOARD_SHORTCUT_HANDLER(/;"	d	language:C++
EVT_MINIMAP_VIEW_CHANGED	View/MiniMapBaseView.h	/^#define EVT_MINIMAP_VIEW_CHANGED(/;"	d	language:C++
EVT_MINIMAP_VIEW_CHANGED_HANDLER	View/MiniMapBaseView.h	/^#define EVT_MINIMAP_VIEW_CHANGED_HANDLER(/;"	d	language:C++
EVT_REBUILD_MENUBAR	View/MapFrame.cpp	/^        const wxEventType MapFrame::EVT_REBUILD_MENUBAR = wxNewEventType();$/;"	m	language:C++	class:TrenchBroom::View::MapFrame	file:
EVT_REBUILD_MENUBAR	View/MapFrame.h	/^            static const wxEventType EVT_REBUILD_MENUBAR;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
EVT_RECENT_DOCUMENT_SELECTED	View/RecentDocumentSelectedCommand.h	/^#define EVT_RECENT_DOCUMENT_SELECTED(/;"	d	language:C++
EVT_RECENT_DOCUMENT_SELECTED_HANDLER	View/RecentDocumentSelectedCommand.h	/^#define EVT_RECENT_DOCUMENT_SELECTED_HANDLER(/;"	d	language:C++
EVT_SPINCONTROL	View/SpinControl.h	/^#define EVT_SPINCONTROL(/;"	d	language:C++
EVT_SPINCONTROL_HANDLER	View/SpinControl.h	/^#define EVT_SPINCONTROL_HANDLER(/;"	d	language:C++
EVT_TEXTURE_SELECTED	View/TextureSelectedCommand.h	/^#define EVT_TEXTURE_SELECTED(/;"	d	language:C++
EVT_TEXTURE_SELECTED_HANDLER	View/TextureSelectedCommand.h	/^#define EVT_TEXTURE_SELECTED_HANDLER(/;"	d	language:C++
EaseInEaseOutAnimationCurve	View/AnimationCurve.cpp	/^        EaseInEaseOutAnimationCurve::EaseInEaseOutAnimationCurve(const wxLongLong duration) {$/;"	f	language:C++	class:TrenchBroom::View::EaseInEaseOutAnimationCurve
EaseInEaseOutAnimationCurve	View/AnimationCurve.h	/^        class EaseInEaseOutAnimationCurve : public AnimationCurve {$/;"	c	language:C++	namespace:TrenchBroom::View
Edge	Edge.h	/^        Edge() {}$/;"	f	language:C++	struct:TrenchBroom::Edge
Edge	Edge.h	/^        Edge(const Vec<T,S>& i_start, const Vec<T,S>& i_end) :$/;"	f	language:C++	struct:TrenchBroom::Edge
Edge	Edge.h	/^    struct Edge {$/;"	s	language:C++	namespace:TrenchBroom
Edge	Model/FaceAdjacencyGraph.cpp	/^        FaceAdjacencyGraph::Edge::Edge(Node* node1, Node* node2, const BrushEdge* brushEdge1, const BrushEdge* brushEdge2) :$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
Edge	Model/FaceAdjacencyGraph.h	/^            class Edge {$/;"	c	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
Edge3	TrenchBroom.h	/^    typedef Edge<FloatType, 3> Edge3;$/;"	t	language:C++	namespace:TrenchBroom
EdgeHandleHit	View/VertexHandleManager.cpp	/^        const Hit::HitType VertexHandleManager::EdgeHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager	file:
EdgeHandleHit	View/VertexHandleManager.h	/^            static const Hit::HitType EdgeHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
EdgeInfo	IO/Bsp29Parser.h	/^            struct EdgeInfo {$/;"	s	language:C++	class:TrenchBroom::IO::Bsp29Parser
EdgeInfoList	IO/Bsp29Parser.h	/^            typedef std::vector<EdgeInfo> EdgeInfoList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
EdgeMap	Renderer/OutlineTracer.h	/^            typedef std::map<Line3, Position::List> EdgeMap;$/;"	t	language:C++	class:TrenchBroom::Renderer::OutlineTracer
EdgeOffset	Renderer/RenderUtils.cpp	/^        static const float EdgeOffset = 0.0001f;$/;"	m	language:C++	namespace:TrenchBroom::Renderer	file:
EdgeRenderer	Renderer/EdgeRenderer.cpp	/^        EdgeRenderer::EdgeRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
EdgeRenderer	Renderer/EdgeRenderer.cpp	/^        EdgeRenderer::EdgeRenderer(const EdgeRenderer& other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
EdgeRenderer	Renderer/EdgeRenderer.cpp	/^        EdgeRenderer::EdgeRenderer(const VertexArray& vertexArray) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
EdgeRenderer	Renderer/EdgeRenderer.h	/^        class EdgeRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
EdgeVertex	View/TexturingViewScaleOriginTool.h	/^            typedef Renderer::VertexSpecs::P3C4::Vertex EdgeVertex;$/;"	t	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
EdgeVertex	View/TexturingViewScaleTool.h	/^            typedef Renderer::VertexSpecs::P3C4::Vertex EdgeVertex;$/;"	t	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
EditActions	View/CommandIds.h	/^                const int EditActions                        = Lowest +  39;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditClipActions	View/CommandIds.h	/^                const int EditClipActions                    = Lowest +  98;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditCorrectVertices	View/CommandIds.h	/^                const int EditCorrectVertices                = Lowest +  82;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditCreateBrushEntity	View/CommandIds.h	/^                const int EditCreateBrushEntity              = Lowest +  41;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditCreatePointEntity	View/CommandIds.h	/^                const int EditCreatePointEntity              = Lowest +  40;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDeleteLastClipPoint	View/CommandIds.h	/^                const int EditDeleteLastClipPoint            = Lowest + 104;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjects	View/CommandIds.h	/^                const int EditDuplicateObjects               = Lowest +  38;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsBackward	View/CommandIds.h	/^                const int EditDuplicateObjectsBackward       = Lowest +  91;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsDown	View/CommandIds.h	/^                const int EditDuplicateObjectsDown           = Lowest +  94;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsForward	View/CommandIds.h	/^                const int EditDuplicateObjectsForward        = Lowest +  89;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsLeft	View/CommandIds.h	/^                const int EditDuplicateObjectsLeft           = Lowest +  92;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsRight	View/CommandIds.h	/^                const int EditDuplicateObjectsRight          = Lowest +  90;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditDuplicateObjectsUp	View/CommandIds.h	/^                const int EditDuplicateObjectsUp             = Lowest +  93;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditFaceActions	View/CommandIds.h	/^                const int EditFaceActions                    = Lowest + 100;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditFlipObjectsHorizontally	View/CommandIds.h	/^                const int EditFlipObjectsHorizontally        = Lowest +  36;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditFlipObjectsVertically	View/CommandIds.h	/^                const int EditFlipObjectsVertically          = Lowest +  37;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditHideSelected	View/CommandIds.h	/^                const int EditHideSelected                   = Lowest +   6;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditHideUnselected	View/CommandIds.h	/^                const int EditHideUnselected                 = Lowest +   7;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditLockSelected	View/CommandIds.h	/^                const int EditLockSelected                   = Lowest +   9;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditLockUnselected	View/CommandIds.h	/^                const int EditLockUnselected                 = Lowest +  10;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMenu	View/Menu.cpp	/^        const String EditMenu = "Edit";$/;"	m	language:C++	namespace:TrenchBroom::View	file:
EditMoveObjectsBackward	View/CommandIds.h	/^                const int EditMoveObjectsBackward            = Lowest +  26;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveObjectsDown	View/CommandIds.h	/^                const int EditMoveObjectsDown                = Lowest +  29;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveObjectsForward	View/CommandIds.h	/^                const int EditMoveObjectsForward             = Lowest +  24;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveObjectsLeft	View/CommandIds.h	/^                const int EditMoveObjectsLeft                = Lowest +  27;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveObjectsRight	View/CommandIds.h	/^                const int EditMoveObjectsRight               = Lowest +  25;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveObjectsUp	View/CommandIds.h	/^                const int EditMoveObjectsUp                  = Lowest +  28;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesDown	View/CommandIds.h	/^                const int EditMoveTexturesDown               = Lowest +  20;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesDownFine	View/CommandIds.h	/^                const int EditMoveTexturesDownFine           = Lowest +  68;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesLeft	View/CommandIds.h	/^                const int EditMoveTexturesLeft               = Lowest +  21;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesLeftFine	View/CommandIds.h	/^                const int EditMoveTexturesLeftFine           = Lowest +  69;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesRight	View/CommandIds.h	/^                const int EditMoveTexturesRight              = Lowest +  19;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesRightFine	View/CommandIds.h	/^                const int EditMoveTexturesRightFine          = Lowest +  67;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesUp	View/CommandIds.h	/^                const int EditMoveTexturesUp                 = Lowest +  18;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveTexturesUpFine	View/CommandIds.h	/^                const int EditMoveTexturesUpFine             = Lowest +  66;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesBackward	View/CommandIds.h	/^                const int EditMoveVerticesBackward           = Lowest +  61;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesDown	View/CommandIds.h	/^                const int EditMoveVerticesDown               = Lowest +  65;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesForward	View/CommandIds.h	/^                const int EditMoveVerticesForward            = Lowest +  60;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesLeft	View/CommandIds.h	/^                const int EditMoveVerticesLeft               = Lowest +  62;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesRight	View/CommandIds.h	/^                const int EditMoveVerticesRight              = Lowest +  63;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditMoveVerticesUp	View/CommandIds.h	/^                const int EditMoveVerticesUp                 = Lowest +  64;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditNavigateUp	View/CommandIds.h	/^                const int EditNavigateUp                     = Lowest +  95;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditObjectActions	View/CommandIds.h	/^                const int EditObjectActions                  = Lowest +  99;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditPasteAtOriginalPosition	View/CommandIds.h	/^                const int EditPasteAtOriginalPosition        = Lowest +  84;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditPerformClip	View/CommandIds.h	/^                const int EditPerformClip                    = Lowest +  14;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditPitchObjectsCCW	View/CommandIds.h	/^                const int EditPitchObjectsCCW                = Lowest +  33;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditPitchObjectsCW	View/CommandIds.h	/^                const int EditPitchObjectsCW                 = Lowest +  32;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditPrintFilePositions	View/CommandIds.h	/^                const int EditPrintFilePositions             = Lowest + 101;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRollObjectsCCW	View/CommandIds.h	/^                const int EditRollObjectsCCW                 = Lowest +  31;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRollObjectsCW	View/CommandIds.h	/^                const int EditRollObjectsCW                  = Lowest +  30;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRotateTexturesCCW	View/CommandIds.h	/^                const int EditRotateTexturesCCW              = Lowest +  23;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRotateTexturesCCWFine	View/CommandIds.h	/^                const int EditRotateTexturesCCWFine          = Lowest +  71;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRotateTexturesCW	View/CommandIds.h	/^                const int EditRotateTexturesCW               = Lowest +  22;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditRotateTexturesCWFine	View/CommandIds.h	/^                const int EditRotateTexturesCWFine           = Lowest +  70;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectAll	View/CommandIds.h	/^                const int EditSelectAll                      = Lowest +   2;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectByFilePosition	View/CommandIds.h	/^                const int EditSelectByFilePosition           = Lowest +  85;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectContained	View/CommandIds.h	/^                const int EditSelectContained                = Lowest + 103;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectNone	View/CommandIds.h	/^                const int EditSelectNone                     = Lowest +   5;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectSiblings	View/CommandIds.h	/^                const int EditSelectSiblings                 = Lowest +   3;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSelectTouching	View/CommandIds.h	/^                const int EditSelectTouching                 = Lowest +   4;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditShowMapProperties	View/CommandIds.h	/^                const int EditShowMapProperties              = Lowest +  80;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditSnapVertices	View/CommandIds.h	/^                const int EditSnapVertices                   = Lowest +  81;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleClipSide	View/CommandIds.h	/^                const int EditToggleClipSide                 = Lowest +  13;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleClipTool	View/CommandIds.h	/^                const int EditToggleClipTool                 = Lowest +  12;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleMovementRestriction	View/CommandIds.h	/^                const int EditToggleMovementRestriction      = Lowest + 102;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleRotateObjectsTool	View/CommandIds.h	/^                const int EditToggleRotateObjectsTool        = Lowest +  73;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleTextureLock	View/CommandIds.h	/^                const int EditToggleTextureLock              = Lowest +  42;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleTextureTool	View/CommandIds.h	/^                const int EditToggleTextureTool              = Lowest + 105;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditToggleVertexTool	View/CommandIds.h	/^                const int EditToggleVertexTool               = Lowest +  15;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditUnhideAll	View/CommandIds.h	/^                const int EditUnhideAll                      = Lowest +   8;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditUnlockAll	View/CommandIds.h	/^                const int EditUnlockAll                      = Lowest +  11;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditVertexActions	View/CommandIds.h	/^                const int EditVertexActions                  = Lowest +  97;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditYawObjectsCCW	View/CommandIds.h	/^                const int EditYawObjectsCCW                  = Lowest +  35;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditYawObjectsCW	View/CommandIds.h	/^                const int EditYawObjectsCW                   = Lowest +  34;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
EditorList	View/SmartPropertyEditorManager.h	/^            typedef std::vector<MatcherEditorPair> EditorList;$/;"	t	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
EditorPtr	View/SmartPropertyEditorManager.h	/^            typedef TrenchBroom::shared_ptr<SmartPropertyEditor> EditorPtr;$/;"	t	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
ElementType	Renderer/AttributeSpec.h	/^            typedef Vec<DataType, S> ElementType;$/;"	t	language:C++	class:TrenchBroom::Renderer::AttributeSpec
Empty	View/KeyboardShortcut.h	/^            static const KeyboardShortcut Empty;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
EmptyBrushEntityIssue	Model/EmptyBrushEntityIssueGenerator.cpp	/^            EmptyBrushEntityIssue(Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssue
EmptyBrushEntityIssue	Model/EmptyBrushEntityIssueGenerator.cpp	/^        class EmptyBrushEntityIssue : public EntityIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
EmptyBrushEntityIssueGenerator	Model/EmptyBrushEntityIssueGenerator.h	/^        class EmptyBrushEntityIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
EmptyCountArray	Renderer/VertexArray.h	/^            static const CountArray EmptyCountArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
EmptyEntitySet	Model/ModelTypes.h	/^        static const EntitySet EmptyEntitySet;$/;"	m	language:C++	namespace:TrenchBroom::Model
EmptyIndexArray	Renderer/VertexArray.h	/^            static const IndexArray EmptyIndexArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
EmptyList	Line.h	/^    static const List EmptyList;$/;"	m	language:C++	class:Line
EmptyList	Line.h	/^const typename Line<T,S>::List Line<T,S>::EmptyList = Line<T,S>::List();$/;"	m	language:C++	class:Line
EmptyList	Vec.h	/^    static const List EmptyList;$/;"	m	language:C++	class:Vec
EmptyList	Vec.h	/^const typename Vec<T,S>::List Vec<T,S>::EmptyList = Vec<T,S>::List();$/;"	m	language:C++	class:Vec
EmptyMap	Vec.h	/^    static const Map EmptyMap;$/;"	m	language:C++	class:Vec
EmptyMap	Vec.h	/^const typename Vec<T,S>::Map Vec<T,S>::EmptyMap = Vec<T,S>::Map();$/;"	m	language:C++	class:Vec
EmptyModelDefinitionList	Assets/AssetTypes.h	/^        static const ModelDefinitionList EmptyModelDefinitionList;$/;"	m	language:C++	namespace:TrenchBroom::Assets
EmptySet	Vec.h	/^    static const Set EmptySet;$/;"	m	language:C++	class:Vec
EmptySet	Vec.h	/^const typename Vec<T,S>::Set Vec<T,S>::EmptySet = Vec<T,S>::Set();$/;"	m	language:C++	class:Vec
Enable	View/FlagsPopupEditor.cpp	/^        bool FlagsPopupEditor::Enable(bool enable) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
Enable	View/PopupButton.cpp	/^        bool PopupButton::Enable(bool enable) {$/;"	f	language:C++	class:TrenchBroom::View::PopupButton
Enable	View/SpinControl.cpp	/^bool SpinControl::Enable(bool enable) {$/;"	f	language:C++	class:SpinControl
EndEdit	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridCellEditor::EndEdit(int row, int col, const wxGrid* grid, const wxString& oldValue, wxString* newValue) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
Entity	Model/Entity.cpp	/^        Entity::Entity() :$/;"	f	language:C++	class:TrenchBroom::Model::Entity
Entity	Model/Entity.h	/^        class Entity : public Object {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityBrowser	View/EntityBrowser.cpp	/^        EntityBrowser::EntityBrowser(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
EntityBrowser	View/EntityBrowser.h	/^        class EntityBrowser : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityBrowserView	View/EntityBrowserView.cpp	/^        EntityBrowserView::EntityBrowserView(wxWindow* parent,$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
EntityBrowserView	View/EntityBrowserView.h	/^        class EntityBrowserView : public CellView<EntityCellData, EntityGroupData> {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityBrushesIterator	Model/EntityBrushesIterator.h	/^        struct EntityBrushesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
EntityBrushesMap	Model/ModelTypes.h	/^        typedef std::map<Entity*, BrushList> EntityBrushesMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
EntityCellData	View/EntityBrowserView.cpp	/^        EntityCellData::EntityCellData(Assets::PointEntityDefinition* i_entityDefinition, Renderer::MeshRenderer* i_modelRenderer, const Renderer::FontDescriptor& i_fontDescriptor, const BBox3f& i_bounds) :$/;"	f	language:C++	class:TrenchBroom::View::EntityCellData
EntityCellData	View/EntityBrowserView.h	/^        class EntityCellData {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityClassnameAnchor	Renderer/EntityRenderer.cpp	/^        EntityRenderer::EntityClassnameAnchor::EntityClassnameAnchor(const Model::Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameAnchor
EntityClassnameAnchor	Renderer/EntityRenderer.h	/^            class EntityClassnameAnchor : public TextAnchor {$/;"	c	language:C++	class:TrenchBroom::Renderer::EntityRenderer
EntityClassnameColorProvider	Renderer/EntityRenderer.cpp	/^        EntityRenderer::EntityClassnameColorProvider::EntityClassnameColorProvider(const Color& textColor, const Color& backgroundColor) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameColorProvider
EntityClassnameColorProvider	Renderer/EntityRenderer.h	/^            class EntityClassnameColorProvider : public ClassnameRenderer::TextColorProvider {$/;"	c	language:C++	class:TrenchBroom::Renderer::EntityRenderer
EntityClassnameFilter	Renderer/EntityRenderer.cpp	/^        EntityRenderer::EntityClassnameFilter::EntityClassnameFilter(const Model::ModelFilter& filter) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameFilter
EntityClassnameFilter	Renderer/EntityRenderer.h	/^            class EntityClassnameFilter : public ClassnameRenderer::TextRendererFilter {$/;"	c	language:C++	class:TrenchBroom::Renderer::EntityRenderer
EntityConfig	Model/GameConfig.cpp	/^        GameConfig::EntityConfig::EntityConfig(const IO::Path& i_defFilePath, const StringSet& i_modelFormats, const Color& i_defaultColor) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::EntityConfig
EntityConfig	Model/GameConfig.cpp	/^        GameConfig::EntityConfig::EntityConfig(const IO::Path::List& i_defFilePaths, const StringSet& i_modelFormats, const Color& i_defaultColor) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::EntityConfig
EntityConfig	Model/GameConfig.h	/^            struct EntityConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
EntityDefinition	Assets/EntityDefinition.cpp	/^        EntityDefinition::EntityDefinition(const String& name, const Color& color, const String& description, const PropertyDefinitionList& propertyDefinitions) :$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
EntityDefinition	Assets/EntityDefinition.h	/^        class EntityDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
EntityDefinitionClassInfo	IO/EntityDefinitionClassInfo.cpp	/^        EntityDefinitionClassInfo::EntityDefinitionClassInfo() :$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
EntityDefinitionClassInfo	IO/EntityDefinitionClassInfo.cpp	/^        EntityDefinitionClassInfo::EntityDefinitionClassInfo(const size_t line, const size_t column, const Color& defaultColor) :$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
EntityDefinitionClassInfo	IO/EntityDefinitionClassInfo.h	/^        class EntityDefinitionClassInfo {$/;"	c	language:C++	namespace:TrenchBroom::IO
EntityDefinitionClassInfoMap	IO/EntityDefinitionClassInfo.h	/^        typedef std::map<String, EntityDefinitionClassInfo> EntityDefinitionClassInfoMap;$/;"	t	language:C++	namespace:TrenchBroom::IO
EntityDefinitionFileChooser	View/EntityDefinitionFileChooser.cpp	/^        EntityDefinitionFileChooser::EntityDefinitionFileChooser(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
EntityDefinitionFileChooser	View/EntityDefinitionFileChooser.h	/^        class EntityDefinitionFileChooser : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityDefinitionFileSpec	Model/EntityDefinitionFileSpec.cpp	/^        EntityDefinitionFileSpec::EntityDefinitionFileSpec() :$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
EntityDefinitionFileSpec	Model/EntityDefinitionFileSpec.cpp	/^        EntityDefinitionFileSpec::EntityDefinitionFileSpec(const bool builtin, const IO::Path& path, const IO::Path& fullPath) :$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
EntityDefinitionFileSpec	Model/EntityDefinitionFileSpec.h	/^        class EntityDefinitionFileSpec {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityDefinitionGroups	Assets/AssetTypes.h	/^        typedef std::map<String, EntityDefinitionList> EntityDefinitionGroups;$/;"	t	language:C++	namespace:TrenchBroom::Assets
EntityDefinitionList	Assets/AssetTypes.h	/^        typedef std::vector<EntityDefinition*> EntityDefinitionList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
EntityDefinitionManager	Assets/EntityDefinitionManager.h	/^        class EntityDefinitionManager {$/;"	c	language:C++	namespace:TrenchBroom::Assets
EntityDefinitionParser	IO/EntityDefinitionParser.h	/^        class EntityDefinitionParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
EntityDefinitions	Model/EntityProperties.cpp	/^            const PropertyKey EntityDefinitions = "_def";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
EntityFacesIterator	Model/EntityFacesIterator.h	/^        struct EntityFacesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
EntityGroupData	View/EntityBrowserView.h	/^        typedef String EntityGroupData;$/;"	t	language:C++	namespace:TrenchBroom::View
EntityHit	Model/Entity.cpp	/^        const Hit::HitType Entity::EntityHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::Model::Entity	file:
EntityHit	Model/Entity.h	/^            static const Hit::HitType EntityHit;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
EntityInspector	View/EntityInspector.cpp	/^        EntityInspector::EntityInspector(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
EntityInspector	View/EntityInspector.h	/^        class EntityInspector : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityIssue	Model/Issue.cpp	/^        EntityIssue::EntityIssue(const IssueType type, Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
EntityIssue	Model/Issue.h	/^        class EntityIssue : public Issue {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityLinkFilter	Renderer/MapRenderer.cpp	/^            EntityLinkFilter() :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter
EntityLinkFilter	Renderer/MapRenderer.cpp	/^        class EntityLinkFilter : public EntityLinkRenderer::Filter {$/;"	c	language:C++	namespace:TrenchBroom::Renderer	file:
EntityLinkIssue	Model/EntityLinkIssueGenerator.cpp	/^            EntityLinkIssue(Entity* entity, const PropertyKey& key) :$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssue
EntityLinkIssue	Model/EntityLinkIssueGenerator.cpp	/^        class EntityLinkIssue : public EntityIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
EntityLinkIssueGenerator	Model/EntityLinkIssueGenerator.h	/^        class EntityLinkIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityLinkRenderer	Renderer/EntityLinkRenderer.cpp	/^        EntityLinkRenderer::EntityLinkRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
EntityLinkRenderer	Renderer/EntityLinkRenderer.h	/^        class EntityLinkRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
EntityLinkShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig EntityLinkShader           = ShaderConfig("Entity Link",                      "EntityLink.vertsh",           "EntityLink.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
EntityList	Model/ModelTypes.h	/^        typedef std::vector<Entity*> EntityList;$/;"	t	language:C++	namespace:TrenchBroom::Model
EntityMap	Renderer/EntityModelRenderer.h	/^            typedef std::map<Model::Entity*, MeshRenderer*> EntityMap;$/;"	t	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
EntityModel	Assets/EntityModel.h	/^        class EntityModel {$/;"	c	language:C++	namespace:TrenchBroom::Assets
EntityModelList	Assets/AssetTypes.h	/^        typedef std::vector<EntityModel*> EntityModelList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
EntityModelManager	Assets/EntityModelManager.cpp	/^        EntityModelManager::EntityModelManager(Logger* logger) :$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
EntityModelManager	Assets/EntityModelManager.h	/^        class EntityModelManager {$/;"	c	language:C++	namespace:TrenchBroom::Assets
EntityModelParser	IO/EntityModelParser.h	/^        class EntityModelParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
EntityModelRenderer	Renderer/EntityModelRenderer.cpp	/^        EntityModelRenderer::EntityModelRenderer(Assets::EntityModelManager& entityModelManager, const Model::ModelFilter& filter) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
EntityModelRenderer	Renderer/EntityModelRenderer.h	/^        class EntityModelRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
EntityModelShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig EntityModelShader          = ShaderConfig("Entity Model",                     "EntityModel.vertsh",          "EntityModel.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
EntityProperties	Model/EntityProperties.h	/^        class EntityProperties {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityProperty	Model/EntityProperties.cpp	/^        EntityProperty::EntityProperty() {}$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperty
EntityProperty	Model/EntityProperties.cpp	/^        EntityProperty::EntityProperty(const PropertyKey& i_key, const PropertyValue& i_value) :$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperty
EntityProperty	Model/EntityProperties.h	/^        struct EntityProperty {$/;"	s	language:C++	namespace:TrenchBroom::Model
EntityPropertyCommand	Controller/EntityPropertyCommand.cpp	/^        EntityPropertyCommand::EntityPropertyCommand(View::MapDocumentWPtr document, const Action command, const Model::EntityList& entities, const bool force) :$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
EntityPropertyCommand	Controller/EntityPropertyCommand.h	/^        class EntityPropertyCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
EntityPropertyEditor	View/EntityPropertyEditor.cpp	/^        EntityPropertyEditor::EntityPropertyEditor(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyEditor
EntityPropertyEditor	View/EntityPropertyEditor.h	/^        class EntityPropertyEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityPropertyException	Exceptions.h	/^        EntityPropertyException() throw() {}$/;"	f	language:C++	class:TrenchBroom::EntityPropertyException
EntityPropertyException	Exceptions.h	/^        EntityPropertyException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::EntityPropertyException
EntityPropertyException	Exceptions.h	/^    class EntityPropertyException : public ExceptionStream<EntityPropertyException> {$/;"	c	language:C++	namespace:TrenchBroom
EntityPropertyGrid	View/EntityPropertyGrid.cpp	/^        EntityPropertyGrid::EntityPropertyGrid(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
EntityPropertyGrid	View/EntityPropertyGrid.h	/^        class EntityPropertyGrid : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityPropertyGridTable	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::EntityPropertyGridTable(MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
EntityPropertyGridTable	View/EntityPropertyGridTable.h	/^        class EntityPropertyGridTable : public wxGridTableBase {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityPropertyIndex	Model/EntityPropertyIndex.h	/^        class EntityPropertyIndex {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityPropertyQuery	Model/EntityPropertyIndex.cpp	/^        EntityPropertyQuery::EntityPropertyQuery(const Type type, const String& pattern) :$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
EntityPropertyQuery	Model/EntityPropertyIndex.h	/^        class EntityPropertyQuery {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntityPropertySelectedCommand	View/EntityPropertySelectedCommand.cpp	/^        EntityPropertySelectedCommand::EntityPropertySelectedCommand() :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertySelectedCommand
EntityPropertySelectedCommand	View/EntityPropertySelectedCommand.h	/^        class EntityPropertySelectedCommand : public wxNotifyEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
EntityRenderer	Renderer/EntityRenderer.cpp	/^        EntityRenderer::EntityRenderer(Assets::EntityModelManager& entityModelManager, FontManager& fontManager, const Model::ModelFilter& filter) :$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
EntityRenderer	Renderer/EntityRenderer.h	/^        class EntityRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
EntitySet	Model/ModelTypes.h	/^        typedef std::set<Entity*> EntitySet;$/;"	t	language:C++	namespace:TrenchBroom::Model
EntitySnapshot	Model/Entity.cpp	/^        EntitySnapshot::EntitySnapshot(Entity& entity) :$/;"	f	language:C++	class:TrenchBroom::Model::EntitySnapshot
EntitySnapshot	Model/Entity.h	/^        class EntitySnapshot {$/;"	c	language:C++	namespace:TrenchBroom::Model
EntitySnapshotList	Model/Snapshot.h	/^            typedef std::vector<Model::EntitySnapshot> EntitySnapshotList;$/;"	t	language:C++	class:TrenchBroom::Model::Snapshot
Entry	View/Animation.cpp	/^        wxThread::ExitCode AnimationManager::Entry() {$/;"	f	language:C++	class:TrenchBroom::View::AnimationManager
EntryLength	IO/PakFileSystem.cpp	/^            static const size_t EntryLength       = 0x40;$/;"	m	language:C++	namespace:TrenchBroom::IO::PakLayout	file:
EntryList	ConfigTypes.h	/^        typedef std::vector<ConfigEntry::Ptr> EntryList;$/;"	t	language:C++	class:TrenchBroom::ConfigList
EntryList	Renderer/TextRenderer.h	/^            typedef std::vector<typename TextMap::const_iterator> EntryList;$/;"	t	language:C++	class:TrenchBroom::Renderer::TextRenderer
EntryList	View/KeyboardPreferencePane.h	/^            typedef std::vector<KeyboardShortcutEntry::Ptr> EntryList;$/;"	t	language:C++	class:TrenchBroom::View::KeyboardGridTable
EntryMap	ConfigTypes.h	/^        typedef std::map<String, ConfigEntry::Ptr> EntryMap;$/;"	t	language:C++	class:TrenchBroom::ConfigTable
EntryNameLength	IO/PakFileSystem.cpp	/^            static const size_t EntryNameLength   = 0x38;$/;"	m	language:C++	namespace:TrenchBroom::IO::PakLayout	file:
Eof	IO/ConfigParser.h	/^            static const Type Eof           = 1 <<  8; \/\/ end of file$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
Eof	IO/DefParser.h	/^            static const Type Eof             = 1 << 15; \/\/ end of file$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Eof	IO/FgdParser.h	/^            static const Type Eof               = 1 << 11; \/\/ end of file$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Eof	IO/QuakeMapParser.h	/^            static const Type Eof           = 1 << 10; \/\/ end of file$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
Eol	IO/QuakeMapParser.h	/^            static const Type Eol           = 1 << 11; \/\/ end of line$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
Equality	IO/DefParser.h	/^            static const Type Equality        = 1 << 14; \/\/ equality sign: =$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Equality	IO/FgdParser.h	/^            static const Type Equality          = 1 <<  8; \/\/ equality sign: =$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Equals	IO/ConfigParser.h	/^            static const Type Equals        = 1 <<  6; \/\/ equals: =$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
EqualsUsingLess	CollectionUtils.h	/^        EqualsUsingLess(const Less& less) :$/;"	f	language:C++	struct:Utils::EqualsUsingLess
EqualsUsingLess	CollectionUtils.h	/^    struct EqualsUsingLess {$/;"	s	language:C++	namespace:Utils
ErrorOrder	Vec.h	/^    class ErrorOrder {$/;"	c	language:C++	class:Vec
Exception	Exceptions.h	/^        Exception() throw() {}$/;"	f	language:C++	class:TrenchBroom::Exception
Exception	Exceptions.h	/^        Exception(const String& str) throw() : m_msg(str) {}$/;"	f	language:C++	class:TrenchBroom::Exception
Exception	Exceptions.h	/^    class Exception : public std::exception {$/;"	c	language:C++	namespace:TrenchBroom
ExceptionStream	Exceptions.h	/^        ExceptionStream() throw() {}$/;"	f	language:C++	class:TrenchBroom::ExceptionStream
ExceptionStream	Exceptions.h	/^        ExceptionStream(const String& str) throw() : Exception(str) {}$/;"	f	language:C++	class:TrenchBroom::ExceptionStream
ExceptionStream	Exceptions.h	/^    class ExceptionStream : public Exception {$/;"	c	language:C++	namespace:TrenchBroom
Executable	View/ExecutableEvent.h	/^            class Executable {$/;"	c	language:C++	class:TrenchBroom::View::ExecutableEvent
ExecutableAnimation	View/Animation.cpp	/^        ExecutableAnimation::ExecutableAnimation(const Animation::List& animations) :$/;"	f	language:C++	class:TrenchBroom::View::ExecutableAnimation
ExecutableAnimation	View/Animation.h	/^        class ExecutableAnimation : public ExecutableEvent::Executable {$/;"	c	language:C++	namespace:TrenchBroom::View
ExecutableEvent	View/ExecutableEvent.cpp	/^        ExecutableEvent::ExecutableEvent() :$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent
ExecutableEvent	View/ExecutableEvent.cpp	/^        ExecutableEvent::ExecutableEvent(Executable* executable) :$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent
ExecutableEvent	View/ExecutableEvent.cpp	/^        ExecutableEvent::ExecutableEvent(Executable::Ptr sharedExecutable) :$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent
ExecutableEvent	View/ExecutableEvent.h	/^        class ExecutableEvent : public wxEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
ExtensionMatcher	IO/FileSystem.cpp	/^        FileSystem::ExtensionMatcher::ExtensionMatcher(const String& extension) :$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem::ExtensionMatcher
ExtensionMatcher	IO/FileSystem.h	/^            class ExtensionMatcher {$/;"	c	language:C++	class:TrenchBroom::IO::FileSystem
ExtraProperties	IO/QuakeMapParser.h	/^            typedef std::map<String, ExtraProperty> ExtraProperties;$/;"	t	language:C++	class:TrenchBroom::IO::QuakeMapParser
ExtraProperty	IO/QuakeMapParser.cpp	/^        QuakeMapParser::ExtraProperty::ExtraProperty(Type type, const String& name, const String& value, const size_t line, const size_t column) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
ExtraProperty	IO/QuakeMapParser.h	/^            class ExtraProperty {$/;"	c	language:C++	class:TrenchBroom::IO::QuakeMapParser
F	Notifier.h	/^            typedef void (R::*F)();$/;"	t	language:C++	class:TrenchBroom::Notifier0::CObserver
F	Notifier.h	/^            typedef void (R::*F)(A1 a1);$/;"	t	language:C++	class:TrenchBroom::Notifier1::CObserver
F	Notifier.h	/^            typedef void (R::*F)(A1 a1, A2 a2);$/;"	t	language:C++	class:TrenchBroom::Notifier2::CObserver
F	Notifier.h	/^            typedef void (R::*F)(A1 a1, A2 a2, A3 a3);$/;"	t	language:C++	class:TrenchBroom::Notifier3::CObserver
F	SetBool.h	/^        typedef void (R::*F)(bool b);$/;"	t	language:C++	class:TrenchBroom::SetBoolFun
FSPtr	IO/GameFileSystem.h	/^            typedef TrenchBroom::shared_ptr<FileSystem> FSPtr;$/;"	t	language:C++	class:TrenchBroom::IO::GameFileSystem
Face	Assets/Bsp29Model.cpp	/^        Bsp29Model::Face::Face(Assets::Texture* texture) :$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
Face	Assets/Bsp29Model.h	/^            class Face {$/;"	c	language:C++	class:TrenchBroom::Assets::Bsp29Model
FaceAdjacencyGraph	Model/FaceAdjacencyGraph.h	/^        class FaceAdjacencyGraph {$/;"	c	language:C++	namespace:TrenchBroom::Model
FaceAttribsConfig	Model/GameConfig.cpp	/^        GameConfig::FaceAttribsConfig::FaceAttribsConfig() {}$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FaceAttribsConfig
FaceAttribsConfig	Model/GameConfig.cpp	/^        GameConfig::FaceAttribsConfig::FaceAttribsConfig(const FlagConfigList& i_surfaceFlags, const FlagConfigList& i_contentFlags) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FaceAttribsConfig
FaceAttribsConfig	Model/GameConfig.h	/^            struct FaceAttribsConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
FaceAttribsControlMargin	View/ViewConstants.h	/^            static const int FaceAttribsControlMargin           = 5;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
FaceAttribsEditor	View/FaceAttribsEditor.cpp	/^        FaceAttribsEditor::FaceAttribsEditor(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
FaceAttribsEditor	View/FaceAttribsEditor.h	/^        class FaceAttribsEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
FaceAttributeCommand	Controller/FaceAttributeCommand.cpp	/^        FaceAttributeCommand::FaceAttributeCommand(View::MapDocumentWPtr document, const Model::BrushFaceList& faces) :$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
FaceAttributeCommand	Controller/FaceAttributeCommand.h	/^        class FaceAttributeCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
FaceEdgeIndex	IO/Bsp29Parser.cpp	/^            static const size_t FaceEdgeIndex         = 0x4;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
FaceEdgeIndexList	IO/Bsp29Parser.h	/^            typedef std::vector<int> FaceEdgeIndexList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
FaceEdgeSize	IO/Bsp29Parser.cpp	/^            static const size_t FaceEdgeSize          = 0x4;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
FaceEdgesIterator	Model/FaceEdgesIterator.h	/^        struct FaceEdgesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
FaceFormat	IO/Hexen2MapWriter.h	/^            String FaceFormat;$/;"	m	language:C++	class:TrenchBroom::IO::Hexen2MapWriter
FaceFormat	IO/Quake2MapWriter.h	/^            String FaceFormat;$/;"	m	language:C++	class:TrenchBroom::IO::Quake2MapWriter
FaceFormat	IO/QuakeMapWriter.h	/^            String FaceFormat;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapWriter
FaceHandleHit	View/VertexHandleManager.cpp	/^        const Hit::HitType VertexHandleManager::FaceHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager	file:
FaceHandleHit	View/VertexHandleManager.h	/^            static const Hit::HitType FaceHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
FaceHit	View/TexturingView.cpp	/^        const Hit::HitType TexturingView::FaceHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingView	file:
FaceHit	View/TexturingView.h	/^            static const Hit::HitType FaceHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
FaceInfo	IO/Bsp29Parser.h	/^            struct FaceInfo {$/;"	s	language:C++	class:TrenchBroom::IO::Bsp29Parser
FaceInfoList	IO/Bsp29Parser.h	/^            typedef std::vector<FaceInfo> FaceInfoList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
FaceInspector	View/FaceInspector.cpp	/^        FaceInspector::FaceInspector(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
FaceInspector	View/FaceInspector.h	/^        class FaceInspector : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
FaceList	Assets/Bsp29Model.h	/^            typedef std::vector<Face> FaceList;$/;"	t	language:C++	class:TrenchBroom::Assets::Bsp29Model
FaceManager	Model/MoveBrushVertexAlgorithm.h	/^            class FaceManager {$/;"	c	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
FaceRenderer	Renderer/FaceRenderer.cpp	/^        FaceRenderer::FaceRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
FaceRenderer	Renderer/FaceRenderer.cpp	/^        FaceRenderer::FaceRenderer(Model::BrushFace::Mesh& mesh, const Color& faceColor) :$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
FaceRenderer	Renderer/FaceRenderer.cpp	/^        FaceRenderer::FaceRenderer(const FaceRenderer& other) :$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
FaceRenderer	Renderer/FaceRenderer.h	/^        class FaceRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
FaceRest	IO/Bsp29Parser.cpp	/^            static const size_t FaceRest              = 0x8;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
FaceShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig FaceShader                 = ShaderConfig("Face",                             "Face.vertsh",                 "Face.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
FaceSize	IO/Bsp29Parser.cpp	/^            static const size_t FaceSize              = 0x14;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
FaceWeightOrder	IO/QuakeMapParser.cpp	/^        QuakeMapParser::FaceWeightOrder::FaceWeightOrder(const PlaneWeightOrder& planeOrder) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::FaceWeightOrder
FaceWeightOrder	IO/QuakeMapParser.h	/^            class FaceWeightOrder {$/;"	c	language:C++	class:TrenchBroom::IO::QuakeMapParser
FacesHolder	Model/Brush.h	/^            struct FacesHolder {$/;"	s	language:C++	class:TrenchBroom::Model::BrushSnapshot
Fan	IO/Md2Parser.h	/^                    Fan,$/;"	e	language:C++	enum:TrenchBroom::IO::Md2Parser::Md2Mesh::Type
FgdParser	IO/FgdParser.cpp	/^        FgdParser::FgdParser(const String& str, const Color& defaultEntityColor) :$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
FgdParser	IO/FgdParser.cpp	/^        FgdParser::FgdParser(const char* begin, const char* end, const Color& defaultEntityColor) :$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
FgdParser	IO/FgdParser.h	/^        class FgdParser : public EntityDefinitionParser, public Parser<FgdToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
FgdToken	IO/FgdParser.h	/^        namespace FgdToken {$/;"	n	language:C++	namespace:TrenchBroom::IO
FgdTokenizer	IO/FgdParser.cpp	/^        FgdTokenizer::FgdTokenizer(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::FgdTokenizer
FgdTokenizer	IO/FgdParser.cpp	/^        FgdTokenizer::FgdTokenizer(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::FgdTokenizer
FgdTokenizer	IO/FgdParser.h	/^        class FgdTokenizer : public Tokenizer<FgdToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
FileFormatException	Exceptions.h	/^        FileFormatException() throw() {}$/;"	f	language:C++	class:TrenchBroom::FileFormatException
FileFormatException	Exceptions.h	/^        FileFormatException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::FileFormatException
FileFormatException	Exceptions.h	/^    class FileFormatException : public ExceptionStream<FileFormatException> {$/;"	c	language:C++	namespace:TrenchBroom
FileLoadPointFile	View/CommandIds.h	/^                const int FileLoadPointFile                  = Lowest +  76;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
FileMap	IO/PakFileSystem.h	/^                typedef std::map<String, MappedFile::Ptr> FileMap;$/;"	t	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
FileMenu	View/Menu.cpp	/^        const String FileMenu = "File";$/;"	m	language:C++	namespace:TrenchBroom::View	file:
FileOpenRecent	View/CommandIds.h	/^                const int FileOpenRecent                     = Lowest +  96;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
FileRecentDocuments	View/CommandIds.h	/^                const int FileRecentDocuments                = Lowest + 190;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
FileSystem	IO/FileSystem.h	/^        class FileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
FileSystemConfig	Model/GameConfig.cpp	/^        GameConfig::FileSystemConfig::FileSystemConfig(const IO::Path& i_searchPath, const String& i_packageFormat) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FileSystemConfig
FileSystemConfig	Model/GameConfig.h	/^            struct FileSystemConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
FileSystemException	Exceptions.h	/^        FileSystemException() throw() {}$/;"	f	language:C++	class:TrenchBroom::FileSystemException
FileSystemException	Exceptions.h	/^        FileSystemException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::FileSystemException
FileSystemException	Exceptions.h	/^        FileSystemException(const String& str, const PathException& e) throw() : ExceptionStream(str + " (" + e.what() + ")") {}$/;"	f	language:C++	class:TrenchBroom::FileSystemException
FileSystemException	Exceptions.h	/^    class FileSystemException : public ExceptionStream<FileSystemException> {$/;"	c	language:C++	namespace:TrenchBroom
FileSystemList	IO/GameFileSystem.h	/^            typedef std::vector<FSPtr> FileSystemList;$/;"	t	language:C++	class:TrenchBroom::IO::GameFileSystem
FileUnloadPointFile	View/CommandIds.h	/^                const int FileUnloadPointFile                = Lowest +  77;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
Filter	Renderer/BrushRenderer.h	/^            struct Filter {$/;"	s	language:C++	class:TrenchBroom::Renderer::BrushRenderer
Filter	Renderer/EntityLinkRenderer.h	/^            class Filter {$/;"	c	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
FilterEvent	TrenchBroomApp.cpp	/^        int TrenchBroomApp::FilterEvent(wxEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
FilterIterator	FilterIterator.h	/^        FilterIterator(const Iterator& cur, const Iterator& end, const Filter& filter) :$/;"	f	language:C++	class:TrenchBroom::FilterIterator
FilterIterator	FilterIterator.h	/^    class FilterIterator {$/;"	c	language:C++	namespace:TrenchBroom
FilterPtr	HitFilter.h	/^        typedef TrenchBroom::shared_ptr<HitFilter> FilterPtr;$/;"	t	language:C++	class:TrenchBroom::HitFilterChain
FindClosestFaceHit	View/ResizeBrushesTool.cpp	/^            FindClosestFaceHit(const Ray3& pickRay) :$/;"	f	language:C++	struct:TrenchBroom::View::FindClosestFaceHit
FindClosestFaceHit	View/ResizeBrushesTool.cpp	/^        struct FindClosestFaceHit {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
FindFlagByValue	Assets/PropertyDefinition.cpp	/^            FindFlagByValue(const int i_value) : value(i_value) {}$/;"	f	language:C++	struct:TrenchBroom::Assets::FindFlagByValue
FindFlagByValue	Assets/PropertyDefinition.cpp	/^        struct FindFlagByValue {$/;"	s	language:C++	namespace:TrenchBroom::Assets	file:
FindIntegerPlanePointsQuickFix	Model/SharedQuickFixes.cpp	/^        FindIntegerPlanePointsQuickFix::FindIntegerPlanePointsQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::FindIntegerPlanePointsQuickFix
FindIntegerPlanePointsQuickFix	Model/SharedQuickFixes.h	/^        class FindIntegerPlanePointsQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
FindPlanePoints	Controller/FixPlanePointsCommand.cpp	/^            FindPlanePoints(const BBox3& worldBounds) :$/;"	f	language:C++	struct:TrenchBroom::Controller::FindPlanePoints
FindPlanePoints	Controller/FixPlanePointsCommand.cpp	/^        struct FindPlanePoints {$/;"	s	language:C++	namespace:TrenchBroom::Controller	file:
FindPropertyDefinitionByName	Assets/EntityDefinition.cpp	/^            FindPropertyDefinitionByName(const String& i_name) : name(i_name) {}$/;"	f	language:C++	struct:TrenchBroom::Assets::FindPropertyDefinitionByName
FindPropertyDefinitionByName	Assets/EntityDefinition.cpp	/^        struct FindPropertyDefinitionByName {$/;"	s	language:C++	namespace:TrenchBroom::Assets	file:
FindSpawnflagsDefinition	Assets/EntityDefinition.cpp	/^        struct FindSpawnflagsDefinition {$/;"	s	language:C++	namespace:TrenchBroom::Assets	file:
FixObjectsBaseId	View/IssueBrowser.h	/^            static const int FixObjectsBaseId = 4;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
FixPlanePointsCommand	Controller/FixPlanePointsCommand.cpp	/^        FixPlanePointsCommand::FixPlanePointsCommand(View::MapDocumentWPtr document, const Action action, const Model::BrushList& brushes) :$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
FixPlanePointsCommand	Controller/FixPlanePointsCommand.h	/^        class FixPlanePointsCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
FlagChangedCommand	View/FlagChangedCommand.cpp	/^        FlagChangedCommand::FlagChangedCommand() :$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
FlagChangedCommand	View/FlagChangedCommand.h	/^        class FlagChangedCommand : public wxNotifyEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
FlagConfig	Model/GameConfig.cpp	/^        GameConfig::FlagConfig::FlagConfig(const String& i_name, const String& i_description) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FlagConfig
FlagConfig	Model/GameConfig.h	/^            struct FlagConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
FlagConfigList	Model/GameConfig.h	/^            typedef std::vector<FlagConfig> FlagConfigList;$/;"	t	language:C++	class:TrenchBroom::Model::GameConfig
FlagOp	Controller/FaceAttributeCommand.h	/^            } FlagOp;$/;"	t	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand	typeref:enum:TrenchBroom::Controller::FaceAttributeCommand::__anon11
FlagOp_None	Controller/FaceAttributeCommand.h	/^                FlagOp_None,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon11
FlagOp_Replace	Controller/FaceAttributeCommand.h	/^                FlagOp_Replace,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon11
FlagOp_Set	Controller/FaceAttributeCommand.h	/^                FlagOp_Set,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon11
FlagOp_Unset	Controller/FaceAttributeCommand.h	/^                FlagOp_Unset$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon11
FlagsConfig	Model/GameConfig.cpp	/^        GameConfig::FlagsConfig::FlagsConfig() {}$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FlagsConfig
FlagsConfig	Model/GameConfig.cpp	/^        GameConfig::FlagsConfig::FlagsConfig(const FlagConfigList& i_flags) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FlagsConfig
FlagsConfig	Model/GameConfig.h	/^            struct FlagsConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
FlagsEditor	View/FlagsEditor.cpp	/^        FlagsEditor::FlagsEditor(wxWindow* parent, const size_t numCols) :$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
FlagsEditor	View/FlagsEditor.h	/^        class FlagsEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f	language:Python
FlagsPopupEditor	View/FlagsPopupEditor.cpp	/^        FlagsPopupEditor::FlagsPopupEditor(wxWindow* parent, const size_t numCols, const wxString& buttonLabel , const bool showFlagsText) :$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
FlagsPopupEditor	View/FlagsPopupEditor.h	/^        class FlagsPopupEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
FlagsPropertyDefinition	Assets/PropertyDefinition.cpp	/^        FlagsPropertyDefinition::FlagsPropertyDefinition(const String& name, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
FlagsPropertyDefinition	Assets/PropertyDefinition.cpp	/^        FlagsPropertyDefinition::FlagsPropertyDefinition(const String& name, const String& description, const int defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
FlagsPropertyDefinition	Assets/PropertyDefinition.h	/^        class FlagsPropertyDefinition : public PropertyDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
FlagsPropertyOption	Assets/PropertyDefinition.cpp	/^        FlagsPropertyOption::FlagsPropertyOption(const int value, const String& description, const bool isDefault) :$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
FlagsPropertyOption	Assets/PropertyDefinition.h	/^        class FlagsPropertyOption {$/;"	c	language:C++	namespace:TrenchBroom::Assets
FlatAnimationCurve	View/AnimationCurve.h	/^        class FlatAnimationCurve : public AnimationCurve {$/;"	c	language:C++	namespace:TrenchBroom::View
FloatColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::FloatColor::FloatColor(const float r, const float g, const float b) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
FloatColor	View/SmartColorEditor.h	/^            class FloatColor : public Color_<float> {$/;"	c	language:C++	class:TrenchBroom::View::SmartColorEditor
FloatPointsIssue	Model/FloatPointsIssueGenerator.cpp	/^            FloatPointsIssue(Brush* brush) :$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssue
FloatPointsIssue	Model/FloatPointsIssueGenerator.cpp	/^        class FloatPointsIssue : public BrushIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
FloatPointsIssueGenerator	Model/FloatPointsIssueGenerator.h	/^        class FloatPointsIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
FloatPrecision	IO/Hexen2MapWriter.h	/^            static const int FloatPrecision = 100;$/;"	m	language:C++	class:TrenchBroom::IO::Hexen2MapWriter
FloatPrecision	IO/Quake2MapWriter.h	/^            static const int FloatPrecision = 100;$/;"	m	language:C++	class:TrenchBroom::IO::Quake2MapWriter
FloatPrecision	IO/QuakeMapWriter.h	/^            static const int FloatPrecision = 100;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapWriter
FloatPropertyDefinition	Assets/PropertyDefinition.cpp	/^        FloatPropertyDefinition::FloatPropertyDefinition(const String& name, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::FloatPropertyDefinition
FloatPropertyDefinition	Assets/PropertyDefinition.cpp	/^        FloatPropertyDefinition::FloatPropertyDefinition(const String& name, const String& description, const float defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::FloatPropertyDefinition
FloatPropertyDefinition	Assets/PropertyDefinition.h	/^        class FloatPropertyDefinition : public PropertyDefinitionWithDefaultValue<float> {$/;"	c	language:C++	namespace:TrenchBroom::Assets
FloatType	TrenchBroom.h	/^typedef double FloatType;$/;"	t	language:C++
FloatVerticesIssue	Model/FloatVerticesIssueGenerator.cpp	/^            FloatVerticesIssue(Brush* brush) :$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssue
FloatVerticesIssue	Model/FloatVerticesIssueGenerator.cpp	/^        class FloatVerticesIssue : public BrushIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
FloatVerticesIssueGenerator	Model/FloatVerticesIssueGenerator.h	/^        class FloatVerticesIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
FontCache	Renderer/FontManager.h	/^            typedef std::map<FontDescriptor, TextureFont*> FontCache;$/;"	t	language:C++	class:TrenchBroom::Renderer::FontManager
FontDescriptor	Renderer/FontDescriptor.cpp	/^        FontDescriptor::FontDescriptor(const String& name, const size_t size) :$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
FontDescriptor	Renderer/FontDescriptor.h	/^        class FontDescriptor {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
FontManager	Renderer/FontManager.cpp	/^        FontManager::FontManager() :$/;"	f	language:C++	class:TrenchBroom::Renderer::FontManager
FontManager	Renderer/FontManager.h	/^        class FontManager {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
FontTexture	Renderer/FontTexture.cpp	/^        FontTexture::FontTexture() :$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
FontTexture	Renderer/FontTexture.cpp	/^        FontTexture::FontTexture(const FontTexture& other) :$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
FontTexture	Renderer/FontTexture.cpp	/^        FontTexture::FontTexture(const size_t width, const size_t height) :$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
FontTexture	Renderer/FontTexture.h	/^        class FontTexture {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Format	IO/ImageLoader.h	/^            enum Format {$/;"	g	language:C++	class:TrenchBroom::IO::ImageLoader
Frame	Assets/Md2Model.cpp	/^        Md2Model::Frame::Frame(Mesh::TriangleSeries& triangleFans, Mesh::TriangleSeries& triangleStrips) {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
Frame	Assets/Md2Model.h	/^            class Frame {$/;"	c	language:C++	class:TrenchBroom::Assets::Md2Model
FrameList	Assets/Md2Model.h	/^            typedef std::vector<Frame*> FrameList;$/;"	t	language:C++	class:TrenchBroom::Assets::Md2Model
FrameList	View/FrameManager.h	/^        typedef std::vector<MapFrame*> FrameList;$/;"	t	language:C++	namespace:TrenchBroom::View
FrameManager	View/FrameManager.cpp	/^        FrameManager::FrameManager(const bool singleFrame) :$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
FrameManager	View/FrameManager.h	/^        class FrameManager {$/;"	c	language:C++	namespace:TrenchBroom::View
FrameMenuSelector	View/MapFrame.cpp	/^            FrameMenuSelector(const MapView* mapView, const MapDocumentSPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::FrameMenuSelector
FrameMenuSelector	View/MapFrame.cpp	/^        class FrameMenuSelector : public TrenchBroom::View::MultiMenuSelector {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
FrameNameLength	IO/Md2Parser.h	/^            static const size_t FrameNameLength = 16;$/;"	m	language:C++	namespace:TrenchBroom::IO::Md2Layout
Front	View/Clipper.h	/^                Front,$/;"	e	language:C++	enum:TrenchBroom::View::Clipper::ClipSide
Function	View/RecentDocuments.h	/^            typedef void (EventHandler::*Function)(wxCommandEvent&);$/;"	t	language:C++	class:TrenchBroom::View::RecentDocuments
GLAttribs	View/GLContextHolder.h	/^            typedef std::vector<int> GLAttribs;$/;"	t	language:C++	class:TrenchBroom::View::GLContextHolder
GLContextHolder	View/GLContextHolder.cpp	/^        GLContextHolder::GLContextHolder(wxGLCanvas* canvas, wxGLContext* sharedContext) :$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
GLContextHolder	View/GLContextHolder.h	/^        class GLContextHolder {$/;"	c	language:C++	namespace:TrenchBroom::View
Game	Model/Game.h	/^        class Game {$/;"	c	language:C++	namespace:TrenchBroom::Model
GameConfig	Model/GameConfig.cpp	/^        GameConfig::GameConfig() :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
GameConfig	Model/GameConfig.cpp	/^        GameConfig::GameConfig(const String& name, const IO::Path& path, const IO::Path& icon, const StringSet& fileFormats, const FileSystemConfig& fileSystemConfig, const TextureConfig& textureConfig, const EntityConfig& entityConfig, const FaceAttribsConfig& faceAttribsConfig) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
GameConfig	Model/GameConfig.h	/^        class GameConfig {$/;"	c	language:C++	namespace:TrenchBroom::Model
GameConfigParser	IO/GameConfigParser.cpp	/^        GameConfigParser::GameConfigParser(const String& str, const Path& path) :$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
GameConfigParser	IO/GameConfigParser.cpp	/^        GameConfigParser::GameConfigParser(const char* begin, const char* end, const Path& path) :$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
GameConfigParser	IO/GameConfigParser.h	/^        class GameConfigParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
GameException	Exceptions.h	/^        GameException() throw() {}$/;"	f	language:C++	class:TrenchBroom::GameException
GameException	Exceptions.h	/^        GameException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::GameException
GameException	Exceptions.h	/^    class GameException : public ExceptionStream<GameException> {$/;"	c	language:C++	namespace:TrenchBroom
GameFactory	Model/GameFactory.cpp	/^        GameFactory::GameFactory() {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
GameFactory	Model/GameFactory.h	/^        class GameFactory {$/;"	c	language:C++	namespace:TrenchBroom::Model
GameFileSystem	IO/GameFileSystem.cpp	/^        GameFileSystem::GameFileSystem(const String& pakExtension, const Path& gamePath, const Path& searchPath, const Path::List& additionalSearchPaths) {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
GameFileSystem	IO/GameFileSystem.h	/^        class GameFileSystem : public FileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
GameImpl	Model/GameImpl.cpp	/^        GameImpl::GameImpl(const GameConfig& config, const IO::Path& gamePath) :$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
GameImpl	Model/GameImpl.h	/^        class GameImpl : public Game {$/;"	c	language:C++	namespace:TrenchBroom::Model
GameListBox	View/GameListBox.cpp	/^        GameListBox::GameListBox(wxWindow* parent, const long style) :$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
GameListBox	View/GameListBox.h	/^        class GameListBox : public ImageListBox {$/;"	c	language:C++	namespace:TrenchBroom::View
GamePathMap	Model/GameFactory.h	/^            typedef std::map<String, Preference<IO::Path> > GamePathMap;$/;"	t	language:C++	class:TrenchBroom::Model::GameFactory
GamePtr	Model/ModelTypes.h	/^        typedef TrenchBroom::shared_ptr<Game> GamePtr;$/;"	t	language:C++	namespace:TrenchBroom::Model
GameSelectionCommand	View/GameSelectionCommand.cpp	/^        GameSelectionCommand::GameSelectionCommand() :$/;"	f	language:C++	class:TrenchBroom::View::GameSelectionCommand
GameSelectionCommand	View/GameSelectionCommand.cpp	/^        GameSelectionCommand::GameSelectionCommand(wxEventType type, const String& gameName) :$/;"	f	language:C++	class:TrenchBroom::View::GameSelectionCommand
GameSelectionCommand	View/GameSelectionCommand.h	/^        class GameSelectionCommand : public wxCommandEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
GamesPreferencePane	View/GamesPreferencePane.cpp	/^        GamesPreferencePane::GamesPreferencePane(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
GamesPreferencePane	View/GamesPreferencePane.h	/^        class GamesPreferencePane : public PreferencePane {$/;"	c	language:C++	namespace:TrenchBroom::View
GeneralPreferencePane	View/GeneralPreferencePane.cpp	/^        GeneralPreferencePane::GeneralPreferencePane(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
GeneralPreferencePane	View/GeneralPreferencePane.h	/^        class GeneralPreferencePane : public PreferencePane {$/;"	c	language:C++	namespace:TrenchBroom::View
GeneralPreferencePaneLayout	View/GeneralPreferencePane.cpp	/^        namespace GeneralPreferencePaneLayout {$/;"	n	language:C++	namespace:TrenchBroom::View	file:
GeneratorList	Model/IssueManager.h	/^            typedef std::vector<IssueGenerator*> GeneratorList;$/;"	t	language:C++	class:TrenchBroom::Model::IssueManager
GenericDropSource	View/GenericDropSource.cpp	/^        GenericDropSource::GenericDropSource(wxDataObject& data, wxWindow* window) :$/;"	f	language:C++	class:TrenchBroom::View::GenericDropSource
GenericDropSource	View/GenericDropSource.h	/^        class GenericDropSource : public wxDropSource {$/;"	c	language:C++	namespace:TrenchBroom::View
GeometryException	Exceptions.h	/^        GeometryException() throw() {}$/;"	f	language:C++	class:TrenchBroom::GeometryException
GeometryException	Exceptions.h	/^        GeometryException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::GeometryException
GeometryException	Exceptions.h	/^    class GeometryException : public ExceptionStream<GeometryException> {$/;"	c	language:C++	namespace:TrenchBroom
GetAttr	View/EntityPropertyGridTable.cpp	/^        wxGridCellAttr* EntityPropertyGridTable::GetAttr(const int row, const int col, const wxGridCellAttr::wxAttrKind kind) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetAttr	View/KeyboardPreferencePane.cpp	/^        wxGridCellAttr* KeyboardGridTable::GetAttr(int row, int col, wxGridCellAttr::wxAttrKind kind) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
GetChildren	View/IssueBrowser.cpp	/^            unsigned int GetChildren(const wxDataViewItem& item, wxDataViewItemArray& children) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
GetChildren	View/MapTreeView.cpp	/^            unsigned int GetChildren(const wxDataViewItem& item, wxDataViewItemArray& children) const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
GetColLabelValue	View/EntityPropertyGridTable.cpp	/^        wxString EntityPropertyGridTable::GetColLabelValue(const int col) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetColLabelValue	View/KeyboardPreferencePane.cpp	/^        wxString KeyboardGridTable::GetColLabelValue(int col) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
GetColumnCount	View/IssueBrowser.cpp	/^            unsigned int GetColumnCount() const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
GetColumnCount	View/MapTreeView.cpp	/^            unsigned int GetColumnCount() const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
GetColumnType	View/IssueBrowser.cpp	/^            wxString GetColumnType(unsigned int col) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
GetColumnType	View/MapTreeView.cpp	/^            wxString GetColumnType(unsigned int col) const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f	language:Python
GetNumberCols	View/EntityPropertyGridTable.cpp	/^        int EntityPropertyGridTable::GetNumberCols() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetNumberCols	View/KeyboardPreferencePane.cpp	/^        int KeyboardGridTable::GetNumberCols() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
GetNumberPropertyRows	View/EntityPropertyGridTable.cpp	/^        int EntityPropertyGridTable::GetNumberPropertyRows() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetNumberRows	View/EntityPropertyGridTable.cpp	/^        int EntityPropertyGridTable::GetNumberRows() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetNumberRows	View/KeyboardPreferencePane.cpp	/^        int KeyboardGridTable::GetNumberRows() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
GetParent	View/IssueBrowser.cpp	/^            wxDataViewItem GetParent(const wxDataViewItem& item) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
GetParent	View/MapTreeView.cpp	/^            wxDataViewItem GetParent(const wxDataViewItem& item) const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
GetPopupWindow	View/PopupButton.cpp	/^        wxWindow* PopupButton::GetPopupWindow() const {$/;"	f	language:C++	class:TrenchBroom::View::PopupButton
GetValue	View/EntityPropertyGridTable.cpp	/^        wxString EntityPropertyGridTable::GetValue(const int row, const int col) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
GetValue	View/IssueBrowser.cpp	/^            void GetValue(wxVariant& result, const wxDataViewItem& item, unsigned int col) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
GetValue	View/KeyboardPreferencePane.cpp	/^        wxString KeyboardGridCellEditor::GetValue() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
GetValue	View/KeyboardPreferencePane.cpp	/^        wxString KeyboardGridTable::GetValue(int row, int col) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
GetValue	View/MapTreeView.cpp	/^            void GetValue(wxVariant& result, const wxDataViewItem& item, unsigned int col) const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
GetValue	View/SpinControl.cpp	/^double SpinControl::GetValue() const {$/;"	f	language:C++	class:SpinControl
GetValue	View/SpinControl.cpp	/^double SpinControlEvent::GetValue() const {$/;"	f	language:C++	class:SpinControlEvent
Grid	View/Grid.cpp	/^        Grid::Grid(const size_t size) :$/;"	f	language:C++	class:TrenchBroom::View::Grid
Grid	View/Grid.h	/^        class Grid {$/;"	c	language:C++	namespace:TrenchBroom::View
GridSearchCursor	Model/PlanePointFinder.cpp	/^            GridSearchCursor(const Plane3& plane, const FloatType frequency) :$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor
GridSearchCursor	Model/PlanePointFinder.cpp	/^        class GridSearchCursor {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
Group	Assets/TextureManager.h	/^            typedef std::pair<TextureCollection*, TextureList> Group;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager
Group	View/CellLayout.h	/^            typedef LayoutGroup<CellType, GroupType> Group;$/;"	t	language:C++	class:TrenchBroom::View::CellLayout
GroupList	Assets/TextureManager.h	/^            typedef std::vector<Group> GroupList;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager
GroupList	View/CellLayout.h	/^            typedef std::vector<Group> GroupList;$/;"	t	language:C++	class:TrenchBroom::View::CellLayout
GrowthFactor	Renderer/Vbo.cpp	/^        const float Vbo::GrowthFactor = 1.5f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo	file:
GrowthFactor	Renderer/Vbo.h	/^            static const float GrowthFactor;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
HANDLE	IO/MappedFile.h	/^typedef void *HANDLE;$/;"	t	language:C++
HalfWidth	Renderer/MoveIndicatorRenderer.cpp	/^        const float MoveIndicatorRenderer::HalfWidth = 1.5f;$/;"	m	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer	file:
HalfWidth	Renderer/MoveIndicatorRenderer.h	/^            static const float HalfWidth;$/;"	m	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
HandleHit	View/ClipTool.cpp	/^        const Hit::HitType ClipTool::HandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::ClipTool	file:
HandleHit	View/ClipTool.h	/^            static const Hit::HitType HandleHit;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
HandleHit	View/RotateObjectsTool.cpp	/^        const Hit::HitType RotateObjectsTool::HandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool	file:
HandleHit	View/RotateObjectsTool.h	/^            static const Hit::HitType HandleHit;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
HandleLength	View/TexturingViewRotateTool.cpp	/^        const float TexturingViewRotateTool::HandleLength = 32.0f;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool	file:
HandleLength	View/TexturingViewRotateTool.h	/^            static const float HandleLength;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
HandleRadius	View/TexturingViewRotateTool.cpp	/^        const FloatType TexturingViewRotateTool::HandleRadius = 5.0;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool	file:
HandleRadius	View/TexturingViewRotateTool.h	/^            static const FloatType HandleRadius;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
HandleReturn	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::HandleReturn(wxKeyEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
HandleShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig HandleShader               = ShaderConfig("Handle",                           "Handle.vertsh",               "Handle.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
HeaderAddress	IO/PakFileSystem.cpp	/^            static const size_t HeaderAddress     = 0x0;$/;"	m	language:C++	namespace:TrenchBroom::IO::PakLayout	file:
HeaderMagic	IO/PakFileSystem.cpp	/^            static const String HeaderMagic       = "PACK";$/;"	m	language:C++	namespace:TrenchBroom::IO::PakLayout	file:
HeaderMagicLength	IO/PakFileSystem.cpp	/^            static const size_t HeaderMagicLength = 0x4;$/;"	m	language:C++	namespace:TrenchBroom::IO::PakLayout	file:
HeaderNumSkins	IO/MdlParser.cpp	/^            static const unsigned int HeaderNumSkins    = 0x30;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
HeaderScale	IO/MdlParser.cpp	/^            static const unsigned int HeaderScale       = 0x8;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
Height	Renderer/MoveIndicatorRenderer.cpp	/^        const float MoveIndicatorRenderer::Height = 5.0f;$/;"	m	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer	file:
Height	Renderer/MoveIndicatorRenderer.h	/^            static const float Height;$/;"	m	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
HelpShowHelp	View/CommandIds.h	/^                const int HelpShowHelp                       = Lowest +  83;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
Hexen2	Model/ModelTypes.h	/^            static const Type Hexen2  = 1 << 4;$/;"	m	language:C++	namespace:TrenchBroom::Model::MapFormat
Hexen2MapWriter	IO/Hexen2MapWriter.cpp	/^        Hexen2MapWriter::Hexen2MapWriter() {$/;"	f	language:C++	class:TrenchBroom::IO::Hexen2MapWriter
Hexen2MapWriter	IO/Hexen2MapWriter.h	/^        class Hexen2MapWriter : public MapWriter {$/;"	c	language:C++	namespace:TrenchBroom::IO
HideIssuesCommandId	View/IssueBrowser.h	/^            static const int HideIssuesCommandId = 3;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
Highest	View/CommandIds.h	/^                const int Highest                            = Lowest + 200;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
HighestBrushEntityItem	View/CommandIds.h	/^                static const int HighestBrushEntityItem             = LowestBrushEntityItem + 999;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
HighestPointEntityItem	View/CommandIds.h	/^                static const int HighestPointEntityItem             = LowestPointEntityItem + 999;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
HighlightBoxMargin	View/ViewConstants.h	/^            static const int HighlightBoxMargin                 = 5;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
Hit	Hit.h	/^        Hit(const HitType type, const FloatType distance, const Vec3& hitPoint, T target, const FloatType error = 0.0) :$/;"	f	language:C++	class:TrenchBroom::Hit
Hit	Hit.h	/^    class Hit {$/;"	c	language:C++	namespace:TrenchBroom
Hit	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::Hit::Hit() :$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
Hit	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::Hit::Hit(const HitArea area, const FloatType distance, const Vec3& point) :$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
Hit	View/RotateObjectsHandle.h	/^            class Hit {$/;"	c	language:C++	class:TrenchBroom::View::RotateObjectsHandle
HitArea	View/RotateObjectsHandle.h	/^            } HitArea;$/;"	t	language:C++	class:TrenchBroom::View::RotateObjectsHandle	typeref:enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitArea_Center	View/RotateObjectsHandle.h	/^                HitArea_Center,$/;"	e	language:C++	enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitArea_None	View/RotateObjectsHandle.h	/^                HitArea_None,$/;"	e	language:C++	enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitArea_XAxis	View/RotateObjectsHandle.h	/^                HitArea_XAxis,$/;"	e	language:C++	enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitArea_YAxis	View/RotateObjectsHandle.h	/^                HitArea_YAxis,$/;"	e	language:C++	enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitArea_ZAxis	View/RotateObjectsHandle.h	/^                HitArea_ZAxis$/;"	e	language:C++	enum:TrenchBroom::View::RotateObjectsHandle::__anon35
HitFilter	HitFilter.h	/^    class HitFilter {$/;"	c	language:C++	namespace:TrenchBroom
HitFilterChain	HitFilter.h	/^        HitFilterChain(const F& filter, const N& next) :$/;"	f	language:C++	class:TrenchBroom::HitFilterChain
HitFilterChain	HitFilter.h	/^    class HitFilterChain : public HitFilter {$/;"	c	language:C++	namespace:TrenchBroom
HitType	Hit.h	/^        typedef unsigned long HitType;$/;"	t	language:C++	class:TrenchBroom::Hit
Hits	Hit.h	/^    class Hits {$/;"	c	language:C++	namespace:TrenchBroom
Holder	Holder.h	/^    Holder(const T& object) :$/;"	f	language:C++	class:Holder
Holder	Holder.h	/^class Holder : public BaseHolder {$/;"	c	language:C++
Holder	Renderer/VertexArray.h	/^            Holder(const size_t vertexCount) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
Holder	Renderer/VertexArray.h	/^        class Holder : public BaseHolder {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
IO	Assets/EntityDefinitionManager.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Bsp29Parser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Bsp29Parser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/ConfigParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/ConfigParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/DefParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/DefParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/DiskFileSystem.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/DiskFileSystem.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/EntityDefinitionClassInfo.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/EntityDefinitionClassInfo.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/EntityDefinitionParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/EntityDefinitionParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/EntityModelParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/EntityModelParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/FgdParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/FgdParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/FileSystem.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/FileSystem.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/GameConfigParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/GameConfigParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/GameFileSystem.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/GameFileSystem.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Hexen2MapWriter.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Hexen2MapWriter.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/IOUtils.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/IOUtils.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/ImageLoader.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/ImageLoader.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/ImageLoaderImpl.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/ImageLoaderImpl.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/MapParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/MapParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/MapWriter.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/MapWriter.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/MappedFile.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/MappedFile.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Md2Parser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Md2Parser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/MdlParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/MdlParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/PakFileSystem.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/PakFileSystem.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Parser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Path.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Path.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Quake2MapWriter.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Quake2MapWriter.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/QuakeMapParser.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/QuakeMapParser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/QuakeMapWriter.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/QuakeMapWriter.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/ResourceUtils.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/ResourceUtils.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/SystemPaths.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/SystemPaths.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/TextureLoader.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/TextureLoader.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Token.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Tokenizer.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/Wad.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/Wad.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/WadTextureLoader.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/WadTextureLoader.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	IO/WalTextureLoader.cpp	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom	file:
IO	IO/WalTextureLoader.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Model/Game.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Model/GameFactory.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Model/PointFile.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	PreferenceManager.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Renderer/MapRenderer.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Renderer/MiniMapRenderer.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	Renderer/ShaderManager.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/Autosaver.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/ChooseGameDialog.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/EntityBrowser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/FrameManager.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/ModEditor.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/TextureBrowser.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/TextureCollectionEditor.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
IO	View/TexturingView.h	/^    namespace IO {$/;"	n	language:C++	namespace:TrenchBroom
Ident	IO/Md2Parser.h	/^            static const int Ident = (('2'<<24) + ('P'<<16) + ('D'<<8) + 'I');$/;"	m	language:C++	namespace:TrenchBroom::IO::Md2Layout
Identifier	IO/ConfigParser.h	/^            static const Type Identifier    = 1 <<  1; \/\/ string$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
Identity	Mat.h	/^    static const Mat<T,R,C> Identity;$/;"	m	language:C++	class:Mat
Identity	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Identity = Mat<T,R,C>().setIdentity();$/;"	m	language:C++	class:Mat
ImageListBox	View/ImageListBox.cpp	/^        ImageListBox::ImageListBox(wxWindow* parent, const wxSize& imageSize, const wxString& emptyText, const long style) :$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
ImageListBox	View/ImageListBox.h	/^        class ImageListBox : public wxVListBox {$/;"	c	language:C++	namespace:TrenchBroom::View
ImageLoader	IO/ImageLoader.cpp	/^        ImageLoader::ImageLoader(const Format format, const Path& path) :$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
ImageLoader	IO/ImageLoader.cpp	/^        ImageLoader::ImageLoader(const Format format, const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
ImageLoader	IO/ImageLoader.h	/^        class ImageLoader {$/;"	c	language:C++	namespace:TrenchBroom::IO
ImageLoaderImpl	IO/ImageLoaderImpl.cpp	/^        ImageLoaderImpl::ImageLoaderImpl(const ImageLoader::Format format, const Path& path) :$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
ImageLoaderImpl	IO/ImageLoaderImpl.cpp	/^        ImageLoaderImpl::ImageLoaderImpl(const ImageLoader::Format format, const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
ImageLoaderImpl	IO/ImageLoaderImpl.h	/^        class ImageLoaderImpl {$/;"	c	language:C++	namespace:TrenchBroom::IO
ImagePanel	View/ImagePanel.cpp	/^        ImagePanel::ImagePanel(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::ImagePanel
ImagePanel	View/ImagePanel.h	/^        class ImagePanel : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
InRange	View/SpinControl.cpp	/^bool SpinControl::InRange(double value) {$/;"	f	language:C++	class:SpinControl
Inactive	Renderer/Vbo.h	/^            static const Type Inactive  = 0;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::VboState
IndexArray	Renderer/IndexedVertexList.h	/^            typedef std::vector<GLint> IndexArray;$/;"	t	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
IndexArray	Renderer/VertexArray.h	/^            typedef std::vector<GLint> IndexArray;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexArray
IndexedVertexList	Renderer/IndexedVertexList.h	/^            IndexedVertexList() :$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
IndexedVertexList	Renderer/IndexedVertexList.h	/^        class IndexedVertexList {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Info	View/GameListBox.h	/^            struct Info {$/;"	s	language:C++	class:TrenchBroom::View::GameListBox
InfoList	View/GameListBox.h	/^            typedef std::vector<Info> InfoList;$/;"	t	language:C++	class:TrenchBroom::View::GameListBox
InfoPanel	View/InfoPanel.cpp	/^        InfoPanel::InfoPanel(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::InfoPanel
InfoPanel	View/InfoPanel.h	/^        class InfoPanel : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
InitFreeImage	IO/ImageLoaderImpl.cpp	/^        ImageLoaderImpl::InitFreeImage::InitFreeImage() {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl::InitFreeImage
InitFreeImage	IO/ImageLoaderImpl.h	/^            class InitFreeImage {$/;"	c	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
InitialBufferSize	IO/WadTextureLoader.h	/^            static const size_t InitialBufferSize = 3 * 512 * 512;$/;"	m	language:C++	class:TrenchBroom::IO::WadTextureLoader
InnerIterator	Model/BrushEdgesIterator.h	/^            typedef BrushEdgeList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
InnerIterator	Model/BrushFacesIterator.h	/^            typedef BrushFaceList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
InnerIterator	Model/EntityBrushesIterator.h	/^            typedef BrushList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
InnerIterator	Model/EntityFacesIterator.h	/^            typedef BrushFacesIterator::OuterIterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
InnerIterator	Model/FaceEdgesIterator.h	/^            typedef BrushEdgeList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
InnerIterator	Model/MapBrushesIterator.h	/^            typedef BrushList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
InnerIterator	Model/MapFacesIterator.h	/^            typedef BrushFacesIterator::OuterIterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapFacesIterator
InnerIterator	Model/MapObjectsIterator.h	/^            typedef BrushList::const_iterator InnerIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
InnerIterator	NestedHierarchyIterator.h	/^        typedef typename InnerAdapter::InnerIterator InnerIterator;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
InnerIterator	NestedIterator.h	/^        typedef typename InnerAdapter::InnerIterator InnerIterator;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
InputState	View/InputState.cpp	/^        InputState::InputState() :$/;"	f	language:C++	class:TrenchBroom::View::InputState
InputState	View/InputState.cpp	/^        InputState::InputState(const int mouseX, const int mouseY) :$/;"	f	language:C++	class:TrenchBroom::View::InputState
InputState	View/InputState.h	/^        class InputState {$/;"	c	language:C++	namespace:TrenchBroom::View
InsertRows	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::InsertRows(const size_t pos, const size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
InsertRows	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::InsertRows(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
Inspector	View/Inspector.cpp	/^        Inspector::Inspector(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::Inspector
Inspector	View/Inspector.h	/^        class Inspector : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
InspectorPage	View/ViewTypes.h	/^        } InspectorPage;$/;"	t	language:C++	namespace:TrenchBroom::View	typeref:enum:TrenchBroom::View::__anon40
InspectorPage_Entity	View/ViewTypes.h	/^            InspectorPage_Entity = 1,$/;"	e	language:C++	enum:TrenchBroom::View::__anon40
InspectorPage_Face	View/ViewTypes.h	/^            InspectorPage_Face = 2$/;"	e	language:C++	enum:TrenchBroom::View::__anon40
InspectorPage_Map	View/ViewTypes.h	/^            InspectorPage_Map = 0,$/;"	e	language:C++	enum:TrenchBroom::View::__anon40
InstancedPointHandleShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig InstancedPointHandleShader = ShaderConfig("Instanced Point Handle",           "InstancedPointHandle.vertsh", "Handle.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
Integer	IO/DefParser.h	/^            static const Type Integer         = 1 <<  0; \/\/ integer number$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Integer	IO/FgdParser.h	/^            static const Type Integer           = 1 <<  0; \/\/ integer number$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
Integer	IO/QuakeMapParser.h	/^            static const Type Integer       = 1 <<  0; \/\/ integer number$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
IntegerPropertyDefinition	Assets/PropertyDefinition.cpp	/^        IntegerPropertyDefinition::IntegerPropertyDefinition(const String& name, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::IntegerPropertyDefinition
IntegerPropertyDefinition	Assets/PropertyDefinition.cpp	/^        IntegerPropertyDefinition::IntegerPropertyDefinition(const String& name, const String& description, const int defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::IntegerPropertyDefinition
IntegerPropertyDefinition	Assets/PropertyDefinition.h	/^        class IntegerPropertyDefinition : public PropertyDefinitionWithDefaultValue<int> {$/;"	c	language:C++	namespace:TrenchBroom::Assets
InternalBuffer	ByteBuffer.h	/^    typedef std::vector<T> InternalBuffer;$/;"	t	language:C++	class:Buffer
InternalBufferPtr	ByteBuffer.h	/^    typedef TrenchBroom::shared_ptr<InternalBuffer> InternalBufferPtr;$/;"	t	language:C++	class:Buffer
IntersectBrushGeometryWithFace	Model/IntersectBrushGeometryWithFace.cpp	/^        IntersectBrushGeometryWithFace::IntersectBrushGeometryWithFace(BrushGeometry& geometry, BrushFace* face) :$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
IntersectBrushGeometryWithFace	Model/IntersectBrushGeometryWithFace.h	/^        class IntersectBrushGeometryWithFace : public BrushAlgorithm<AddFaceResult::Code> {$/;"	c	language:C++	namespace:TrenchBroom::Model
InverseDotOrder	Vec.h	/^        InverseDotOrder(const Vec<T,S>& dir) :$/;"	f	language:C++	class:Vec::InverseDotOrder
InverseDotOrder	Vec.h	/^    class InverseDotOrder {$/;"	c	language:C++	class:Vec
IsContainer	View/IssueBrowser.cpp	/^            bool IsContainer(const wxDataViewItem& item) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
IsContainer	View/MapTreeView.cpp	/^            bool IsContainer(const wxDataViewItem& item) const {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f	language:Python
IsPointer	TemplateUtils.h	/^    struct IsPointer {$/;"	s	language:C++	namespace:TemplateUtils
IsPointer	TemplateUtils.h	/^    struct IsPointer<T*> {$/;"	s	language:C++	namespace:TemplateUtils
IsSpin	View/SpinControl.cpp	/^bool SpinControlEvent::IsSpin() const {$/;"	f	language:C++	class:SpinControlEvent
Issue	Model/Issue.cpp	/^        Issue::Issue(const IssueType type) :$/;"	f	language:C++	class:TrenchBroom::Model::Issue
Issue	Model/Issue.h	/^        class Issue {$/;"	c	language:C++	namespace:TrenchBroom::Model
IssueBrowser	View/IssueBrowser.cpp	/^        IssueBrowser::IssueBrowser(wxWindow* parent, wxSimplebook* extraBook, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
IssueBrowser	View/IssueBrowser.h	/^        class IssueBrowser : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
IssueBrowserDataModel	View/IssueBrowser.cpp	/^            IssueBrowserDataModel(MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
IssueBrowserDataModel	View/IssueBrowser.cpp	/^        class IssueBrowserDataModel : public wxDataViewModel {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
IssueGenerator	Model/IssueGenerator.h	/^        class IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
IssueManager	Model/IssueManager.cpp	/^        IssueManager::IssueManager() :$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
IssueManager	Model/IssueManager.h	/^        class IssueManager {$/;"	c	language:C++	namespace:TrenchBroom::Model
IssueMap	Model/IssueManager.h	/^            typedef std::map<Object*, IssuePair> IssueMap;$/;"	t	language:C++	class:TrenchBroom::Model::IssueManager
IssuePair	Model/IssueManager.cpp	/^        IssueManager::IssuePair::IssuePair() :$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager::IssuePair
IssuePair	Model/IssueManager.cpp	/^        IssueManager::IssuePair::IssuePair(Issue* i_first, Issue* i_last) :$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager::IssuePair
IssuePair	Model/IssueManager.h	/^            struct IssuePair {$/;"	s	language:C++	class:TrenchBroom::Model::IssueManager
IssueType	Model/Issue.h	/^        typedef size_t IssueType;$/;"	t	language:C++	namespace:TrenchBroom::Model
Keep	Model/BrushEdge.h	/^                Keep,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushEdge::Mark
Key	Renderer/EntityRenderer.h	/^            typedef Model::Entity* Key;$/;"	t	language:C++	class:TrenchBroom::Renderer::EntityRenderer
KeySet	Renderer/Mesh.h	/^            typedef std::set<Key> KeySet;$/;"	t	language:C++	class:TrenchBroom::Renderer::Mesh
KeyboardGridCellEditor	View/KeyboardPreferencePane.cpp	/^        KeyboardGridCellEditor::KeyboardGridCellEditor() :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
KeyboardGridCellEditor	View/KeyboardPreferencePane.cpp	/^        KeyboardGridCellEditor::KeyboardGridCellEditor(wxWindow* parent, wxWindowID windowId, wxEvtHandler* evtHandler, int modifierKey1, int modifierKey2, int modifierKey3, int key) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
KeyboardGridCellEditor	View/KeyboardPreferencePane.h	/^        class KeyboardGridCellEditor : public wxGridCellEditor {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardGridTable	View/KeyboardPreferencePane.cpp	/^        KeyboardGridTable::KeyboardGridTable() :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
KeyboardGridTable	View/KeyboardPreferencePane.h	/^        class KeyboardGridTable : public wxGridTableBase {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardPreferencePane	View/KeyboardPreferencePane.cpp	/^        KeyboardPreferencePane::KeyboardPreferencePane(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
KeyboardPreferencePane	View/KeyboardPreferencePane.h	/^        class KeyboardPreferencePane : public PreferencePane {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const String& string) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const int commandId, const int context, const String& text) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const int commandId, const int key, const int context, const String& text) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const int commandId, const int modifierKey1, const int key, const int context, const String& text) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const int commandId, const int modifierKey1, const int modifierKey2, const int key, const int context, const String& text) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.cpp	/^        KeyboardShortcut::KeyboardShortcut(const int commandId, const int modifierKey1, const int modifierKey2, const int modifierKey3, const int key, const int context, const String& text) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
KeyboardShortcut	View/KeyboardShortcut.h	/^        class KeyboardShortcut {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardShortcutEditor	View/KeyboardShortcutEditor.cpp	/^        KeyboardShortcutEditor::KeyboardShortcutEditor(wxWindow* parent, wxWindowID windowId, const wxPoint& pos, const wxSize& size, long style, const wxValidator& validator, const wxString& name) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
KeyboardShortcutEditor	View/KeyboardShortcutEditor.h	/^        class KeyboardShortcutEditor : public wxControl {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardShortcutEntry	View/KeyboardPreferencePane.cpp	/^        KeyboardShortcutEntry::KeyboardShortcutEntry() :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
KeyboardShortcutEntry	View/KeyboardPreferencePane.h	/^        class KeyboardShortcutEntry {$/;"	c	language:C++	namespace:TrenchBroom::View
KeyboardShortcutEvent	View/KeyboardShortcutEvent.cpp	/^        KeyboardShortcutEvent::KeyboardShortcutEvent() :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
KeyboardShortcutEvent	View/KeyboardShortcutEvent.cpp	/^        KeyboardShortcutEvent::KeyboardShortcutEvent(int modifierKey1, int modifierKey2, int modifierKey3, int key) :$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
KeyboardShortcutEvent	View/KeyboardShortcutEvent.h	/^        class KeyboardShortcutEvent : public wxEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
Killtarget	Model/EntityProperties.cpp	/^            const PropertyKey Killtarget        = "killtarget";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
Layout	View/CellView.h	/^            typedef CellLayout<CellData, GroupData> Layout;$/;"	t	language:C++	class:TrenchBroom::View::CellView
LayoutBounds	View/CellLayout.h	/^            LayoutBounds() :$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
LayoutBounds	View/CellLayout.h	/^            LayoutBounds(const float x, const float y, const float width, const float height) :$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
LayoutBounds	View/CellLayout.h	/^        class LayoutBounds {$/;"	c	language:C++	namespace:TrenchBroom::View
LayoutCell	View/CellLayout.h	/^            LayoutCell(const CellType item,$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
LayoutCell	View/CellLayout.h	/^        class LayoutCell {$/;"	c	language:C++	namespace:TrenchBroom::View
LayoutConstants	View/ViewConstants.h	/^        namespace LayoutConstants {$/;"	n	language:C++	namespace:TrenchBroom::View
LayoutGroup	View/CellLayout.h	/^            LayoutGroup(GroupType item,$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
LayoutGroup	View/CellLayout.h	/^            LayoutGroup(const float x, const float y,$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
LayoutGroup	View/CellLayout.h	/^        class LayoutGroup {$/;"	c	language:C++	namespace:TrenchBroom::View
LayoutRow	View/CellLayout.h	/^            LayoutRow(const float x, const float y,$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
LayoutRow	View/CellLayout.h	/^        class LayoutRow {$/;"	c	language:C++	namespace:TrenchBroom::View
Left	Renderer/TextRenderer.h	/^            static const Type Left      = 1 << 2;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Alignment
Less	MathUtils.h	/^        Less() {}$/;"	f	language:C++	struct:Math::Less
Less	MathUtils.h	/^    struct Less {$/;"	s	language:C++	namespace:Math
LexicographicOrder	Vec.h	/^    class LexicographicOrder {$/;"	c	language:C++	class:Vec
Line	Line.h	/^    Line() :$/;"	f	language:C++	class:Line
Line	Line.h	/^    Line(const Line<U,S>& other) :$/;"	f	language:C++	class:Line
Line	Line.h	/^    Line(const Vec<T,S>& i_point, const Vec<T,S>& i_direction) :$/;"	f	language:C++	class:Line
Line	Line.h	/^class Line {$/;"	c	language:C++
Line3	TrenchBroom.h	/^typedef Line<FloatType, 3> Line3;$/;"	t	language:C++
Line3d	Line.h	/^typedef Line<double,3> Line3d;$/;"	t	language:C++
Line3f	Line.h	/^typedef Line<float,3> Line3f;$/;"	t	language:C++
LineDistance	Ray.h	/^    struct LineDistance {$/;"	s	language:C++	class:Ray
List	Assets/PropertyDefinition.h	/^            typedef std::vector<ChoicePropertyOption> List;$/;"	t	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
List	Assets/PropertyDefinition.h	/^            typedef std::vector<FlagsPropertyOption> List;$/;"	t	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
List	ByteBuffer.h	/^    typedef std::vector<Buffer<T> > List;$/;"	t	language:C++	class:Buffer
List	Controller/Command.h	/^            typedef std::vector<Ptr> List;$/;"	t	language:C++	class:TrenchBroom::Controller::Command
List	Edge.h	/^        typedef std::vector<Edge<T,S> > List;$/;"	t	language:C++	struct:TrenchBroom::Edge
List	Hit.h	/^        typedef std::list<Hit> List;$/;"	t	language:C++	class:TrenchBroom::Hits
List	IO/MappedFile.h	/^            typedef std::vector<Ptr> List;$/;"	t	language:C++	class:TrenchBroom::IO::MappedFile
List	IO/Path.h	/^            typedef std::vector<Path> List;$/;"	t	language:C++	class:TrenchBroom::IO::Path
List	Line.h	/^    typedef std::vector<Line<T,S> > List;$/;"	t	language:C++	class:Line
List	Mat.h	/^    typedef std::vector<Mat<T,R,C> > List;$/;"	t	language:C++	class:Mat
List	Model/EntityProperties.h	/^            typedef std::vector<EntityProperty> List;$/;"	t	language:C++	struct:TrenchBroom::Model::EntityProperty
List	Model/FaceAdjacencyGraph.h	/^                typedef std::vector<Node*> List;$/;"	t	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
List	Model/FaceAdjacencyGraph.h	/^                typedef std::vector<Ptr> List;$/;"	t	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
List	Model/Octree.h	/^            typedef std::vector<T> List;$/;"	t	language:C++	class:TrenchBroom::Model::Octree
List	Model/Octree.h	/^            typedef std::vector<T> List;$/;"	t	language:C++	class:TrenchBroom::Model::OctreeNode
List	Model/QuickFix.h	/^            typedef std::vector<const QuickFix*> List;$/;"	t	language:C++	class:TrenchBroom::Model::QuickFix
List	Notifier.h	/^            typedef std::list<Observer*> List;$/;"	t	language:C++	class:TrenchBroom::Notifier0::Observer
List	Notifier.h	/^            typedef std::list<Observer*> List;$/;"	t	language:C++	class:TrenchBroom::Notifier1::Observer
List	Notifier.h	/^            typedef std::list<Observer*> List;$/;"	t	language:C++	class:TrenchBroom::Notifier2::Observer
List	Notifier.h	/^            typedef std::list<Observer*> List;$/;"	t	language:C++	class:TrenchBroom::Notifier3::Observer
List	Polygon.h	/^        typedef std::vector<Polygon<T,S> > List;$/;"	t	language:C++	struct:TrenchBroom::Polygon
List	Renderer/Mesh.h	/^            typedef std::vector<MeshRenderData<Key> > List;$/;"	t	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
List	Renderer/OutlineTracer.h	/^                typedef std::list<Position> List;$/;"	t	language:C++	struct:TrenchBroom::Renderer::OutlineTracer::Position
List	Renderer/Vertex.h	/^            typedef std::vector<Vertex1<A1> > List;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex1
List	Renderer/Vertex.h	/^            typedef std::vector<Vertex2<A1, A2> > List;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex2
List	Renderer/Vertex.h	/^            typedef std::vector<Vertex3<A1, A2, A3> > List;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex3
List	Renderer/Vertex.h	/^            typedef std::vector<Vertex4<A1, A2, A3, A4> > List;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex4
List	Renderer/Vertex.h	/^            typedef std::vector<Vertex5<A1, A2, A3, A4, A5> > List;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex5
List	Vec.h	/^    typedef std::vector<Vec<T,S> > List;$/;"	t	language:C++	class:Vec
List	View/Animation.h	/^            typedef std::vector<Ptr> List;$/;"	t	language:C++	class:TrenchBroom::View::Animation
List	View/EntityPropertyGridTable.h	/^                typedef std::vector<DefaultRow> List;$/;"	t	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
List	View/EntityPropertyGridTable.h	/^                typedef std::vector<PropertyRow> List;$/;"	t	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
List	View/Menu.h	/^            typedef std::vector<Ptr> List;$/;"	t	language:C++	class:TrenchBroom::View::MenuItem
ListUtils	CollectionUtils.h	/^namespace ListUtils {$/;"	n	language:C++
LogLevel	Logger.h	/^        } LogLevel;$/;"	t	language:C++	class:TrenchBroom::Logger	typeref:enum:TrenchBroom::Logger::__anon16
LogLevel_Debug	Logger.h	/^            LogLevel_Debug,$/;"	e	language:C++	enum:TrenchBroom::Logger::__anon16
LogLevel_Error	Logger.h	/^            LogLevel_Error$/;"	e	language:C++	enum:TrenchBroom::Logger::__anon16
LogLevel_Info	Logger.h	/^            LogLevel_Info,$/;"	e	language:C++	enum:TrenchBroom::Logger::__anon16
LogLevel_Warn	Logger.h	/^            LogLevel_Warn,$/;"	e	language:C++	enum:TrenchBroom::Logger::__anon16
Logger	Logger.h	/^    class Logger {$/;"	c	language:C++	namespace:TrenchBroom
Lowest	View/CommandIds.h	/^                const int Lowest                             = wxID_HIGHEST +  1;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
LowestBrushEntityItem	View/CommandIds.h	/^                static const int LowestBrushEntityItem              = HighestPointEntityItem + 1;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
LowestPointEntityItem	View/CommandIds.h	/^                static const int LowestPointEntityItem              = wxID_HIGHEST + 2000;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
MBLeft	View/InputState.h	/^            static const MouseButtonState MBLeft      = 1 << 0;$/;"	m	language:C++	namespace:TrenchBroom::View::MouseButtons
MBMiddle	View/InputState.h	/^            static const MouseButtonState MBMiddle    = 1 << 2;$/;"	m	language:C++	namespace:TrenchBroom::View::MouseButtons
MBNone	View/InputState.h	/^            static const MouseButtonState MBNone      = 0;$/;"	m	language:C++	namespace:TrenchBroom::View::MouseButtons
MBRight	View/InputState.h	/^            static const MouseButtonState MBRight     = 1 << 1;$/;"	m	language:C++	namespace:TrenchBroom::View::MouseButtons
MKAlt	View/InputState.h	/^            static const ModifierKeyState MKAlt       = 1 << 2;$/;"	m	language:C++	namespace:TrenchBroom::View::ModifierKeys
MKCtrlCmd	View/InputState.h	/^            static const ModifierKeyState MKCtrlCmd   = 1 << 1; \/\/ Cmd on Mac, Ctrl on other systems$/;"	m	language:C++	namespace:TrenchBroom::View::ModifierKeys
MKNone	View/InputState.h	/^            static const ModifierKeyState MKNone      = 0;$/;"	m	language:C++	namespace:TrenchBroom::View::ModifierKeys
MKShift	View/InputState.h	/^            static const ModifierKeyState MKShift     = 1 << 0;$/;"	m	language:C++	namespace:TrenchBroom::View::ModifierKeys
MacModifierOrder	View/KeyboardShortcut.h	/^            class MacModifierOrder {$/;"	c	language:C++	class:TrenchBroom::View::KeyboardShortcut
MacNewFile	TrenchBroomApp.cpp	/^        void TrenchBroomApp::MacNewFile() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
MacOpenFiles	TrenchBroomApp.cpp	/^        void TrenchBroomApp::MacOpenFiles(const wxArrayString& filenames) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
MakeCastIterator	CastIterator.h	/^    struct MakeCastIterator {$/;"	s	language:C++	namespace:TrenchBroom
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f	language:Python
Mangle	Model/EntityProperties.cpp	/^            const PropertyKey Mangle            = "mangle";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
Map	Model/Map.cpp	/^        Map::Map(const MapFormat::Type format) :$/;"	f	language:C++	class:TrenchBroom::Model::Map
Map	Model/Map.h	/^        class Map {$/;"	c	language:C++	namespace:TrenchBroom::Model
Map	Vec.h	/^    typedef std::map<Vec<T,S>, Vec<T,S>, LexicographicOrder> Map;$/;"	t	language:C++	class:Vec
MapBrushesIterator	Model/MapBrushesIterator.h	/^        struct MapBrushesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
MapDocument	View/MapDocument.cpp	/^        MapDocument::MapDocument() :$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
MapDocument	View/MapDocument.h	/^        class MapDocument : public CachingLogger {$/;"	c	language:C++	namespace:TrenchBroom::View
MapDocumentSPtr	View/ViewTypes.h	/^        typedef TrenchBroom::shared_ptr<MapDocument> MapDocumentSPtr;$/;"	t	language:C++	namespace:TrenchBroom::View
MapDocumentWPtr	View/ViewTypes.h	/^        typedef TrenchBroom::weak_ptr<MapDocument> MapDocumentWPtr;$/;"	t	language:C++	namespace:TrenchBroom::View
MapEntitiesIterator	Model/MapEntitiesIterator.h	/^        namespace MapEntitiesIterator {$/;"	n	language:C++	namespace:TrenchBroom::Model
MapFacesIterator	Model/MapFacesIterator.h	/^        struct MapFacesIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
MapFormat	Model/ModelTypes.h	/^        namespace MapFormat {$/;"	n	language:C++	namespace:TrenchBroom::Model
MapFrame	View/MapFrame.cpp	/^        MapFrame::MapFrame() :$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
MapFrame	View/MapFrame.cpp	/^        MapFrame::MapFrame(FrameManager* frameManager, MapDocumentSPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
MapFrame	View/MapFrame.h	/^        class MapFrame : public wxFrame {$/;"	c	language:C++	namespace:TrenchBroom::View
MapInspector	View/MapInspector.cpp	/^        MapInspector::MapInspector(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
MapInspector	View/MapInspector.h	/^        class MapInspector : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
MapObjectsIterator	Model/MapObjectsIterator.h	/^        struct MapObjectsIterator {$/;"	s	language:C++	namespace:TrenchBroom::Model
MapParser	IO/MapParser.h	/^        class MapParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
MapRenderer	Renderer/MapRenderer.cpp	/^        MapRenderer::MapRenderer(View::MapDocumentWPtr document, FontManager& fontManager) :$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
MapRenderer	Renderer/MapRenderer.h	/^        class MapRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
MapTreeView	View/MapTreeView.cpp	/^        MapTreeView::MapTreeView(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
MapTreeView	View/MapTreeView.h	/^        class MapTreeView : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
MapTreeViewDataModel	View/MapTreeView.cpp	/^            MapTreeViewDataModel(MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
MapTreeViewDataModel	View/MapTreeView.cpp	/^        class MapTreeViewDataModel : public wxDataViewModel {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
MapUtils	CollectionUtils.h	/^namespace MapUtils {$/;"	n	language:C++
MapView	View/MapView.cpp	/^        MapView::MapView(wxWindow* parent, Logger* logger, View::MapDocumentWPtr document, ControllerWPtr controller, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::MapView
MapView	View/MapView.h	/^        class MapView : public RenderView, public ToolBoxHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
MapWriter	IO/MapWriter.h	/^        class MapWriter {$/;"	c	language:C++	namespace:TrenchBroom::IO
MapWriterPtr	Model/GameImpl.h	/^            typedef TrenchBroom::shared_ptr<IO::MapWriter> MapWriterPtr;$/;"	t	language:C++	class:TrenchBroom::Model::GameImpl
Mapped	Renderer/Vbo.h	/^            static const Type Mapped    = 2;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::VboState
MappedFile	IO/MappedFile.cpp	/^        MappedFile::MappedFile() :$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
MappedFile	IO/MappedFile.h	/^        class MappedFile {$/;"	c	language:C++	namespace:TrenchBroom::IO
MappedFileView	IO/MappedFile.cpp	/^        MappedFileView::MappedFileView(const char* begin, const char* end) {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFileView
MappedFileView	IO/MappedFile.h	/^        class MappedFileView : public MappedFile {$/;"	c	language:C++	namespace:TrenchBroom::IO
Mark	Model/BrushEdge.h	/^            enum Mark {$/;"	g	language:C++	class:TrenchBroom::Model::BrushEdge
Mark	Model/BrushFaceGeometry.h	/^            } Mark;$/;"	t	language:C++	class:TrenchBroom::Model::BrushFaceGeometry	typeref:enum:TrenchBroom::Model::BrushFaceGeometry::__anon18
Mark	Model/BrushVertex.h	/^            } Mark;$/;"	t	language:C++	class:TrenchBroom::Model::BrushVertex	typeref:enum:TrenchBroom::Model::BrushVertex::__anon20
Mark_Drop	Model/BrushFaceGeometry.h	/^                Mark_Drop,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushFaceGeometry::__anon18
Mark_Drop	Model/BrushVertex.h	/^                Mark_Drop,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushVertex::__anon20
Mark_Keep	Model/BrushFaceGeometry.h	/^                Mark_Keep,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushFaceGeometry::__anon18
Mark_Keep	Model/BrushVertex.h	/^                Mark_Keep,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushVertex::__anon20
Mark_New	Model/BrushVertex.h	/^                Mark_New$/;"	e	language:C++	enum:TrenchBroom::Model::BrushVertex::__anon20
Mark_Split	Model/BrushFaceGeometry.h	/^                Mark_Split$/;"	e	language:C++	enum:TrenchBroom::Model::BrushFaceGeometry::__anon18
Mark_Undecided	Model/BrushVertex.h	/^                Mark_Undecided,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushVertex::__anon20
Mat	Mat.h	/^    Mat<T,R,C>() {$/;"	f	language:C++	class:Mat
Mat	Mat.h	/^    Mat<T,R,C>(const Mat<U,R,C>& other) {$/;"	f	language:C++	class:Mat
Mat	Mat.h	/^    Mat<T,R,C>(const T v11, const T v12, const T v13, const T v14,$/;"	f	language:C++	class:Mat
Mat	Mat.h	/^    Mat<T,R,C>(const T v11, const T v12, const T v13,$/;"	f	language:C++	class:Mat
Mat	Mat.h	/^class Mat {$/;"	c	language:C++
Mat2x2	TrenchBroom.h	/^typedef Mat<FloatType, 2, 2> Mat2x2;$/;"	t	language:C++
Mat2x2d	Mat.h	/^typedef Mat<double,2,2> Mat2x2d;$/;"	t	language:C++
Mat2x2f	Mat.h	/^typedef Mat<float,2,2> Mat2x2f;$/;"	t	language:C++
Mat3x3	TrenchBroom.h	/^typedef Mat<FloatType, 3, 3> Mat3x3;$/;"	t	language:C++
Mat3x3d	Mat.h	/^typedef Mat<double,3,3> Mat3x3d;$/;"	t	language:C++
Mat3x3f	Mat.h	/^typedef Mat<float,3,3> Mat3x3f;$/;"	t	language:C++
Mat4x4	TrenchBroom.h	/^typedef Mat<FloatType, 4, 4> Mat4x4;$/;"	t	language:C++
Mat4x4d	Mat.h	/^typedef Mat<double,4,4> Mat4x4d;$/;"	t	language:C++
Mat4x4f	Mat.h	/^typedef Mat<float,4,4> Mat4x4f;$/;"	t	language:C++
MatchAll	Model/ModelUtils.h	/^        struct MatchAll {$/;"	s	language:C++	namespace:TrenchBroom::Model
MatchAnySelectedFace	Model/Selection.cpp	/^        struct MatchAnySelectedFace  {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
MatchObjectByFilePosition	Model/ModelUtils.cpp	/^        MatchObjectByFilePosition::MatchObjectByFilePosition(const size_t position) :$/;"	f	language:C++	class:TrenchBroom::Model::MatchObjectByFilePosition
MatchObjectByFilePosition	Model/ModelUtils.h	/^        struct MatchObjectByFilePosition {$/;"	s	language:C++	namespace:TrenchBroom::Model
MatchObjectByType	Model/ModelUtils.cpp	/^        MatchObjectByType::MatchObjectByType(const Object::Type type) :$/;"	f	language:C++	class:TrenchBroom::Model::MatchObjectByType
MatchObjectByType	Model/ModelUtils.h	/^        struct MatchObjectByType {$/;"	s	language:C++	namespace:TrenchBroom::Model
MatchPartiallySelected	Model/Selection.cpp	/^        struct MatchPartiallySelected  {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
MatchSelected	Model/Selection.cpp	/^        struct MatchSelected  {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
MatchUnselected	Model/Selection.cpp	/^        struct MatchUnselected {$/;"	s	language:C++	namespace:TrenchBroom::Model	file:
MatcherEditorPair	View/SmartPropertyEditorManager.h	/^            typedef std::pair<MatcherPtr, EditorPtr> MatcherEditorPair;$/;"	t	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
MatcherPtr	View/SmartPropertyEditorManager.h	/^            typedef TrenchBroom::shared_ptr<SmartPropertyEditorMatcher> MatcherPtr;$/;"	t	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
Math	MathUtils.h	/^namespace Math {$/;"	n	language:C++
Math	TrenchBroom.h	/^namespace Math {$/;"	n	language:C++
MatrixDeterminant	Mat.h	/^struct MatrixDeterminant {$/;"	s	language:C++
MatrixDeterminant	Mat.h	/^struct MatrixDeterminant<T,1> {$/;"	s	language:C++
MatrixDeterminant	Mat.h	/^struct MatrixDeterminant<T,2> {$/;"	s	language:C++
MatrixDeterminant	Mat.h	/^struct MatrixDeterminant<T,3> {$/;"	s	language:C++
MaxDistance	Controller/RebuildBrushGeometryCommand.cpp	/^        const FloatType RebuildBrushGeometryCommand::MaxDistance = 0.01;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand	file:
MaxDistance	Controller/RebuildBrushGeometryCommand.h	/^            static const FloatType MaxDistance;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
MaxPickDistance	View/TexturingViewScaleOriginTool.cpp	/^        const FloatType TexturingViewScaleOriginTool::MaxPickDistance = 5.0;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool	file:
MaxPickDistance	View/TexturingViewScaleOriginTool.h	/^            static const FloatType MaxPickDistance;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
MaxPickDistance	View/TexturingViewScaleTool.cpp	/^        const FloatType TexturingViewScaleTool::MaxPickDistance = 5.0;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool	file:
MaxPickDistance	View/TexturingViewScaleTool.h	/^            static const FloatType MaxPickDistance;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
MaxSize	View/Grid.h	/^            static const size_t MaxSize = 8;$/;"	m	language:C++	class:TrenchBroom::View::Grid
MaxTextureSize	IO/Wad.cpp	/^            static const size_t MaxTextureSize        = 512;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
MaxVertexDistance	View/VertexTool.cpp	/^        const FloatType VertexTool::MaxVertexDistance = 0.25;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool	file:
MaxVertexDistance	View/VertexTool.h	/^            static const FloatType MaxVertexDistance;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
Md2Frame	IO/Md2Parser.cpp	/^        Md2Parser::Md2Frame::Md2Frame(const size_t vertexCount) :$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser::Md2Frame
Md2Frame	IO/Md2Parser.h	/^            struct Md2Frame {$/;"	s	language:C++	class:TrenchBroom::IO::Md2Parser
Md2FrameList	IO/Md2Parser.h	/^            typedef std::vector<Md2Frame> Md2FrameList;$/;"	t	language:C++	class:TrenchBroom::IO::Md2Parser
Md2Layout	IO/Md2Parser.h	/^        namespace Md2Layout {$/;"	n	language:C++	namespace:TrenchBroom::IO
Md2Mesh	IO/Md2Parser.cpp	/^        Md2Parser::Md2Mesh::Md2Mesh(const int i_vertexCount) :$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser::Md2Mesh
Md2Mesh	IO/Md2Parser.h	/^            struct Md2Mesh {$/;"	s	language:C++	class:TrenchBroom::IO::Md2Parser
Md2MeshList	IO/Md2Parser.h	/^            typedef std::vector<Md2Mesh> Md2MeshList;$/;"	t	language:C++	class:TrenchBroom::IO::Md2Parser
Md2MeshVertex	IO/Md2Parser.h	/^            struct Md2MeshVertex {$/;"	s	language:C++	class:TrenchBroom::IO::Md2Parser
Md2MeshVertexList	IO/Md2Parser.h	/^            typedef std::vector<Md2MeshVertex> Md2MeshVertexList;$/;"	t	language:C++	class:TrenchBroom::IO::Md2Parser
Md2Model	Assets/Md2Model.cpp	/^        Md2Model::Md2Model(const String& name, const TextureList& skins, const FrameList& frames) :$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model
Md2Model	Assets/Md2Model.h	/^        class Md2Model : public EntityModel {$/;"	c	language:C++	namespace:TrenchBroom::Assets
Md2Parser	IO/Md2Parser.cpp	/^        Md2Parser::Md2Parser(const String& name, const char* begin, const char* end, const Assets::Palette& palette, const GameFileSystem& fs) :$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
Md2Parser	IO/Md2Parser.h	/^        class Md2Parser : public EntityModelParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
Md2Skin	IO/Md2Parser.h	/^            struct Md2Skin {$/;"	s	language:C++	class:TrenchBroom::IO::Md2Parser
Md2SkinList	IO/Md2Parser.h	/^            typedef std::vector<Md2Skin> Md2SkinList;$/;"	t	language:C++	class:TrenchBroom::IO::Md2Parser
Md2Vertex	IO/Md2Parser.h	/^            struct Md2Vertex {$/;"	s	language:C++	class:TrenchBroom::IO::Md2Parser
Md2VertexList	IO/Md2Parser.h	/^            typedef std::vector<Md2Vertex> Md2VertexList;$/;"	t	language:C++	class:TrenchBroom::IO::Md2Parser
MdlBaseFrame	Assets/MdlModel.h	/^        class MdlBaseFrame {$/;"	c	language:C++	namespace:TrenchBroom::Assets
MdlFrame	Assets/MdlModel.cpp	/^        MdlFrame::MdlFrame(const String& name, const MdlFrameVertexList& triangles, const BBox3f& bounds) :$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrame
MdlFrame	Assets/MdlModel.h	/^        class MdlFrame : public MdlBaseFrame {$/;"	c	language:C++	namespace:TrenchBroom::Assets
MdlFrameGroup	Assets/MdlModel.h	/^        class MdlFrameGroup : public MdlBaseFrame {$/;"	c	language:C++	namespace:TrenchBroom::Assets
MdlFrameList	Assets/MdlModel.h	/^            typedef std::vector<MdlBaseFrame*> MdlFrameList;$/;"	t	language:C++	class:TrenchBroom::Assets::MdlModel
MdlFrameVertex	Assets/MdlModel.h	/^        typedef Renderer::VertexSpecs::P3T2::Vertex MdlFrameVertex;$/;"	t	language:C++	namespace:TrenchBroom::Assets
MdlFrameVertexList	Assets/MdlModel.h	/^        typedef MdlFrameVertex::List MdlFrameVertexList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
MdlLayout	IO/MdlParser.cpp	/^        namespace MdlLayout {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
MdlModel	Assets/MdlModel.cpp	/^        MdlModel::MdlModel(const String& name) :$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
MdlModel	Assets/MdlModel.h	/^        class MdlModel : public EntityModel {$/;"	c	language:C++	namespace:TrenchBroom::Assets
MdlParser	IO/MdlParser.cpp	/^        MdlParser::MdlParser(const String& name, const char* begin, const char* end, const Assets::Palette& palette) :$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
MdlParser	IO/MdlParser.h	/^        class MdlParser : public EntityModelParser {$/;"	c	language:C++	namespace:TrenchBroom::IO
MdlSkin	Assets/MdlModel.cpp	/^        MdlSkin::MdlSkin(Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlSkin
MdlSkin	Assets/MdlModel.cpp	/^        MdlSkin::MdlSkin(const TextureList& textures, const MdlTimeList times) :$/;"	f	language:C++	class:TrenchBroom::Assets::MdlSkin
MdlSkin	Assets/MdlModel.h	/^        class MdlSkin {$/;"	c	language:C++	namespace:TrenchBroom::Assets
MdlSkinList	Assets/MdlModel.h	/^            typedef std::vector<MdlSkin*> MdlSkinList;$/;"	t	language:C++	class:TrenchBroom::Assets::MdlModel
MdlSkinTriangle	IO/MdlParser.h	/^            struct MdlSkinTriangle {$/;"	s	language:C++	class:TrenchBroom::IO::MdlParser
MdlSkinTriangleList	IO/MdlParser.h	/^            typedef std::vector<MdlSkinTriangle> MdlSkinTriangleList;$/;"	t	language:C++	class:TrenchBroom::IO::MdlParser
MdlSkinVertex	IO/MdlParser.h	/^            struct MdlSkinVertex {$/;"	s	language:C++	class:TrenchBroom::IO::MdlParser
MdlSkinVertexList	IO/MdlParser.h	/^            typedef std::vector<MdlSkinVertex> MdlSkinVertexList;$/;"	t	language:C++	class:TrenchBroom::IO::MdlParser
MdlTimeList	Assets/MdlModel.h	/^        typedef std::vector<float> MdlTimeList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
Menu	View/CommandIds.h	/^            namespace Menu {$/;"	n	language:C++	namespace:TrenchBroom::View::CommandIds
Menu	View/Menu.cpp	/^        Menu::Menu(const String& text, MenuItemParent* parent, const int menuId) :$/;"	f	language:C++	class:TrenchBroom::View::Menu
Menu	View/Menu.h	/^        class Menu : public MenuItemParent {$/;"	c	language:C++	namespace:TrenchBroom::View
MenuItem	View/Menu.cpp	/^        MenuItem::MenuItem(const Type type, MenuItemParent* parent) :$/;"	f	language:C++	class:TrenchBroom::View::MenuItem
MenuItem	View/Menu.h	/^        class MenuItem {$/;"	c	language:C++	namespace:TrenchBroom::View
MenuItemParent	View/Menu.cpp	/^        MenuItemParent::MenuItemParent(Type type, const String& text, MenuItemParent* parent, int menuId) :$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
MenuItemParent	View/Menu.h	/^        class MenuItemParent : public TextMenuItem {$/;"	c	language:C++	namespace:TrenchBroom::View
MenuKeyboardShortcutEntry	View/KeyboardPreferencePane.cpp	/^        MenuKeyboardShortcutEntry::MenuKeyboardShortcutEntry(const ShortcutMenuItem& item) :$/;"	f	language:C++	class:TrenchBroom::View::MenuKeyboardShortcutEntry
MenuKeyboardShortcutEntry	View/KeyboardPreferencePane.h	/^        class MenuKeyboardShortcutEntry : public KeyboardShortcutEntry {$/;"	c	language:C++	namespace:TrenchBroom::View
MenuList	View/RecentDocuments.h	/^            typedef std::vector<wxMenu*> MenuList;$/;"	t	language:C++	class:TrenchBroom::View::RecentDocuments
MenuMap	View/Menu.h	/^            typedef std::map<String, Ptr> MenuMap;$/;"	t	language:C++	class:TrenchBroom::View::Menu
Mesh	Assets/Md2Model.h	/^            typedef Renderer::Mesh<const Assets::Texture*, VertexSpec> Mesh;$/;"	t	language:C++	class:TrenchBroom::Assets::Md2Model
Mesh	Model/BrushFace.h	/^            typedef Renderer::Mesh<const Assets::Texture*, VertexSpec> Mesh;$/;"	t	language:C++	class:TrenchBroom::Model::BrushFace
Mesh	Renderer/Mesh.h	/^            Mesh() :$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
Mesh	Renderer/Mesh.h	/^        class Mesh {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
MeshRenderData	Renderer/Mesh.h	/^            MeshRenderData(const Key& i_key) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
MeshRenderData	Renderer/Mesh.h	/^        struct MeshRenderData {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
MeshRenderer	Renderer/MeshRenderer.cpp	/^        MeshRenderer::MeshRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
MeshRenderer	Renderer/MeshRenderer.h	/^            MeshRenderer(Mesh<const Assets::Texture*, VertexSpec>& mesh) :$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
MeshRenderer	Renderer/MeshRenderer.h	/^        class MeshRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Message	View/CachingLogger.cpp	/^        CachingLogger::Message::Message(const Logger::LogLevel i_level, const wxString& i_str) :$/;"	f	language:C++	class:TrenchBroom::View::CachingLogger::Message
Message	View/CachingLogger.h	/^            struct Message {$/;"	s	language:C++	class:TrenchBroom::View::CachingLogger
MessageList	View/CachingLogger.h	/^            typedef std::vector<Message> MessageList;$/;"	t	language:C++	class:TrenchBroom::View::CachingLogger
MidPointCache	Renderer/RenderUtils.cpp	/^            typedef std::map<SphereBuilder::MidPointIndex, size_t> MidPointCache;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::SphereBuilder	file:
MidPointIndex	Renderer/RenderUtils.cpp	/^                MidPointIndex(size_t index1, size_t index2) :$/;"	f	language:C++	class:TrenchBroom::Renderer::SphereBuilder::MidPointIndex
MidPointIndex	Renderer/RenderUtils.cpp	/^            class MidPointIndex {$/;"	c	language:C++	namespace:TrenchBroom::Renderer::SphereBuilder	file:
MinPreferenceLabelWidth	View/ViewConstants.h	/^            static const int MinPreferenceLabelWidth            = 100;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
MiniMap	View/MiniMap.cpp	/^        MiniMap::MiniMap(wxWindow* parent, GLContextHolder::Ptr sharedContext, View::MapDocumentWPtr document, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::MiniMap
MiniMap	View/MiniMap.h	/^        class MiniMap : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
MiniMapBaseView	View/MiniMapBaseView.cpp	/^        MiniMapBaseView::MiniMapBaseView(wxWindow* parent, GLContextHolder::Ptr sharedContext, View::MapDocumentWPtr document, Renderer::MiniMapRenderer& renderer, Renderer::Camera& camera3D) :$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
MiniMapBaseView	View/MiniMapBaseView.h	/^        class MiniMapBaseView : public RenderView {$/;"	c	language:C++	namespace:TrenchBroom::View
MiniMapEdgeShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig MiniMapEdgeShader          = ShaderConfig("MiniMap Edges",                    "MiniMapEdge.vertsh",          "MiniMapEdge.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
MiniMapRenderer	Renderer/MiniMapRenderer.cpp	/^        MiniMapRenderer::MiniMapRenderer(View::MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
MiniMapRenderer	Renderer/MiniMapRenderer.h	/^        class MiniMapRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
MiniMapXYView	View/MiniMapXYView.cpp	/^        MiniMapXYView::MiniMapXYView(wxWindow* parent, GLContextHolder::Ptr sharedContext, View::MapDocumentWPtr document, Renderer::MiniMapRenderer& renderer, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
MiniMapXYView	View/MiniMapXYView.h	/^        class MiniMapXYView : public MiniMapBaseView {$/;"	c	language:C++	namespace:TrenchBroom::View
MiniMapZView	View/MiniMapZView.cpp	/^        MiniMapZView::MiniMapZView(wxWindow* parent, GLContextHolder::Ptr sharedContext, View::MapDocumentWPtr document, Renderer::MiniMapRenderer& renderer, Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
MiniMapZView	View/MiniMapZView.h	/^        class MiniMapZView : public MiniMapBaseView {$/;"	c	language:C++	namespace:TrenchBroom::View
MinimumLabelWidth	View/GeneralPreferencePane.cpp	/^            static const int MinimumLabelWidth = 100;$/;"	m	language:C++	namespace:TrenchBroom::View::GeneralPreferencePaneLayout	file:
MipData	IO/Wad.cpp	/^        MipData::MipData(const char* i_begin, const char* i_end) :$/;"	f	language:C++	class:TrenchBroom::IO::MipData
MipData	IO/Wad.h	/^        struct MipData {$/;"	s	language:C++	namespace:TrenchBroom::IO
MipSize	IO/Wad.cpp	/^        MipSize::MipSize(const size_t i_width, const size_t i_height) :$/;"	f	language:C++	class:TrenchBroom::IO::MipSize
MipSize	IO/Wad.h	/^        struct MipSize {$/;"	s	language:C++	namespace:TrenchBroom::IO
MirX	Mat.h	/^    static const Mat<T,R,C> MirX;$/;"	m	language:C++	class:Mat
MirX	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::MirX        = Mat<T,R,C>(-static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
MirY	Mat.h	/^    static const Mat<T,R,C> MirY;$/;"	m	language:C++	class:Mat
MirY	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::MirY        = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
MirZ	Mat.h	/^    static const Mat<T,R,C> MirZ;$/;"	m	language:C++	class:Mat
MirZ	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::MirZ        = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
MissingEntityClassnameIssue	Model/MissingEntityClassnameIssueGenerator.cpp	/^            MissingEntityClassnameIssue(Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssue
MissingEntityClassnameIssue	Model/MissingEntityClassnameIssueGenerator.cpp	/^        class MissingEntityClassnameIssue : public EntityIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
MissingEntityClassnameIssueGenerator	Model/MissingEntityClassnameIssueGenerator.h	/^        class MissingEntityClassnameIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
MissingEntityDefinitionIssue	Model/MissingEntityDefinitionIssueGenerator.cpp	/^            MissingEntityDefinitionIssue(Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssue
MissingEntityDefinitionIssue	Model/MissingEntityDefinitionIssueGenerator.cpp	/^        class MissingEntityDefinitionIssue : public EntityIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
MissingEntityDefinitionIssueGenerator	Model/MissingEntityDefinitionIssueGenerator.h	/^        class MissingEntityDefinitionIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
MixedBrushContentsIssue	Model/MixedBrushContentsIssueGenerator.cpp	/^            MixedBrushContentsIssue(Brush* brush, const GameConfig::FlagsConfig& flagsConfig) :$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssue
MixedBrushContentsIssue	Model/MixedBrushContentsIssueGenerator.cpp	/^        class MixedBrushContentsIssue : public BrushIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
MixedBrushContentsIssueGenerator	Model/MixedBrushContentsIssueGenerator.cpp	/^        MixedBrushContentsIssueGenerator::MixedBrushContentsIssueGenerator(const GameConfig::FlagsConfig& flagsConfig) :$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssueGenerator
MixedBrushContentsIssueGenerator	Model/MixedBrushContentsIssueGenerator.h	/^        class MixedBrushContentsIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
MixedBrushContentsQuickFix	Model/MixedBrushContentsIssueGenerator.cpp	/^            MixedBrushContentsQuickFix(const int contentFlags, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsQuickFix
MixedBrushContentsQuickFix	Model/MixedBrushContentsIssueGenerator.cpp	/^        class MixedBrushContentsQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
ModEditor	View/ModEditor.cpp	/^        ModEditor::ModEditor(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
ModEditor	View/ModEditor.h	/^        class ModEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
Mode	Model/TexCoordSystemHelper.h	/^            typedef char Mode;$/;"	t	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
Mode	View/VertexTool.h	/^            } Mode;$/;"	t	language:C++	class:TrenchBroom::View::VertexTool	typeref:enum:TrenchBroom::View::VertexTool::__anon38
Mode_Move	View/VertexTool.h	/^                Mode_Move,$/;"	e	language:C++	enum:TrenchBroom::View::VertexTool::__anon38
Mode_Snap	View/VertexTool.h	/^                Mode_Snap$/;"	e	language:C++	enum:TrenchBroom::View::VertexTool::__anon38
Mode_Split	View/VertexTool.h	/^                Mode_Split,$/;"	e	language:C++	enum:TrenchBroom::View::VertexTool::__anon38
Model	Controller/NewDocumentCommand.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Controller/OpenDocumentCommand.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Controller/SelectionCommand.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Brush.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Brush.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushEdge.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/BrushEdge.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushEdgesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushFace.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/BrushFace.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushFaceGeometry.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/BrushFaceGeometry.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushFacesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushGeometry.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/BrushGeometry.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushGeometryTypes.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/BrushVertex.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/BrushVertex.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EmptyBrushEntityIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/EmptyBrushEntityIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Entity.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Entity.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityBrushesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityDefinitionFileSpec.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/EntityDefinitionFileSpec.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityFacesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityLinkIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/EntityLinkIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityProperties.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/EntityProperties.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/EntityPropertyIndex.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/EntityPropertyIndex.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/FaceAdjacencyGraph.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/FaceAdjacencyGraph.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/FaceEdgesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/FloatPointsIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/FloatPointsIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/FloatVerticesIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/FloatVerticesIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Game.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Game.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/GameConfig.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/GameConfig.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/GameFactory.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/GameFactory.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/GameImpl.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/GameImpl.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/HitAdapter.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/HitAdapter.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/IntersectBrushGeometryWithFace.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/IntersectBrushGeometryWithFace.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Issue.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Issue.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/IssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/IssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/IssueManager.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/IssueManager.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Map.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Map.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MapBrushesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MapEntitiesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MapFacesIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MapObjectsIterator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MissingEntityClassnameIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MissingEntityClassnameIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MissingEntityDefinitionIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MissingEntityDefinitionIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MixedBrushContentsIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MixedBrushContentsIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ModelFactory.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ModelFactory.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ModelFilter.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ModelFilter.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ModelTypes.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ModelTypes.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ModelUtils.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ModelUtils.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MoveBrushEdgesAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MoveBrushEdgesAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MoveBrushFacesAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MoveBrushFacesAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MoveBrushVertexAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/MoveBrushVerticesAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/MoveBrushVerticesAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Object.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Object.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Octree.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ParallelTexCoordSystem.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ParallelTexCoordSystem.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/ParaxialTexCoordSystem.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/ParaxialTexCoordSystem.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Pickable.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Picker.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Picker.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/PlanePointFinder.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/PlanePointFinder.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/PointEntityWithBrushesIssueGenerator.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/PointEntityWithBrushesIssueGenerator.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/PointFile.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/PointFile.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/QuakeEntityRotationPolicy.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/QuakeEntityRotationPolicy.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/QuickFix.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/QuickFix.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Selection.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Selection.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/SelectionResult.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/SelectionResult.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/SharedQuickFixes.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/SharedQuickFixes.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/SnapBrushVerticesAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/SnapBrushVerticesAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/Snapshot.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/Snapshot.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/SplitBrushEdgeAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/SplitBrushEdgeAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/SplitBrushFaceAlgorithm.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/SplitBrushFaceAlgorithm.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/TexCoordSystem.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/TexCoordSystem.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Model/TexCoordSystemHelper.cpp	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom	file:
Model	Model/TexCoordSystemHelper.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/BoundsGuideRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/BrushRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/EntityModelRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/EntityRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/MapRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/MeshRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	Renderer/MiniMapRenderer.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/ControllerFacade.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/CreateBrushTool.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/CreateEntityTool.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/EntityInspector.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/EntityPropertyGrid.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/FaceAttribsEditor.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/FaceInspector.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/IssueBrowser.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/MapDocument.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/MapFrame.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/MapTreeView.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/MapView.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/MiniMapBaseView.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/ModEditor.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/SmartPropertyEditorManager.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/TextureTool.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/TexturingViewHelper.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
Model	View/VertexTool.h	/^    namespace Model {$/;"	n	language:C++	namespace:TrenchBroom
ModelCache	Assets/EntityModelManager.h	/^            typedef std::map<IO::Path, EntityModel*> ModelCache;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityModelManager
ModelDefinition	Assets/ModelDefinition.cpp	/^        ModelDefinition::ModelDefinition() {}$/;"	f	language:C++	class:TrenchBroom::Assets::ModelDefinition
ModelDefinition	Assets/ModelDefinition.h	/^        class ModelDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
ModelDefinitionList	Assets/AssetTypes.h	/^        typedef std::vector<ModelDefinitionPtr> ModelDefinitionList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
ModelDefinitionPtr	Assets/AssetTypes.h	/^        typedef TrenchBroom::shared_ptr<ModelDefinition> ModelDefinitionPtr;$/;"	t	language:C++	namespace:TrenchBroom::Assets
ModelFaceIndex	IO/Bsp29Parser.cpp	/^            static const size_t ModelFaceIndex        = 0x38;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
ModelFactory	Model/ModelFactory.cpp	/^        ModelFactory::ModelFactory(const MapFormat::Type format) :$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
ModelFactory	Model/ModelFactory.h	/^        class ModelFactory {$/;"	c	language:C++	namespace:TrenchBroom::Model
ModelFilter	Model/ModelFilter.h	/^        class ModelFilter {$/;"	c	language:C++	namespace:TrenchBroom::Model
ModelMismatches	Assets/EntityModelManager.h	/^            typedef std::set<IO::Path> ModelMismatches;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityModelManager
ModelSize	IO/Bsp29Parser.cpp	/^            static const size_t ModelSize             = 0x40;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
ModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification::ModelSpecification() :$/;"	f	language:C++	class:TrenchBroom::Assets::ModelSpecification
ModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification::ModelSpecification(const IO::Path& i_path, const size_t i_skinIndex, const size_t i_frameIndex) :$/;"	f	language:C++	class:TrenchBroom::Assets::ModelSpecification
ModelSpecification	Assets/ModelDefinition.h	/^        struct ModelSpecification {$/;"	s	language:C++	namespace:TrenchBroom::Assets
ModelVertexList	IO/Bsp29Parser.h	/^            typedef std::vector<size_t> ModelVertexList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
ModifierKeyState	View/InputState.h	/^        typedef unsigned int ModifierKeyState;$/;"	t	language:C++	namespace:TrenchBroom::View
ModifierKeys	View/InputState.h	/^        namespace ModifierKeys {$/;"	n	language:C++	namespace:TrenchBroom::View
ModifierSet	View/KeyboardShortcut.h	/^            typedef std::set<int, MacModifierOrder> ModifierSet;$/;"	t	language:C++	class:TrenchBroom::View::KeyboardShortcut
ModifierSet	View/KeyboardShortcut.h	/^            typedef std::set<int, WinModifierOrder> ModifierSet;$/;"	t	language:C++	class:TrenchBroom::View::KeyboardShortcut
Mods	Model/EntityProperties.cpp	/^            const PropertyKey Mods              = "_mod";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
MouseButtonState	View/InputState.h	/^        typedef unsigned int MouseButtonState;$/;"	t	language:C++	namespace:TrenchBroom::View
MouseButtons	View/InputState.h	/^        namespace MouseButtons {$/;"	n	language:C++	namespace:TrenchBroom::View
MouseDragPolicy	View/Tool.h	/^        class MouseDragPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
MousePolicy	View/Tool.h	/^        class MousePolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveBrushEdgesAlgorithm	Model/MoveBrushEdgesAlgorithm.cpp	/^        MoveBrushEdgesAlgorithm::MoveBrushEdgesAlgorithm(BrushGeometry& geometry, const BBox3& worldBounds, const Edge3::List& edges, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
MoveBrushEdgesAlgorithm	Model/MoveBrushEdgesAlgorithm.h	/^        class MoveBrushEdgesAlgorithm : public MoveBrushVertexAlgorithm<MoveEdgesResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
MoveBrushEdgesCommand	Controller/MoveBrushEdgesCommand.cpp	/^        MoveBrushEdgesCommand::MoveBrushEdgesCommand(View::MapDocumentWPtr document, const Model::VertexToEdgesMap& edges, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
MoveBrushEdgesCommand	Controller/MoveBrushEdgesCommand.h	/^        class MoveBrushEdgesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
MoveBrushFacesAlgorithm	Model/MoveBrushFacesAlgorithm.cpp	/^        MoveBrushFacesAlgorithm::MoveBrushFacesAlgorithm(BrushGeometry& geometry, const BBox3& worldBounds, const Polygon3::List& faces, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
MoveBrushFacesAlgorithm	Model/MoveBrushFacesAlgorithm.h	/^        class MoveBrushFacesAlgorithm : public MoveBrushVertexAlgorithm<MoveFacesResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
MoveBrushFacesCommand	Controller/MoveBrushFacesCommand.cpp	/^        MoveBrushFacesCommand::MoveBrushFacesCommand(View::MapDocumentWPtr document, const Model::VertexToFacesMap& faces, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
MoveBrushFacesCommand	Controller/MoveBrushFacesCommand.h	/^        class MoveBrushFacesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
MoveBrushVertexAlgorithm	Model/MoveBrushVertexAlgorithm.h	/^            MoveBrushVertexAlgorithm(BrushGeometry& geometry) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
MoveBrushVertexAlgorithm	Model/MoveBrushVertexAlgorithm.h	/^        class MoveBrushVertexAlgorithm : public BrushAlgorithm<R> {$/;"	c	language:C++	namespace:TrenchBroom::Model
MoveBrushVerticesAlgorithm	Model/MoveBrushVerticesAlgorithm.cpp	/^        MoveBrushVerticesAlgorithm::MoveBrushVerticesAlgorithm(BrushGeometry& geometry, const BBox3& worldBounds, const Vec3::List& vertexPositions, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
MoveBrushVerticesAlgorithm	Model/MoveBrushVerticesAlgorithm.h	/^        class MoveBrushVerticesAlgorithm : public MoveBrushVertexAlgorithm<MoveVerticesResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
MoveBrushVerticesCommand	Controller/MoveBrushVerticesCommand.cpp	/^        MoveBrushVerticesCommand::MoveBrushVerticesCommand(View::MapDocumentWPtr document, const Model::VertexToBrushesMap& vertices, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
MoveBrushVerticesCommand	Controller/MoveBrushVerticesCommand.h	/^        class MoveBrushVerticesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
MoveBrushesToWorld	View/CommandIds.h	/^                static const int MoveBrushesToWorld                 = HighestBrushEntityItem + 2;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
MoveBrushesToWorldspawnQuickFix	Model/SharedQuickFixes.cpp	/^        MoveBrushesToWorldspawnQuickFix::MoveBrushesToWorldspawnQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushesToWorldspawnQuickFix
MoveBrushesToWorldspawnQuickFix	Model/SharedQuickFixes.h	/^        class MoveBrushesToWorldspawnQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
MoveDelegate	View/MoveToolHelper.h	/^        class MoveDelegate {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveEdgesResult	Model/BrushGeometry.cpp	/^        MoveEdgesResult::MoveEdgesResult(Edge3::List& i_newEdgePositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveEdgesResult
MoveEdgesResult	Model/BrushGeometry.cpp	/^        MoveEdgesResult::MoveEdgesResult(const Edge3::List& i_newEdgePositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveEdgesResult
MoveEdgesResult	Model/BrushGeometry.h	/^        struct MoveEdgesResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
MoveFacesResult	Model/BrushGeometry.cpp	/^        MoveFacesResult::MoveFacesResult(Polygon3::List& i_newFacePositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveFacesResult
MoveFacesResult	Model/BrushGeometry.cpp	/^        MoveFacesResult::MoveFacesResult(const Polygon3::List& i_newFacePositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveFacesResult
MoveFacesResult	Model/BrushGeometry.h	/^        struct MoveFacesResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
MoveHelper	View/MoveToolHelper.cpp	/^        MoveHelper::MoveHelper(MovementRestriction& movementRestriction, MoveDelegate& delegate) :$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
MoveHelper	View/MoveToolHelper.h	/^        class MoveHelper : public PlaneDragHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveIndicatorRenderer	Renderer/MoveIndicatorRenderer.cpp	/^        MoveIndicatorRenderer::MoveIndicatorRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
MoveIndicatorRenderer	Renderer/MoveIndicatorRenderer.h	/^        class MoveIndicatorRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
MoveObjectsTool	View/MoveObjectsTool.cpp	/^        MoveObjectsTool::MoveObjectsTool(MapDocumentWPtr document, ControllerWPtr controller, MovementRestriction& movementRestriction) :$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
MoveObjectsTool	View/MoveObjectsTool.h	/^        class MoveObjectsTool : public MoveTool<NoActivationPolicy, NoPickingPolicy, NoMousePolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveOffsets	Model/PlanePointFinder.cpp	/^            static const Vec2 MoveOffsets[];$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
MoveOffsets	Model/PlanePointFinder.cpp	/^        const Vec2 GridSearchCursor::MoveOffsets[] = {$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
MoveResult	View/MoveToolHelper.h	/^        } MoveResult;$/;"	t	language:C++	namespace:TrenchBroom::View	typeref:enum:TrenchBroom::View::__anon33
MoveResult_Conclude	View/MoveToolHelper.h	/^            MoveResult_Conclude,$/;"	e	language:C++	enum:TrenchBroom::View::__anon33
MoveResult_Continue	View/MoveToolHelper.h	/^            MoveResult_Continue$/;"	e	language:C++	enum:TrenchBroom::View::__anon33
MoveResult_Deny	View/MoveToolHelper.h	/^            MoveResult_Deny,$/;"	e	language:C++	enum:TrenchBroom::View::__anon33
MoveTextureHelper	View/MoveTextureHelper.cpp	/^        MoveTextureHelper::MoveTextureHelper(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
MoveTextureHelper	View/MoveTextureHelper.h	/^        class MoveTextureHelper : public TextureToolHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveTexturesCommand	Controller/MoveTexturesCommand.cpp	/^        MoveTexturesCommand::MoveTexturesCommand(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const Vec3& up, const Vec3& right, const Math::Direction direction, const float distance) :$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
MoveTexturesCommand	Controller/MoveTexturesCommand.h	/^        class MoveTexturesCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
MoveTool	View/MoveTool.h	/^            MoveTool(MapDocumentWPtr document, ControllerWPtr controller, MovementRestriction& movementRestriction) :$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
MoveTool	View/MoveTool.h	/^        class MoveTool : public ToolImpl<ActivationPolicyType, PickingPolicyType, MousePolicyType, PlaneDragPolicy, DropPolicyType, RenderPolicyType>, public MoveDelegate {$/;"	c	language:C++	namespace:TrenchBroom::View
MoveVertexResult	Model/MoveBrushVertexAlgorithm.h	/^                MoveVertexResult(const Type i_type, BrushVertex* i_vertex = NULL) :$/;"	f	language:C++	struct:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult
MoveVertexResult	Model/MoveBrushVertexAlgorithm.h	/^            struct MoveVertexResult {$/;"	s	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
MoveVerticesResult	Model/BrushGeometry.cpp	/^        MoveVerticesResult::MoveVerticesResult(Vec3::List& i_newVertexPositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveVerticesResult
MoveVerticesResult	Model/BrushGeometry.cpp	/^        MoveVerticesResult::MoveVerticesResult(const Vec3::List& i_newVertexPositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::MoveVerticesResult
MoveVerticesResult	Model/BrushGeometry.h	/^        struct MoveVerticesResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
MoveVerticesResult	View/ControllerFacade.cpp	/^        ControllerFacade::MoveVerticesResult::MoveVerticesResult(bool i_success, bool i_hasRemainingVertices) :$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade::MoveVerticesResult
MoveVerticesResult	View/ControllerFacade.h	/^            struct MoveVerticesResult {$/;"	s	language:C++	class:TrenchBroom::View::ControllerFacade
MovementRestriction	View/MovementRestriction.cpp	/^        MovementRestriction::MovementRestriction() :$/;"	f	language:C++	class:TrenchBroom::View::MovementRestriction
MovementRestriction	View/MovementRestriction.h	/^        class MovementRestriction {$/;"	c	language:C++	namespace:TrenchBroom::View
MultiFrameTimes	IO/MdlParser.cpp	/^            static const unsigned int MultiFrameTimes   = 0xC;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
MultiMenu	View/Menu.cpp	/^        MultiMenu::MultiMenu(const String& text, MenuItemParent* parent, int menuId) :$/;"	f	language:C++	class:TrenchBroom::View::MultiMenu
MultiMenu	View/Menu.h	/^        class MultiMenu : public MenuItemParent {$/;"	c	language:C++	namespace:TrenchBroom::View
MultiMenuSelector	View/Menu.h	/^        class MultiMenuSelector {$/;"	c	language:C++	namespace:TrenchBroom::View
MultiplyModelMatrix	Renderer/Transformation.cpp	/^        MultiplyModelMatrix::MultiplyModelMatrix(Transformation& transformation, const Mat4x4f& modelMatrix) :$/;"	f	language:C++	class:TrenchBroom::Renderer::MultiplyModelMatrix
MultiplyModelMatrix	Renderer/Transformation.h	/^        class MultiplyModelMatrix {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
N	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_Normal, GL_FLOAT, 3> N;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
NaN	Vec.h	/^    static const Vec<T,S> NaN;$/;"	m	language:C++	class:Vec
NaN	Vec.h	/^const Vec<T,S> Vec<T,S>::NaN  = Vec<T,S>::fill(std::numeric_limits<T>::quiet_NaN());$/;"	m	language:C++	class:Vec
Name	Assets/EntityDefinitionManager.h	/^                Name,$/;"	e	language:C++	enum:TrenchBroom::Assets::EntityDefinitionManager::SortOrder
NavBar	View/NavBar.cpp	/^        NavBar::NavBar(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::NavBar
NavBar	View/NavBar.h	/^        class NavBar : public ContainerBar {$/;"	c	language:C++	namespace:TrenchBroom::View
NegX	Vec.h	/^    static const Vec<T,S> NegX;$/;"	m	language:C++	class:Vec
NegX	Vec.h	/^const Vec<T,S> Vec<T,S>::NegX = -Vec<T,S>::unit(0);$/;"	m	language:C++	class:Vec
NegY	Vec.h	/^    static const Vec<T,S> NegY;$/;"	m	language:C++	class:Vec
NegY	Vec.h	/^const Vec<T,S> Vec<T,S>::NegY = -Vec<T,S>::unit(1);$/;"	m	language:C++	class:Vec
NegZ	Vec.h	/^    static const Vec<T,S> NegZ;$/;"	m	language:C++	class:Vec
NegZ	Vec.h	/^const Vec<T,S> Vec<T,S>::NegZ = -Vec<T,S>::unit(2);$/;"	m	language:C++	class:Vec
NestedHierarchyIterator	NestedHierarchyIterator.h	/^        NestedHierarchyIterator() {}$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
NestedHierarchyIterator	NestedHierarchyIterator.h	/^        NestedHierarchyIterator(const OuterIterator& outerCur) :$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
NestedHierarchyIterator	NestedHierarchyIterator.h	/^        NestedHierarchyIterator(const OuterIterator& outerCur, const OuterIterator& outerEnd) :$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
NestedHierarchyIterator	NestedHierarchyIterator.h	/^    class NestedHierarchyIterator {$/;"	c	language:C++	namespace:TrenchBroom
NestedIterator	NestedIterator.h	/^        NestedIterator() {}$/;"	f	language:C++	class:TrenchBroom::NestedIterator
NestedIterator	NestedIterator.h	/^        NestedIterator(const OuterIterator& outerCur) :$/;"	f	language:C++	class:TrenchBroom::NestedIterator
NestedIterator	NestedIterator.h	/^        NestedIterator(const OuterIterator& outerCur, const OuterIterator& outerEnd) :$/;"	f	language:C++	class:TrenchBroom::NestedIterator
NestedIterator	NestedIterator.h	/^    class NestedIterator {$/;"	c	language:C++	namespace:TrenchBroom
New	Model/BrushEdge.h	/^                New$/;"	e	language:C++	enum:TrenchBroom::Model::BrushEdge::Mark
NewDocumentCommand	Controller/NewDocumentCommand.cpp	/^        NewDocumentCommand::NewDocumentCommand(View::MapDocumentWPtr document, const BBox3& worldBounds, Model::GamePtr game) :$/;"	f	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
NewDocumentCommand	Controller/NewDocumentCommand.h	/^        class NewDocumentCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
Newline	IO/DefParser.h	/^            static const Type Newline         = 1 << 12; \/\/ new line$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
NoActivationPolicy	View/Tool.h	/^        class NoActivationPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
NoClassname	Model/EntityProperties.cpp	/^            const PropertyValue NoClassname         = "undefined";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyValues	file:
NoDropPolicy	View/Tool.h	/^        class NoDropPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
NoHit	Hit.cpp	/^    const Hit Hit::NoHit = Hit(NoType, 0.0, Vec3::Null, false);$/;"	m	language:C++	class:TrenchBroom::Hit	file:
NoHit	Hit.h	/^        static const Hit NoHit;$/;"	m	language:C++	class:TrenchBroom::Hit
NoMouseDragPolicy	View/Tool.h	/^        class NoMouseDragPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
NoMousePolicy	View/Tool.h	/^        class NoMousePolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
NoPickingPolicy	View/Tool.h	/^        class NoPickingPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
NoRenderPolicy	View/Tool.h	/^        typedef RenderPolicy NoRenderPolicy;$/;"	t	language:C++	namespace:TrenchBroom::View
NoTextureName	Model/BrushFace.cpp	/^        const String BrushFace::NoTextureName = "__TB_empty";$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace	file:
NoTextureName	Model/BrushFace.h	/^            static const String NoTextureName;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
NoType	Hit.cpp	/^    const Hit::HitType Hit::NoType = 0;$/;"	m	language:C++	class:TrenchBroom::Hit	file:
NoType	Hit.h	/^        static const HitType NoType;$/;"	m	language:C++	class:TrenchBroom::Hit
NoType	View/Animation.h	/^            static const Type NoType = -1;$/;"	m	language:C++	class:TrenchBroom::View::Animation
Node	Model/FaceAdjacencyGraph.cpp	/^        FaceAdjacencyGraph::Node::Node(const BrushFace* face) :$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
Node	Model/FaceAdjacencyGraph.h	/^            class Node {$/;"	c	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
Node	StringIndex.h	/^            Node(const String& key) :$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
Node	StringIndex.h	/^        class Node {$/;"	c	language:C++	class:TrenchBroom::StringIndex
NodeMap	Model/FaceAdjacencyGraph.h	/^            typedef std::map<Vec3, Node::List, Vec3::LexicographicOrder> NodeMap;$/;"	t	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
NodePtr	Model/Octree.h	/^            typedef TrenchBroom::shared_ptr<OctreeNode<F,T> > NodePtr;$/;"	t	language:C++	class:TrenchBroom::Model::Octree
NodeSet	StringIndex.h	/^            typedef std::set<Node> NodeSet;$/;"	t	language:C++	class:TrenchBroom::StringIndex::Node
NonParallel	Ray.h	/^        static const LineDistance NonParallel(const T rayDistance, const T distance, const Vec<T,S>& point) {$/;"	f	language:C++	struct:Ray::LineDistance
NopFunc	Renderer/MeshRenderer.cpp	/^        struct NopFunc {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
Normals	IO/Md2Parser.cpp	/^        const Vec3f Md2Parser::Normals[162] = {$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser	file:
Normals	IO/Md2Parser.h	/^            static const Vec3f Normals[162];$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser
Normals	IO/MdlParser.cpp	/^        const Vec3f MdlParser::Normals[] = {$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser	file:
Normals	IO/MdlParser.h	/^            static const Vec3f Normals[162];$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser
NotebookPageExtraBottomMargin	View/ViewConstants.h	/^            static const int NotebookPageExtraBottomMargin      = 2;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
NotebookPageInnerMargin	View/ViewConstants.h	/^            static const int NotebookPageInnerMargin            = 5;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
Notifier0	Notifier.h	/^        Notifier0() :$/;"	f	language:C++	class:TrenchBroom::Notifier0
Notifier0	Notifier.h	/^    class Notifier0 {$/;"	c	language:C++	namespace:TrenchBroom
Notifier1	Notifier.h	/^        Notifier1() :$/;"	f	language:C++	class:TrenchBroom::Notifier1
Notifier1	Notifier.h	/^    class Notifier1 {$/;"	c	language:C++	namespace:TrenchBroom
Notifier2	Notifier.h	/^        Notifier2() :$/;"	f	language:C++	class:TrenchBroom::Notifier2
Notifier2	Notifier.h	/^    class Notifier2 {$/;"	c	language:C++	namespace:TrenchBroom
Notifier3	Notifier.h	/^        Notifier3() :$/;"	f	language:C++	class:TrenchBroom::Notifier3
Notifier3	Notifier.h	/^    class Notifier3 {$/;"	c	language:C++	namespace:TrenchBroom
NotifyParent	Model/ModelUtils.cpp	/^        NotifyParent::NotifyParent(Notifier1<Object*>& notifier) :$/;"	f	language:C++	class:TrenchBroom::Model::NotifyParent
NotifyParent	Model/ModelUtils.h	/^        struct NotifyParent {$/;"	s	language:C++	namespace:TrenchBroom::Model
Null	Mat.h	/^    static const Mat<T,R,C> Null;$/;"	m	language:C++	class:Mat
Null	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Null = Mat<T,R,C>().setNull();$/;"	m	language:C++	class:Mat
Null	Vec.h	/^    static const Vec<T,S> Null;$/;"	m	language:C++	class:Vec
Null	Vec.h	/^const Vec<T,S> Vec<T,S>::Null = Vec<T,S>::fill(static_cast<T>(0.0));$/;"	m	language:C++	class:Vec
NullMenuSelector	View/Menu.h	/^        class NullMenuSelector : public MultiMenuSelector {$/;"	c	language:C++	namespace:TrenchBroom::View
NumCols	View/SmartSpawnflagsEditor.h	/^            static const size_t NumCols = 3;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
NumEntriesAddress	IO/Wad.cpp	/^            static const size_t NumEntriesAddress     = 4;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
NumFlags	View/SmartSpawnflagsEditor.h	/^            static const size_t NumFlags = 24;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
OBrace	IO/ConfigParser.h	/^            static const Type OBrace        = 1 <<  3; \/\/ opening brace: {$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
OBrace	IO/DefParser.h	/^            static const Type OBrace          = 1 <<  5; \/\/ opening brace: {$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
OBrace	IO/QuakeMapParser.h	/^            static const Type OBrace        = 1 <<  5; \/\/ opening brace: {$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
OBracket	IO/FgdParser.h	/^            static const Type OBracket          = 1 <<  6; \/\/ opening bracket: [$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
OBracket	IO/QuakeMapParser.h	/^            static const Type OBracket      = 1 <<  7; \/\/ opening bracket: [$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
ODefinition	IO/DefParser.h	/^            static const Type ODefinition     = 1 <<  9; \/\/ entity definition open$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
OParenthesis	IO/DefParser.h	/^            static const Type OParenthesis    = 1 <<  3; \/\/ opening parenthesis: ($/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
OParenthesis	IO/FgdParser.h	/^            static const Type OParenthesis      = 1 <<  4; \/\/ opening parenthesis: ($/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
OParenthesis	IO/QuakeMapParser.h	/^            static const Type OParenthesis  = 1 <<  3; \/\/ opening parenthesis: ($/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
Object	Model/Object.cpp	/^        Object::Object(const Type type) :$/;"	f	language:C++	class:TrenchBroom::Model::Object
Object	Model/Object.h	/^        class Object : public Pickable {$/;"	c	language:C++	namespace:TrenchBroom::Model
ObjectChildrenMap	Model/ModelTypes.h	/^        typedef std::map<Object*, ObjectList> ObjectChildrenMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
ObjectList	Model/ModelTypes.h	/^        typedef std::vector<Object*> ObjectList;$/;"	t	language:C++	namespace:TrenchBroom::Model
ObjectParentList	Model/ModelTypes.h	/^        typedef std::vector<ObjectParentPair> ObjectParentList;$/;"	t	language:C++	namespace:TrenchBroom::Model
ObjectParentPair	Model/ModelTypes.cpp	/^        ObjectParentPair::ObjectParentPair(Object* i_object) :$/;"	f	language:C++	class:TrenchBroom::Model::ObjectParentPair
ObjectParentPair	Model/ModelTypes.cpp	/^        ObjectParentPair::ObjectParentPair(Object* i_object, Object* i_parent) :$/;"	f	language:C++	class:TrenchBroom::Model::ObjectParentPair
ObjectParentPair	Model/ModelTypes.h	/^        struct ObjectParentPair {$/;"	s	language:C++	namespace:TrenchBroom::Model
ObjectSet	Model/ModelTypes.h	/^        typedef std::set<Object*> ObjectSet;$/;"	t	language:C++	namespace:TrenchBroom::Model
ObjectVisitor	Model/Object.h	/^        class ObjectVisitor {$/;"	c	language:C++	namespace:TrenchBroom::Model
Observer	Notifier.h	/^        class Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier0
Observer	Notifier.h	/^        class Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier1
Observer	Notifier.h	/^        class Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier2
Observer	Notifier.h	/^        class Observer {$/;"	c	language:C++	class:TrenchBroom::Notifier3
Octree	Model/Octree.h	/^            Octree(const BBox<F,3>& bounds, const F minSize) :$/;"	f	language:C++	class:TrenchBroom::Model::Octree
Octree	Model/Octree.h	/^        class Octree {$/;"	c	language:C++	namespace:TrenchBroom::Model
OctreeException	Exceptions.h	/^        OctreeException() throw() {}$/;"	f	language:C++	class:TrenchBroom::OctreeException
OctreeException	Exceptions.h	/^        OctreeException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::OctreeException
OctreeException	Exceptions.h	/^    class OctreeException : public ExceptionStream<OctreeException> {$/;"	c	language:C++	namespace:TrenchBroom
OctreeNode	Model/Octree.h	/^            OctreeNode(const BBox<F,3>& bounds, const F minSize) :$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
OctreeNode	Model/Octree.h	/^        class OctreeNode {$/;"	c	language:C++	namespace:TrenchBroom::Model
OnActivateFrame	View/MapView.cpp	/^        void MapView::OnActivateFrame(wxActivateEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnAddModClicked	View/ModEditor.cpp	/^        void ModEditor::OnAddModClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnAddPropertyPressed	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnAddPropertyPressed(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnAddTextureCollectionsClicked	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::OnAddTextureCollectionsClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
OnApplyClicked	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnApplyClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnApplyQuickFix	View/IssueBrowser.cpp	/^        void IssueBrowser::OnApplyQuickFix(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnAutosaveTimer	View/MapFrame.cpp	/^        void MapFrame::OnAutosaveTimer(wxTimerEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnBrightnessChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnBrightnessChanged(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnBuiltinSelectionChanged	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::OnBuiltinSelectionChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
OnButtonToggled	View/PopupButton.cpp	/^        void PopupButton::OnButtonToggled(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PopupButton
OnByteRangeRadioButton	View/SmartColorEditor.cpp	/^        void SmartColorEditor::OnByteRangeRadioButton(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
OnCancelClicked	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnCancelClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnCheckBoxClicked	View/FlagsEditor.cpp	/^        void FlagsEditor::OnCheckBoxClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
OnChooseExternalClicked	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::OnChooseExternalClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
OnChooseGamePathClicked	View/GamesPreferencePane.cpp	/^        void GamesPreferencePane::OnChooseGamePathClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
OnClose	View/MapFrame.cpp	/^        void MapFrame::OnClose(wxCloseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnClose	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnClose(wxCloseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnColorPickerChanged	View/SmartColorEditor.cpp	/^        void SmartColorEditor::OnColorPickerChanged(wxColourPickerEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
OnColorTableSelected	View/SmartColorEditor.cpp	/^        void SmartColorEditor::OnColorTableSelected(ColorTableSelectedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
OnComboBox	View/SmartChoiceEditor.cpp	/^        void SmartChoiceEditor::OnComboBox(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
OnConsoleButtonPressed	View/InfoPanel.cpp	/^        void InfoPanel::OnConsoleButtonPressed(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::InfoPanel
OnContentFlagChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnContentFlagChanged(FlagChangedCommand& command) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnCreateNewDocumentClicked	View/WelcomeFrame.cpp	/^        void WelcomeFrame::OnCreateNewDocumentClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
OnDragOver	View/ToolBoxDropTarget.cpp	/^        wxDragResult ToolBoxDropTarget::OnDragOver(const wxCoord x, const wxCoord y, const wxDragResult def) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
OnDrawBackground	View/ImageListBox.cpp	/^        void ImageListBox::OnDrawBackground(wxDC& dc, const wxRect& rect, size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
OnDrawItem	View/ImageListBox.cpp	/^        void ImageListBox::OnDrawItem(wxDC& dc, const wxRect& rect, size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
OnDrawSeparator	View/ImageListBox.cpp	/^        void ImageListBox::OnDrawSeparator(wxDC& dc, wxRect& rect, size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
OnDropText	View/ToolBoxDropTarget.cpp	/^        bool ToolBoxDropTarget::OnDropText(const wxCoord x, const wxCoord y, const wxString& data) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
OnEditCopy	View/MapFrame.cpp	/^        void MapFrame::OnEditCopy(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditCut	View/MapFrame.cpp	/^        void MapFrame::OnEditCut(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDeleteLastClipPoint	View/MapFrame.cpp	/^        void MapFrame::OnEditDeleteLastClipPoint(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDeleteObjects	View/MapFrame.cpp	/^        void MapFrame::OnEditDeleteObjects(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsBackward	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsBackward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsDown	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsDown(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsForward	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsForward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsLeft	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsLeft(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsRight	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsRight(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditDuplicateObjectsUp	View/MapFrame.cpp	/^        void MapFrame::OnEditDuplicateObjectsUp(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditFlipObjectsH	View/MapFrame.cpp	/^        void MapFrame::OnEditFlipObjectsH(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditFlipObjectsV	View/MapFrame.cpp	/^        void MapFrame::OnEditFlipObjectsV(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsBackward	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsBackward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsDown	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsDown(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsForward	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsForward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsLeft	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsLeft(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsRight	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsRight(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveObjectsUp	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveObjectsUp(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesDown	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesDown(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesDownFine	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesDownFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesLeft	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesLeft(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesLeftFine	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesLeftFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesRight	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesRight(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesRightFine	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesRightFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesUp	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesUp(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveTexturesUpFine	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveTexturesUpFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesBackward	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesBackward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesDown	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesDown(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesForward	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesForward(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesLeft	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesLeft(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesRight	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesRight(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditMoveVerticesUp	View/MapFrame.cpp	/^        void MapFrame::OnEditMoveVerticesUp(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditPaste	View/MapFrame.cpp	/^        void MapFrame::OnEditPaste(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditPasteAtOriginalPosition	View/MapFrame.cpp	/^        void MapFrame::OnEditPasteAtOriginalPosition(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditPerformClip	View/MapFrame.cpp	/^        void MapFrame::OnEditPerformClip(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditPitchObjectsCCW	View/MapFrame.cpp	/^        void MapFrame::OnEditPitchObjectsCCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditPitchObjectsCW	View/MapFrame.cpp	/^        void MapFrame::OnEditPitchObjectsCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRedo	View/MapFrame.cpp	/^        void MapFrame::OnEditRedo(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRollObjectsCCW	View/MapFrame.cpp	/^        void MapFrame::OnEditRollObjectsCCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRollObjectsCW	View/MapFrame.cpp	/^        void MapFrame::OnEditRollObjectsCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRotateTexturesCCW	View/MapFrame.cpp	/^        void MapFrame::OnEditRotateTexturesCCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRotateTexturesCCWFine	View/MapFrame.cpp	/^        void MapFrame::OnEditRotateTexturesCCWFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRotateTexturesCW	View/MapFrame.cpp	/^        void MapFrame::OnEditRotateTexturesCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditRotateTexturesCWFine	View/MapFrame.cpp	/^        void MapFrame::OnEditRotateTexturesCWFine(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectAll	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectAll(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectByLineNumber	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectByLineNumber(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectContained	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectContained(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectNone	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectNone(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectSiblings	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectSiblings(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSelectTouching	View/MapFrame.cpp	/^        void MapFrame::OnEditSelectTouching(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditSnapVertices	View/MapFrame.cpp	/^        void MapFrame::OnEditSnapVertices(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleClipSide	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleClipSide(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleClipTool	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleClipTool(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleMovementRestriction	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleMovementRestriction(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleRotateObjectsTool	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleRotateObjectsTool(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleTextureLock	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleTextureLock(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleTextureTool	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleTextureTool(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditToggleVertexTool	View/MapFrame.cpp	/^        void MapFrame::OnEditToggleVertexTool(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditUndo	View/MapFrame.cpp	/^        void MapFrame::OnEditUndo(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditYawObjectsCCW	View/MapFrame.cpp	/^        void MapFrame::OnEditYawObjectsCCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEditYawObjectsCW	View/MapFrame.cpp	/^        void MapFrame::OnEditYawObjectsCW(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnEnableAltMoveChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnEnableAltMoveChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnEnter	View/ToolBoxDropTarget.cpp	/^        wxDragResult ToolBoxDropTarget::OnEnter(const wxCoord x, const wxCoord y, const wxDragResult def) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
OnEntityDefinitionFileChooserPaneChanged	View/EntityInspector.cpp	/^        void EntityInspector::OnEntityDefinitionFileChooserPaneChanged(wxCollapsiblePaneEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
OnEntityPropertySelected	View/EntityPropertyEditor.cpp	/^        void EntityPropertyEditor::OnEntityPropertySelected(EntityPropertySelectedCommand& command) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyEditor
OnExecutableEvent	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnExecutableEvent(ExecutableEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnExit	TrenchBroomApp.cpp	/^        int TrenchBroomApp::OnExit() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnFileClose	View/MapFrame.cpp	/^        void MapFrame::OnFileClose(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnFileClose	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnFileClose(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnFileExit	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnFileExit(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnFileLoadPointFile	View/MapFrame.cpp	/^        void MapFrame::OnFileLoadPointFile(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnFileNew	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnFileNew(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnFileOpen	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnFileOpen(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnFileOpenRecent	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnFileOpenRecent(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnFileSave	View/MapFrame.cpp	/^        void MapFrame::OnFileSave(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnFileSaveAs	View/MapFrame.cpp	/^        void MapFrame::OnFileSaveAs(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnFileUnloadPointFile	View/MapFrame.cpp	/^        void MapFrame::OnFileUnloadPointFile(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnFilterBoxChanged	View/ModEditor.cpp	/^        void ModEditor::OnFilterBoxChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnFilterChanged	View/IssueBrowser.cpp	/^        void IssueBrowser::OnFilterChanged(FlagChangedCommand& command) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnFilterPatternChanged	View/EntityBrowser.cpp	/^        void EntityBrowser::OnFilterPatternChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
OnFilterPatternChanged	View/TextureBrowser.cpp	/^        void TextureBrowser::OnFilterPatternChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
OnFlagChanged	View/FlagsPopupEditor.cpp	/^        void FlagsPopupEditor::OnFlagChanged(FlagChangedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
OnFlagChanged	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::OnFlagChanged(FlagChangedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
OnFlipXScaleClicked	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnFlipXScaleClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnFlipYScaleClicked	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnFlipYScaleClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnFloatRangeRadioButton	View/SmartColorEditor.cpp	/^        void SmartColorEditor::OnFloatRangeRadioButton(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
OnFrameActivate	View/FrameManager.cpp	/^        void FrameManager::OnFrameActivate(wxActivateEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
OnGameSelected	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::OnGameSelected(GameSelectedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
OnGameSelectionChanged	View/GamesPreferencePane.cpp	/^        void GamesPreferencePane::OnGameSelectionChanged(GameSelectionCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
OnGridAlphaChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnGridAlphaChanged(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnGridSize	View/KeyboardPreferencePane.cpp	/^        void KeyboardPreferencePane::OnGridSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
OnGroupButtonToggled	View/EntityBrowser.cpp	/^        void EntityBrowser::OnGroupButtonToggled(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
OnGroupButtonToggled	View/TextureBrowser.cpp	/^        void TextureBrowser::OnGroupButtonToggled(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
OnHideIssues	View/IssueBrowser.cpp	/^        void IssueBrowser::OnHideIssues(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnIdle	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnIdle(wxIdleEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnIdle	View/StatusBar.cpp	/^        void StatusBar::OnIdle(wxIdleEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::StatusBar
OnIdleSetFocusToMapView	View/MapFrame.cpp	/^        void MapFrame::OnIdleSetFocusToMapView(wxIdleEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnInit	TrenchBroomApp.cpp	/^        bool TrenchBroomApp::OnInit() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnInvertAltMoveAxisChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnInvertAltMoveAxisChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnInvertLookHAxisChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnInvertLookHAxisChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnInvertLookVAxisChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnInvertLookVAxisChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnInvertPanHAxisChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnInvertPanHAxisChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnInvertPanVAxisChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnInvertPanVAxisChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnIssueBrowserButtonPressed	View/InfoPanel.cpp	/^        void InfoPanel::OnIssueBrowserButtonPressed(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::InfoPanel
OnKey	View/MapView.cpp	/^        void MapView::OnKey(wxKeyEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnKey	View/ToolBox.cpp	/^        void ToolBox::OnKey(wxKeyEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnKeyDown	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::OnKeyDown(wxKeyEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
OnKeyUp	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::OnKeyUp(wxKeyEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
OnKillFocus	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::OnKillFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
OnKillFocus	View/RenderView.cpp	/^        void RenderView::OnKillFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
OnKillFocus	View/ToolBox.cpp	/^        void ToolBox::OnKillFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnLeave	View/ToolBoxDropTarget.cpp	/^        void ToolBoxDropTarget::OnLeave() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
OnListBoxChange	View/GameListBox.cpp	/^        void GameListBox::OnListBoxChange(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
OnListBoxDoubleClick	View/GameListBox.cpp	/^        void GameListBox::OnListBoxDoubleClick(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
OnListBoxDoubleClick	View/RecentDocumentListBox.cpp	/^        void RecentDocumentListBox::OnListBoxDoubleClick(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentListBox
OnLookSpeedChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnLookSpeedChanged(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnMeasureItem	View/ImageListBox.cpp	/^        wxCoord ImageListBox::OnMeasureItem(size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
OnMouseButton	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::OnMouseButton(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
OnMouseButton	View/ToolBox.cpp	/^        void ToolBox::OnMouseButton(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnMouseCaptureLost	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::OnMouseCaptureLost(wxMouseCaptureLostEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
OnMouseCaptureLost	View/ToolBox.cpp	/^        void ToolBox::OnMouseCaptureLost(wxMouseCaptureLostEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnMouseDoubleClick	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::OnMouseDoubleClick(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
OnMouseDoubleClick	View/ToolBox.cpp	/^        void ToolBox::OnMouseDoubleClick(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnMouseLeftUp	View/CellView.h	/^            void OnMouseLeftUp(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnMouseMotion	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::OnMouseMotion(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
OnMouseMotion	View/ToolBox.cpp	/^        void ToolBox::OnMouseMotion(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnMouseMove	View/CellView.h	/^            void OnMouseMove(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnMouseUp	View/ColorTable.cpp	/^        void ColorTable::OnMouseUp(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
OnMouseWheel	View/CellView.h	/^            void OnMouseWheel(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnMouseWheel	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::OnMouseWheel(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
OnMouseWheel	View/ToolBox.cpp	/^        void ToolBox::OnMouseWheel(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnMoveCameraInCursorDirChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnMoveCameraInCursorDirChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnMoveModDownClicked	View/ModEditor.cpp	/^        void ModEditor::OnMoveModDownClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnMoveModUpClicked	View/ModEditor.cpp	/^        void ModEditor::OnMoveModUpClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnMoveSpeedChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnMoveSpeedChanged(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnMoveTextureCollectionDownClicked	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::OnMoveTextureCollectionDownClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
OnMoveTextureCollectionUpClicked	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::OnMoveTextureCollectionUpClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
OnNotebookPageChanged	View/InfoPanel.cpp	/^        void InfoPanel::OnNotebookPageChanged(wxBookCtrlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::InfoPanel
OnOKClicked	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnOKClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnOpenOtherDocumentClicked	View/WelcomeFrame.cpp	/^        void WelcomeFrame::OnOpenOtherDocumentClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
OnOpenPreferences	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnOpenPreferences(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnOpenPreferencesClicked	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::OnOpenPreferencesClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
OnPaint	View/ColorTable.cpp	/^        void ColorTable::OnPaint(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
OnPaint	View/ContainerBar.cpp	/^        void ContainerBar::OnPaint(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ContainerBar
OnPaint	View/ImagePanel.cpp	/^        void ImagePanel::OnPaint(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ImagePanel
OnPaint	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::OnPaint(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
OnPaint	View/RenderView.cpp	/^        void RenderView::OnPaint(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
OnPanSpeedChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnPanSpeedChanged(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnPaneChanged	View/MapInspector.cpp	/^        void MapInspector::OnPaneChanged(wxCollapsiblePaneEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
OnPopupCreateBrushEntity	View/MapView.cpp	/^        void MapView::OnPopupCreateBrushEntity(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnPopupCreatePointEntity	View/MapView.cpp	/^        void MapView::OnPopupCreatePointEntity(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnPopupMoveBrushesToWorld	View/MapView.cpp	/^        void MapView::OnPopupMoveBrushesToWorld(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnPopupReparentBrushes	View/MapView.cpp	/^        void MapView::OnPopupReparentBrushes(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnPopupShow	View/PopupButton.cpp	/^        void PopupButton::OnPopupShow(wxShowEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PopupButton
OnPropertyGridMouseMove	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnPropertyGridMouseMove(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnPropertyGridSelectCell	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnPropertyGridSelectCell(wxGridEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnPropertyGridSize	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnPropertyGridSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnPropertyGridTab	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnPropertyGridTab(wxGridEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnRebuildMenuBar	View/MapFrame.cpp	/^        void MapFrame::OnRebuildMenuBar(wxEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnRecentDocumentSelected	View/WelcomeFrame.cpp	/^        void WelcomeFrame::OnRecentDocumentSelected(RecentDocumentSelectedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
OnRemoveModClicked	View/ModEditor.cpp	/^        void ModEditor::OnRemoveModClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnRemovePropertiesPressed	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnRemovePropertiesPressed(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnRemoveTextureCollectionsClicked	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::OnRemoveTextureCollectionsClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
OnRotationChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnRotationChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnScrollBarChange	View/CellView.h	/^            void OnScrollBarChange(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnScrollBarLineDown	View/CellView.h	/^            void OnScrollBarLineDown(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnScrollBarLineUp	View/CellView.h	/^            void OnScrollBarLineUp(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnScrollBarPageDown	View/CellView.h	/^            void OnScrollBarPageDown(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnScrollBarPageUp	View/CellView.h	/^            void OnScrollBarPageUp(wxScrollEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnSearchPatternChanged	View/NavBar.cpp	/^        void NavBar::OnSearchPatternChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::NavBar
OnSelectIssues	View/IssueBrowser.cpp	/^        void IssueBrowser::OnSelectIssues(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnSetFocus	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::OnSetFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
OnSetFocus	View/RenderView.cpp	/^        void RenderView::OnSetFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
OnSetFocus	View/SpinControl.cpp	/^void SpinControl::OnSetFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:SpinControl
OnSetFocus	View/ToolBox.cpp	/^        void ToolBox::OnSetFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
OnShowHiddenIssuesChanged	View/IssueBrowser.cpp	/^        void IssueBrowser::OnShowHiddenIssuesChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnShowIssues	View/IssueBrowser.cpp	/^        void IssueBrowser::OnShowIssues(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnSize	View/CellView.h	/^            void OnSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::CellView
OnSize	View/ColorTable.cpp	/^        void ColorTable::OnSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
OnSize	View/RenderView.cpp	/^        void RenderView::OnSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
OnSortOrderChanged	View/EntityBrowser.cpp	/^        void EntityBrowser::OnSortOrderChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
OnSortOrderChanged	View/TextureBrowser.cpp	/^        void TextureBrowser::OnSortOrderChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
OnSpinButton	View/SpinControl.cpp	/^void SpinControl::OnSpinButton(bool up) {$/;"	f	language:C++	class:SpinControl
OnSpinButtonDown	View/SpinControl.cpp	/^void SpinControl::OnSpinButtonDown(wxSpinEvent& event) {$/;"	f	language:C++	class:SpinControl
OnSpinButtonUp	View/SpinControl.cpp	/^void SpinControl::OnSpinButtonUp(wxSpinEvent& event) {$/;"	f	language:C++	class:SpinControl
OnSubDivisionChanged	View/TexturingEditor.cpp	/^        void TexturingEditor::OnSubDivisionChanged(wxSpinEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingEditor
OnSurfaceFlagChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnSurfaceFlagChanged(FlagChangedCommand& command) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnSurfaceValueChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnSurfaceValueChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnTextEnter	View/SmartChoiceEditor.cpp	/^        void SmartChoiceEditor::OnTextEnter(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
OnTextEnter	View/SpinControl.cpp	/^void SpinControl::OnTextEnter(wxCommandEvent& event) {$/;"	f	language:C++	class:SpinControl
OnTextKillFocus	View/SpinControl.cpp	/^void SpinControl::OnTextKillFocus(wxFocusEvent& event) {$/;"	f	language:C++	class:SpinControl
OnTextureBrowserIconSizeChanged	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::OnTextureBrowserIconSizeChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
OnTextureCollectionEditorPaneChanged	View/FaceInspector.cpp	/^        void FaceInspector::OnTextureCollectionEditorPaneChanged(wxCollapsiblePaneEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
OnTextureSelected	View/FaceInspector.cpp	/^        void FaceInspector::OnTextureSelected(TextureSelectedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
OnTextureSelected	View/TextureBrowser.cpp	/^        void TextureBrowser::OnTextureSelected(TextureSelectedCommand& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
OnToolClicked	View/PreferenceDialog.cpp	/^        void PreferenceDialog::OnToolClicked(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
OnTreeViewContextMenu	View/IssueBrowser.cpp	/^        void IssueBrowser::OnTreeViewContextMenu(wxDataViewEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnTreeViewSelectionChanged	View/MapTreeView.cpp	/^        void MapTreeView::OnTreeViewSelectionChanged(wxDataViewEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
OnTreeViewSize	View/IssueBrowser.cpp	/^        void IssueBrowser::OnTreeViewSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
OnTreeViewSize	View/MapTreeView.cpp	/^        void MapTreeView::OnTreeViewSize(wxSizeEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
OnUnhandledException	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnUnhandledException() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnUpdateButtonUI	View/ModEditor.cpp	/^        void ModEditor::OnUpdateButtonUI(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
OnUpdateButtonUI	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::OnUpdateButtonUI(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
OnUpdateOkButton	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::OnUpdateOkButton(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
OnUpdatePopupMenuItem	View/MapView.cpp	/^        void MapView::OnUpdatePopupMenuItem(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
OnUpdatePropertyViewOrAddPropertiesButton	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnUpdatePropertyViewOrAddPropertiesButton(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnUpdateRemovePropertiesButton	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::OnUpdateRemovePropertiesButton(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
OnUpdateUI	TrenchBroomApp.cpp	/^        void TrenchBroomApp::OnUpdateUI(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
OnUpdateUI	View/MapFrame.cpp	/^        void MapFrame::OnUpdateUI(wxUpdateUIEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnUsedButtonToggled	View/EntityBrowser.cpp	/^        void EntityBrowser::OnUsedButtonToggled(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
OnUsedButtonToggled	View/TextureBrowser.cpp	/^        void TextureBrowser::OnUsedButtonToggled(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
OnViewCenterCameraOnSelection	View/MapFrame.cpp	/^        void MapFrame::OnViewCenterCameraOnSelection(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewDecGridSize	View/MapFrame.cpp	/^        void MapFrame::OnViewDecGridSize(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewIncGridSize	View/MapFrame.cpp	/^        void MapFrame::OnViewIncGridSize(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewMoveCameraToNextPoint	View/MapFrame.cpp	/^        void MapFrame::OnViewMoveCameraToNextPoint(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewMoveCameraToPreviousPoint	View/MapFrame.cpp	/^        void MapFrame::OnViewMoveCameraToPreviousPoint(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewSetGridSize	View/MapFrame.cpp	/^        void MapFrame::OnViewSetGridSize(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewSwitchToEntityInspector	View/MapFrame.cpp	/^        void MapFrame::OnViewSwitchToEntityInspector(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewSwitchToFaceInspector	View/MapFrame.cpp	/^        void MapFrame::OnViewSwitchToFaceInspector(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewSwitchToMapInspector	View/MapFrame.cpp	/^        void MapFrame::OnViewSwitchToMapInspector(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewToggleShowGrid	View/MapFrame.cpp	/^        void MapFrame::OnViewToggleShowGrid(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnViewToggleSnapToGrid	View/MapFrame.cpp	/^        void MapFrame::OnViewToggleSnapToGrid(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
OnXOffsetChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnXOffsetChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnXScaleChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnXScaleChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnXYMiniMapChanged	View/MiniMap.cpp	/^        void MiniMap::OnXYMiniMapChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMap
OnYOffsetChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnYOffsetChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnYScaleChanged	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::OnYScaleChanged(SpinControlEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
OnZMiniMapChanged	View/MiniMap.cpp	/^        void MiniMap::OnZMiniMapChanged(wxCommandEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMap
One	Vec.h	/^    static const Vec<T,S> One;$/;"	m	language:C++	class:Vec
One	Vec.h	/^const Vec<T,S> Vec<T,S>::One  = Vec<T,S>::fill(static_cast<T>(1.0));$/;"	m	language:C++	class:Vec
OpenClipboard	View/MapFrame.cpp	/^            OpenClipboard() {$/;"	f	language:C++	class:TrenchBroom::View::OpenClipboard
OpenClipboard	View/MapFrame.cpp	/^        class OpenClipboard {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
OpenDocumentCommand	Controller/OpenDocumentCommand.cpp	/^        OpenDocumentCommand::OpenDocumentCommand(View::MapDocumentWPtr document, const BBox3& worldBounds, Model::GamePtr game, const IO::Path& path) :$/;"	f	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
OpenDocumentCommand	Controller/OpenDocumentCommand.h	/^        class OpenDocumentCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
Origin	Model/EntityProperties.cpp	/^            const PropertyKey Origin            = "origin";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
OrthographicCamera	Renderer/OrthographicCamera.cpp	/^        OrthographicCamera::OrthographicCamera() :$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
OrthographicCamera	Renderer/OrthographicCamera.cpp	/^        OrthographicCamera::OrthographicCamera(const float nearPlane, const float farPlane, const Viewport& viewport, const Vec3f& position, const Vec3f& direction, const Vec3f& up) :$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
OrthographicCamera	Renderer/OrthographicCamera.h	/^        class OrthographicCamera : public Camera {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
OuterIterator	Model/BrushEdgesIterator.h	/^            typedef NestedIterator<BrushList::const_iterator, BrushEdgesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
OuterIterator	Model/BrushFacesIterator.h	/^            typedef NestedIterator<BrushList::const_iterator, BrushFacesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
OuterIterator	Model/EntityBrushesIterator.h	/^            typedef NestedIterator<EntityList::const_iterator, EntityBrushesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
OuterIterator	Model/EntityFacesIterator.h	/^            typedef NestedIterator<EntityList::const_iterator, EntityFacesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
OuterIterator	Model/FaceEdgesIterator.h	/^            typedef NestedIterator<BrushFaceList::const_iterator, FaceEdgesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
OuterIterator	Model/MapBrushesIterator.h	/^            typedef NestedIterator<EntityList::const_iterator, MapBrushesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
OuterIterator	Model/MapFacesIterator.h	/^            typedef NestedIterator<EntityList::const_iterator, MapFacesIterator> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapFacesIterator
OuterIterator	Model/MapObjectsIterator.h	/^            typedef NestedHierarchyIterator<EntityList::const_iterator, MapObjectsIterator, Object* const> OuterIterator;$/;"	t	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
OutlineTracer	Renderer/OutlineTracer.h	/^        class OutlineTracer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
P2	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_Position, GL_FLOAT, 2> P2;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
P2	Renderer/VertexSpec.h	/^            typedef VertexSpec1<AttributeSpecs::P2> P2;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P2C4	Renderer/VertexSpec.h	/^            typedef VertexSpec2<AttributeSpecs::P2, AttributeSpecs::C4> P2C4;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P2T2	Renderer/VertexSpec.h	/^            typedef VertexSpec2<AttributeSpecs::P2, AttributeSpecs::T02> P2T2;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_Position, GL_FLOAT, 3> P3;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
P3	Renderer/VertexSpec.h	/^            typedef VertexSpec1<AttributeSpecs::P3> P3;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3C4	Renderer/VertexSpec.h	/^            typedef VertexSpec2<AttributeSpecs::P3, AttributeSpecs::C4> P3C4;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3N	Renderer/VertexSpec.h	/^            typedef VertexSpec2<AttributeSpecs::P3, AttributeSpecs::N> P3N;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3NC4	Renderer/VertexSpec.h	/^            typedef VertexSpec3<AttributeSpecs::P3, AttributeSpecs::N, AttributeSpecs::C4> P3NC4;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3NT2	Renderer/VertexSpec.h	/^            typedef VertexSpec3<AttributeSpecs::P3, AttributeSpecs::N, AttributeSpecs::T02> P3NT2;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3T2	Renderer/VertexSpec.h	/^            typedef VertexSpec2<AttributeSpecs::P3, AttributeSpecs::T02> P3T2;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
P3T2C4	Renderer/VertexSpec.h	/^            typedef VertexSpec3<AttributeSpecs::P3, AttributeSpecs::T02, AttributeSpecs::C4> P3T2C4;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VertexSpecs
PCX	IO/ImageLoader.h	/^                PCX$/;"	e	language:C++	enum:TrenchBroom::IO::ImageLoader::Format
PSAbove	MathUtils.h	/^        static const Type PSAbove = 0;$/;"	m	language:C++	namespace:Math::PointStatus
PSBelow	MathUtils.h	/^        static const Type PSBelow = 1;$/;"	m	language:C++	namespace:Math::PointStatus
PSInside	MathUtils.h	/^        static const Type PSInside = 2;$/;"	m	language:C++	namespace:Math::PointStatus
PackedFrameVertex	IO/MdlParser.h	/^            typedef Vec<unsigned char, 4> PackedFrameVertex;$/;"	t	language:C++	class:TrenchBroom::IO::MdlParser
PackedFrameVertexList	IO/MdlParser.h	/^            typedef std::vector<PackedFrameVertex> PackedFrameVertexList;$/;"	t	language:C++	class:TrenchBroom::IO::MdlParser
PakFileSystem	IO/PakFileSystem.cpp	/^        PakFileSystem::PakFileSystem(const Path& path, MappedFile::Ptr file) :$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
PakFileSystem	IO/PakFileSystem.h	/^        class PakFileSystem : public FileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
PakLayout	IO/PakFileSystem.cpp	/^        namespace PakLayout {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
Palette	Assets/Palette.cpp	/^        Palette::Palette(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
Palette	Assets/Palette.cpp	/^        Palette::Palette(const Palette& other) :$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
Palette	Assets/Palette.h	/^        class Palette {$/;"	c	language:C++	namespace:TrenchBroom::Assets
Parallel	Ray.h	/^        static const LineDistance Parallel(const T distance) {$/;"	f	language:C++	struct:Ray::LineDistance
ParallelTexCoordSystem	Model/ParallelTexCoordSystem.cpp	/^        ParallelTexCoordSystem::ParallelTexCoordSystem(const Vec3& point0, const Vec3& point1, const Vec3& point2) {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
ParallelTexCoordSystem	Model/ParallelTexCoordSystem.cpp	/^        ParallelTexCoordSystem::ParallelTexCoordSystem(const Vec3& xAxis, const Vec3& yAxis, const Vec3& normal, const float rotation) :$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
ParallelTexCoordSystem	Model/ParallelTexCoordSystem.h	/^        class ParallelTexCoordSystem : public TexCoordSystem {$/;"	c	language:C++	namespace:TrenchBroom::Model
ParaxialTexCoordSystem	Model/ParaxialTexCoordSystem.cpp	/^        ParaxialTexCoordSystem::ParaxialTexCoordSystem(const Vec3& point0, const Vec3& point1, const Vec3& point2) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
ParaxialTexCoordSystem	Model/ParaxialTexCoordSystem.h	/^        class ParaxialTexCoordSystem : public TexCoordSystem {$/;"	c	language:C++	namespace:TrenchBroom::Model
Parser	IO/Parser.h	/^        class Parser {$/;"	c	language:C++	namespace:TrenchBroom::IO
ParserException	Exceptions.h	/^        ParserException() throw() {}$/;"	f	language:C++	class:TrenchBroom::ParserException
ParserException	Exceptions.h	/^        ParserException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::ParserException
ParserException	Exceptions.h	/^        ParserException(const size_t line, const size_t column, const String& str = "") throw() : ExceptionStream() {$/;"	f	language:C++	class:TrenchBroom::ParserException
ParserException	Exceptions.h	/^    class ParserException : public ExceptionStream<ParserException> {$/;"	c	language:C++	namespace:TrenchBroom
Path	IO/Path.cpp	/^        Path::Path(bool absolute, const StringList& components) :$/;"	f	language:C++	class:TrenchBroom::IO::Path
Path	IO/Path.cpp	/^        Path::Path(const String& path) {$/;"	f	language:C++	class:TrenchBroom::IO::Path
Path	IO/Path.h	/^        class Path {$/;"	c	language:C++	namespace:TrenchBroom::IO
PathException	Exceptions.h	/^        PathException() throw() {}$/;"	f	language:C++	class:TrenchBroom::PathException
PathException	Exceptions.h	/^        PathException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::PathException
PathException	Exceptions.h	/^    class PathException : public ExceptionStream<PathException> {$/;"	c	language:C++	namespace:TrenchBroom
PerspectiveCamera	Renderer/PerspectiveCamera.cpp	/^        PerspectiveCamera::PerspectiveCamera() :$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
PerspectiveCamera	Renderer/PerspectiveCamera.cpp	/^        PerspectiveCamera::PerspectiveCamera(const float fov, const float nearPlane, const float farPlane, const Viewport& viewport, const Vec3f& position, const Vec3f& direction, const Vec3f& up)$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
PerspectiveCamera	Renderer/PerspectiveCamera.h	/^        class PerspectiveCamera : public Camera {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Pi	MathUtils.h	/^        static const T Pi;$/;"	m	language:C++	class:Math::Constants
Pi	MathUtils.h	/^    const T Constants<T>::Pi                   = static_cast<T>(3.141592653589793);$/;"	m	language:C++	class:Math::Constants
PiOverFour	MathUtils.h	/^        static const T PiOverFour;$/;"	m	language:C++	class:Math::Constants
PiOverFour	MathUtils.h	/^    const T Constants<T>::PiOverFour           = Pi \/ static_cast<T>(4.0);$/;"	m	language:C++	class:Math::Constants
PiOverStraightAngle	MathUtils.h	/^        static const T PiOverStraightAngle;$/;"	m	language:C++	class:Math::Constants
PiOverStraightAngle	MathUtils.h	/^    const T Constants<T>::PiOverStraightAngle  = Pi \/ static_cast<T>(180.0);$/;"	m	language:C++	class:Math::Constants
PiOverTwo	MathUtils.h	/^        static const T PiOverTwo;$/;"	m	language:C++	class:Math::Constants
PiOverTwo	MathUtils.h	/^    const T Constants<T>::PiOverTwo            = Pi \/ static_cast<T>(2.0);$/;"	m	language:C++	class:Math::Constants
Pickable	Model/Pickable.h	/^        class Pickable {$/;"	c	language:C++	namespace:TrenchBroom::Model
PickableList	Model/ModelTypes.h	/^        typedef std::vector<Pickable*> PickableList;$/;"	t	language:C++	namespace:TrenchBroom::Model
Picker	Model/Picker.cpp	/^        Picker::Picker(const BBox<FloatType, 3>& worldBounds) :$/;"	f	language:C++	class:TrenchBroom::Model::Picker
Picker	Model/Picker.h	/^        class Picker {$/;"	c	language:C++	namespace:TrenchBroom::Model
PickingPolicy	View/Tool.h	/^        class PickingPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
PixelFormat	IO/ImageLoader.h	/^            enum PixelFormat {$/;"	g	language:C++	class:TrenchBroom::IO::ImageLoader
Plane	Plane.h	/^    Plane() :$/;"	f	language:C++	class:Plane
Plane	Plane.h	/^    Plane(const Plane<U,S>& other) :$/;"	f	language:C++	class:Plane
Plane	Plane.h	/^    Plane(const T i_distance, const Vec<T,S>& i_normal) :$/;"	f	language:C++	class:Plane
Plane	Plane.h	/^    Plane(const Vec<T,S>& i_anchor, const Vec<T,S>& i_normal) :$/;"	f	language:C++	class:Plane
Plane	Plane.h	/^class Plane {$/;"	c	language:C++
Plane3	TrenchBroom.h	/^typedef Plane<FloatType, 3> Plane3;$/;"	t	language:C++
Plane3f	Plane.h	/^typedef Plane<float,3> Plane3f;$/;"	t	language:C++
PlaneDragHelper	View/Tool.h	/^        class PlaneDragHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
PlaneDragPolicy	View/Tool.h	/^        class PlaneDragPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
PlanePointFinder	Model/PlanePointFinder.h	/^        class PlanePointFinder {$/;"	c	language:C++	namespace:TrenchBroom::Model
PlaneWeightOrder	IO/QuakeMapParser.cpp	/^        QuakeMapParser::PlaneWeightOrder::PlaneWeightOrder(const bool deterministic) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::PlaneWeightOrder
PlaneWeightOrder	IO/QuakeMapParser.h	/^            class PlaneWeightOrder {$/;"	c	language:C++	class:TrenchBroom::IO::QuakeMapParser
PointDistance	Ray.h	/^    struct PointDistance {$/;"	s	language:C++	class:Ray
PointEntityDefinition	Assets/EntityDefinition.cpp	/^        PointEntityDefinition::PointEntityDefinition(const String& name, const Color& color, const BBox3& bounds, const String& description, const PropertyDefinitionList propertyDefinitions, const ModelDefinitionList& modelDefinitions) :$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
PointEntityDefinition	Assets/EntityDefinition.h	/^        class PointEntityDefinition : public EntityDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
PointEntityWithBrushesIssue	Model/PointEntityWithBrushesIssueGenerator.cpp	/^            PointEntityWithBrushesIssue(Entity* entity) :$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssue
PointEntityWithBrushesIssue	Model/PointEntityWithBrushesIssueGenerator.cpp	/^        class PointEntityWithBrushesIssue : public EntityIssue {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
PointEntityWithBrushesIssueGenerator	Model/PointEntityWithBrushesIssueGenerator.h	/^        class PointEntityWithBrushesIssueGenerator : public IssueGenerator {$/;"	c	language:C++	namespace:TrenchBroom::Model
PointFile	Model/PointFile.cpp	/^        PointFile::PointFile() :$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
PointFile	Model/PointFile.cpp	/^        PointFile::PointFile(const IO::Path& mapFilePath) :$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
PointFile	Model/PointFile.h	/^        class PointFile {$/;"	c	language:C++	namespace:TrenchBroom::Model
PointHandleRenderer	Renderer/PointHandleRenderer.cpp	/^        PointHandleRenderer::PointHandleRenderer(Vbo& vbo, const float radius, const size_t iterations) :$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
PointHandleRenderer	Renderer/PointHandleRenderer.h	/^        class PointHandleRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
PointHandleShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig PointHandleShader          = ShaderConfig("Point Handle",                     "PointHandle.vertsh",          "Handle.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
PointStatus	MathUtils.h	/^    namespace PointStatus {$/;"	n	language:C++	namespace:Math
PointStatusEpsilon	MathUtils.h	/^        static const T PointStatusEpsilon;$/;"	m	language:C++	class:Math::Constants
PointStatusEpsilon	MathUtils.h	/^    const T Constants<T>::PointStatusEpsilon   = static_cast<T>(0.01);$/;"	m	language:C++	class:Math::Constants
Points	Model/BrushFace.h	/^            typedef Vec3 Points[3];$/;"	t	language:C++	class:TrenchBroom::Model::BrushFace
Polygon	Polygon.h	/^        Polygon() {}$/;"	f	language:C++	struct:TrenchBroom::Polygon
Polygon	Polygon.h	/^        Polygon(const typename Vec<T,S>::List& i_vertices) :$/;"	f	language:C++	struct:TrenchBroom::Polygon
Polygon	Polygon.h	/^        Polygon(typename Vec<T,S>::List& i_vertices) {$/;"	f	language:C++	struct:TrenchBroom::Polygon
Polygon	Polygon.h	/^    struct Polygon {$/;"	s	language:C++	namespace:TrenchBroom
Polygon3	TrenchBroom.h	/^    typedef Polygon<FloatType, 3> Polygon3;$/;"	t	language:C++	namespace:TrenchBroom
Pool	Allocator.h	/^    typedef std::stack<T*> Pool;$/;"	t	language:C++	class:Allocator
PopupButton	View/PopupButton.cpp	/^        PopupButton::PopupButton(wxWindow* parent, const wxString& caption) :$/;"	f	language:C++	class:TrenchBroom::View::PopupButton
PopupButton	View/PopupButton.h	/^        class PopupButton : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
PosX	Vec.h	/^    static const Vec<T,S> PosX;$/;"	m	language:C++	class:Vec
PosX	Vec.h	/^const Vec<T,S> Vec<T,S>::PosX = Vec<T,S>::unit(0);$/;"	m	language:C++	class:Vec
PosY	Vec.h	/^    static const Vec<T,S> PosY;$/;"	m	language:C++	class:Vec
PosY	Vec.h	/^const Vec<T,S> Vec<T,S>::PosY = Vec<T,S>::unit(1);$/;"	m	language:C++	class:Vec
PosZ	Vec.h	/^    static const Vec<T,S> PosZ;$/;"	m	language:C++	class:Vec
PosZ	Vec.h	/^const Vec<T,S> Vec<T,S>::PosZ = Vec<T,S>::unit(2);$/;"	m	language:C++	class:Vec
Position	Renderer/OutlineTracer.cpp	/^        OutlineTracer::Position::Position() :$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer::Position
Position	Renderer/OutlineTracer.cpp	/^        OutlineTracer::Position::Position(FloatType i_x, size_t i_count) :$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer::Position
Position	Renderer/OutlineTracer.h	/^            struct Position {$/;"	s	language:C++	class:TrenchBroom::Renderer::OutlineTracer
PosixMappedFile	IO/MappedFile.cpp	/^        PosixMappedFile::PosixMappedFile(const Path& path, std::ios_base::openmode mode) :$/;"	f	language:C++	class:TrenchBroom::IO::PosixMappedFile
PosixMappedFile	IO/MappedFile.h	/^        class PosixMappedFile : public MappedFile {$/;"	c	language:C++	namespace:TrenchBroom::IO
PrefPane	View/PreferenceDialog.h	/^            } PrefPane;$/;"	t	language:C++	class:TrenchBroom::View::PreferenceDialog	typeref:enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefPane_First	View/PreferenceDialog.h	/^                PrefPane_First,$/;"	e	language:C++	enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefPane_Games	View/PreferenceDialog.h	/^                PrefPane_Games,$/;"	e	language:C++	enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefPane_General	View/PreferenceDialog.h	/^                PrefPane_General,$/;"	e	language:C++	enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefPane_Keyboard	View/PreferenceDialog.h	/^                PrefPane_Keyboard,$/;"	e	language:C++	enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefPane_Last	View/PreferenceDialog.h	/^                PrefPane_Last$/;"	e	language:C++	enum:TrenchBroom::View::PreferenceDialog::__anon34
PrefTextColorProvider	Renderer/TextRenderer.h	/^                PrefTextColorProvider(Preference<Color>& textColorPref, Preference<Color>& backgroundColorPref) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::PrefTextColorProvider
PrefTextColorProvider	Renderer/TextRenderer.h	/^            class PrefTextColorProvider : public TextColorProvider {$/;"	c	language:C++	class:TrenchBroom::Renderer::TextRenderer
Preference	Preference.h	/^        Preference(const IO::Path& path, const T& defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Preference
Preference	Preference.h	/^    class Preference : public PreferenceBase {$/;"	c	language:C++	namespace:TrenchBroom
PreferenceBase	Preference.h	/^    class PreferenceBase {$/;"	c	language:C++	namespace:TrenchBroom
PreferenceDialog	View/PreferenceDialog.cpp	/^        PreferenceDialog::PreferenceDialog() :$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
PreferenceDialog	View/PreferenceDialog.h	/^        class PreferenceDialog : public wxDialog {$/;"	c	language:C++	namespace:TrenchBroom::View
PreferenceManager	PreferenceManager.cpp	/^    PreferenceManager::PreferenceManager() {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
PreferenceManager	PreferenceManager.h	/^    class PreferenceManager {$/;"	c	language:C++	namespace:TrenchBroom
PreferencePane	View/PreferencePane.cpp	/^        PreferencePane::PreferencePane(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::PreferencePane
PreferencePane	View/PreferencePane.h	/^        class PreferencePane : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
Preferences	Preferences.cpp	/^    namespace Preferences {$/;"	n	language:C++	namespace:TrenchBroom	file:
Preferences	Preferences.h	/^    namespace Preferences {$/;"	n	language:C++	namespace:TrenchBroom
Project	Model/TexCoordSystemHelper.h	/^            static const Mode Project    = 1 << 2;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
PropertyDefinition	Assets/PropertyDefinition.cpp	/^        PropertyDefinition::PropertyDefinition(const String& name, const Type type, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
PropertyDefinition	Assets/PropertyDefinition.h	/^        class PropertyDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
PropertyDefinitionList	Assets/AssetTypes.h	/^        typedef std::vector<PropertyDefinitionPtr> PropertyDefinitionList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
PropertyDefinitionMap	Assets/AssetTypes.h	/^        typedef std::map<String, PropertyDefinitionPtr> PropertyDefinitionMap;$/;"	t	language:C++	namespace:TrenchBroom::Assets
PropertyDefinitionPtr	Assets/AssetTypes.h	/^        typedef TrenchBroom::shared_ptr<PropertyDefinition> PropertyDefinitionPtr;$/;"	t	language:C++	namespace:TrenchBroom::Assets
PropertyDefinitionWithDefaultValue	Assets/PropertyDefinition.h	/^            PropertyDefinitionWithDefaultValue(const String& name, const Type type, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
PropertyDefinitionWithDefaultValue	Assets/PropertyDefinition.h	/^            PropertyDefinitionWithDefaultValue(const String& name, const Type type, const String& description, const T& defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
PropertyDefinitionWithDefaultValue	Assets/PropertyDefinition.h	/^        class PropertyDefinitionWithDefaultValue : public PropertyDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
PropertyKey	Model/ModelTypes.h	/^        typedef String PropertyKey;$/;"	t	language:C++	namespace:TrenchBroom::Model
PropertyKeyList	Model/ModelTypes.h	/^        typedef std::vector<PropertyKey> PropertyKeyList;$/;"	t	language:C++	namespace:TrenchBroom::Model
PropertyKeySet	Model/ModelTypes.h	/^        typedef std::set<PropertyKey> PropertyKeySet;$/;"	t	language:C++	namespace:TrenchBroom::Model
PropertyKeys	Model/EntityProperties.cpp	/^        namespace PropertyKeys {$/;"	n	language:C++	namespace:TrenchBroom::Model	file:
PropertyKeys	Model/EntityProperties.h	/^        namespace PropertyKeys {$/;"	n	language:C++	namespace:TrenchBroom::Model
PropertyRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow::PropertyRow() :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
PropertyRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow::PropertyRow(const String& key, const String& value, const String& tooltip, const size_t maxCount) :$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
PropertyRow	View/EntityPropertyGridTable.h	/^            class PropertyRow {$/;"	c	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
PropertySnapshot	Controller/EntityPropertyCommand.h	/^            typedef std::map<Model::Entity*, Model::EntityProperty> PropertySnapshot;$/;"	t	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
PropertyValue	Model/ModelTypes.h	/^        typedef String PropertyValue;$/;"	t	language:C++	namespace:TrenchBroom::Model
PropertyValueList	Model/ModelTypes.h	/^        typedef std::vector<PropertyValue> PropertyValueList;$/;"	t	language:C++	namespace:TrenchBroom::Model
PropertyValues	Model/EntityProperties.cpp	/^        namespace PropertyValues {$/;"	n	language:C++	namespace:TrenchBroom::Model	file:
PropertyValues	Model/EntityProperties.h	/^        namespace PropertyValues {$/;"	n	language:C++	namespace:TrenchBroom::Model
Ptr	ConfigTypes.h	/^        typedef TrenchBroom::shared_ptr<ConfigEntry> Ptr;$/;"	t	language:C++	class:TrenchBroom::ConfigEntry
Ptr	ConfigTypes.h	/^        typedef TrenchBroom::shared_ptr<ConfigList> Ptr;$/;"	t	language:C++	class:TrenchBroom::ConfigList
Ptr	ConfigTypes.h	/^        typedef TrenchBroom::shared_ptr<ConfigTable> Ptr;$/;"	t	language:C++	class:TrenchBroom::ConfigTable
Ptr	ConfigTypes.h	/^        typedef TrenchBroom::shared_ptr<ConfigValue> Ptr;$/;"	t	language:C++	class:TrenchBroom::ConfigValue
Ptr	Controller/AddRemoveObjectsCommand.h	/^            typedef TrenchBroom::shared_ptr<AddRemoveObjectsCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
Ptr	Controller/BrushVertexHandleCommand.h	/^            typedef TrenchBroom::shared_ptr<BrushVertexHandleCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
Ptr	Controller/Command.h	/^            typedef TrenchBroom::shared_ptr<Command> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::Command
Ptr	Controller/EntityPropertyCommand.h	/^            typedef TrenchBroom::shared_ptr<EntityPropertyCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
Ptr	Controller/FaceAttributeCommand.h	/^            typedef TrenchBroom::shared_ptr<FaceAttributeCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
Ptr	Controller/FixPlanePointsCommand.h	/^            typedef TrenchBroom::shared_ptr<FixPlanePointsCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
Ptr	Controller/MoveBrushEdgesCommand.h	/^            typedef TrenchBroom::shared_ptr<MoveBrushEdgesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
Ptr	Controller/MoveBrushFacesCommand.h	/^            typedef TrenchBroom::shared_ptr<MoveBrushFacesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
Ptr	Controller/MoveBrushVerticesCommand.h	/^            typedef TrenchBroom::shared_ptr<MoveBrushVerticesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
Ptr	Controller/MoveTexturesCommand.h	/^            typedef TrenchBroom::shared_ptr<MoveTexturesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
Ptr	Controller/NewDocumentCommand.h	/^            typedef TrenchBroom::shared_ptr<NewDocumentCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
Ptr	Controller/OpenDocumentCommand.h	/^            typedef TrenchBroom::shared_ptr<OpenDocumentCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
Ptr	Controller/RebuildBrushGeometryCommand.h	/^            typedef TrenchBroom::shared_ptr<RebuildBrushGeometryCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
Ptr	Controller/ReparentBrushesCommand.h	/^            typedef TrenchBroom::shared_ptr<ReparentBrushesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
Ptr	Controller/ResizeBrushesCommand.h	/^            typedef TrenchBroom::shared_ptr<ResizeBrushesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
Ptr	Controller/RotateTexturesCommand.h	/^            typedef TrenchBroom::shared_ptr<RotateTexturesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
Ptr	Controller/SelectionCommand.h	/^            typedef TrenchBroom::shared_ptr<SelectionCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SelectionCommand
Ptr	Controller/SetEntityDefinitionFileCommand.h	/^            typedef TrenchBroom::shared_ptr<SetEntityDefinitionFileCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
Ptr	Controller/SetModsCommand.h	/^            typedef TrenchBroom::shared_ptr<SetModsCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SetModsCommand
Ptr	Controller/SnapBrushVerticesCommand.h	/^            typedef TrenchBroom::shared_ptr<SnapBrushVerticesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
Ptr	Controller/SplitBrushEdgesCommand.h	/^            typedef TrenchBroom::shared_ptr<SplitBrushEdgesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
Ptr	Controller/SplitBrushFacesCommand.h	/^            typedef TrenchBroom::shared_ptr<SplitBrushFacesCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
Ptr	Controller/TextureCollectionCommand.h	/^            typedef TrenchBroom::shared_ptr<TextureCollectionCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
Ptr	Controller/TransformObjectsCommand.h	/^            typedef TrenchBroom::shared_ptr<TransformObjectsCommand> Ptr;$/;"	t	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
Ptr	Holder.h	/^    typedef TrenchBroom::shared_ptr<BaseHolder> Ptr;$/;"	t	language:C++	class:BaseHolder
Ptr	IO/MappedFile.h	/^            typedef TrenchBroom::shared_ptr<MappedFile> Ptr;$/;"	t	language:C++	class:TrenchBroom::IO::MappedFile
Ptr	Model/Brush.h	/^                typedef TrenchBroom::shared_ptr<FacesHolder> Ptr;$/;"	t	language:C++	struct:TrenchBroom::Model::BrushSnapshot::FacesHolder
Ptr	Model/FaceAdjacencyGraph.h	/^                typedef TrenchBroom::shared_ptr<Edge> Ptr;$/;"	t	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
Ptr	Renderer/FontTexture.h	/^            typedef std::auto_ptr<FontTexture> Ptr;$/;"	t	language:C++	class:TrenchBroom::Renderer::FontTexture
Ptr	Renderer/TextRenderer.h	/^            typedef TrenchBroom::shared_ptr<TextAnchor> Ptr;$/;"	t	language:C++	class:TrenchBroom::Renderer::TextAnchor
Ptr	Renderer/Vbo.h	/^            typedef TrenchBroom::shared_ptr<Vbo> Ptr;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vbo
Ptr	Renderer/VertexArray.h	/^            typedef TrenchBroom::shared_ptr<BaseHolder> Ptr;$/;"	t	language:C++	class:TrenchBroom::Renderer::BaseHolder
Ptr	View/Animation.h	/^            typedef TrenchBroom::shared_ptr<Animation> Ptr;$/;"	t	language:C++	class:TrenchBroom::View::Animation
Ptr	View/ExecutableEvent.h	/^                typedef TrenchBroom::shared_ptr<Executable> Ptr;$/;"	t	language:C++	class:TrenchBroom::View::ExecutableEvent::Executable
Ptr	View/GLContextHolder.h	/^            typedef TrenchBroom::shared_ptr<GLContextHolder> Ptr;$/;"	t	language:C++	class:TrenchBroom::View::GLContextHolder
Ptr	View/KeyboardPreferencePane.h	/^            typedef TrenchBroom::shared_ptr<KeyboardShortcutEntry> Ptr;$/;"	t	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
Ptr	View/Menu.h	/^            typedef TrenchBroom::shared_ptr<MenuItem> Ptr;$/;"	t	language:C++	class:TrenchBroom::View::MenuItem
PtrCmp	CollectionUtils.h	/^    struct PtrCmp {$/;"	s	language:C++	namespace:Utils
Quake	Model/ModelTypes.h	/^            static const Type Quake   = 1 << 1;$/;"	m	language:C++	namespace:TrenchBroom::Model::MapFormat
Quake2	Model/ModelTypes.h	/^            static const Type Quake2  = 1 << 2;$/;"	m	language:C++	namespace:TrenchBroom::Model::MapFormat
Quake2MapWriter	IO/Quake2MapWriter.cpp	/^        Quake2MapWriter::Quake2MapWriter() {$/;"	f	language:C++	class:TrenchBroom::IO::Quake2MapWriter
Quake2MapWriter	IO/Quake2MapWriter.h	/^        class Quake2MapWriter : public MapWriter {$/;"	c	language:C++	namespace:TrenchBroom::IO
QuakeEntityRotationPolicy	Model/QuakeEntityRotationPolicy.h	/^        class QuakeEntityRotationPolicy {$/;"	c	language:C++	namespace:TrenchBroom::Model
QuakeMapParser	IO/QuakeMapParser.cpp	/^        QuakeMapParser::QuakeMapParser(const String& str, Logger* logger) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
QuakeMapParser	IO/QuakeMapParser.cpp	/^        QuakeMapParser::QuakeMapParser(const char* begin, const char* end, Logger* logger) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
QuakeMapParser	IO/QuakeMapParser.h	/^        class QuakeMapParser : public MapParser, public Parser<QuakeMapToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
QuakeMapToken	IO/QuakeMapParser.h	/^        namespace QuakeMapToken {$/;"	n	language:C++	namespace:TrenchBroom::IO
QuakeMapTokenizer	IO/QuakeMapParser.cpp	/^        QuakeMapTokenizer::QuakeMapTokenizer(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapTokenizer
QuakeMapTokenizer	IO/QuakeMapParser.cpp	/^        QuakeMapTokenizer::QuakeMapTokenizer(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapTokenizer
QuakeMapTokenizer	IO/QuakeMapParser.h	/^        class QuakeMapTokenizer : public Tokenizer<QuakeMapToken::Type> {$/;"	c	language:C++	namespace:TrenchBroom::IO
QuakeMapWriter	IO/QuakeMapWriter.cpp	/^        QuakeMapWriter::QuakeMapWriter() {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapWriter
QuakeMapWriter	IO/QuakeMapWriter.h	/^        class QuakeMapWriter : public MapWriter {$/;"	c	language:C++	namespace:TrenchBroom::IO
Quat	Quat.h	/^    Quat() :$/;"	f	language:C++	class:Quat
Quat	Quat.h	/^    Quat(const Quat<U>& other) :$/;"	f	language:C++	class:Quat
Quat	Quat.h	/^    Quat(const T i_r, const Vec<T,3>& i_v) :$/;"	f	language:C++	class:Quat
Quat	Quat.h	/^    Quat(const Vec<T,3>& axis, const T angle) {$/;"	f	language:C++	class:Quat
Quat	Quat.h	/^    Quat(const Vec<T,3>& from, const Vec<T,3>& to) {$/;"	f	language:C++	class:Quat
Quat	Quat.h	/^class Quat {$/;"	c	language:C++
Quat3	TrenchBroom.h	/^typedef Quat<FloatType> Quat3;$/;"	t	language:C++
Quatd	Quat.h	/^typedef Quat<double> Quatd;$/;"	t	language:C++
Quatf	Quat.h	/^typedef Quat<float> Quatf;$/;"	t	language:C++
Question	IO/DefParser.h	/^            static const Type Question        = 1 <<  8; \/\/ question mark: ?$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
QuickFix	Model/QuickFix.cpp	/^        QuickFix::QuickFix(const QuickFixType type, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Model::QuickFix
QuickFix	Model/QuickFix.h	/^        class QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
QuickFixType	Model/QuickFix.h	/^        typedef size_t QuickFixType;$/;"	t	language:C++	namespace:TrenchBroom::Model
QuotedString	IO/DefParser.h	/^            static const Type QuotedString    = 1 <<  2; \/\/ string$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
RGB	IO/ImageLoader.h	/^                RGB,$/;"	e	language:C++	enum:TrenchBroom::IO::ImageLoader::PixelFormat
RGBA	IO/ImageLoader.h	/^                RGBA$/;"	e	language:C++	enum:TrenchBroom::IO::ImageLoader::PixelFormat
RGBToYIQ	Mat.h	/^    static const Mat<T,R,C> RGBToYIQ;$/;"	m	language:C++	class:Mat
RGBToYIQ	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::RGBToYIQ     = Mat<T,R,C>( static_cast<T>(0.299),    static_cast<T>( 0.587),    static_cast<T>( 0.114),$/;"	m	language:C++	class:Mat
Range	BBox.h	/^        } Range;$/;"	t	language:C++	class:BBox::RelativePosition	typeref:enum:BBox::RelativePosition::__anon5
Range_Greater	BBox.h	/^            Range_Greater$/;"	e	language:C++	enum:BBox::RelativePosition::__anon5
Range_Less	BBox.h	/^            Range_Less,$/;"	e	language:C++	enum:BBox::RelativePosition::__anon5
Range_Within	BBox.h	/^            Range_Within,$/;"	e	language:C++	enum:BBox::RelativePosition::__anon5
Ray	Ray.h	/^    Ray() :$/;"	f	language:C++	class:Ray
Ray	Ray.h	/^    Ray(const Ray<U,S>& other) :$/;"	f	language:C++	class:Ray
Ray	Ray.h	/^    Ray(const Vec<T,S>& i_origin, const Vec<T,S>& i_direction) :$/;"	f	language:C++	class:Ray
Ray	Ray.h	/^class Ray {$/;"	c	language:C++
Ray3	TrenchBroom.h	/^typedef Ray<FloatType, 3> Ray3;$/;"	t	language:C++
Ray3d	Ray.h	/^typedef Ray<double,3> Ray3d;$/;"	t	language:C++
Ray3f	Ray.h	/^typedef Ray<float,3> Ray3f;$/;"	t	language:C++
RebuildBrushGeometryCommand	Controller/RebuildBrushGeometryCommand.cpp	/^        RebuildBrushGeometryCommand::RebuildBrushGeometryCommand(View::MapDocumentWPtr document, const Model::BrushList& brushes) :$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
RebuildBrushGeometryCommand	Controller/RebuildBrushGeometryCommand.h	/^        class RebuildBrushGeometryCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
RecentDocumentListBox	View/RecentDocumentListBox.cpp	/^        RecentDocumentListBox::RecentDocumentListBox(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentListBox
RecentDocumentListBox	View/RecentDocumentListBox.h	/^        class RecentDocumentListBox : public ImageListBox {$/;"	c	language:C++	namespace:TrenchBroom::View
RecentDocumentSelectedCommand	View/RecentDocumentSelectedCommand.cpp	/^        RecentDocumentSelectedCommand::RecentDocumentSelectedCommand() :$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentSelectedCommand
RecentDocumentSelectedCommand	View/RecentDocumentSelectedCommand.h	/^        class RecentDocumentSelectedCommand : public wxNotifyEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
RecentDocuments	View/RecentDocuments.h	/^            RecentDocuments(const int baseId, const size_t maxSize) :$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
RecentDocuments	View/RecentDocuments.h	/^        class RecentDocuments {$/;"	c	language:C++	namespace:TrenchBroom::View
RefHolder	Renderer/VertexArray.h	/^            RefHolder(const VertexList& vertices) :$/;"	f	language:C++	class:TrenchBroom::Renderer::RefHolder
RefHolder	Renderer/VertexArray.h	/^        class RefHolder : public Holder<VertexSpec> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
RelativePosition	BBox.h	/^        RelativePosition(const Range positions[S]) {$/;"	f	language:C++	class:BBox::RelativePosition
RelativePosition	BBox.h	/^    class RelativePosition {$/;"	c	language:C++	class:BBox
RemoveFromEntity	View/MapDocument.cpp	/^            RemoveFromEntity(Model::Entity& entity) :$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromEntity
RemoveFromEntity	View/MapDocument.cpp	/^        class RemoveFromEntity {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
RemoveFromMap	View/MapDocument.cpp	/^            RemoveFromMap(Model::Map& map) :$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromMap
RemoveFromMap	View/MapDocument.cpp	/^        class RemoveFromMap {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
RemoveFromPicker	View/MapDocument.cpp	/^            RemoveFromPicker(Model::Picker& picker) :$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromPicker
RemoveFromPicker	View/MapDocument.cpp	/^        class RemoveFromPicker {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
RemoveObjectFromDocument	Controller/AddRemoveObjectsCommand.cpp	/^            RemoveObjectFromDocument(View::MapDocumentSPtr document, Model::ObjectList& removedObjects) :$/;"	f	language:C++	struct:TrenchBroom::Controller::RemoveObjectFromDocument
RemoveObjectFromDocument	Controller/AddRemoveObjectsCommand.cpp	/^        struct RemoveObjectFromDocument {$/;"	s	language:C++	namespace:TrenchBroom::Controller	file:
RemoveObjectFromIssueManager	View/MapDocument.cpp	/^            RemoveObjectFromIssueManager(Model::IssueManager& issueManager) :$/;"	f	language:C++	class:TrenchBroom::View::RemoveObjectFromIssueManager
RemoveObjectFromIssueManager	View/MapDocument.cpp	/^        class RemoveObjectFromIssueManager {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
RenderContext	Renderer/RenderContext.cpp	/^        RenderContext::RenderContext(const Camera& camera, ShaderManager& shaderManager, const bool gridVisible, const size_t gridSize) :$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
RenderContext	Renderer/RenderContext.h	/^        class RenderContext {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
RenderData	Renderer/MeshRenderer.h	/^            typedef MeshRenderData<const Assets::Texture*> RenderData;$/;"	t	language:C++	class:TrenchBroom::Renderer::MeshRenderer
RenderException	Exceptions.h	/^        RenderException() throw() {}$/;"	f	language:C++	class:TrenchBroom::RenderException
RenderException	Exceptions.h	/^        RenderException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::RenderException
RenderException	Exceptions.h	/^    class RenderException : public ExceptionStream<RenderException> {$/;"	c	language:C++	namespace:TrenchBroom
RenderPolicy	View/Tool.h	/^        class RenderPolicy {$/;"	c	language:C++	namespace:TrenchBroom::View
RenderView	View/RenderView.cpp	/^        RenderView::RenderView(wxWindow* parent, GLContextHolder::Ptr sharedContext) :$/;"	f	language:C++	class:TrenchBroom::View::RenderView
RenderView	View/RenderView.cpp	/^        RenderView::RenderView(wxWindow* parent, const GLContextHolder::GLAttribs& attribs) :$/;"	f	language:C++	class:TrenchBroom::View::RenderView
RenderView	View/RenderView.h	/^        class RenderView : public wxGLCanvas {$/;"	c	language:C++	namespace:TrenchBroom::View
Renderer	Assets/Bsp29Model.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Assets/EntityModel.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Assets/EntityModelManager.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Assets/Md2Model.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Assets/MdlModel.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/AttributeSpec.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/BoundsGuideRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/BoundsGuideRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/BoundsInfoRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/BoundsInfoRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/BrushRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/BrushRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Camera.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Camera.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Circle.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Circle.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/ClipperRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/ClipperRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Compass.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Compass.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/EdgeRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/EdgeRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/EntityLinkRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/EntityLinkRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/EntityModelRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/EntityModelRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/EntityRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/EntityRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/FaceRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/FaceRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/FontDescriptor.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/FontDescriptor.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/FontManager.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/FontManager.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/FontTexture.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/FontTexture.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/IndexedVertexList.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/MapRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/MapRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Mesh.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/MeshRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/MeshRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/MiniMapRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/MiniMapRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/MoveIndicatorRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/MoveIndicatorRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/OrthographicCamera.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/OrthographicCamera.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/OutlineTracer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/OutlineTracer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/PerspectiveCamera.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/PerspectiveCamera.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/PointHandleRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/PointHandleRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/RenderContext.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/RenderContext.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/RenderUtils.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/RenderUtils.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Ring.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Ring.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Shader.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Shader.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/ShaderManager.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/ShaderManager.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/ShaderProgram.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/ShaderProgram.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Sphere.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Sphere.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/TextRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/TextRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/TextureFont.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/TextureFont.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Transformation.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Transformation.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/TriangleRenderer.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/TriangleRenderer.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Vbo.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/Vbo.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/VboBlock.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/VboBlock.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/Vertex.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/VertexArray.cpp	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom	file:
Renderer	Renderer/VertexArray.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	Renderer/VertexSpec.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/CameraAnimation.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/CameraTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/Clipper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/CreateBrushTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/CreateEntityTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/EntityBrowserView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/Inspector.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MapInspector.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MapView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MiniMap.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MiniMapBaseView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MiniMapXYView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MiniMapZView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MoveTextureHelper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MoveToolHelper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/MovementRestriction.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/RenderView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/ResizeBrushesTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/RotateObjectsHandle.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/RotateObjectsTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/RotateToolHelper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TextureCoordSystemHelper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TextureTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingView.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingViewCameraTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingViewHelper.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingViewRotateTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingViewScaleOriginTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/TexturingViewScaleTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/Tool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/ToolBox.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/VertexHandleManager.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
Renderer	View/VertexTool.h	/^    namespace Renderer {$/;"	n	language:C++	namespace:TrenchBroom
RendererCache	Assets/EntityModelManager.h	/^            typedef std::map<Assets::ModelSpecification, Renderer::MeshRenderer*> RendererCache;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityModelManager
RendererFilter	View/CreateBrushTool.cpp	/^        struct RendererFilter : public Renderer::BrushRenderer::Filter {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
RendererMismatches	Assets/EntityModelManager.h	/^            typedef std::set<Assets::ModelSpecification> RendererMismatches;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityModelManager
ReparentBrushes	View/CommandIds.h	/^                static const int ReparentBrushes                    = HighestBrushEntityItem + 1;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::CreateEntityPopupMenu
ReparentBrushesCommand	Controller/ReparentBrushesCommand.cpp	/^        ReparentBrushesCommand::ReparentBrushesCommand(View::MapDocumentWPtr document, const Model::BrushList& brushes, Model::Entity* newParent) :$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
ReparentBrushesCommand	Controller/ReparentBrushesCommand.h	/^        class ReparentBrushesCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
ReplaceModelMatrix	Renderer/Transformation.cpp	/^        ReplaceModelMatrix::ReplaceModelMatrix(Transformation& transformation, const Mat4x4f& modelMatrix) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ReplaceModelMatrix
ReplaceModelMatrix	Renderer/Transformation.h	/^        class ReplaceModelMatrix {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
ReplaceTransformation	Renderer/Transformation.cpp	/^        ReplaceTransformation::ReplaceTransformation(Transformation& transformation, const Mat4x4f& projectionMatrix, const Mat4x4f& viewMatrix, const Mat4x4f& modelMatrix) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ReplaceTransformation
ReplaceTransformation	Renderer/Transformation.h	/^        class ReplaceTransformation {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Reset	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::Reset() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
ResizeBrushesCommand	Controller/ResizeBrushesCommand.cpp	/^        ResizeBrushesCommand::ResizeBrushesCommand(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const Model::BrushList& brushes, const Vec3& delta, const bool lockTextures) :$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
ResizeBrushesCommand	Controller/ResizeBrushesCommand.h	/^        class ResizeBrushesCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
ResizeBrushesTool	View/ResizeBrushesTool.cpp	/^        ResizeBrushesTool::ResizeBrushesTool(MapDocumentWPtr document, ControllerWPtr controller, const Renderer::Camera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
ResizeBrushesTool	View/ResizeBrushesTool.h	/^        class ResizeBrushesTool : public ToolImpl<NoActivationPolicy, PickingPolicy, MousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
ResizeHit	View/ResizeBrushesTool.cpp	/^        const Hit::HitType ResizeBrushesTool::ResizeHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool	file:
ResizeHit	View/ResizeBrushesTool.h	/^            static const Hit::HitType ResizeHit;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
ResourceNotFoundException	Exceptions.h	/^        ResourceNotFoundException() throw() {}$/;"	f	language:C++	class:TrenchBroom::ResourceNotFoundException
ResourceNotFoundException	Exceptions.h	/^        ResourceNotFoundException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::ResourceNotFoundException
ResourceNotFoundException	Exceptions.h	/^    class ResourceNotFoundException : public ExceptionStream<ResourceNotFoundException> {$/;"	c	language:C++	namespace:TrenchBroom
Restriction	View/MovementRestriction.h	/^            } Restriction;$/;"	t	language:C++	class:TrenchBroom::View::MovementRestriction	typeref:enum:TrenchBroom::View::MovementRestriction::__anon32
Restriction_ForwardBack	View/MovementRestriction.h	/^                Restriction_ForwardBack$/;"	e	language:C++	enum:TrenchBroom::View::MovementRestriction::__anon32
Restriction_LeftRight	View/MovementRestriction.h	/^                Restriction_LeftRight,$/;"	e	language:C++	enum:TrenchBroom::View::MovementRestriction::__anon32
Restriction_None	View/MovementRestriction.h	/^                Restriction_None,$/;"	e	language:C++	enum:TrenchBroom::View::MovementRestriction::__anon32
Right	Renderer/TextRenderer.h	/^            static const Type Right     = 1 << 3;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Alignment
Ring	Renderer/Ring.cpp	/^        Ring::Ring(const float radius, const float width, const float startAngle, const float angleLength, const size_t segments) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Ring
Ring	Renderer/Ring.h	/^        class Ring {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
RootGLContextHolder	View/GLContextHolder.cpp	/^        RootGLContextHolder::RootGLContextHolder(wxGLCanvas* canvas, const GLAttribs& attribs) :$/;"	f	language:C++	class:TrenchBroom::View::RootGLContextHolder
RootGLContextHolder	View/GLContextHolder.h	/^        class RootGLContextHolder : public GLContextHolder {$/;"	c	language:C++	namespace:TrenchBroom::View
Rot180X	Mat.h	/^    static const Mat<T,R,C> Rot180X;$/;"	m	language:C++	class:Mat
Rot180X	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot180X     = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot180Y	Mat.h	/^    static const Mat<T,R,C> Rot180Y;$/;"	m	language:C++	class:Mat
Rot180Y	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot180Y     = Mat<T,R,C>(-static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot180Z	Mat.h	/^    static const Mat<T,R,C> Rot180Z;$/;"	m	language:C++	class:Mat
Rot180Z	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot180Z     = Mat<T,R,C>(-static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90XCCW	Mat.h	/^    static const Mat<T,R,C> Rot90XCCW;$/;"	m	language:C++	class:Mat
Rot90XCCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90XCCW   = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90XCW	Mat.h	/^    static const Mat<T,R,C> Rot90XCW;$/;"	m	language:C++	class:Mat
Rot90XCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90XCW    = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90YCCW	Mat.h	/^    static const Mat<T,R,C> Rot90YCCW;$/;"	m	language:C++	class:Mat
Rot90YCCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90YCCW   = Mat<T,R,C>( static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(1.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90YCW	Mat.h	/^    static const Mat<T,R,C> Rot90YCW;$/;"	m	language:C++	class:Mat
Rot90YCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90YCW    = Mat<T,R,C>( static_cast<T>(0.0),  static_cast<T>(0.0), -static_cast<T>(1.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90ZCCW	Mat.h	/^    static const Mat<T,R,C> Rot90ZCCW;$/;"	m	language:C++	class:Mat
Rot90ZCCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90ZCCW   = Mat<T,R,C>( static_cast<T>(0.0), -static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
Rot90ZCW	Mat.h	/^    static const Mat<T,R,C> Rot90ZCW;$/;"	m	language:C++	class:Mat
Rot90ZCW	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::Rot90ZCW    = Mat<T,R,C>( static_cast<T>(0.0),  static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
RotateBBox	BBox.h	/^    RotateBBox(const Quat<T>& i_rotation) :$/;"	f	language:C++	struct:RotateBBox
RotateBBox	BBox.h	/^struct RotateBBox {$/;"	s	language:C++
RotateDelegate	View/RotateToolHelper.h	/^        class RotateDelegate {$/;"	c	language:C++	namespace:TrenchBroom::View
RotateHelper	View/RotateToolHelper.cpp	/^        RotateHelper::RotateHelper(RotateDelegate& delegate, Renderer::TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
RotateHelper	View/RotateToolHelper.h	/^        class RotateHelper : public PlaneDragHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
RotateInfo	View/RotateToolHelper.h	/^        struct RotateInfo {$/;"	s	language:C++	namespace:TrenchBroom::View
RotateObjectsHandle	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::RotateObjectsHandle() :$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
RotateObjectsHandle	View/RotateObjectsHandle.h	/^        class RotateObjectsHandle {$/;"	c	language:C++	namespace:TrenchBroom::View
RotateObjectsTool	View/RotateObjectsTool.cpp	/^        RotateObjectsTool::RotateObjectsTool(MapDocumentWPtr document, ControllerWPtr controller, const Renderer::Camera& camera, MovementRestriction& movementRestriction, Renderer::TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
RotateObjectsTool	View/RotateObjectsTool.h	/^        class RotateObjectsTool : public ToolImpl<ActivationPolicy, PickingPolicy, MousePolicy, PlaneDragPolicy, NoDropPolicy, RenderPolicy>, public MoveDelegate, public RotateDelegate {$/;"	c	language:C++	namespace:TrenchBroom::View
RotateTexturesCommand	Controller/RotateTexturesCommand.cpp	/^        RotateTexturesCommand::RotateTexturesCommand(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const float angle) :$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
RotateTexturesCommand	Controller/RotateTexturesCommand.h	/^        class RotateTexturesCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
RotationAxis	View/ViewTypes.h	/^        } RotationAxis;$/;"	t	language:C++	namespace:TrenchBroom::View	typeref:enum:TrenchBroom::View::__anon39
RotationAxis_Pitch	View/ViewTypes.h	/^            RotationAxis_Pitch,$/;"	e	language:C++	enum:TrenchBroom::View::__anon39
RotationAxis_Roll	View/ViewTypes.h	/^            RotationAxis_Roll,$/;"	e	language:C++	enum:TrenchBroom::View::__anon39
RotationAxis_Yaw	View/ViewTypes.h	/^            RotationAxis_Yaw$/;"	e	language:C++	enum:TrenchBroom::View::__anon39
RotationInfo	Model/QuakeEntityRotationPolicy.h	/^                RotationInfo(RotationType i_type, const PropertyKey& i_property) :$/;"	f	language:C++	struct:TrenchBroom::Model::QuakeEntityRotationPolicy::RotationInfo
RotationInfo	Model/QuakeEntityRotationPolicy.h	/^            struct RotationInfo {$/;"	s	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
RotationType	Model/QuakeEntityRotationPolicy.h	/^            } RotationType;$/;"	t	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy	typeref:enum:TrenchBroom::Model::QuakeEntityRotationPolicy::__anon24
RotationType_Angle	Model/QuakeEntityRotationPolicy.h	/^                RotationType_Angle,$/;"	e	language:C++	enum:TrenchBroom::Model::QuakeEntityRotationPolicy::__anon24
RotationType_AngleUpDown	Model/QuakeEntityRotationPolicy.h	/^                RotationType_AngleUpDown,$/;"	e	language:C++	enum:TrenchBroom::Model::QuakeEntityRotationPolicy::__anon24
RotationType_Euler	Model/QuakeEntityRotationPolicy.h	/^                RotationType_Euler$/;"	e	language:C++	enum:TrenchBroom::Model::QuakeEntityRotationPolicy::__anon24
RotationType_None	Model/QuakeEntityRotationPolicy.h	/^                RotationType_None,$/;"	e	language:C++	enum:TrenchBroom::Model::QuakeEntityRotationPolicy::__anon24
Row	View/CellLayout.h	/^            typedef LayoutRow<CellType> Row;$/;"	t	language:C++	class:TrenchBroom::View::LayoutGroup
RowList	View/CellLayout.h	/^            typedef std::vector<Row> RowList;$/;"	t	language:C++	class:TrenchBroom::View::LayoutGroup
RowManager	View/EntityPropertyGridTable.h	/^            class RowManager {$/;"	c	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
Rows	Mat.h	/^    static const size_t Rows = R;$/;"	m	language:C++	class:Mat
SIZEOF_LONG	FreeType.h	/^    #define SIZEOF_LONG /;"	d	language:C++
SIZEOF_LONG	FreeType.h	/^    #undef SIZEOF_LONG$/;"	d	language:C++
SIZEOF_LONG_OLD	FreeType.h	/^    #define SIZEOF_LONG_OLD /;"	d	language:C++
SIZEOF_LONG_OLD	FreeType.h	/^    #undef SIZEOF_LONG_OLD$/;"	d	language:C++
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v	language:Python
Scale	Model/TexCoordSystemHelper.h	/^            static const Mode Scale      = 1 << 1;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
SelectObjectsCommandId	View/IssueBrowser.h	/^            static const int SelectObjectsCommandId = 1;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
SelectedBrushRendererFilter	Renderer/MapRenderer.cpp	/^            SelectedBrushRendererFilter(const Model::ModelFilter& filter) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::SelectedBrushRendererFilter
SelectedBrushRendererFilter	Renderer/MapRenderer.cpp	/^        struct SelectedBrushRendererFilter : public BrushRenderer::Filter {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
Selection	Model/Selection.cpp	/^        Selection::Selection(const ModelFilter& filter) :$/;"	f	language:C++	class:TrenchBroom::Model::Selection
Selection	Model/Selection.h	/^        class Selection {$/;"	c	language:C++	namespace:TrenchBroom::Model
SelectionCommand	Controller/SelectionCommand.cpp	/^        SelectionCommand::SelectionCommand(View::MapDocumentWPtr document, const Action action, const Model::ObjectList& objects, const Model::BrushFaceList& faces, const bool keepBrushSelection) :$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
SelectionCommand	Controller/SelectionCommand.h	/^        class SelectionCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SelectionHeapCmp	Vec.h	/^        SelectionHeapCmp(const Vec<T,S>& vec, const bool abs) :$/;"	f	language:C++	class:Vec::SelectionHeapCmp
SelectionHeapCmp	Vec.h	/^    class SelectionHeapCmp {$/;"	c	language:C++	class:Vec
SelectionHitFilter	Model/HitAdapter.h	/^        class SelectionHitFilter : public HitFilter {$/;"	c	language:C++	namespace:TrenchBroom::Model
SelectionResult	Model/SelectionResult.cpp	/^        SelectionResult::SelectionResult() :$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
SelectionResult	Model/SelectionResult.h	/^        class SelectionResult {$/;"	c	language:C++	namespace:TrenchBroom::Model
SelectionTool	View/SelectionTool.cpp	/^        SelectionTool::SelectionTool(MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
SelectionTool	View/SelectionTool.h	/^        class SelectionTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, MousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
Semicolon	IO/DefParser.h	/^            static const Type Semicolon       = 1 << 11; \/\/ semicolon: ;$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Set	Preference.h	/^        typedef std::set<const PreferenceBase*> Set;$/;"	t	language:C++	class:TrenchBroom::PreferenceBase
Set	Vec.h	/^    typedef std::set<Vec<T,S>, LexicographicOrder> Set;$/;"	t	language:C++	class:Vec
SetBool	SetBool.cpp	/^    SetBool::SetBool(bool& value, bool setTo) :$/;"	f	language:C++	class:TrenchBroom::SetBool
SetBool	SetBool.h	/^    class SetBool {$/;"	c	language:C++	namespace:TrenchBroom
SetBoolFun	SetBool.h	/^        SetBoolFun(R* receiver, F function, bool setTo = true) :$/;"	f	language:C++	class:TrenchBroom::SetBoolFun
SetBoolFun	SetBool.h	/^    class SetBoolFun {$/;"	c	language:C++	namespace:TrenchBroom
SetColor	View/SmartColorEditor.cpp	/^            SetColor(View::ControllerSPtr controller, const Model::PropertyKey& key, SmartColorEditor::ColorPtr color) :$/;"	f	language:C++	struct:TrenchBroom::View::SetColor
SetColor	View/SmartColorEditor.cpp	/^        struct SetColor {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
SetDigits	View/SpinControl.cpp	/^void SpinControl::SetDigits(unsigned int digits) {$/;"	f	language:C++	class:SpinControl
SetEntityDefinition	View/MapDocument.cpp	/^            SetEntityDefinition(Assets::EntityDefinitionManager& definitionManager) :$/;"	f	language:C++	class:TrenchBroom::View::SetEntityDefinition
SetEntityDefinition	View/MapDocument.cpp	/^        class SetEntityDefinition {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
SetEntityDefinitionFileCommand	Controller/SetEntityDefinitionFileCommand.cpp	/^        SetEntityDefinitionFileCommand::SetEntityDefinitionFileCommand(View::MapDocumentWPtr document, const IO::Path& file) :$/;"	f	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
SetEntityDefinitionFileCommand	Controller/SetEntityDefinitionFileCommand.h	/^        class SetEntityDefinitionFileCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SetEntityModel	View/MapDocument.cpp	/^            SetEntityModel(Assets::EntityModelManager& modelManager, Logger& logger) :$/;"	f	language:C++	class:TrenchBroom::View::SetEntityModel
SetEntityModel	View/MapDocument.cpp	/^        class SetEntityModel {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
SetFocus	View/SpinControl.cpp	/^void SpinControl::SetFocus() {$/;"	f	language:C++	class:SpinControl
SetHint	View/SpinControl.cpp	/^void SpinControl::SetHint(const wxString& hint) {$/;"	f	language:C++	class:SpinControl
SetImage	View/ImagePanel.cpp	/^        void ImagePanel::SetImage(const wxBitmap& bitmap) {$/;"	f	language:C++	class:TrenchBroom::View::ImagePanel
SetIncrements	View/SpinControl.cpp	/^void SpinControl::SetIncrements(double regularIncrement, double shiftIncrement, double ctrlIncrement) {$/;"	f	language:C++	class:SpinControl
SetItemCount	View/ImageListBox.cpp	/^        void ImageListBox::SetItemCount(size_t itemCount) {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
SetModsCommand	Controller/SetModsCommand.cpp	/^        SetModsCommand::SetModsCommand(View::MapDocumentWPtr document, const StringList& mods) :$/;"	f	language:C++	class:TrenchBroom::Controller::SetModsCommand
SetModsCommand	Controller/SetModsCommand.h	/^        class SetModsCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SetRange	View/SpinControl.cpp	/^void SpinControl::SetRange(double min, double max) {$/;"	f	language:C++	class:SpinControl
SetSelection	Model/Selection.cpp	/^            SetSelection(const bool select, const ModelFilter& filter, SelectionResult& result) :$/;"	f	language:C++	class:TrenchBroom::Model::SetSelection
SetSelection	Model/Selection.cpp	/^        class SetSelection {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
SetShaderParms	Renderer/FaceRenderer.cpp	/^            SetShaderParms(ActiveShader& i_shader, const bool i_applyTexture, const Color& i_defaultColor) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::SetShaderParms
SetShaderParms	Renderer/FaceRenderer.cpp	/^        struct SetShaderParms {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
SetShortcut	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::SetShortcut(const KeyboardShortcut& shortcut) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
SetShortcut	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::SetShortcut(int key, int modifierKey1, int modifierKey2, int modifierKey3) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
SetTemporaryPreference	PreferenceManager.h	/^        SetTemporaryPreference(Preference<T>& pref, const T& newValue) :$/;"	f	language:C++	class:TrenchBroom::SetTemporaryPreference
SetTemporaryPreference	PreferenceManager.h	/^    class SetTemporaryPreference {$/;"	c	language:C++	namespace:TrenchBroom
SetTexture	View/MapDocument.cpp	/^            SetTexture(Assets::TextureManager& textureManager) :$/;"	f	language:C++	class:TrenchBroom::View::SetTexture
SetTexture	View/MapDocument.cpp	/^        class SetTexture {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
SetUtils	CollectionUtils.h	/^namespace SetUtils {$/;"	n	language:C++
SetValue	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::SetValue(const int row, const int col, const wxString& value) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
SetValue	View/IssueBrowser.cpp	/^            bool SetValue(const wxVariant& value, const wxDataViewItem& item, unsigned int col) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
SetValue	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::SetValue(int row, int col, const wxString& value) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
SetValue	View/MapTreeView.cpp	/^            bool SetValue(const wxVariant& value, const wxDataViewItem& item, unsigned int col) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
SetValue	View/SpinControl.cpp	/^void SpinControl::SetValue(const wxString& textValue) {$/;"	f	language:C++	class:SpinControl
SetValue	View/SpinControl.cpp	/^void SpinControl::SetValue(double doubleValue) {$/;"	f	language:C++	class:SpinControl
SetVboState	Renderer/Vbo.cpp	/^        SetVboState::SetVboState(Vbo& vbo) :$/;"	f	language:C++	class:TrenchBroom::Renderer::SetVboState
SetVboState	Renderer/Vbo.h	/^        class SetVboState {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Shader	Renderer/Shader.cpp	/^        Shader::Shader(const IO::Path& path, const GLenum type) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Shader
Shader	Renderer/Shader.h	/^        class Shader {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
ShaderCache	Renderer/ShaderManager.h	/^            typedef std::map<String, Shader*> ShaderCache;$/;"	t	language:C++	class:TrenchBroom::Renderer::ShaderManager
ShaderCacheEntry	Renderer/ShaderManager.h	/^            typedef std::pair<String, Shader*> ShaderCacheEntry;$/;"	t	language:C++	class:TrenchBroom::Renderer::ShaderManager
ShaderConfig	Renderer/ShaderManager.cpp	/^        ShaderConfig::ShaderConfig(const String& name, const String& vertexShader, const String& fragmentShader) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderConfig
ShaderConfig	Renderer/ShaderManager.h	/^        class ShaderConfig {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
ShaderManager	Renderer/ShaderManager.h	/^        class ShaderManager {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
ShaderProgram	Renderer/ShaderProgram.cpp	/^        ShaderProgram::ShaderProgram(const String& name) :$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
ShaderProgram	Renderer/ShaderProgram.h	/^        class ShaderProgram {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
ShaderProgramCache	Renderer/ShaderManager.h	/^            typedef std::map<const ShaderConfig*, ShaderProgram*> ShaderProgramCache;$/;"	t	language:C++	class:TrenchBroom::Renderer::ShaderManager
ShaderProgramCacheEntry	Renderer/ShaderManager.h	/^            typedef std::pair<const ShaderConfig*, ShaderProgram*> ShaderProgramCacheEntry;$/;"	t	language:C++	class:TrenchBroom::Renderer::ShaderManager
Shaders	Renderer/ShaderManager.cpp	/^        namespace Shaders {$/;"	n	language:C++	namespace:TrenchBroom::Renderer	file:
Shaders	Renderer/ShaderManager.h	/^        namespace Shaders {$/;"	n	language:C++	namespace:TrenchBroom::Renderer
SharedGLContextHolder	View/GLContextHolder.cpp	/^        SharedGLContextHolder::SharedGLContextHolder(wxGLCanvas* canvas, Ptr parent) :$/;"	f	language:C++	class:TrenchBroom::View::SharedGLContextHolder
SharedGLContextHolder	View/GLContextHolder.h	/^        class SharedGLContextHolder : public GLContextHolder {$/;"	c	language:C++	namespace:TrenchBroom::View
ShortcutMenuItem	View/Menu.cpp	/^        ShortcutMenuItem::ShortcutMenuItem(Type type, const KeyboardShortcut& shortcut, MenuItemParent* parent) :$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
ShortcutMenuItem	View/Menu.h	/^        class ShortcutMenuItem : public TextMenuItem {$/;"	c	language:C++	namespace:TrenchBroom::View
Show	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridCellEditor::Show(bool show, wxGridCellAttr* attr) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
ShowIssuesCommandId	View/IssueBrowser.h	/^            static const int ShowIssuesCommandId = 2;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
ShowNewDocument	View/ChooseGameDialog.cpp	/^        String ChooseGameDialog::ShowNewDocument(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
ShowOpenDocument	View/ChooseGameDialog.cpp	/^        String ChooseGameDialog::ShowOpenDocument(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
ShowSelectionGuide	Renderer/RenderContext.h	/^            } ShowSelectionGuide;$/;"	t	language:C++	class:TrenchBroom::Renderer::RenderContext	typeref:enum:TrenchBroom::Renderer::RenderContext::__anon28
ShowSelectionGuide_ForceHide	Renderer/RenderContext.h	/^                ShowSelectionGuide_ForceHide$/;"	e	language:C++	enum:TrenchBroom::Renderer::RenderContext::__anon28
ShowSelectionGuide_ForceShow	Renderer/RenderContext.h	/^                ShowSelectionGuide_ForceShow,$/;"	e	language:C++	enum:TrenchBroom::Renderer::RenderContext::__anon28
ShowSelectionGuide_Hide	Renderer/RenderContext.h	/^                ShowSelectionGuide_Hide,$/;"	e	language:C++	enum:TrenchBroom::Renderer::RenderContext::__anon28
ShowSelectionGuide_Show	Renderer/RenderContext.h	/^                ShowSelectionGuide_Show,$/;"	e	language:C++	enum:TrenchBroom::Renderer::RenderContext::__anon28
SimpleFrameLength	IO/MdlParser.cpp	/^            static const unsigned int SimpleFrameLength = 0x10;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
SimpleFrameName	IO/MdlParser.cpp	/^            static const unsigned int SimpleFrameName   = 0x8;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
SimpleKeyboardShortcutEntry	View/KeyboardPreferencePane.cpp	/^        SimpleKeyboardShortcutEntry::SimpleKeyboardShortcutEntry(Preference<KeyboardShortcut>& preference) :$/;"	f	language:C++	class:TrenchBroom::View::SimpleKeyboardShortcutEntry
SimpleKeyboardShortcutEntry	View/KeyboardPreferencePane.h	/^        class SimpleKeyboardShortcutEntry : public KeyboardShortcutEntry {$/;"	c	language:C++	namespace:TrenchBroom::View
SimpleTextAnchor	Renderer/TextRenderer.cpp	/^        SimpleTextAnchor::SimpleTextAnchor(const Vec3f& position, const Alignment::Type alignment, const Vec2f& extraOffsets) :$/;"	f	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
SimpleTextAnchor	Renderer/TextRenderer.h	/^        class SimpleTextAnchor : public TextAnchor {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
SimpleTextRendererFilter	Renderer/TextRenderer.h	/^            class SimpleTextRendererFilter : public TextRendererFilter {$/;"	c	language:C++	class:TrenchBroom::Renderer::TextRenderer
SingleFrameList	Assets/MdlModel.h	/^            typedef std::vector<MdlFrame*> SingleFrameList;$/;"	t	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
Size	Renderer/AttributeSpec.h	/^            static const size_t Size = sizeof(DataType) * S;$/;"	m	language:C++	class:TrenchBroom::Renderer::AttributeSpec
Size	Renderer/VertexSpec.h	/^            static const size_t Size;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec1
Size	Renderer/VertexSpec.h	/^            static const size_t Size;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec2
Size	Renderer/VertexSpec.h	/^            static const size_t Size;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec3
Size	Renderer/VertexSpec.h	/^            static const size_t Size;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec4
Size	Renderer/VertexSpec.h	/^            static const size_t Size;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec5
Size	Renderer/VertexSpec.h	/^        const size_t VertexSpec1<A1>::Size = sizeof(VertexSpec1<A1>::Vertex);$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec1
Size	Renderer/VertexSpec.h	/^        const size_t VertexSpec2<A1, A2>::Size = sizeof(VertexSpec2<A1, A2>::Vertex);$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec2
Size	Renderer/VertexSpec.h	/^        const size_t VertexSpec3<A1, A2, A3>::Size = sizeof(VertexSpec3<A1, A2, A3>::Vertex);$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec3
Size	Renderer/VertexSpec.h	/^        const size_t VertexSpec4<A1, A2, A3, A4>::Size = sizeof(VertexSpec4<A1, A2, A3, A4>::Vertex);$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec4
Size	Renderer/VertexSpec.h	/^        const size_t VertexSpec5<A1, A2, A3, A4, A5>::Size = sizeof(VertexSpec5<A1, A2, A3, A4, A5>::Vertex);$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexSpec5
Size	Vec.h	/^    static const size_t Size = S;$/;"	m	language:C++	class:Vec
SkinNameLength	IO/Md2Parser.h	/^            static const size_t SkinNameLength = 64;$/;"	m	language:C++	namespace:TrenchBroom::IO::Md2Layout
Skins	IO/MdlParser.cpp	/^            static const unsigned int Skins             = 0x54;$/;"	m	language:C++	namespace:TrenchBroom::IO::MdlLayout	file:
SmartChoiceEditor	View/SmartChoiceEditor.cpp	/^        SmartChoiceEditor::SmartChoiceEditor(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
SmartChoiceEditor	View/SmartChoiceEditor.h	/^        class SmartChoiceEditor : public SmartPropertyEditor {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartChoiceEditorMatcher	View/SmartChoiceEditorMatcher.h	/^        class SmartChoiceEditorMatcher : public SmartPropertyEditorMatcher {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartColorEditor	View/SmartColorEditor.cpp	/^        SmartColorEditor::SmartColorEditor(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
SmartColorEditor	View/SmartColorEditor.h	/^        class SmartColorEditor : public SmartPropertyEditor {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartDefaultPropertyEditor	View/SmartDefaultPropertyEditor.cpp	/^        SmartDefaultPropertyEditor::SmartDefaultPropertyEditor(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartDefaultPropertyEditor
SmartDefaultPropertyEditor	View/SmartDefaultPropertyEditor.h	/^        class SmartDefaultPropertyEditor : public SmartPropertyEditor {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartPropertyEditor	View/SmartPropertyEditor.cpp	/^        SmartPropertyEditor::SmartPropertyEditor(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
SmartPropertyEditor	View/SmartPropertyEditor.h	/^        class SmartPropertyEditor : public wxEvtHandler {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartPropertyEditorDefaultMatcher	View/SmartPropertyEditorMatcher.h	/^        class SmartPropertyEditorDefaultMatcher : public SmartPropertyEditorMatcher {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartPropertyEditorKeyMatcher	View/SmartPropertyEditorMatcher.cpp	/^        SmartPropertyEditorKeyMatcher::SmartPropertyEditorKeyMatcher(const Model::PropertyKey& key1, const Model::PropertyKey& key2, const Model::PropertyKey& key3, const Model::PropertyKey& key4, const Model::PropertyKey& key5) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorKeyMatcher
SmartPropertyEditorKeyMatcher	View/SmartPropertyEditorMatcher.h	/^        class SmartPropertyEditorKeyMatcher : public SmartPropertyEditorMatcher {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartPropertyEditorManager	View/SmartPropertyEditorManager.cpp	/^        SmartPropertyEditorManager::SmartPropertyEditorManager(wxWindow* parent, View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
SmartPropertyEditorManager	View/SmartPropertyEditorManager.h	/^        class SmartPropertyEditorManager : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartPropertyEditorMatcher	View/SmartPropertyEditorMatcher.h	/^        class SmartPropertyEditorMatcher {$/;"	c	language:C++	namespace:TrenchBroom::View
SmartSpawnflagsEditor	View/SmartSpawnflagsEditor.cpp	/^        SmartSpawnflagsEditor::SmartSpawnflagsEditor(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
SmartSpawnflagsEditor	View/SmartSpawnflagsEditor.h	/^        class SmartSpawnflagsEditor : public SmartPropertyEditor {$/;"	c	language:C++	namespace:TrenchBroom::View
SnapAngleKey	View/RotateToolHelper.cpp	/^        const size_t RotateHelper::SnapAngleKey = 1;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper	file:
SnapAngleKey	View/RotateToolHelper.h	/^            static const size_t SnapAngleKey;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
SnapBrushVerticesAlgorithm	Model/SnapBrushVerticesAlgorithm.cpp	/^        SnapBrushVerticesAlgorithm::SnapBrushVerticesAlgorithm(BrushGeometry& geometry, const Vec3::List& vertexPositions, const size_t snapTo) :$/;"	f	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
SnapBrushVerticesAlgorithm	Model/SnapBrushVerticesAlgorithm.h	/^        class SnapBrushVerticesAlgorithm : public MoveBrushVertexAlgorithm<SnapVerticesResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
SnapBrushVerticesCommand	Controller/SnapBrushVerticesCommand.cpp	/^        SnapBrushVerticesCommand::SnapBrushVerticesCommand(View::MapDocumentWPtr document, const Model::BrushList& brushes, const size_t snapTo) :$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
SnapBrushVerticesCommand	Controller/SnapBrushVerticesCommand.cpp	/^        SnapBrushVerticesCommand::SnapBrushVerticesCommand(View::MapDocumentWPtr document, const Model::VertexToBrushesMap& vertices, const size_t snapTo) :$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
SnapBrushVerticesCommand	Controller/SnapBrushVerticesCommand.h	/^        class SnapBrushVerticesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SnapPlanePoints	Controller/FixPlanePointsCommand.cpp	/^            SnapPlanePoints(const BBox3& worldBounds) :$/;"	f	language:C++	struct:TrenchBroom::Controller::SnapPlanePoints
SnapPlanePoints	Controller/FixPlanePointsCommand.cpp	/^        struct SnapPlanePoints {$/;"	s	language:C++	namespace:TrenchBroom::Controller	file:
SnapPlanePointsToIntegerQuickFix	Model/SharedQuickFixes.cpp	/^        SnapPlanePointsToIntegerQuickFix::SnapPlanePointsToIntegerQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::SnapPlanePointsToIntegerQuickFix
SnapPlanePointsToIntegerQuickFix	Model/SharedQuickFixes.h	/^        class SnapPlanePointsToIntegerQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
SnapVerticesResult	Model/BrushGeometry.cpp	/^        SnapVerticesResult::SnapVerticesResult(const Vec3::List& i_newVertexPositions, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::SnapVerticesResult
SnapVerticesResult	Model/BrushGeometry.h	/^        struct SnapVerticesResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
SnapVerticesToIntegerQuickFix	Model/SharedQuickFixes.cpp	/^        SnapVerticesToIntegerQuickFix::SnapVerticesToIntegerQuickFix() :$/;"	f	language:C++	class:TrenchBroom::Model::SnapVerticesToIntegerQuickFix
SnapVerticesToIntegerQuickFix	Model/SharedQuickFixes.h	/^        class SnapVerticesToIntegerQuickFix : public QuickFix {$/;"	c	language:C++	namespace:TrenchBroom::Model
Snapshot	Model/Snapshot.cpp	/^        Snapshot::Snapshot() {}$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
Snapshot	Model/Snapshot.cpp	/^        Snapshot::Snapshot(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
Snapshot	Model/Snapshot.cpp	/^        Snapshot::Snapshot(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
Snapshot	Model/Snapshot.cpp	/^        Snapshot::Snapshot(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
Snapshot	Model/Snapshot.cpp	/^        Snapshot::Snapshot(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
Snapshot	Model/Snapshot.h	/^        class Snapshot {$/;"	c	language:C++	namespace:TrenchBroom::Model
SortOrder	Assets/EntityDefinitionManager.h	/^            enum SortOrder {$/;"	g	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
SortOrder	Assets/TextureManager.h	/^            } SortOrder;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager	typeref:enum:TrenchBroom::Assets::TextureManager::__anon3
SortOrder_Name	Assets/TextureManager.h	/^                SortOrder_Name,$/;"	e	language:C++	enum:TrenchBroom::Assets::TextureManager::__anon3
SortOrder_Usage	Assets/TextureManager.h	/^                SortOrder_Usage$/;"	e	language:C++	enum:TrenchBroom::Assets::TextureManager::__anon3
Spawnflags	Model/EntityProperties.cpp	/^            const PropertyKey Spawnflags        = "spawnflags";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
Spec	Renderer/Vertex.h	/^            typedef VertexSpec1<A1> Spec;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex1
Spec	Renderer/Vertex.h	/^            typedef VertexSpec2<A1, A2> Spec;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex2
Spec	Renderer/Vertex.h	/^            typedef VertexSpec3<A1, A2, A3> Spec;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex3
Spec	Renderer/Vertex.h	/^            typedef VertexSpec4<A1, A2, A3, A4> Spec;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex4
Spec	Renderer/Vertex.h	/^            typedef VertexSpec5<A1, A2, A3, A4, A5> Spec;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vertex5
Sphere	Renderer/Sphere.cpp	/^        Sphere::Sphere(const float radius, const size_t iterations) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Sphere
Sphere	Renderer/Sphere.h	/^        class Sphere {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
SphereBuilder	Renderer/RenderUtils.cpp	/^        namespace SphereBuilder {$/;"	n	language:C++	namespace:TrenchBroom::Renderer	file:
SpikeLength	Renderer/BoundsGuideRenderer.cpp	/^        const FloatType BoundsGuideRenderer::SpikeLength = 512.0;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer	file:
SpikeLength	Renderer/BoundsGuideRenderer.h	/^            static const FloatType SpikeLength;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
SpinControl	View/SpinControl.cpp	/^SpinControl::SpinControl(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style, const wxValidator& validator, const wxString& name) :$/;"	f	language:C++	class:SpinControl
SpinControl	View/SpinControl.h	/^class SpinControl : public wxPanel {$/;"	c	language:C++
SpinControlEvent	View/SpinControl.cpp	/^SpinControlEvent::SpinControlEvent() :$/;"	f	language:C++	class:SpinControlEvent
SpinControlEvent	View/SpinControl.cpp	/^SpinControlEvent::SpinControlEvent(const SpinControlEvent& event) :$/;"	f	language:C++	class:SpinControlEvent
SpinControlEvent	View/SpinControl.cpp	/^SpinControlEvent::SpinControlEvent(wxEventType commandType, int winId, bool spin, double value) :$/;"	f	language:C++	class:SpinControlEvent
SpinControlEvent	View/SpinControl.h	/^class SpinControlEvent : public wxNotifyEvent {$/;"	c	language:C++
Split	Model/BrushEdge.h	/^                Split,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushEdge::Mark
SplitBrushEdgeAlgorithm	Model/SplitBrushEdgeAlgorithm.cpp	/^        SplitBrushEdgeAlgorithm::SplitBrushEdgeAlgorithm(BrushGeometry& geometry, const BBox3& worldBounds, const Edge3& edge, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
SplitBrushEdgeAlgorithm	Model/SplitBrushEdgeAlgorithm.h	/^        class SplitBrushEdgeAlgorithm : public MoveBrushVertexAlgorithm<SplitResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
SplitBrushEdgesCommand	Controller/SplitBrushEdgesCommand.cpp	/^        SplitBrushEdgesCommand::SplitBrushEdgesCommand(View::MapDocumentWPtr document, const Model::VertexToEdgesMap& edges, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
SplitBrushEdgesCommand	Controller/SplitBrushEdgesCommand.h	/^        class SplitBrushEdgesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SplitBrushFaceAlgorithm	Model/SplitBrushFaceAlgorithm.cpp	/^        SplitBrushFaceAlgorithm::SplitBrushFaceAlgorithm(BrushGeometry& geometry, const BBox3& worldBounds, const Polygon3& face, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
SplitBrushFaceAlgorithm	Model/SplitBrushFaceAlgorithm.h	/^        class SplitBrushFaceAlgorithm : public MoveBrushVertexAlgorithm<SplitResult> {$/;"	c	language:C++	namespace:TrenchBroom::Model
SplitBrushFacesCommand	Controller/SplitBrushFacesCommand.cpp	/^        SplitBrushFacesCommand::SplitBrushFacesCommand(View::MapDocumentWPtr document, const Model::VertexToFacesMap& faces, const Vec3& delta) :$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
SplitBrushFacesCommand	Controller/SplitBrushFacesCommand.h	/^        class SplitBrushFacesCommand : public BrushVertexHandleCommand {$/;"	c	language:C++	namespace:TrenchBroom::Controller
SplitResult	Model/BrushGeometry.cpp	/^        SplitResult::SplitResult(const Vec3& i_newVertexPosition, const BrushFaceList& i_addedFaces, const BrushFaceList& i_droppedFaces) :$/;"	f	language:C++	class:TrenchBroom::Model::SplitResult
SplitResult	Model/BrushGeometry.h	/^        struct SplitResult : public BrushAlgorithmResult {$/;"	s	language:C++	namespace:TrenchBroom::Model
State	IO/Tokenizer.h	/^                State(const char* i_cur) :$/;"	f	language:C++	struct:TrenchBroom::IO::Tokenizer::State
State	IO/Tokenizer.h	/^            struct State {$/;"	s	language:C++	class:TrenchBroom::IO::Tokenizer
StaticBoxBottomMargin	View/ViewConstants.h	/^            static const int StaticBoxBottomMargin              = 15;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
StaticBoxSideMargin	View/ViewConstants.h	/^            static const int StaticBoxSideMargin                = 15;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
StaticBoxTopMargin	View/ViewConstants.h	/^            static const int StaticBoxTopMargin                 = 20;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
StaticModelDefinition	Assets/ModelDefinition.cpp	/^        StaticModelDefinition::StaticModelDefinition(const IO::Path& path, const size_t skinIndex, const size_t frameIndex) :$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
StaticModelDefinition	Assets/ModelDefinition.cpp	/^        StaticModelDefinition::StaticModelDefinition(const IO::Path& path, const size_t skinIndex, const size_t frameIndex, const Model::PropertyKey& key, const Model::PropertyValue& value) :$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
StaticModelDefinition	Assets/ModelDefinition.cpp	/^        StaticModelDefinition::StaticModelDefinition(const IO::Path& path, const size_t skinIndex, const size_t frameIndex, const Model::PropertyKey& key, const int value) :$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
StaticModelDefinition	Assets/ModelDefinition.h	/^        class StaticModelDefinition : public ModelDefinition {$/;"	c	language:C++	namespace:TrenchBroom::Assets
StaticModelDefinitionFlagMatcher	Assets/ModelDefinition.cpp	/^        StaticModelDefinitionFlagMatcher::StaticModelDefinitionFlagMatcher(const Model::PropertyKey& key, const int value) :$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionFlagMatcher
StaticModelDefinitionFlagMatcher	Assets/ModelDefinition.h	/^        class StaticModelDefinitionFlagMatcher : public StaticModelDefinitionMatcher {$/;"	c	language:C++	namespace:TrenchBroom::Assets
StaticModelDefinitionMatcher	Assets/ModelDefinition.cpp	/^        StaticModelDefinitionMatcher::StaticModelDefinitionMatcher() {}$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionMatcher
StaticModelDefinitionMatcher	Assets/ModelDefinition.h	/^        class StaticModelDefinitionMatcher {$/;"	c	language:C++	namespace:TrenchBroom::Assets
StaticModelDefinitionPropertyMatcher	Assets/ModelDefinition.cpp	/^        StaticModelDefinitionPropertyMatcher::StaticModelDefinitionPropertyMatcher(const Model::PropertyKey& key, const Model::PropertyValue& value) :$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionPropertyMatcher
StaticModelDefinitionPropertyMatcher	Assets/ModelDefinition.h	/^        class StaticModelDefinitionPropertyMatcher : public StaticModelDefinitionMatcher {$/;"	c	language:C++	namespace:TrenchBroom::Assets
StatusBar	View/StatusBar.cpp	/^        StatusBar::StatusBar(wxWindow* parent, MapDocumentWPtr document, Console* console) :$/;"	f	language:C++	class:TrenchBroom::View::StatusBar
StatusBar	View/StatusBar.h	/^        class StatusBar : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
StraightAngleOverPi	MathUtils.h	/^        static const T StraightAngleOverPi;$/;"	m	language:C++	class:Math::Constants
StraightAngleOverPi	MathUtils.h	/^    const T Constants<T>::StraightAngleOverPi  = static_cast<T>(180.0) \/ Pi;$/;"	m	language:C++	class:Math::Constants
String	IO/ConfigParser.h	/^            static const Type String        = 1 <<  2; \/\/ "string"$/;"	m	language:C++	namespace:TrenchBroom::IO::ConfigToken
String	IO/FgdParser.h	/^            static const Type String            = 1 <<  3; \/\/ "anything but quotes"$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
String	IO/QuakeMapParser.h	/^            static const Type String        = 1 <<  2; \/\/ string$/;"	m	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
String	StringUtils.h	/^typedef std::string String;$/;"	t	language:C++
StringEqual	StringUtils.h	/^    struct StringEqual {$/;"	s	language:C++	namespace:StringUtils
StringIndex	StringIndex.h	/^        StringIndex() :$/;"	f	language:C++	class:TrenchBroom::StringIndex
StringIndex	StringIndex.h	/^    class StringIndex {$/;"	c	language:C++	namespace:TrenchBroom
StringLess	StringUtils.h	/^    struct StringLess {$/;"	s	language:C++	namespace:StringUtils
StringList	StringUtils.h	/^typedef std::vector<String> StringList;$/;"	t	language:C++
StringMap	StringUtils.h	/^typedef std::map<String, String> StringMap;$/;"	t	language:C++
StringMap	View/EntityBrowserView.h	/^            typedef std::map<Renderer::FontDescriptor, StringVertex::List> StringMap;$/;"	t	language:C++	class:TrenchBroom::View::EntityBrowserView
StringMap	View/TextureBrowserView.h	/^            typedef std::map<Renderer::FontDescriptor, StringVertex::List> StringMap;$/;"	t	language:C++	class:TrenchBroom::View::TextureBrowserView
StringPropertyDefinition	Assets/PropertyDefinition.cpp	/^        StringPropertyDefinition::StringPropertyDefinition(const String& name, const String& description) :$/;"	f	language:C++	class:TrenchBroom::Assets::StringPropertyDefinition
StringPropertyDefinition	Assets/PropertyDefinition.cpp	/^        StringPropertyDefinition::StringPropertyDefinition(const String& name, const String& description, const String& defaultValue) :$/;"	f	language:C++	class:TrenchBroom::Assets::StringPropertyDefinition
StringPropertyDefinition	Assets/PropertyDefinition.h	/^        class StringPropertyDefinition : public PropertyDefinitionWithDefaultValue<String> {$/;"	c	language:C++	namespace:TrenchBroom::Assets
StringSet	StringUtils.h	/^typedef std::set<String> StringSet;$/;"	t	language:C++
StringStream	StringUtils.h	/^typedef std::stringstream StringStream;$/;"	t	language:C++
StringToString	StringUtils.h	/^    struct StringToString {$/;"	s	language:C++	namespace:StringUtils
StringUtils	StringUtils.cpp	/^namespace StringUtils {$/;"	n	language:C++	file:
StringUtils	StringUtils.h	/^namespace StringUtils {$/;"	n	language:C++
StringVertex	View/EntityBrowserView.h	/^            typedef Renderer::VertexSpecs::P2T2::Vertex StringVertex;$/;"	t	language:C++	class:TrenchBroom::View::EntityBrowserView
StringVertex	View/TextureBrowserView.h	/^            typedef Renderer::VertexSpecs::P2T2::Vertex StringVertex;$/;"	t	language:C++	class:TrenchBroom::View::TextureBrowserView
Strip	IO/Md2Parser.h	/^                    Strip$/;"	e	language:C++	enum:TrenchBroom::IO::Md2Parser::Md2Mesh::Type
SubModel	Assets/Bsp29Model.cpp	/^        Bsp29Model::SubModel::SubModel(const FaceList& i_faces, const BBox3f& i_bounds) :$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::SubModel
SubModel	Assets/Bsp29Model.h	/^            struct SubModel {$/;"	s	language:C++	class:TrenchBroom::Assets::Bsp29Model
SubModelList	Assets/Bsp29Model.h	/^            typedef std::vector<SubModel> SubModelList;$/;"	t	language:C++	class:TrenchBroom::Assets::Bsp29Model
Super	View/MoveTool.h	/^            typedef ToolImpl<ActivationPolicyType, PickingPolicyType, MousePolicyType, PlaneDragPolicy, DropPolicyType, RenderPolicyType> Super;$/;"	t	language:C++	class:TrenchBroom::View::MoveTool
SwapHolder	Renderer/VertexArray.h	/^            SwapHolder(VertexList& vertices) :$/;"	f	language:C++	class:TrenchBroom::Renderer::SwapHolder
SwapHolder	Renderer/VertexArray.h	/^        class SwapHolder : public Holder<VertexSpec> {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
SyncFromText	View/SpinControl.cpp	/^bool SpinControl::SyncFromText() {$/;"	f	language:C++	class:SpinControl
SystemPaths	IO/SystemPaths.cpp	/^        namespace SystemPaths {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
SystemPaths	IO/SystemPaths.h	/^        namespace SystemPaths {$/;"	n	language:C++	namespace:TrenchBroom::IO
T02	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_TexCoord0, GL_FLOAT, 2> T02;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
T12	Renderer/AttributeSpec.h	/^            typedef AttributeSpec<AttributeType_TexCoord1, GL_FLOAT, 2> T12;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::AttributeSpecs
Target	Model/EntityProperties.cpp	/^            const PropertyKey Target            = "target";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
Targetname	Model/EntityProperties.cpp	/^            const PropertyKey Targetname        = "targetname";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
TemplateUtils	TemplateUtils.h	/^namespace TemplateUtils {$/;"	n	language:C++
TexCoordSystem	Model/TexCoordSystem.h	/^        class TexCoordSystem {$/;"	c	language:C++	namespace:TrenchBroom::Model
TexCoordSystemHelper	Model/TexCoordSystemHelper.cpp	/^        TexCoordSystemHelper::TexCoordSystemHelper(const BrushFace* face) :$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
TexCoordSystemHelper	Model/TexCoordSystemHelper.h	/^        class TexCoordSystemHelper {$/;"	c	language:C++	namespace:TrenchBroom::Model
TexInfoRest	IO/Bsp29Parser.cpp	/^            static const size_t TexInfoRest           = 0x4;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
TexInfoSize	IO/Bsp29Parser.cpp	/^            static const size_t TexInfoSize           = 0x28;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
TexWidthOffset	IO/Wad.cpp	/^            static const size_t TexWidthOffset        = 16;$/;"	m	language:C++	namespace:TrenchBroom::IO::WadLayout	file:
TextAnchor	Renderer/TextRenderer.h	/^        class TextAnchor {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
TextBackgroundShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TextBackgroundShader       = ShaderConfig("Text Background",                  "TextBackground.vertsh",       "TextBackground.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
TextBoxInnerMargin	View/ViewConstants.h	/^            static const int TextBoxInnerMargin                 = 5;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
TextColorProvider	Renderer/TextRenderer.h	/^            class TextColorProvider {$/;"	c	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextEntry	Renderer/TextRenderer.h	/^                TextEntry(const Vec2f::List& vertices, const Vec2f& size, TextAnchor::Ptr textAnchor) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
TextEntry	Renderer/TextRenderer.h	/^            class TextEntry {$/;"	c	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextMap	Renderer/TextRenderer.h	/^            typedef std::map<Key, TextEntry, Comparator> TextMap;$/;"	t	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextMapItem	Renderer/TextRenderer.h	/^            typedef std::pair<Key, TextEntry> TextMapItem;$/;"	t	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextMenuItem	View/Menu.cpp	/^        TextMenuItem::TextMenuItem(const Type type, MenuItemParent* parent) :$/;"	f	language:C++	class:TrenchBroom::View::TextMenuItem
TextMenuItem	View/Menu.h	/^        class TextMenuItem : public MenuItem {$/;"	c	language:C++	namespace:TrenchBroom::View
TextRenderer	Renderer/TextRenderer.h	/^            TextRenderer(TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextRenderer	Renderer/TextRenderer.h	/^        class TextRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
TextRenderer	View/RotateToolHelper.h	/^            typedef Renderer::TextRenderer<size_t> TextRenderer;$/;"	t	language:C++	class:TrenchBroom::View::RotateHelper
TextRendererFilter	Renderer/TextRenderer.h	/^            class TextRendererFilter {$/;"	c	language:C++	class:TrenchBroom::Renderer::TextRenderer
TextRendererHelper	View/RotateToolHelper.cpp	/^        class TextRendererHelper : public RotateHelper::TextRenderer::TextColorProvider, public RotateHelper::TextRenderer::TextRendererFilter {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
TextShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TextShader                 = ShaderConfig("Text",                             "Text.vertsh",                 "Text.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
Texture	Assets/Texture.cpp	/^        Texture::Texture(const String& name, const size_t width, const size_t height, const Color& averageColor, const TextureBuffer& buffer) :$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
Texture	Assets/Texture.cpp	/^        Texture::Texture(const String& name, const size_t width, const size_t height, const Color& averageColor, const TextureBuffer::List& buffers) :$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
Texture	Assets/Texture.h	/^        class Texture {$/;"	c	language:C++	namespace:TrenchBroom::Assets
TextureBrowser	View/TextureBrowser.cpp	/^        TextureBrowser::TextureBrowser(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document) :$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
TextureBrowser	View/TextureBrowser.h	/^        class TextureBrowser : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureBrowserBorderShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TextureBrowserBorderShader = ShaderConfig("Texture Browser Border",           "TextureBrowserBorder.vertsh", "TextureBrowserBorder.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
TextureBrowserShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TextureBrowserShader       = ShaderConfig("Texture Browser",                  "TextureBrowser.vertsh",       "TextureBrowser.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
TextureBrowserView	View/TextureBrowserView.cpp	/^        TextureBrowserView::TextureBrowserView(wxWindow* parent, wxScrollBar* scrollBar,$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
TextureBrowserView	View/TextureBrowserView.h	/^        class TextureBrowserView : public CellView<TextureCellData, TextureGroupData> {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureBuffer	Assets/Texture.h	/^        typedef Buffer<unsigned char> TextureBuffer;$/;"	t	language:C++	namespace:TrenchBroom::Assets
TextureCellData	View/TextureBrowserView.cpp	/^        TextureCellData::TextureCellData(Assets::Texture* i_texture, const Renderer::FontDescriptor& i_fontDescriptor) :$/;"	f	language:C++	class:TrenchBroom::View::TextureCellData
TextureCellData	View/TextureBrowserView.h	/^        class TextureCellData {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureCollection	Assets/TextureCollection.cpp	/^        TextureCollection::TextureCollection(const String& name) :$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
TextureCollection	Assets/TextureCollection.cpp	/^        TextureCollection::TextureCollection(const String& name, const TextureList& textures) :$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
TextureCollection	Assets/TextureCollection.h	/^        class TextureCollection {$/;"	c	language:C++	namespace:TrenchBroom::Assets
TextureCollectionCommand	Controller/TextureCollectionCommand.cpp	/^        TextureCollectionCommand::TextureCollectionCommand(View::MapDocumentWPtr document, const String& name, const Action action, const StringList& names) :$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
TextureCollectionCommand	Controller/TextureCollectionCommand.h	/^        class TextureCollectionCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
TextureCollectionEditor	View/TextureCollectionEditor.cpp	/^        TextureCollectionEditor::TextureCollectionEditor(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
TextureCollectionEditor	View/TextureCollectionEditor.h	/^        class TextureCollectionEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureCollectionList	Assets/AssetTypes.h	/^        typedef std::vector<TextureCollection*> TextureCollectionList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
TextureCollectionMap	Assets/TextureManager.h	/^            typedef std::map<String, TextureCollection*> TextureCollectionMap;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager
TextureCollectionMapEntry	Assets/TextureManager.h	/^            typedef std::pair<String, TextureCollection*> TextureCollectionMapEntry;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager
TextureCollectionSpec	Assets/TextureCollectionSpec.cpp	/^        TextureCollectionSpec::TextureCollectionSpec(const String& name, const IO::Path& path) :$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
TextureCollectionSpec	Assets/TextureCollectionSpec.h	/^        class TextureCollectionSpec {$/;"	c	language:C++	namespace:TrenchBroom::Assets
TextureConfig	Model/GameConfig.cpp	/^        GameConfig::TextureConfig::TextureConfig(const String& i_type, const String& i_property, const IO::Path& i_palette, const IO::Path& i_builtinTexturesSearchPath) :$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::TextureConfig
TextureConfig	Model/GameConfig.h	/^            struct TextureConfig {$/;"	s	language:C++	class:TrenchBroom::Model::GameConfig
TextureCoordSystemHelper	View/TextureCoordSystemHelper.cpp	/^        TextureCoordSystemHelper::TextureCoordSystemHelper(View::MapDocumentWPtr document, View::ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
TextureCoordSystemHelper	View/TextureCoordSystemHelper.h	/^        class TextureCoordSystemHelper : public TextureToolHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureFont	Renderer/TextureFont.cpp	/^        TextureFont::TextureFont(FT_Face face, const unsigned char minChar, const unsigned char maxChar) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
TextureFont	Renderer/TextureFont.h	/^        class TextureFont {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
TextureGroupData	View/TextureBrowserView.h	/^        typedef String TextureGroupData;$/;"	t	language:C++	namespace:TrenchBroom::View
TextureIdList	Assets/TextureCollection.h	/^            typedef std::vector<GLuint> TextureIdList;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureCollection
TextureInfo	IO/Bsp29Parser.h	/^            struct TextureInfo {$/;"	s	language:C++	class:TrenchBroom::IO::Bsp29Parser
TextureInfoList	IO/Bsp29Parser.h	/^            typedef std::vector<TextureInfo> TextureInfoList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
TextureList	Assets/AssetTypes.h	/^        typedef std::vector<Texture*> TextureList;$/;"	t	language:C++	namespace:TrenchBroom::Assets
TextureLoader	IO/TextureLoader.h	/^        class TextureLoader {$/;"	c	language:C++	namespace:TrenchBroom::IO
TextureManager	Assets/TextureManager.cpp	/^        TextureManager::TextureManager(Logger* logger) :$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
TextureManager	Assets/TextureManager.h	/^        class TextureManager {$/;"	c	language:C++	namespace:TrenchBroom::Assets
TextureMap	Assets/TextureManager.h	/^            typedef std::map<String, Texture*> TextureMap;$/;"	t	language:C++	class:TrenchBroom::Assets::TextureManager
TextureNameLength	IO/Bsp29Parser.cpp	/^            static const size_t TextureNameLength     = 0x10;$/;"	m	language:C++	namespace:TrenchBroom::IO::BspLayout	file:
TextureSelectedCommand	View/TextureSelectedCommand.cpp	/^        TextureSelectedCommand::TextureSelectedCommand() :$/;"	f	language:C++	class:TrenchBroom::View::TextureSelectedCommand
TextureSelectedCommand	View/TextureSelectedCommand.h	/^        class TextureSelectedCommand : public wxNotifyEvent {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureTool	View/TextureTool.cpp	/^        TextureTool::TextureTool(MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
TextureTool	View/TextureTool.h	/^        class TextureTool : public ToolImpl<ActivationPolicy, NoPickingPolicy, NoMousePolicy, PlaneDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TextureToolHelper	View/TextureTool.h	/^        class TextureToolHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingEditor	View/TexturingEditor.cpp	/^        TexturingEditor::TexturingEditor(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingEditor
TexturingEditor	View/TexturingEditor.h	/^        class TexturingEditor : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingView	View/TexturingView.cpp	/^        TexturingView::TexturingView(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
TexturingView	View/TexturingView.h	/^        class TexturingView : public RenderView, public ToolBoxHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewCameraTool	View/TexturingViewCameraTool.cpp	/^        TexturingViewCameraTool::TexturingViewCameraTool(MapDocumentWPtr document, ControllerWPtr controller, Renderer::OrthographicCamera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
TexturingViewCameraTool	View/TexturingViewCameraTool.h	/^        class TexturingViewCameraTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, MousePolicy, MouseDragPolicy, NoDropPolicy, NoRenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewHelper	View/TexturingViewHelper.cpp	/^        TexturingViewHelper::TexturingViewHelper() :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
TexturingViewHelper	View/TexturingViewHelper.h	/^        class TexturingViewHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewOffsetTool	View/TexturingViewOffsetTool.cpp	/^        TexturingViewOffsetTool::TexturingViewOffsetTool(MapDocumentWPtr document, ControllerWPtr controller, const TexturingViewHelper& helper) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
TexturingViewOffsetTool	View/TexturingViewOffsetTool.h	/^        class TexturingViewOffsetTool : public ToolImpl<NoActivationPolicy, NoPickingPolicy, NoMousePolicy, MouseDragPolicy, NoDropPolicy, NoRenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewRotateTool	View/TexturingViewRotateTool.cpp	/^        TexturingViewRotateTool::TexturingViewRotateTool(MapDocumentWPtr document, ControllerWPtr controller, TexturingViewHelper& helper, Renderer::OrthographicCamera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
TexturingViewRotateTool	View/TexturingViewRotateTool.h	/^        class TexturingViewRotateTool : public ToolImpl<NoActivationPolicy, PickingPolicy, NoMousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewScaleOriginTool	View/TexturingViewScaleOriginTool.cpp	/^        TexturingViewScaleOriginTool::TexturingViewScaleOriginTool(MapDocumentWPtr document, ControllerWPtr controller, TexturingViewHelper& helper, Renderer::OrthographicCamera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
TexturingViewScaleOriginTool	View/TexturingViewScaleOriginTool.h	/^        class TexturingViewScaleOriginTool : public ToolImpl<NoActivationPolicy, PickingPolicy, NoMousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewScaleTool	View/TexturingViewScaleTool.cpp	/^        TexturingViewScaleTool::TexturingViewScaleTool(MapDocumentWPtr document, ControllerWPtr controller, TexturingViewHelper& helper, Renderer::OrthographicCamera& camera) :$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
TexturingViewScaleTool	View/TexturingViewScaleTool.h	/^        class TexturingViewScaleTool : public ToolImpl<NoActivationPolicy, PickingPolicy, NoMousePolicy, MouseDragPolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
TexturingViewShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TexturingViewShader        = ShaderConfig("Texturing View",                   "TexturingView.vertsh",        "TexturingView.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
ThreePiOverTwo	MathUtils.h	/^        static const T ThreePiOverTwo;$/;"	m	language:C++	class:Math::Constants
ThreePiOverTwo	MathUtils.h	/^    const T Constants<T>::ThreePiOverTwo       = Pi * static_cast<T>(3.0 \/ 2.0);$/;"	m	language:C++	class:Math::Constants
ToString	IO/Path.h	/^                ToString(const char i_separator = separator()) :$/;"	f	language:C++	struct:TrenchBroom::IO::Path::ToString
ToString	IO/Path.h	/^            struct ToString {$/;"	s	language:C++	class:TrenchBroom::IO::Path
ToggleButtonStyle	View/ViewConstants.h	/^            static const int ToggleButtonStyle                  = 0;$/;"	m	language:C++	namespace:TrenchBroom::View::LayoutConstants
Token	IO/ConfigParser.h	/^            typedef ConfigTokenizer::Token Token;$/;"	t	language:C++	class:TrenchBroom::IO::ConfigParser
Token	IO/DefParser.h	/^            typedef DefTokenizer::Token Token;$/;"	t	language:C++	class:TrenchBroom::IO::DefParser
Token	IO/FgdParser.h	/^            typedef FgdTokenizer::Token Token;$/;"	t	language:C++	class:TrenchBroom::IO::FgdParser
Token	IO/Parser.h	/^            typedef TokenTemplate<TokenType> Token;$/;"	t	language:C++	class:TrenchBroom::IO::Parser
Token	IO/QuakeMapParser.h	/^            typedef QuakeMapTokenizer::Token Token;$/;"	t	language:C++	class:TrenchBroom::IO::QuakeMapParser
Token	IO/Tokenizer.h	/^            typedef TokenTemplate<TokenType> Token;$/;"	t	language:C++	class:TrenchBroom::IO::Tokenizer
TokenNameMap	IO/Parser.h	/^            typedef std::map<TokenType, String> TokenNameMap;$/;"	t	language:C++	class:TrenchBroom::IO::Parser
TokenStack	IO/Tokenizer.h	/^            typedef std::stack<Token> TokenStack;$/;"	t	language:C++	class:TrenchBroom::IO::Tokenizer
TokenTemplate	IO/Token.h	/^            TokenTemplate() :$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
TokenTemplate	IO/Token.h	/^            TokenTemplate(const Type type, const char* begin, const char* end, const size_t position, const size_t line, const size_t column) :$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
TokenTemplate	IO/Token.h	/^        class TokenTemplate {$/;"	c	language:C++	namespace:TrenchBroom::IO
Tokenizer	IO/Tokenizer.h	/^            Tokenizer(const String& str) :$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
Tokenizer	IO/Tokenizer.h	/^            Tokenizer(const char* begin, const char* end) :$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
Tokenizer	IO/Tokenizer.h	/^        class Tokenizer {$/;"	c	language:C++	namespace:TrenchBroom::IO
Tool	View/Tool.cpp	/^        Tool::Tool() :$/;"	f	language:C++	class:TrenchBroom::View::Tool
Tool	View/Tool.h	/^        class Tool {$/;"	c	language:C++	namespace:TrenchBroom::View
ToolBox	View/ToolBox.cpp	/^        ToolBox::ToolBox(wxWindow* window, ToolBoxHelper* helper) :$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
ToolBox	View/ToolBox.h	/^        class ToolBox {$/;"	c	language:C++	namespace:TrenchBroom::View
ToolBoxDropTarget	View/ToolBoxDropTarget.cpp	/^        ToolBoxDropTarget::ToolBoxDropTarget(ToolBox& toolBox) :$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
ToolBoxDropTarget	View/ToolBoxDropTarget.h	/^        class ToolBoxDropTarget : public wxTextDropTarget {$/;"	c	language:C++	namespace:TrenchBroom::View
ToolBoxHelper	View/ToolBox.h	/^        class ToolBoxHelper {$/;"	c	language:C++	namespace:TrenchBroom::View
ToolImpl	View/Tool.h	/^            ToolImpl(MapDocumentWPtr document, ControllerWPtr controller) :$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
ToolImpl	View/Tool.h	/^        class ToolImpl : public Tool, protected ActivationPolicyType, protected PickingPolicyType, protected MousePolicyType, protected DropPolicyType, protected MouseDragPolicyType, protected RenderPolicyType {$/;"	c	language:C++	namespace:TrenchBroom::View
Top	Renderer/TextRenderer.h	/^            static const Type Top       = 1 << 0;$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Alignment
Transform	Model/ModelUtils.cpp	/^        Transform::Transform(const Mat4x4& transformation, const bool lockTextures, const BBox3& worldBounds) :$/;"	f	language:C++	class:TrenchBroom::Model::Transform
Transform	Model/ModelUtils.h	/^        struct Transform {$/;"	s	language:C++	namespace:TrenchBroom::Model
TransformBBox	BBox.h	/^    TransformBBox(const Mat<T,4,4>& i_transformation) :$/;"	f	language:C++	struct:TransformBBox
TransformBBox	BBox.h	/^struct TransformBBox {$/;"	s	language:C++
TransformObjectsCommand	Controller/TransformObjectsCommand.cpp	/^        TransformObjectsCommand::TransformObjectsCommand(View::MapDocumentWPtr document, const Mat4x4& transformation, const bool lockTextures, const String& action, const Model::ObjectList& objects) :$/;"	f	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
TransformObjectsCommand	Controller/TransformObjectsCommand.h	/^        class TransformObjectsCommand : public Command {$/;"	c	language:C++	namespace:TrenchBroom::Controller
Transformation	Renderer/Transformation.cpp	/^        Transformation::Transformation(const Mat4x4f& projection, const Mat4x4f& view, const Mat4x4f& model) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
Transformation	Renderer/Transformation.h	/^        class Transformation {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Translate	Model/TexCoordSystemHelper.h	/^            static const Mode Translate  = 1 << 0;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
TrenchBroom	Assets/AssetTypes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/Bsp29Model.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/Bsp29Model.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/EntityDefinition.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/EntityDefinition.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/EntityDefinitionManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/EntityDefinitionManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/EntityModel.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/EntityModel.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/EntityModelManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/EntityModelManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/Md2Model.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/Md2Model.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/MdlModel.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/MdlModel.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/ModelDefinition.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/ModelDefinition.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/Palette.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/Palette.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/PropertyDefinition.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/PropertyDefinition.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/Texture.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/Texture.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/TextureCollection.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/TextureCollection.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/TextureCollectionSpec.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/TextureCollectionSpec.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Assets/TextureManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Assets/TextureManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	CastIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	ConfigTypes.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	ConfigTypes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/AddRemoveObjectsCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/AddRemoveObjectsCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/BrushVertexHandleCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/BrushVertexHandleCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/Command.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/Command.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/CommandProcessor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/CommandProcessor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/EntityPropertyCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/EntityPropertyCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/FaceAttributeCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/FaceAttributeCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/FixPlanePointsCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/FixPlanePointsCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/MoveBrushEdgesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/MoveBrushEdgesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/MoveBrushFacesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/MoveBrushFacesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/MoveBrushVerticesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/MoveBrushVerticesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/MoveTexturesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/MoveTexturesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/NewDocumentCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/NewDocumentCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/OpenDocumentCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/OpenDocumentCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/RebuildBrushGeometryCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/RebuildBrushGeometryCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/ReparentBrushesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/ReparentBrushesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/ResizeBrushesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/ResizeBrushesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/RotateTexturesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/RotateTexturesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SelectionCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SelectionCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SetEntityDefinitionFileCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SetEntityDefinitionFileCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SetModsCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SetModsCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SnapBrushVerticesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SnapBrushVerticesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SplitBrushEdgesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SplitBrushEdgesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/SplitBrushFacesCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/SplitBrushFacesCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/TextureCollectionCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/TextureCollectionCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Controller/TransformObjectsCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Controller/TransformObjectsCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Edge.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Exceptions.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	FilterIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Hit.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Hit.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	HitFilter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	HitFilter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Bsp29Parser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Bsp29Parser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/ConfigParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/ConfigParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/DefParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/DefParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/DiskFileSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/DiskFileSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/EntityDefinitionClassInfo.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/EntityDefinitionClassInfo.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/EntityDefinitionParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/EntityDefinitionParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/EntityModelParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/EntityModelParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/FgdParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/FgdParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/FileSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/FileSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/GameConfigParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/GameConfigParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/GameFileSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/GameFileSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Hexen2MapWriter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Hexen2MapWriter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/IOUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/IOUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/ImageLoader.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/ImageLoader.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/ImageLoaderImpl.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/ImageLoaderImpl.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/MapParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/MapParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/MapWriter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/MapWriter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/MappedFile.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/MappedFile.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Md2Parser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Md2Parser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/MdlParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/MdlParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/PakFileSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/PakFileSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Parser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Path.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Path.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Quake2MapWriter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Quake2MapWriter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/QuakeMapParser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/QuakeMapParser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/QuakeMapWriter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/QuakeMapWriter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/ResourceUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/ResourceUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/SystemPaths.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/SystemPaths.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/TextureLoader.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/TextureLoader.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Token.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Tokenizer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/Wad.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/Wad.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/WadTextureLoader.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/WadTextureLoader.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	IO/WalTextureLoader.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	IO/WalTextureLoader.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Logger.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Logger.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Brush.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Brush.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushEdge.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/BrushEdge.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushEdgesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushFace.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/BrushFace.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushFaceGeometry.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/BrushFaceGeometry.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushFacesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushGeometry.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/BrushGeometry.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushGeometryTypes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/BrushVertex.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/BrushVertex.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EmptyBrushEntityIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/EmptyBrushEntityIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Entity.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Entity.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityBrushesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityDefinitionFileSpec.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/EntityDefinitionFileSpec.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityFacesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityLinkIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/EntityLinkIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityProperties.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/EntityProperties.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/EntityPropertyIndex.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/EntityPropertyIndex.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/FaceAdjacencyGraph.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/FaceAdjacencyGraph.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/FaceEdgesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/FloatPointsIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/FloatPointsIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/FloatVerticesIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/FloatVerticesIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Game.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Game.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/GameConfig.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/GameConfig.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/GameFactory.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/GameFactory.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/GameImpl.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/GameImpl.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/HitAdapter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/HitAdapter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/IntersectBrushGeometryWithFace.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/IntersectBrushGeometryWithFace.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Issue.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Issue.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/IssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/IssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/IssueManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/IssueManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Map.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Map.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MapBrushesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MapEntitiesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MapFacesIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MapObjectsIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MissingEntityClassnameIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MissingEntityClassnameIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MissingEntityDefinitionIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MissingEntityDefinitionIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MixedBrushContentsIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MixedBrushContentsIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ModelFactory.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ModelFactory.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ModelFilter.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ModelFilter.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ModelTypes.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ModelTypes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ModelUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ModelUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MoveBrushEdgesAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MoveBrushEdgesAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MoveBrushFacesAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MoveBrushFacesAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MoveBrushVertexAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/MoveBrushVerticesAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/MoveBrushVerticesAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Object.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Object.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Octree.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ParallelTexCoordSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ParallelTexCoordSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/ParaxialTexCoordSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/ParaxialTexCoordSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Pickable.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Picker.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Picker.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/PlanePointFinder.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/PlanePointFinder.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/PointEntityWithBrushesIssueGenerator.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/PointEntityWithBrushesIssueGenerator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/PointFile.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/PointFile.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/QuakeEntityRotationPolicy.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/QuakeEntityRotationPolicy.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/QuickFix.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/QuickFix.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Selection.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Selection.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/SelectionResult.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/SelectionResult.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/SharedQuickFixes.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/SharedQuickFixes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/SnapBrushVerticesAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/SnapBrushVerticesAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/Snapshot.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/Snapshot.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/SplitBrushEdgeAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/SplitBrushEdgeAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/SplitBrushFaceAlgorithm.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/SplitBrushFaceAlgorithm.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/TexCoordSystem.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/TexCoordSystem.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Model/TexCoordSystemHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Model/TexCoordSystemHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	NestedHierarchyIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	NestedIterator.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Notifier.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Polygon.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Preference.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	PreferenceManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	PreferenceManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Preferences.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Preferences.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/AttributeSpec.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/BoundsGuideRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/BoundsGuideRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/BoundsInfoRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/BoundsInfoRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/BrushRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/BrushRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Camera.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Camera.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Circle.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Circle.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/ClipperRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/ClipperRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Compass.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Compass.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/EdgeRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/EdgeRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/EntityLinkRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/EntityLinkRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/EntityModelRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/EntityModelRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/EntityRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/EntityRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/FaceRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/FaceRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/FontDescriptor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/FontDescriptor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/FontManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/FontManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/FontTexture.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/FontTexture.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/IndexedVertexList.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/MapRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/MapRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Mesh.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/MeshRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/MeshRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/MiniMapRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/MiniMapRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/MoveIndicatorRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/MoveIndicatorRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/OrthographicCamera.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/OrthographicCamera.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/OutlineTracer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/OutlineTracer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/PerspectiveCamera.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/PerspectiveCamera.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/PointHandleRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/PointHandleRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/RenderContext.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/RenderContext.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/RenderUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/RenderUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Ring.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Ring.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Shader.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Shader.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/ShaderManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/ShaderManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/ShaderProgram.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/ShaderProgram.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Sphere.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Sphere.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/TextRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/TextRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/TextureFont.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/TextureFont.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Transformation.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Transformation.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/TriangleRenderer.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/TriangleRenderer.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Vbo.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/Vbo.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/VboBlock.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/VboBlock.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/Vertex.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/VertexArray.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	Renderer/VertexArray.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	Renderer/VertexSpec.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	SetBool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	SetBool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	StringIndex.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	TrenchBroom.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	TrenchBroomApp.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	TrenchBroomApp.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Animation.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Animation.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/AnimationCurve.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/AnimationCurve.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Autosaver.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Autosaver.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CachingLogger.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/CachingLogger.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CameraAnimation.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/CameraAnimation.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CameraTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/CameraTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CellLayout.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CellView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ChooseGameDialog.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ChooseGameDialog.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ChoosePathTypeDialog.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ChoosePathTypeDialog.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ClipTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ClipTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Clipper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Clipper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ColorTable.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ColorTable.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ColorTableSelectedCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ColorTableSelectedCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CommandIds.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Console.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Console.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ContainerBar.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ContainerBar.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ControllerFacade.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ControllerFacade.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CreateBrushTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/CreateBrushTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/CreateEntityTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/CreateEntityTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/DragAndDrop.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityBrowser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityBrowser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityBrowserView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityBrowserView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityDefinitionFileChooser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityDefinitionFileChooser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityInspector.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityInspector.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityPropertyEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityPropertyEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityPropertyGrid.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityPropertyGrid.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityPropertyGridTable.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityPropertyGridTable.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/EntityPropertySelectedCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/EntityPropertySelectedCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ExecutableEvent.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ExecutableEvent.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FaceAttribsEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FaceAttribsEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FaceInspector.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FaceInspector.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FlagChangedCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FlagChangedCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FlagsEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FlagsEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FlagsPopupEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FlagsPopupEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/FrameManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/FrameManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GLContextHolder.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GLContextHolder.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GameListBox.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GameListBox.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GameSelectionCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GameSelectionCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GamesPreferencePane.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GamesPreferencePane.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GeneralPreferencePane.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GeneralPreferencePane.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/GenericDropSource.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/GenericDropSource.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Grid.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Grid.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ImageListBox.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ImageListBox.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ImagePanel.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ImagePanel.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/InfoPanel.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/InfoPanel.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/InputState.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/InputState.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Inspector.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Inspector.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/IssueBrowser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/IssueBrowser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/KeyboardPreferencePane.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/KeyboardPreferencePane.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/KeyboardShortcut.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/KeyboardShortcut.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/KeyboardShortcutEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/KeyboardShortcutEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/KeyboardShortcutEvent.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/KeyboardShortcutEvent.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MapDocument.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MapDocument.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MapFrame.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MapFrame.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MapInspector.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MapInspector.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MapTreeView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MapTreeView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MapView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MapView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Menu.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Menu.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MiniMap.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MiniMap.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MiniMapBaseView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MiniMapBaseView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MiniMapXYView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MiniMapXYView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MiniMapZView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MiniMapZView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ModEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ModEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MoveObjectsTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MoveObjectsTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MoveTextureHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MoveTextureHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MoveTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MoveToolHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MoveToolHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/MovementRestriction.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/MovementRestriction.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/NavBar.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/NavBar.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/PopupButton.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/PopupButton.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/PreferenceDialog.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/PreferenceDialog.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/PreferencePane.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/PreferencePane.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RecentDocumentListBox.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RecentDocumentListBox.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RecentDocumentSelectedCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RecentDocumentSelectedCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RecentDocuments.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RenderView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RenderView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ResizeBrushesTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ResizeBrushesTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RotateObjectsHandle.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RotateObjectsHandle.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RotateObjectsTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RotateObjectsTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/RotateToolHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/RotateToolHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SelectionTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SelectionTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartChoiceEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartChoiceEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartChoiceEditorMatcher.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartChoiceEditorMatcher.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartColorEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartColorEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartDefaultPropertyEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartDefaultPropertyEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartPropertyEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartPropertyEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartPropertyEditorManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartPropertyEditorManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartPropertyEditorMatcher.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartPropertyEditorMatcher.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/SmartSpawnflagsEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/SmartSpawnflagsEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/StatusBar.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/StatusBar.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureBrowser.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureBrowser.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureBrowserView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureBrowserView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureCollectionEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureCollectionEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureCoordSystemHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureCoordSystemHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureSelectedCommand.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureSelectedCommand.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TextureTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TextureTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingEditor.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingEditor.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingView.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingView.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewCameraTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewCameraTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewHelper.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewHelper.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewOffsetTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewOffsetTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewRotateTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewRotateTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewScaleOriginTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewScaleOriginTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/TexturingViewScaleTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/TexturingViewScaleTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/Tool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/Tool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ToolBox.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ToolBox.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ToolBoxDropTarget.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ToolBoxDropTarget.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/VertexHandleManager.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/VertexHandleManager.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/VertexTool.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/VertexTool.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ViewConstants.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ViewConstants.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ViewInspector.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ViewInspector.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ViewTypes.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/ViewUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/ViewUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/WelcomeFrame.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/WelcomeFrame.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroom	View/wxUtils.cpp	/^namespace TrenchBroom {$/;"	n	language:C++	file:
TrenchBroom	View/wxUtils.h	/^namespace TrenchBroom {$/;"	n	language:C++
TrenchBroomApp	TrenchBroomApp.cpp	/^        TrenchBroomApp::TrenchBroomApp() :$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
TrenchBroomApp	TrenchBroomApp.h	/^        class TrenchBroomApp : public wxApp {$/;"	c	language:C++	namespace:TrenchBroom::View
TrenchBroom_Allocator_h	Allocator.h	/^#define TrenchBroom_Allocator_h$/;"	d	language:C++
TrenchBroom_AssetTypes_h	Assets/AssetTypes.h	/^#define TrenchBroom_AssetTypes_h$/;"	d	language:C++
TrenchBroom_AttributeSpec_h	Renderer/AttributeSpec.h	/^#define TrenchBroom_AttributeSpec_h$/;"	d	language:C++
TrenchBroom_BBox_h	BBox.h	/^#define TrenchBroom_BBox_h$/;"	d	language:C++
TrenchBroom_BrushAlgorithm_h	Model/BrushAlgorithm.h	/^#define TrenchBroom_BrushAlgorithm_h$/;"	d	language:C++
TrenchBroom_BrushEdgesIterator_h	Model/BrushEdgesIterator.h	/^#define TrenchBroom_BrushEdgesIterator_h$/;"	d	language:C++
TrenchBroom_BrushFacesIterator_h	Model/BrushFacesIterator.h	/^#define TrenchBroom_BrushFacesIterator_h$/;"	d	language:C++
TrenchBroom_BrushGeometryTypes_h	Model/BrushGeometryTypes.h	/^#define TrenchBroom_BrushGeometryTypes_h$/;"	d	language:C++
TrenchBroom_ByteBuffer_h	ByteBuffer.h	/^#define TrenchBroom_ByteBuffer_h$/;"	d	language:C++
TrenchBroom_CastIterator_h	CastIterator.h	/^#define TrenchBroom_CastIterator_h$/;"	d	language:C++
TrenchBroom_CellLayout_h	View/CellLayout.h	/^#define TrenchBroom_CellLayout_h$/;"	d	language:C++
TrenchBroom_CellView_h	View/CellView.h	/^#define TrenchBroom_CellView_h$/;"	d	language:C++
TrenchBroom_CollectionUtils_h	CollectionUtils.h	/^#define TrenchBroom_CollectionUtils_h$/;"	d	language:C++
TrenchBroom_Color_h	Color.h	/^#define TrenchBroom_Color_h$/;"	d	language:C++
TrenchBroom_CommandIds_h	View/CommandIds.h	/^#define TrenchBroom_CommandIds_h$/;"	d	language:C++
TrenchBroom_ConfigTypes_h	ConfigTypes.h	/^#define TrenchBroom_ConfigTypes_h$/;"	d	language:C++
TrenchBroom_CoordinatePlane_h	CoordinatePlane.h	/^#define TrenchBroom_CoordinatePlane_h$/;"	d	language:C++
TrenchBroom_DragAndDrop_h	View/DragAndDrop.h	/^#define TrenchBroom_DragAndDrop_h$/;"	d	language:C++
TrenchBroom_DragImage_h	View/DragImage.h	/^#define TrenchBroom_DragImage_h$/;"	d	language:C++
TrenchBroom_Edge_h	Edge.h	/^#define TrenchBroom_Edge_h$/;"	d	language:C++
TrenchBroom_EntityBrushesIterator_h	Model/EntityBrushesIterator.h	/^#define TrenchBroom_EntityBrushesIterator_h$/;"	d	language:C++
TrenchBroom_EntityDefinitionParser_h	IO/EntityDefinitionParser.h	/^#define TrenchBroom_EntityDefinitionParser_h$/;"	d	language:C++
TrenchBroom_EntityFacesIterator_h	Model/EntityFacesIterator.h	/^#define TrenchBroom_EntityFacesIterator_h$/;"	d	language:C++
TrenchBroom_Exceptions_h	Exceptions.h	/^#define TrenchBroom_Exceptions_h$/;"	d	language:C++
TrenchBroom_FaceEdgesIterator_h	Model/FaceEdgesIterator.h	/^#define TrenchBroom_FaceEdgesIterator_h$/;"	d	language:C++
TrenchBroom_FilterIterator_h	FilterIterator.h	/^#define TrenchBroom_FilterIterator_h$/;"	d	language:C++
TrenchBroom_FreeType_h	FreeType.h	/^#define TrenchBroom_FreeType_h$/;"	d	language:C++
TrenchBroom_GL_h	Renderer/GL.h	/^#define TrenchBroom_GL_h$/;"	d	language:C++
TrenchBroom_HitAdapter_h	Model/HitAdapter.h	/^#define TrenchBroom_HitAdapter_h$/;"	d	language:C++
TrenchBroom_Holder_h	Holder.h	/^#define TrenchBroom_Holder_h$/;"	d	language:C++
TrenchBroom_IOUtils_h	IO/IOUtils.h	/^#define TrenchBroom_IOUtils_h$/;"	d	language:C++
TrenchBroom_IndexedVertexList_h	Renderer/IndexedVertexList.h	/^#define TrenchBroom_IndexedVertexList_h$/;"	d	language:C++
TrenchBroom_Line_h	Line.h	/^#define TrenchBroom_Line_h$/;"	d	language:C++
TrenchBroom_Macros_h	Macros.h	/^#define TrenchBroom_Macros_h$/;"	d	language:C++
TrenchBroom_MapBrushesIterator_h	Model/MapBrushesIterator.h	/^#define TrenchBroom_MapBrushesIterator_h$/;"	d	language:C++
TrenchBroom_MapEntitiesIterator_h	Model/MapEntitiesIterator.h	/^#define TrenchBroom_MapEntitiesIterator_h$/;"	d	language:C++
TrenchBroom_MapFacesIterator_h	Model/MapFacesIterator.h	/^#define TrenchBroom_MapFacesIterator_h$/;"	d	language:C++
TrenchBroom_MapObjectsIterator_h	Model/MapObjectsIterator.h	/^#define TrenchBroom_MapObjectsIterator_h$/;"	d	language:C++
TrenchBroom_MapParser_h	IO/MapParser.h	/^#define TrenchBroom_MapParser_h$/;"	d	language:C++
TrenchBroom_Mat_h	Mat.h	/^#define TrenchBroom_Mat_h$/;"	d	language:C++
TrenchBroom_MathUtils_h	MathUtils.h	/^#define TrenchBroom_MathUtils_h$/;"	d	language:C++
TrenchBroom_ModelTypes_h	Model/ModelTypes.h	/^#define TrenchBroom_ModelTypes_h$/;"	d	language:C++
TrenchBroom_ModelUtils_h	Model/ModelUtils.h	/^#define TrenchBroom_ModelUtils_h$/;"	d	language:C++
TrenchBroom_NestedHierarchyIterator_h	NestedHierarchyIterator.h	/^#define TrenchBroom_NestedHierarchyIterator_h$/;"	d	language:C++
TrenchBroom_NestedIterator_h	NestedIterator.h	/^#define TrenchBroom_NestedIterator_h$/;"	d	language:C++
TrenchBroom_Notifier_h	Notifier.h	/^#define TrenchBroom_Notifier_h$/;"	d	language:C++
TrenchBroom_Pickable_h	Model/Pickable.h	/^#define TrenchBroom_Pickable_h$/;"	d	language:C++
TrenchBroom_PlanePointFinder_h	Model/PlanePointFinder.h	/^#define TrenchBroom_PlanePointFinder_h$/;"	d	language:C++
TrenchBroom_Plane_h	Plane.h	/^#define TrenchBroom_Plane_h$/;"	d	language:C++
TrenchBroom_Polygon_h	Polygon.h	/^#define TrenchBroom_Polygon_h$/;"	d	language:C++
TrenchBroom_Preferences_h	Preferences.h	/^#define TrenchBroom_Preferences_h$/;"	d	language:C++
TrenchBroom_Quat_h	Quat.h	/^#define TrenchBroom_Quat_h$/;"	d	language:C++
TrenchBroom_Ray_h	Ray.h	/^#define TrenchBroom_Ray_h$/;"	d	language:C++
TrenchBroom_RenderUtils_h	Renderer/RenderUtils.h	/^#define TrenchBroom_RenderUtils_h$/;"	d	language:C++
TrenchBroom_SharedPointer_h	SharedPointer.h	/^#define TrenchBroom_SharedPointer_h$/;"	d	language:C++
TrenchBroom_StringUtils_h	StringUtils.h	/^#define TrenchBroom_StringUtils_h$/;"	d	language:C++
TrenchBroom_SystemPaths_h	IO/SystemPaths.h	/^#define TrenchBroom_SystemPaths_h$/;"	d	language:C++
TrenchBroom_TemplateUtils_h	TemplateUtils.h	/^#define TrenchBroom_TemplateUtils_h$/;"	d	language:C++
TrenchBroom_TextRenderer_h	Renderer/TextRenderer.h	/^#define TrenchBroom_TextRenderer_h$/;"	d	language:C++
TrenchBroom_TextureLoader_h	IO/TextureLoader.h	/^#define TrenchBroom_TextureLoader_h$/;"	d	language:C++
TrenchBroom_Tokenizer_h	IO/Tokenizer.h	/^#define TrenchBroom_Tokenizer_h$/;"	d	language:C++
TrenchBroom_Tool_h	View/Tool.h	/^#define TrenchBroom_Tool_h$/;"	d	language:C++
TrenchBroom_TrenchBroom_h	TrenchBroom.h	/^#define TrenchBroom_TrenchBroom_h$/;"	d	language:C++
TrenchBroom_VecMath_h	VecMath.h	/^#define TrenchBroom_VecMath_h$/;"	d	language:C++
TrenchBroom_Vec_h	Vec.h	/^#define TrenchBroom_Vec_h$/;"	d	language:C++
TrenchBroom_Vertex_h	Renderer/Vertex.h	/^#define TrenchBroom_Vertex_h$/;"	d	language:C++
TrenchBroom_ViewConstants_h	View/ViewConstants.h	/^#define TrenchBroom_ViewConstants_h$/;"	d	language:C++
TrenchBroom_ViewTypes_h	View/ViewTypes.h	/^#define TrenchBroom_ViewTypes_h$/;"	d	language:C++
Triangle	Renderer/RenderUtils.cpp	/^                Triangle(size_t index1, size_t index2, size_t index3) {$/;"	f	language:C++	class:TrenchBroom::Renderer::SphereBuilder::Triangle
Triangle	Renderer/RenderUtils.cpp	/^            class Triangle {$/;"	c	language:C++	namespace:TrenchBroom::Renderer::SphereBuilder	file:
TriangleRenderer	Renderer/TriangleRenderer.cpp	/^        TriangleRenderer::TriangleRenderer() :$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
TriangleRenderer	Renderer/TriangleRenderer.cpp	/^        TriangleRenderer::TriangleRenderer(const TriangleRenderer& other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
TriangleRenderer	Renderer/TriangleRenderer.cpp	/^        TriangleRenderer::TriangleRenderer(const VertexArray& vertexArray) :$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
TriangleRenderer	Renderer/TriangleRenderer.h	/^        class TriangleRenderer {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
TriangleSeries	Renderer/Mesh.h	/^            typedef std::vector<typename VertexSpec::Vertex::List> TriangleSeries;$/;"	t	language:C++	class:TrenchBroom::Renderer::Mesh
TriangleSeriesMap	Renderer/Mesh.h	/^            typedef std::map<Key, TriangleSeries> TriangleSeriesMap;$/;"	t	language:C++	class:TrenchBroom::Renderer::Mesh
TriangleSetMap	Renderer/Mesh.h	/^            typedef std::map<Key, typename VertexSpec::Vertex::List> TriangleSetMap;$/;"	t	language:C++	class:TrenchBroom::Renderer::Mesh
TriangleShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig TriangleShader             = ShaderConfig("Shaded Triangles",                 "Triangle.vertsh",             "Triangle.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
TriangleType	Renderer/Mesh.h	/^            } TriangleType;$/;"	t	language:C++	class:TrenchBroom::Renderer::Mesh	typeref:enum:TrenchBroom::Renderer::Mesh::__anon26
TriangleType_Fan	Renderer/Mesh.h	/^                TriangleType_Fan,$/;"	e	language:C++	enum:TrenchBroom::Renderer::Mesh::__anon26
TriangleType_Set	Renderer/Mesh.h	/^                TriangleType_Set,$/;"	e	language:C++	enum:TrenchBroom::Renderer::Mesh::__anon26
TriangleType_Strip	Renderer/Mesh.h	/^                TriangleType_Strip,$/;"	e	language:C++	enum:TrenchBroom::Renderer::Mesh::__anon26
TriangleType_Unset	Renderer/Mesh.h	/^                TriangleType_Unset$/;"	e	language:C++	enum:TrenchBroom::Renderer::Mesh::__anon26
TwoPi	MathUtils.h	/^        static const T TwoPi;$/;"	m	language:C++	class:Math::Constants
TwoPi	MathUtils.h	/^    const T Constants<T>::TwoPi                = static_cast<T>(2.0) * Pi;$/;"	m	language:C++	class:Math::Constants
Type	Assets/EntityDefinition.h	/^            } Type;$/;"	t	language:C++	class:TrenchBroom::Assets::EntityDefinition	typeref:enum:TrenchBroom::Assets::EntityDefinition::__anon1
Type	Assets/PropertyDefinition.h	/^            } Type;$/;"	t	language:C++	class:TrenchBroom::Assets::PropertyDefinition	typeref:enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type	ConfigTypes.h	/^        } Type;$/;"	t	language:C++	class:TrenchBroom::ConfigEntry	typeref:enum:TrenchBroom::ConfigEntry::__anon6
Type	Controller/AddRemoveObjectsCommand.cpp	/^        const Command::CommandType AddRemoveObjectsCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand	file:
Type	Controller/AddRemoveObjectsCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
Type	Controller/CommandProcessor.cpp	/^        const Command::CommandType CommandGroup::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup	file:
Type	Controller/CommandProcessor.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
Type	Controller/EntityPropertyCommand.cpp	/^        const Command::CommandType EntityPropertyCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand	file:
Type	Controller/EntityPropertyCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
Type	Controller/FaceAttributeCommand.cpp	/^        const Command::CommandType FaceAttributeCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand	file:
Type	Controller/FaceAttributeCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
Type	Controller/FixPlanePointsCommand.cpp	/^        const Command::CommandType FixPlanePointsCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand	file:
Type	Controller/FixPlanePointsCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
Type	Controller/MoveBrushEdgesCommand.cpp	/^        const Command::CommandType MoveBrushEdgesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand	file:
Type	Controller/MoveBrushEdgesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
Type	Controller/MoveBrushFacesCommand.cpp	/^        const Command::CommandType MoveBrushFacesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand	file:
Type	Controller/MoveBrushFacesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
Type	Controller/MoveBrushVerticesCommand.cpp	/^        const Command::CommandType MoveBrushVerticesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand	file:
Type	Controller/MoveBrushVerticesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
Type	Controller/MoveTexturesCommand.cpp	/^        const Command::CommandType MoveTexturesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand	file:
Type	Controller/MoveTexturesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
Type	Controller/NewDocumentCommand.cpp	/^        const Command::CommandType NewDocumentCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::NewDocumentCommand	file:
Type	Controller/NewDocumentCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
Type	Controller/OpenDocumentCommand.cpp	/^        const Command::CommandType OpenDocumentCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand	file:
Type	Controller/OpenDocumentCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
Type	Controller/RebuildBrushGeometryCommand.cpp	/^        const Command::CommandType RebuildBrushGeometryCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand	file:
Type	Controller/RebuildBrushGeometryCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
Type	Controller/ReparentBrushesCommand.cpp	/^        const Command::CommandType ReparentBrushesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand	file:
Type	Controller/ReparentBrushesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
Type	Controller/ResizeBrushesCommand.cpp	/^        const Command::CommandType ResizeBrushesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand	file:
Type	Controller/ResizeBrushesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
Type	Controller/RotateTexturesCommand.cpp	/^        const Command::CommandType RotateTexturesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand	file:
Type	Controller/RotateTexturesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
Type	Controller/SelectionCommand.cpp	/^        const Command::CommandType SelectionCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand	file:
Type	Controller/SelectionCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
Type	Controller/SetEntityDefinitionFileCommand.cpp	/^        const Command::CommandType SetEntityDefinitionFileCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand	file:
Type	Controller/SetEntityDefinitionFileCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
Type	Controller/SetModsCommand.cpp	/^        const Command::CommandType SetModsCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SetModsCommand	file:
Type	Controller/SetModsCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SetModsCommand
Type	Controller/SnapBrushVerticesCommand.cpp	/^        const Command::CommandType SnapBrushVerticesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand	file:
Type	Controller/SnapBrushVerticesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
Type	Controller/SplitBrushEdgesCommand.cpp	/^        const Command::CommandType SplitBrushEdgesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand	file:
Type	Controller/SplitBrushEdgesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
Type	Controller/SplitBrushFacesCommand.cpp	/^        const Command::CommandType SplitBrushFacesCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand	file:
Type	Controller/SplitBrushFacesCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
Type	Controller/TextureCollectionCommand.cpp	/^        const Command::CommandType TextureCollectionCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand	file:
Type	Controller/TextureCollectionCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
Type	Controller/TransformObjectsCommand.cpp	/^        const Command::CommandType TransformObjectsCommand::Type = Command::freeType();$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand	file:
Type	Controller/TransformObjectsCommand.h	/^            static const CommandType Type;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
Type	IO/ConfigParser.h	/^            typedef size_t Type;$/;"	t	language:C++	namespace:TrenchBroom::IO::ConfigToken
Type	IO/DefParser.h	/^            typedef unsigned int Type;$/;"	t	language:C++	namespace:TrenchBroom::IO::DefToken
Type	IO/FgdParser.h	/^            typedef unsigned int Type;$/;"	t	language:C++	namespace:TrenchBroom::IO::FgdToken
Type	IO/Md2Parser.h	/^                enum Type {$/;"	g	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Mesh
Type	IO/QuakeMapParser.h	/^                } Type;$/;"	t	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty	typeref:enum:TrenchBroom::IO::QuakeMapParser::ExtraProperty::__anon15
Type	IO/QuakeMapParser.h	/^            typedef unsigned int Type;$/;"	t	language:C++	namespace:TrenchBroom::IO::QuakeMapToken
Type	Mat.h	/^    typedef T Type;$/;"	t	language:C++	class:Mat
Type	MathUtils.h	/^        typedef size_t Type;$/;"	t	language:C++	namespace:Math::Axis
Type	MathUtils.h	/^        typedef size_t Type;$/;"	t	language:C++	namespace:Math::PointStatus
Type	Model/EmptyBrushEntityIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssue	file:
Type	Model/EmptyBrushEntityIssueGenerator.cpp	/^        const IssueType EmptyBrushEntityIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssue	file:
Type	Model/EntityLinkIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::EntityLinkIssue	file:
Type	Model/EntityLinkIssueGenerator.cpp	/^        const IssueType EntityLinkIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::EntityLinkIssue	file:
Type	Model/EntityPropertyIndex.h	/^            } Type;$/;"	t	language:C++	class:TrenchBroom::Model::EntityPropertyQuery	typeref:enum:TrenchBroom::Model::EntityPropertyQuery::__anon21
Type	Model/FloatPointsIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::FloatPointsIssue	file:
Type	Model/FloatPointsIssueGenerator.cpp	/^        const IssueType FloatPointsIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::FloatPointsIssue	file:
Type	Model/FloatVerticesIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::FloatVerticesIssue	file:
Type	Model/FloatVerticesIssueGenerator.cpp	/^        const IssueType FloatVerticesIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::FloatVerticesIssue	file:
Type	Model/MissingEntityClassnameIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssue	file:
Type	Model/MissingEntityClassnameIssueGenerator.cpp	/^        const IssueType MissingEntityClassnameIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssue	file:
Type	Model/MissingEntityDefinitionIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssue	file:
Type	Model/MissingEntityDefinitionIssueGenerator.cpp	/^        const IssueType MissingEntityDefinitionIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssue	file:
Type	Model/MixedBrushContentsIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssue	file:
Type	Model/MixedBrushContentsIssueGenerator.cpp	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsQuickFix	file:
Type	Model/MixedBrushContentsIssueGenerator.cpp	/^        const IssueType MixedBrushContentsIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssue	file:
Type	Model/MixedBrushContentsIssueGenerator.cpp	/^        const QuickFixType MixedBrushContentsQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsQuickFix	file:
Type	Model/ModelTypes.h	/^            typedef size_t Type;$/;"	t	language:C++	namespace:TrenchBroom::Model::MapFormat
Type	Model/MoveBrushVertexAlgorithm.h	/^                } Type;$/;"	t	language:C++	struct:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult	typeref:enum:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult::__anon22
Type	Model/Object.h	/^            } Type;$/;"	t	language:C++	class:TrenchBroom::Model::Object	typeref:enum:TrenchBroom::Model::Object::__anon23
Type	Model/PointEntityWithBrushesIssueGenerator.cpp	/^            static const IssueType Type;$/;"	m	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssue	file:
Type	Model/PointEntityWithBrushesIssueGenerator.cpp	/^        const IssueType PointEntityWithBrushesIssue::Type = Issue::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssue	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType DeleteEntityPropertyQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::DeleteEntityPropertyQuickFix	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType DeleteObjectQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType FindIntegerPlanePointsQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::FindIntegerPlanePointsQuickFix	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType MoveBrushesToWorldspawnQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushesToWorldspawnQuickFix	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType SnapPlanePointsToIntegerQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::SnapPlanePointsToIntegerQuickFix	file:
Type	Model/SharedQuickFixes.cpp	/^        const QuickFixType SnapVerticesToIntegerQuickFix::Type = QuickFix::freeType();$/;"	m	language:C++	class:TrenchBroom::Model::SnapVerticesToIntegerQuickFix	file:
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::DeleteEntityPropertyQuickFix
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::FindIntegerPlanePointsQuickFix
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushesToWorldspawnQuickFix
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::SnapPlanePointsToIntegerQuickFix
Type	Model/SharedQuickFixes.h	/^            static const QuickFixType Type;$/;"	m	language:C++	class:TrenchBroom::Model::SnapVerticesToIntegerQuickFix
Type	Renderer/AttributeSpec.h	/^            typedef GLbyte Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLdouble Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLfloat Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLint Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLshort Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLubyte Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLuint Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLushort Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/AttributeSpec.h	/^            typedef GLvoid Type;$/;"	t	language:C++	struct:TrenchBroom::Renderer::DataTypeTraits
Type	Renderer/TextRenderer.h	/^            typedef unsigned int Type;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::Alignment
Type	Renderer/Vbo.h	/^            typedef unsigned int Type;$/;"	t	language:C++	namespace:TrenchBroom::Renderer::VboState
Type	Vec.h	/^    typedef T Type;$/;"	t	language:C++	class:Vec
Type	View/Animation.h	/^            typedef int Type;$/;"	t	language:C++	class:TrenchBroom::View::Animation
Type	View/Menu.h	/^            } Type;$/;"	t	language:C++	class:TrenchBroom::View::MenuItem	typeref:enum:TrenchBroom::View::MenuItem::__anon31
TypeMatcher	IO/FileSystem.cpp	/^        FileSystem::TypeMatcher::TypeMatcher(const bool files, const bool directories) :$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem::TypeMatcher
TypeMatcher	IO/FileSystem.h	/^            class TypeMatcher {$/;"	c	language:C++	class:TrenchBroom::IO::FileSystem
Type_Action	View/Menu.h	/^                Type_Action,$/;"	e	language:C++	enum:TrenchBroom::View::MenuItem::__anon31
Type_Any	Model/EntityPropertyIndex.h	/^                Type_Any$/;"	e	language:C++	enum:TrenchBroom::Model::EntityPropertyQuery::__anon21
Type_Brush	Model/Object.h	/^                Type_Brush$/;"	e	language:C++	enum:TrenchBroom::Model::Object::__anon23
Type_BrushEntity	Assets/EntityDefinition.h	/^                Type_BrushEntity$/;"	e	language:C++	enum:TrenchBroom::Assets::EntityDefinition::__anon1
Type_Check	View/Menu.h	/^                Type_Check,$/;"	e	language:C++	enum:TrenchBroom::View::MenuItem::__anon31
Type_ChoiceProperty	Assets/PropertyDefinition.h	/^                Type_ChoiceProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_Entity	Model/Object.h	/^                Type_Entity,$/;"	e	language:C++	enum:TrenchBroom::Model::Object::__anon23
Type_Exact	Model/EntityPropertyIndex.h	/^                Type_Exact,$/;"	e	language:C++	enum:TrenchBroom::Model::EntityPropertyQuery::__anon21
Type_FlagsProperty	Assets/PropertyDefinition.h	/^                Type_FlagsProperty$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_FloatProperty	Assets/PropertyDefinition.h	/^                Type_FloatProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_Integer	IO/QuakeMapParser.h	/^                    Type_Integer$/;"	e	language:C++	enum:TrenchBroom::IO::QuakeMapParser::ExtraProperty::__anon15
Type_IntegerProperty	Assets/PropertyDefinition.h	/^                Type_IntegerProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_List	ConfigTypes.h	/^            Type_List   = 1 << 1,$/;"	e	language:C++	enum:TrenchBroom::ConfigEntry::__anon6
Type_Menu	View/Menu.h	/^                Type_Menu,$/;"	e	language:C++	enum:TrenchBroom::View::MenuItem::__anon31
Type_MultiMenu	View/Menu.h	/^                Type_MultiMenu$/;"	e	language:C++	enum:TrenchBroom::View::MenuItem::__anon31
Type_Numbered	Model/EntityPropertyIndex.h	/^                Type_Numbered,$/;"	e	language:C++	enum:TrenchBroom::Model::EntityPropertyQuery::__anon21
Type_PointEntity	Assets/EntityDefinition.h	/^                Type_PointEntity,$/;"	e	language:C++	enum:TrenchBroom::Assets::EntityDefinition::__anon1
Type_Prefix	Model/EntityPropertyIndex.h	/^                Type_Prefix,$/;"	e	language:C++	enum:TrenchBroom::Model::EntityPropertyQuery::__anon21
Type_Separator	View/Menu.h	/^                Type_Separator,$/;"	e	language:C++	enum:TrenchBroom::View::MenuItem::__anon31
Type_String	IO/QuakeMapParser.h	/^                    Type_String,$/;"	e	language:C++	enum:TrenchBroom::IO::QuakeMapParser::ExtraProperty::__anon15
Type_StringProperty	Assets/PropertyDefinition.h	/^                Type_StringProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_Table	ConfigTypes.h	/^            Type_Table  = 1 << 2$/;"	e	language:C++	enum:TrenchBroom::ConfigEntry::__anon6
Type_TargetDestinationProperty	Assets/PropertyDefinition.h	/^                Type_TargetDestinationProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_TargetSourceProperty	Assets/PropertyDefinition.h	/^                Type_TargetSourceProperty,$/;"	e	language:C++	enum:TrenchBroom::Assets::PropertyDefinition::__anon2
Type_Value	ConfigTypes.h	/^            Type_Value  = 1 << 0,$/;"	e	language:C++	enum:TrenchBroom::ConfigEntry::__anon6
Type_VertexDeleted	Model/MoveBrushVertexAlgorithm.h	/^                    Type_VertexDeleted,$/;"	e	language:C++	enum:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult::__anon22
Type_VertexMoved	Model/MoveBrushVertexAlgorithm.h	/^                    Type_VertexMoved,$/;"	e	language:C++	enum:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult::__anon22
Type_VertexUnchanged	Model/MoveBrushVertexAlgorithm.h	/^                    Type_VertexUnchanged$/;"	e	language:C++	enum:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult::__anon22
TypedHitFilter	HitFilter.cpp	/^    TypedHitFilter::TypedHitFilter(const Hit::HitType typeMask) :$/;"	f	language:C++	class:TrenchBroom::TypedHitFilter
TypedHitFilter	HitFilter.h	/^    class TypedHitFilter : public HitFilter {$/;"	c	language:C++	namespace:TrenchBroom
Undecided	Model/BrushEdge.h	/^                Undecided,$/;"	e	language:C++	enum:TrenchBroom::Model::BrushEdge::Mark
UniformVariableCache	Renderer/ShaderProgram.h	/^            typedef std::map<String, GLint> UniformVariableCache;$/;"	t	language:C++	class:TrenchBroom::Renderer::ShaderProgram
Unknown	Model/ModelTypes.h	/^            static const Type Unknown = 1 << 0;$/;"	m	language:C++	namespace:TrenchBroom::Model::MapFormat
UnsavedPreferences	PreferenceManager.h	/^        typedef std::map<PreferenceBase*, ValueHolderBase*> UnsavedPreferences;$/;"	t	language:C++	class:TrenchBroom::PreferenceManager
UnselectedBrushRendererFilter	Renderer/MapRenderer.cpp	/^            UnselectedBrushRendererFilter(const Model::ModelFilter& filter) :$/;"	f	language:C++	struct:TrenchBroom::Renderer::UnselectedBrushRendererFilter
UnselectedBrushRendererFilter	Renderer/MapRenderer.cpp	/^        struct UnselectedBrushRendererFilter : public BrushRenderer::Filter {$/;"	s	language:C++	namespace:TrenchBroom::Renderer	file:
UnsetEntityDefinition	View/MapDocument.cpp	/^        struct UnsetEntityDefinition {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
UnsetEntityModel	View/MapDocument.cpp	/^        struct UnsetEntityModel {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
UnsetTexture	View/MapDocument.cpp	/^        struct UnsetTexture {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
UpdateObjectInIssueManager	View/MapDocument.cpp	/^            UpdateObjectInIssueManager(Model::IssueManager& issueManager) :$/;"	f	language:C++	class:TrenchBroom::View::UpdateObjectInIssueManager
UpdateObjectInIssueManager	View/MapDocument.cpp	/^        class UpdateObjectInIssueManager {$/;"	c	language:C++	namespace:TrenchBroom::View	file:
UpdateSpawnflag	View/SmartSpawnflagsEditor.cpp	/^            UpdateSpawnflag(ControllerSPtr controller, const Model::PropertyKey& key, const size_t flagIndex, const bool setFlag) :$/;"	f	language:C++	struct:TrenchBroom::View::UpdateSpawnflag
UpdateSpawnflag	View/SmartSpawnflagsEditor.cpp	/^        struct UpdateSpawnflag {$/;"	s	language:C++	namespace:TrenchBroom::View	file:
Usage	Assets/EntityDefinitionManager.h	/^                Usage$/;"	e	language:C++	enum:TrenchBroom::Assets::EntityDefinitionManager::SortOrder
Utils	CollectionUtils.h	/^namespace Utils {$/;"	n	language:C++
VERSION	Version.h	/^#define VERSION /;"	d	language:C++
VERSIONSTR	Version.h	/^#define VERSIONSTR /;"	d	language:C++
ValueHolder	Preference.h	/^        ValueHolder(T value) :$/;"	f	language:C++	class:TrenchBroom::ValueHolder
ValueHolder	Preference.h	/^    class ValueHolder : public ValueHolderBase {$/;"	c	language:C++	namespace:TrenchBroom
ValueHolderBase	Preference.h	/^    class ValueHolderBase {};$/;"	c	language:C++	namespace:TrenchBroom
ValueList	View/FlagsEditor.h	/^            typedef std::vector<int> ValueList;$/;"	t	language:C++	class:TrenchBroom::View::FlagsEditor
ValueMap	StringIndex.h	/^            typedef std::map<V, size_t> ValueMap;$/;"	t	language:C++	class:TrenchBroom::StringIndex::Node
ValueOp	Controller/FaceAttributeCommand.h	/^            } ValueOp;$/;"	t	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand	typeref:enum:TrenchBroom::Controller::FaceAttributeCommand::__anon10
ValueOp_Add	Controller/FaceAttributeCommand.h	/^                ValueOp_Add,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon10
ValueOp_Mul	Controller/FaceAttributeCommand.h	/^                ValueOp_Mul$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon10
ValueOp_None	Controller/FaceAttributeCommand.h	/^                ValueOp_None,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon10
ValueOp_Set	Controller/FaceAttributeCommand.h	/^                ValueOp_Set,$/;"	e	language:C++	enum:TrenchBroom::Controller::FaceAttributeCommand::__anon10
ValueSet	StringIndex.h	/^        typedef std::set<V> ValueSet;$/;"	t	language:C++	class:TrenchBroom::StringIndex
Valve	Model/ModelTypes.h	/^            static const Type Valve   = 1 << 3;$/;"	m	language:C++	namespace:TrenchBroom::Model::MapFormat
VaryingPCShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig VaryingPCShader            = ShaderConfig("Varying Position \/ Color",         "VaryingPC.vertsh",            "VaryingPC.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
VaryingPUniformCShader	Renderer/ShaderManager.cpp	/^            const ShaderConfig VaryingPUniformCShader     = ShaderConfig("Varying Position \/ Uniform Color", "VaryingPUniformC.vertsh",     "VaryingPC.fragsh");$/;"	m	language:C++	namespace:TrenchBroom::Renderer::Shaders	file:
Vbo	Renderer/Vbo.cpp	/^        Vbo::Vbo(const size_t initialCapacity, const GLenum type, const GLenum usage) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
Vbo	Renderer/Vbo.h	/^        class Vbo {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VboBlock	Renderer/VboBlock.cpp	/^        VboBlock::VboBlock(Vbo& vbo, const size_t offset, const size_t capacity, VboBlock* previous, VboBlock* next) :$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
VboBlock	Renderer/VboBlock.h	/^        class VboBlock {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VboBlockList	Renderer/Vbo.h	/^            typedef std::vector<VboBlock*> VboBlockList;$/;"	t	language:C++	class:TrenchBroom::Renderer::Vbo
VboException	Exceptions.h	/^        VboException() throw() {}$/;"	f	language:C++	class:TrenchBroom::VboException
VboException	Exceptions.h	/^        VboException(const String& str) throw() : ExceptionStream(str) {}$/;"	f	language:C++	class:TrenchBroom::VboException
VboException	Exceptions.h	/^    class VboException : public ExceptionStream<VboException> {$/;"	c	language:C++	namespace:TrenchBroom
VboState	Renderer/Vbo.h	/^        namespace VboState {$/;"	n	language:C++	namespace:TrenchBroom::Renderer
Vec	Vec.h	/^    Vec() {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const T i_x) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const T i_x, const T i_y) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const T i_x, const T i_y, const T i_z) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const T i_x, const T i_y, const T i_z, const T i_w) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const Vec<U,O>& vec) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const Vec<U,O>& vec, const U last) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const Vec<U,O>& vec, const U oneButLast, const U last) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^    Vec(const std::string& str) {$/;"	f	language:C++	class:Vec
Vec	Vec.h	/^class Vec {$/;"	c	language:C++
Vec1d	Vec.h	/^typedef Vec<double,1> Vec1d;$/;"	t	language:C++
Vec1f	Vec.h	/^typedef Vec<float,1> Vec1f;$/;"	t	language:C++
Vec1i	Vec.h	/^typedef Vec<int,1> Vec1i;$/;"	t	language:C++
Vec1l	Vec.h	/^typedef Vec<long,1> Vec1l;$/;"	t	language:C++
Vec2	TrenchBroom.h	/^typedef Vec<FloatType, 2> Vec2;$/;"	t	language:C++
Vec2b	Vec.h	/^typedef Vec<bool,2> Vec2b;$/;"	t	language:C++
Vec2d	Vec.h	/^typedef Vec<double,2> Vec2d;$/;"	t	language:C++
Vec2f	Vec.h	/^typedef Vec<float,2> Vec2f;$/;"	t	language:C++
Vec2i	Vec.h	/^typedef Vec<int,2> Vec2i;$/;"	t	language:C++
Vec2l	Vec.h	/^typedef Vec<long,2> Vec2l;$/;"	t	language:C++
Vec3	TrenchBroom.h	/^typedef Vec<FloatType, 3> Vec3;$/;"	t	language:C++
Vec3b	Vec.h	/^typedef Vec<bool,3> Vec3b;$/;"	t	language:C++
Vec3d	Vec.h	/^typedef Vec<double,3> Vec3d;$/;"	t	language:C++
Vec3f	Vec.h	/^typedef Vec<float,3> Vec3f;$/;"	t	language:C++
Vec3i	Vec.h	/^typedef Vec<int,3> Vec3i;$/;"	t	language:C++
Vec3l	Vec.h	/^typedef Vec<long,3> Vec3l;$/;"	t	language:C++
Vec4b	Vec.h	/^typedef Vec<bool,4> Vec4b;$/;"	t	language:C++
Vec4d	Vec.h	/^typedef Vec<double,4> Vec4d;$/;"	t	language:C++
Vec4f	Vec.h	/^typedef Vec<float,4> Vec4f;$/;"	t	language:C++
Vec4i	Vec.h	/^typedef Vec<int,4> Vec4i;$/;"	t	language:C++
Vec4l	Vec.h	/^typedef Vec<long,4> Vec4l;$/;"	t	language:C++
VectorDeleter	CollectionUtils.h	/^    struct VectorDeleter {$/;"	s	language:C++	namespace:MapUtils
VectorUtils	CollectionUtils.h	/^namespace VectorUtils {$/;"	n	language:C++
Version	IO/Md2Parser.h	/^            static const int Version = 8;$/;"	m	language:C++	namespace:TrenchBroom::IO::Md2Layout
Vertex	Assets/Md2Model.h	/^            typedef VertexSpec::Vertex Vertex;$/;"	t	language:C++	class:TrenchBroom::Assets::Md2Model
Vertex	Model/Brush.h	/^            typedef VertexSpec::Vertex Vertex;$/;"	t	language:C++	class:TrenchBroom::Model::Brush
Vertex	Model/BrushFace.h	/^            typedef VertexSpec::Vertex Vertex;$/;"	t	language:C++	class:TrenchBroom::Model::BrushFace
Vertex	Renderer/EntityLinkRenderer.h	/^            typedef VertexSpecs::P3C4::Vertex Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
Vertex	Renderer/MoveIndicatorRenderer.h	/^            typedef VertexSpecs::P2::Vertex Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
Vertex	Renderer/VertexSpec.h	/^            typedef Vertex1<_A1> Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec1
Vertex	Renderer/VertexSpec.h	/^            typedef Vertex2<_A1, _A2> Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec2
Vertex	Renderer/VertexSpec.h	/^            typedef Vertex3<_A1, _A2, _A3> Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec3
Vertex	Renderer/VertexSpec.h	/^            typedef Vertex4<_A1, _A2, _A3, _A4> Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec4
Vertex	Renderer/VertexSpec.h	/^            typedef Vertex5<_A1, _A2, _A3, _A4, _A5> Vertex;$/;"	t	language:C++	class:TrenchBroom::Renderer::VertexSpec5
Vertex	View/ResizeBrushesTool.cpp	/^            typedef Renderer::VertexSpecs::P3::Vertex Vertex;$/;"	t	language:C++	struct:TrenchBroom::View::CollectVertices	file:
Vertex1	Renderer/Vertex.h	/^            Vertex1() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex1
Vertex1	Renderer/Vertex.h	/^            Vertex1(const typename A1::ElementType& i_v1) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex1
Vertex1	Renderer/Vertex.h	/^        class Vertex1 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Vertex2	Renderer/Vertex.h	/^            Vertex2() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex2
Vertex2	Renderer/Vertex.h	/^            Vertex2(const typename A1::ElementType& i_v1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex2
Vertex2	Renderer/Vertex.h	/^        class Vertex2 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Vertex3	Renderer/Vertex.h	/^            Vertex3() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex3
Vertex3	Renderer/Vertex.h	/^            Vertex3(const typename A1::ElementType& i_v1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex3
Vertex3	Renderer/Vertex.h	/^        class Vertex3 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Vertex4	Renderer/Vertex.h	/^            Vertex4() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex4
Vertex4	Renderer/Vertex.h	/^            Vertex4(const typename A1::ElementType& i_v1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex4
Vertex4	Renderer/Vertex.h	/^        class Vertex4 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
Vertex5	Renderer/Vertex.h	/^            Vertex5() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex5
Vertex5	Renderer/Vertex.h	/^            Vertex5(const typename A1::ElementType& i_v1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex5
Vertex5	Renderer/Vertex.h	/^        class Vertex5 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexArray	Renderer/VertexArray.cpp	/^        VertexArray::VertexArray() :$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
VertexArray	Renderer/VertexArray.cpp	/^        VertexArray::VertexArray(const GLenum primType, BaseHolder::Ptr holder, IndexArray& indices, CountArray& counts) :$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
VertexArray	Renderer/VertexArray.cpp	/^        VertexArray::VertexArray(const GLenum primType, BaseHolder::Ptr holder, const IndexArray& indices, const CountArray& counts) :$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
VertexArray	Renderer/VertexArray.h	/^        class VertexArray {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexHandleHit	View/VertexHandleManager.cpp	/^        const Hit::HitType VertexHandleManager::VertexHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager	file:
VertexHandleHit	View/VertexHandleManager.h	/^            static const Hit::HitType VertexHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
VertexHandleManager	View/VertexHandleManager.cpp	/^        VertexHandleManager::VertexHandleManager(Renderer::TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
VertexHandleManager	View/VertexHandleManager.h	/^        class VertexHandleManager {$/;"	c	language:C++	namespace:TrenchBroom::View
VertexList	Renderer/VertexArray.h	/^            typedef typename VertexSpec::Vertex::List VertexList;$/;"	t	language:C++	class:TrenchBroom::Renderer::CopyHolder
VertexList	Renderer/VertexArray.h	/^            typedef typename VertexSpec::Vertex::List VertexList;$/;"	t	language:C++	class:TrenchBroom::Renderer::Holder
VertexList	Renderer/VertexArray.h	/^            typedef typename VertexSpec::Vertex::List VertexList;$/;"	t	language:C++	class:TrenchBroom::Renderer::RefHolder
VertexList	Renderer/VertexArray.h	/^            typedef typename VertexSpec::Vertex::List VertexList;$/;"	t	language:C++	class:TrenchBroom::Renderer::SwapHolder
VertexMarkList	IO/Bsp29Parser.h	/^            typedef std::vector<bool> VertexMarkList;$/;"	t	language:C++	class:TrenchBroom::IO::Bsp29Parser
VertexSpec	Assets/Md2Model.h	/^            typedef Renderer::VertexSpecs::P3NT2 VertexSpec;$/;"	t	language:C++	class:TrenchBroom::Assets::Md2Model
VertexSpec	Model/Brush.h	/^            typedef Renderer::VertexSpecs::P3 VertexSpec;$/;"	t	language:C++	class:TrenchBroom::Model::Brush
VertexSpec	Model/BrushFace.h	/^            typedef Renderer::VertexSpecs::P3NT2 VertexSpec;$/;"	t	language:C++	class:TrenchBroom::Model::BrushFace
VertexSpec1	Renderer/VertexSpec.h	/^        class VertexSpec1 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexSpec2	Renderer/VertexSpec.h	/^        class VertexSpec2 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexSpec3	Renderer/VertexSpec.h	/^        class VertexSpec3 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexSpec4	Renderer/VertexSpec.h	/^        class VertexSpec4 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexSpec5	Renderer/VertexSpec.h	/^        class VertexSpec5 {$/;"	c	language:C++	namespace:TrenchBroom::Renderer
VertexSpecs	Renderer/VertexSpec.h	/^        namespace VertexSpecs {$/;"	n	language:C++	namespace:TrenchBroom::Renderer
VertexToBrushesMap	Model/ModelTypes.h	/^        typedef std::map<Vec3, BrushList, Vec3::LexicographicOrder> VertexToBrushesMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
VertexToEdgesMap	Model/ModelTypes.h	/^        typedef std::map<Vec3, BrushEdgeList, Vec3::LexicographicOrder> VertexToEdgesMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
VertexToFacesMap	Model/ModelTypes.h	/^        typedef std::map<Vec3, BrushFaceList, Vec3::LexicographicOrder> VertexToFacesMap;$/;"	t	language:C++	namespace:TrenchBroom::Model
VertexTool	View/VertexTool.cpp	/^        VertexTool::VertexTool(MapDocumentWPtr document, ControllerWPtr controller, MovementRestriction& movementRestriction, Renderer::TextureFont& font) :$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
VertexTool	View/VertexTool.h	/^        class VertexTool : public MoveTool<ActivationPolicy, PickingPolicy, MousePolicy, NoDropPolicy, RenderPolicy> {$/;"	c	language:C++	namespace:TrenchBroom::View
VertsAndNormals	Renderer/RenderUtils.cpp	/^        VertsAndNormals::VertsAndNormals(const size_t vertexCount) :$/;"	f	language:C++	class:TrenchBroom::Renderer::VertsAndNormals
VertsAndNormals	Renderer/RenderUtils.h	/^        struct VertsAndNormals {$/;"	s	language:C++	namespace:TrenchBroom::Renderer
View	Controller/BrushVertexHandleCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	Renderer/ClipperRenderer.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	Renderer/Compass.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	TrenchBroomApp.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	TrenchBroomApp.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Animation.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Animation.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/AnimationCurve.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/AnimationCurve.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Autosaver.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Autosaver.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CachingLogger.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/CachingLogger.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CameraAnimation.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/CameraAnimation.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CameraTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/CameraTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CellLayout.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CellView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ChooseGameDialog.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ChooseGameDialog.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ChoosePathTypeDialog.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ChoosePathTypeDialog.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ClipTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ClipTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Clipper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Clipper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ColorTable.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ColorTable.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ColorTableSelectedCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ColorTableSelectedCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CommandIds.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Console.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Console.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ContainerBar.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ContainerBar.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ControllerFacade.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ControllerFacade.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CreateBrushTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/CreateBrushTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/CreateEntityTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/CreateEntityTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/DragAndDrop.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityBrowser.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityBrowser.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityBrowserView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityBrowserView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityDefinitionFileChooser.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityDefinitionFileChooser.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityInspector.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityInspector.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityPropertyEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityPropertyEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityPropertyGrid.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityPropertyGrid.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityPropertyGridTable.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityPropertyGridTable.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/EntityPropertySelectedCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/EntityPropertySelectedCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ExecutableEvent.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ExecutableEvent.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FaceAttribsEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FaceAttribsEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FaceInspector.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FaceInspector.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FlagChangedCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FlagChangedCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FlagsEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FlagsEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FlagsPopupEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FlagsPopupEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/FrameManager.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/FrameManager.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GLContextHolder.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GLContextHolder.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GameListBox.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GameListBox.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GameSelectionCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GameSelectionCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GamesPreferencePane.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GamesPreferencePane.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GeneralPreferencePane.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GeneralPreferencePane.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/GenericDropSource.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/GenericDropSource.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Grid.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Grid.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ImageListBox.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ImageListBox.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ImagePanel.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ImagePanel.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/InfoPanel.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/InfoPanel.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/InputState.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/InputState.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Inspector.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Inspector.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/IssueBrowser.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/IssueBrowser.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/KeyboardPreferencePane.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/KeyboardPreferencePane.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/KeyboardShortcut.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/KeyboardShortcut.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/KeyboardShortcutEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/KeyboardShortcutEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/KeyboardShortcutEvent.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/KeyboardShortcutEvent.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MapDocument.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MapDocument.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MapFrame.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MapFrame.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MapInspector.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MapInspector.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MapTreeView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MapTreeView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MapView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MapView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Menu.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Menu.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MiniMap.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MiniMap.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MiniMapBaseView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MiniMapBaseView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MiniMapXYView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MiniMapXYView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MiniMapZView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MiniMapZView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ModEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ModEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MoveObjectsTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MoveObjectsTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MoveTextureHelper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MoveTextureHelper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MoveTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MoveToolHelper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MoveToolHelper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/MovementRestriction.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/MovementRestriction.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/NavBar.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/NavBar.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/PopupButton.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/PopupButton.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/PreferenceDialog.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/PreferenceDialog.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/PreferencePane.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/PreferencePane.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RecentDocumentListBox.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RecentDocumentListBox.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RecentDocumentSelectedCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RecentDocumentSelectedCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RecentDocuments.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RenderView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RenderView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ResizeBrushesTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ResizeBrushesTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RotateObjectsHandle.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RotateObjectsHandle.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RotateObjectsTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RotateObjectsTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/RotateToolHelper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/RotateToolHelper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SelectionTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SelectionTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartChoiceEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartChoiceEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartChoiceEditorMatcher.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartChoiceEditorMatcher.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartColorEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartColorEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartDefaultPropertyEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartDefaultPropertyEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartPropertyEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartPropertyEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartPropertyEditorManager.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartPropertyEditorManager.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartPropertyEditorMatcher.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartPropertyEditorMatcher.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/SmartSpawnflagsEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/SmartSpawnflagsEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/StatusBar.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/StatusBar.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureBrowser.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureBrowser.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureBrowserView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureBrowserView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureCollectionEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureCollectionEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureCoordSystemHelper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureCoordSystemHelper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureSelectedCommand.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureSelectedCommand.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TextureTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TextureTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingEditor.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingEditor.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingView.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingView.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewCameraTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewCameraTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewHelper.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewHelper.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewOffsetTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewOffsetTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewRotateTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewRotateTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewScaleOriginTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewScaleOriginTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/TexturingViewScaleTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/TexturingViewScaleTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/Tool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/Tool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ToolBox.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ToolBox.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ToolBoxDropTarget.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ToolBoxDropTarget.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/VertexHandleManager.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/VertexHandleManager.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/VertexTool.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/VertexTool.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ViewConstants.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ViewConstants.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ViewInspector.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ViewInspector.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ViewTypes.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/ViewUtils.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/ViewUtils.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/WelcomeFrame.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/WelcomeFrame.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
View	View/wxUtils.cpp	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom	file:
View	View/wxUtils.h	/^    namespace View {$/;"	n	language:C++	namespace:TrenchBroom
ViewCenterCameraOnSelection	View/CommandIds.h	/^                const int ViewCenterCameraOnSelection        = Lowest +  72;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewDecGridSize	View/CommandIds.h	/^                const int ViewDecGridSize                    = Lowest +  75;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewIncGridSize	View/CommandIds.h	/^                const int ViewIncGridSize                    = Lowest +  74;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewInspector	View/ViewInspector.cpp	/^        ViewInspector::ViewInspector(wxWindow* parent) :$/;"	f	language:C++	class:TrenchBroom::View::ViewInspector
ViewInspector	View/ViewInspector.h	/^        class ViewInspector : public wxPanel {$/;"	c	language:C++	namespace:TrenchBroom::View
ViewMenu	View/Menu.cpp	/^        const String ViewMenu = "View";$/;"	m	language:C++	namespace:TrenchBroom::View	file:
ViewMoveCameraBackward	View/CommandIds.h	/^                const int ViewMoveCameraBackward             = Lowest +  55;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraDown	View/CommandIds.h	/^                const int ViewMoveCameraDown                 = Lowest +  59;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraForward	View/CommandIds.h	/^                const int ViewMoveCameraForward              = Lowest +  54;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraLeft	View/CommandIds.h	/^                const int ViewMoveCameraLeft                 = Lowest +  56;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraRight	View/CommandIds.h	/^                const int ViewMoveCameraRight                = Lowest +  57;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraToNextPoint	View/CommandIds.h	/^                const int ViewMoveCameraToNextPoint          = Lowest +  78;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraToPreviousPoint	View/CommandIds.h	/^                const int ViewMoveCameraToPreviousPoint      = Lowest +  79;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewMoveCameraUp	View/CommandIds.h	/^                const int ViewMoveCameraUp                   = Lowest +  58;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize1	View/CommandIds.h	/^                const int ViewSetGridSize1                   = Lowest +  45;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize128	View/CommandIds.h	/^                const int ViewSetGridSize128                 = Lowest +  52;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize16	View/CommandIds.h	/^                const int ViewSetGridSize16                  = Lowest +  49;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize2	View/CommandIds.h	/^                const int ViewSetGridSize2                   = Lowest +  46;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize256	View/CommandIds.h	/^                const int ViewSetGridSize256                 = Lowest +  53;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize32	View/CommandIds.h	/^                const int ViewSetGridSize32                  = Lowest +  50;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize4	View/CommandIds.h	/^                const int ViewSetGridSize4                   = Lowest +  47;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize64	View/CommandIds.h	/^                const int ViewSetGridSize64                  = Lowest +  51;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSetGridSize8	View/CommandIds.h	/^                const int ViewSetGridSize8                   = Lowest +  48;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSwitchToEntityInspector	View/CommandIds.h	/^                const int ViewSwitchToEntityInspector        = Lowest +  87;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSwitchToFaceInspector	View/CommandIds.h	/^                const int ViewSwitchToFaceInspector          = Lowest +  88;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewSwitchToMapInspector	View/CommandIds.h	/^                const int ViewSwitchToMapInspector           = Lowest +  86;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewToggleShowGrid	View/CommandIds.h	/^                const int ViewToggleShowGrid                 = Lowest +  43;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
ViewToggleSnapToGrid	View/CommandIds.h	/^                const int ViewToggleSnapToGrid               = Lowest +  44;$/;"	m	language:C++	namespace:TrenchBroom::View::CommandIds::Menu
Viewport	Renderer/Camera.cpp	/^        Camera::Viewport::Viewport() :$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera::Viewport
Viewport	Renderer/Camera.cpp	/^        Camera::Viewport::Viewport(const int i_x, const int i_y, const unsigned int i_width, const unsigned int i_height) :$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera::Viewport
Viewport	Renderer/Camera.h	/^            struct Viewport {$/;"	s	language:C++	class:TrenchBroom::Renderer::Camera
Visitor	Model/IssueGenerator.cpp	/^            Visitor(const IssueGenerator& generator) :$/;"	f	language:C++	class:TrenchBroom::Model::Visitor
Visitor	Model/IssueGenerator.cpp	/^        class Visitor : public ObjectVisitor {$/;"	c	language:C++	namespace:TrenchBroom::Model	file:
WEConsole	IO/Wad.h	/^            static const char WEConsole   = 'C';$/;"	m	language:C++	namespace:TrenchBroom::IO::WadEntryType
WEMip	IO/Wad.h	/^            static const char WEMip       = 'D';$/;"	m	language:C++	namespace:TrenchBroom::IO::WadEntryType
WEPalette	IO/Wad.h	/^            static const char WEPalette   = '@';$/;"	m	language:C++	namespace:TrenchBroom::IO::WadEntryType
WEStatus	IO/Wad.h	/^            static const char WEStatus    = 'B';$/;"	m	language:C++	namespace:TrenchBroom::IO::WadEntryType
WXDLLIMPEXP_CUSTOM_EVENT	View/ColorTableSelectedCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/EntityPropertySelectedCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/ExecutableEvent.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/FlagChangedCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/GameSelectionCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/KeyboardShortcutEvent.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/MiniMapBaseView.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/RecentDocumentSelectedCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/SpinControl.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
WXDLLIMPEXP_CUSTOM_EVENT	View/TextureSelectedCommand.h	/^#define WXDLLIMPEXP_CUSTOM_EVENT$/;"	d	language:C++
Wad	IO/Wad.cpp	/^        Wad::Wad(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
Wad	IO/Wad.h	/^        class Wad {$/;"	c	language:C++	namespace:TrenchBroom::IO
Wad	Model/EntityProperties.cpp	/^            const PropertyKey Wad               = "wad";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
WadEntry	IO/Wad.cpp	/^        WadEntry::WadEntry(const String& name, const char type, const size_t address, const size_t size) :$/;"	f	language:C++	class:TrenchBroom::IO::WadEntry
WadEntry	IO/Wad.h	/^        class WadEntry {$/;"	c	language:C++	namespace:TrenchBroom::IO
WadEntryList	IO/Wad.h	/^        typedef std::vector<WadEntry> WadEntryList;$/;"	t	language:C++	namespace:TrenchBroom::IO
WadEntryType	IO/Wad.h	/^        namespace WadEntryType {$/;"	n	language:C++	namespace:TrenchBroom::IO
WadLayout	IO/Wad.cpp	/^        namespace WadLayout {$/;"	n	language:C++	namespace:TrenchBroom::IO	file:
WadTextureLoader	IO/WadTextureLoader.cpp	/^        WadTextureLoader::WadTextureLoader(const Assets::Palette& palette) :$/;"	f	language:C++	class:TrenchBroom::IO::WadTextureLoader
WadTextureLoader	IO/WadTextureLoader.h	/^        class WadTextureLoader : public TextureLoader {$/;"	c	language:C++	namespace:TrenchBroom::IO
Wal	Model/EntityProperties.cpp	/^            const PropertyKey Wal               = "_textures";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyKeys	file:
WalTextureLoader	IO/WalTextureLoader.cpp	/^        WalTextureLoader::WalTextureLoader(const FileSystem& fs, const Assets::Palette& palette) :$/;"	f	language:C++	class:TrenchBroom::IO::WalTextureLoader
WalTextureLoader	IO/WalTextureLoader.h	/^        class WalTextureLoader : public TextureLoader {$/;"	c	language:C++	namespace:TrenchBroom::IO
WeightOrder	Plane.h	/^        WeightOrder(const bool deterministic) :$/;"	f	language:C++	class:Plane::WeightOrder
WeightOrder	Plane.h	/^    class WeightOrder {$/;"	c	language:C++	class:Plane
WelcomeFrame	View/WelcomeFrame.cpp	/^        WelcomeFrame::WelcomeFrame() :$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
WelcomeFrame	View/WelcomeFrame.h	/^        class WelcomeFrame : public wxFrame {$/;"	c	language:C++	namespace:TrenchBroom::View
Whitespace	IO/Tokenizer.h	/^            static const String Whitespace;$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
Whitespace	IO/Tokenizer.h	/^        const String Tokenizer<TokenType>::Whitespace = " \\t\\n\\r";$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
WinMappedFile	IO/MappedFile.cpp	/^        WinMappedFile::WinMappedFile(const Path& path, std::ios_base::openmode mode) :$/;"	f	language:C++	class:TrenchBroom::IO::WinMappedFile
WinMappedFile	IO/MappedFile.h	/^        class WinMappedFile : public MappedFile {$/;"	c	language:C++	namespace:TrenchBroom::IO
WinModifierOrder	View/KeyboardShortcut.h	/^            class WinModifierOrder {$/;"	c	language:C++	class:TrenchBroom::View::KeyboardShortcut
WkPtr	View/MapDocument.h	/^            typedef TrenchBroom::weak_ptr<MapDocument> WkPtr;$/;"	t	language:C++	class:TrenchBroom::View::MapDocument
Word	IO/DefParser.h	/^            static const Type Word            = 1 <<  7; \/\/ word$/;"	m	language:C++	namespace:TrenchBroom::IO::DefToken
Word	IO/FgdParser.h	/^            static const Type Word              = 1 <<  2; \/\/ letter or digits, no whitespace$/;"	m	language:C++	namespace:TrenchBroom::IO::FgdToken
WordDelims	IO/DefParser.cpp	/^        const String DefTokenizer::WordDelims = " \\t\\n\\r()[]{}?;,=";$/;"	m	language:C++	class:TrenchBroom::IO::DefTokenizer	file:
WordDelims	IO/DefParser.h	/^            static const String WordDelims;$/;"	m	language:C++	class:TrenchBroom::IO::DefTokenizer
WordDelims	IO/FgdParser.cpp	/^        const String FgdTokenizer::WordDelims = " \\t\\n\\r()[]?;:,=";$/;"	m	language:C++	class:TrenchBroom::IO::FgdTokenizer	file:
WordDelims	IO/FgdParser.h	/^            static const String WordDelims;$/;"	m	language:C++	class:TrenchBroom::IO::FgdTokenizer
WorldspawnClassname	Model/EntityProperties.cpp	/^            const PropertyValue WorldspawnClassname = "worldspawn";$/;"	m	language:C++	namespace:TrenchBroom::Model::PropertyValues	file:
WritableDiskFileSystem	IO/DiskFileSystem.cpp	/^        WritableDiskFileSystem::WritableDiskFileSystem(const Path& root, const bool create) :$/;"	f	language:C++	class:TrenchBroom::IO::WritableDiskFileSystem
WritableDiskFileSystem	IO/DiskFileSystem.h	/^        class WritableDiskFileSystem : public DiskFileSystem, public WritableFileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
WritableFileSystem	IO/FileSystem.h	/^        class WritableFileSystem {$/;"	c	language:C++	namespace:TrenchBroom::IO
XHandleHit	View/TexturingViewScaleOriginTool.cpp	/^        const Hit::HitType TexturingViewScaleOriginTool::XHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool	file:
XHandleHit	View/TexturingViewScaleOriginTool.h	/^            static const Hit::HitType XHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
XHandleHit	View/TexturingViewScaleTool.cpp	/^        const Hit::HitType TexturingViewScaleTool::XHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool	file:
XHandleHit	View/TexturingViewScaleTool.h	/^            static const Hit::HitType XHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
YHandleHit	View/TexturingViewScaleOriginTool.cpp	/^        const Hit::HitType TexturingViewScaleOriginTool::YHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool	file:
YHandleHit	View/TexturingViewScaleOriginTool.h	/^            static const Hit::HitType YHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
YHandleHit	View/TexturingViewScaleTool.cpp	/^        const Hit::HitType TexturingViewScaleTool::YHandleHit = Hit::freeHitType();$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool	file:
YHandleHit	View/TexturingViewScaleTool.h	/^            static const Hit::HitType YHandleHit;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
YIQToRGB	Mat.h	/^    static const Mat<T,R,C> YIQToRGB;$/;"	m	language:C++	class:Mat
YIQToRGB	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::YIQToRGB     = Mat<T,R,C>( static_cast<T>(1.0), static_cast<T>( 0.9563), static_cast<T> (0.6210),$/;"	m	language:C++	class:Mat
ZerX	Mat.h	/^    static const Mat<T,R,C> ZerX;$/;"	m	language:C++	class:Mat
ZerX	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::ZerX        = Mat<T,R,C>( static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
ZerY	Mat.h	/^    static const Mat<T,R,C> ZerY;$/;"	m	language:C++	class:Mat
ZerY	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::ZerY        = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
ZerZ	Mat.h	/^    static const Mat<T,R,C> ZerZ;$/;"	m	language:C++	class:Mat
ZerZ	Mat.h	/^const Mat<T,R,C> Mat<T,R,C>::ZerZ        = Mat<T,R,C>( static_cast<T>(1.0),  static_cast<T>(0.0),  static_cast<T>(0.0),  static_cast<T>(0.0),$/;"	m	language:C++	class:Mat
_ENABLE_ALLOCATOR	Allocator.h	/^#define _ENABLE_ALLOCATOR /;"	d	language:C++
__TrenchBroom__AddRemoveObjectsCommand__	Controller/AddRemoveObjectsCommand.h	/^#define __TrenchBroom__AddRemoveObjectsCommand__$/;"	d	language:C++
__TrenchBroom__AnimationCurve__	View/AnimationCurve.h	/^#define __TrenchBroom__AnimationCurve__$/;"	d	language:C++
__TrenchBroom__Animation__	View/Animation.h	/^#define __TrenchBroom__Animation__$/;"	d	language:C++
__TrenchBroom__Autosaver__	View/Autosaver.h	/^#define __TrenchBroom__Autosaver__$/;"	d	language:C++
__TrenchBroom__BoundsGuideRenderer__	Renderer/BoundsGuideRenderer.h	/^#define __TrenchBroom__BoundsGuideRenderer__$/;"	d	language:C++
__TrenchBroom__BoundsInfoRenderer__	Renderer/BoundsInfoRenderer.h	/^#define __TrenchBroom__BoundsInfoRenderer__$/;"	d	language:C++
__TrenchBroom__BrushEdge__	Model/BrushEdge.h	/^#define __TrenchBroom__BrushEdge__$/;"	d	language:C++
__TrenchBroom__BrushFaceGeometry__	Model/BrushFaceGeometry.h	/^#define __TrenchBroom__BrushFaceGeometry__$/;"	d	language:C++
__TrenchBroom__BrushGeometry__	Model/BrushGeometry.h	/^#define __TrenchBroom__BrushGeometry__$/;"	d	language:C++
__TrenchBroom__BrushRenderer__	Renderer/BrushRenderer.h	/^#define __TrenchBroom__BrushRenderer__$/;"	d	language:C++
__TrenchBroom__BrushVertexHandleCommand__	Controller/BrushVertexHandleCommand.h	/^#define __TrenchBroom__BrushVertexHandleCommand__$/;"	d	language:C++
__TrenchBroom__BrushVertex__	Model/BrushVertex.h	/^#define __TrenchBroom__BrushVertex__$/;"	d	language:C++
__TrenchBroom__Brush__	Model/Brush.h	/^#define __TrenchBroom__Brush__$/;"	d	language:C++
__TrenchBroom__Bsp29Model__	Assets/Bsp29Model.h	/^#define __TrenchBroom__Bsp29Model__$/;"	d	language:C++
__TrenchBroom__Bsp29Parser__	IO/Bsp29Parser.h	/^#define __TrenchBroom__Bsp29Parser__$/;"	d	language:C++
__TrenchBroom__CachingLogger__	View/CachingLogger.h	/^#define __TrenchBroom__CachingLogger__$/;"	d	language:C++
__TrenchBroom__CameraAnimation__	View/CameraAnimation.h	/^#define __TrenchBroom__CameraAnimation__$/;"	d	language:C++
__TrenchBroom__CameraTool__	View/CameraTool.h	/^#define __TrenchBroom__CameraTool__$/;"	d	language:C++
__TrenchBroom__Camera__	Renderer/Camera.h	/^#define __TrenchBroom__Camera__$/;"	d	language:C++
__TrenchBroom__ChooseGameDialog__	View/ChooseGameDialog.h	/^#define __TrenchBroom__ChooseGameDialog__$/;"	d	language:C++
__TrenchBroom__ChoosePathTypeDialog__	View/ChoosePathTypeDialog.h	/^#define __TrenchBroom__ChoosePathTypeDialog__$/;"	d	language:C++
__TrenchBroom__Circle__	Renderer/Circle.h	/^#define __TrenchBroom__Circle__$/;"	d	language:C++
__TrenchBroom__ClipTool__	View/ClipTool.h	/^#define __TrenchBroom__ClipTool__$/;"	d	language:C++
__TrenchBroom__ClipperRenderer__	Renderer/ClipperRenderer.h	/^#define __TrenchBroom__ClipperRenderer__$/;"	d	language:C++
__TrenchBroom__Clipper__	View/Clipper.h	/^#define __TrenchBroom__Clipper__$/;"	d	language:C++
__TrenchBroom__ColorTableSelectedCommand__	View/ColorTableSelectedCommand.h	/^#define __TrenchBroom__ColorTableSelectedCommand__$/;"	d	language:C++
__TrenchBroom__ColorTable__	View/ColorTable.h	/^#define __TrenchBroom__ColorTable__$/;"	d	language:C++
__TrenchBroom__CommandProcessor__	Controller/CommandProcessor.h	/^#define __TrenchBroom__CommandProcessor__$/;"	d	language:C++
__TrenchBroom__Command__	Controller/Command.h	/^#define __TrenchBroom__Command__$/;"	d	language:C++
__TrenchBroom__Compass__	Renderer/Compass.h	/^#define __TrenchBroom__Compass__$/;"	d	language:C++
__TrenchBroom__ConfigParser__	IO/ConfigParser.h	/^#define __TrenchBroom__ConfigParser__$/;"	d	language:C++
__TrenchBroom__Console__	View/Console.h	/^#define __TrenchBroom__Console__$/;"	d	language:C++
__TrenchBroom__ContainerBar__	View/ContainerBar.h	/^#define __TrenchBroom__ContainerBar__$/;"	d	language:C++
__TrenchBroom__ControllerFacade__	View/ControllerFacade.h	/^#define __TrenchBroom__ControllerFacade__$/;"	d	language:C++
__TrenchBroom__CreateBrushTool__	View/CreateBrushTool.h	/^#define __TrenchBroom__CreateBrushTool__$/;"	d	language:C++
__TrenchBroom__CreateEntityTool__	View/CreateEntityTool.h	/^#define __TrenchBroom__CreateEntityTool__$/;"	d	language:C++
__TrenchBroom__DefParser__	IO/DefParser.h	/^#define __TrenchBroom__DefParser__$/;"	d	language:C++
__TrenchBroom__DefaultPropertyEditor__	View/SmartDefaultPropertyEditor.h	/^#define __TrenchBroom__DefaultPropertyEditor__$/;"	d	language:C++
__TrenchBroom__DiskFileSystem__	IO/DiskFileSystem.h	/^#define __TrenchBroom__DiskFileSystem__$/;"	d	language:C++
__TrenchBroom__EdgeRenderer__	Renderer/EdgeRenderer.h	/^#define __TrenchBroom__EdgeRenderer__$/;"	d	language:C++
__TrenchBroom__EmptyBrushEntityIssueGenerator__	Model/EmptyBrushEntityIssueGenerator.h	/^#define __TrenchBroom__EmptyBrushEntityIssueGenerator__$/;"	d	language:C++
__TrenchBroom__EntityBrowserView__	View/EntityBrowserView.h	/^#define __TrenchBroom__EntityBrowserView__$/;"	d	language:C++
__TrenchBroom__EntityBrowser__	View/EntityBrowser.h	/^#define __TrenchBroom__EntityBrowser__$/;"	d	language:C++
__TrenchBroom__EntityDefinitionClassInfo__	IO/EntityDefinitionClassInfo.h	/^#define __TrenchBroom__EntityDefinitionClassInfo__$/;"	d	language:C++
__TrenchBroom__EntityDefinitionFileChooser__	View/EntityDefinitionFileChooser.h	/^#define __TrenchBroom__EntityDefinitionFileChooser__$/;"	d	language:C++
__TrenchBroom__EntityDefinitionFileSpec__	Model/EntityDefinitionFileSpec.h	/^#define __TrenchBroom__EntityDefinitionFileSpec__$/;"	d	language:C++
__TrenchBroom__EntityDefinitionManager__	Assets/EntityDefinitionManager.h	/^#define __TrenchBroom__EntityDefinitionManager__$/;"	d	language:C++
__TrenchBroom__EntityDefinition__	Assets/EntityDefinition.h	/^#define __TrenchBroom__EntityDefinition__$/;"	d	language:C++
__TrenchBroom__EntityInspector__	View/EntityInspector.h	/^#define __TrenchBroom__EntityInspector__$/;"	d	language:C++
__TrenchBroom__EntityLinkIssueGenerator__	Model/EntityLinkIssueGenerator.h	/^#define __TrenchBroom__EntityLinkIssueGenerator__$/;"	d	language:C++
__TrenchBroom__EntityLinkRenderer__	Renderer/EntityLinkRenderer.h	/^#define __TrenchBroom__EntityLinkRenderer__$/;"	d	language:C++
__TrenchBroom__EntityModelManager__	Assets/EntityModelManager.h	/^#define __TrenchBroom__EntityModelManager__$/;"	d	language:C++
__TrenchBroom__EntityModelParser__	IO/EntityModelParser.h	/^#define __TrenchBroom__EntityModelParser__$/;"	d	language:C++
__TrenchBroom__EntityModelRenderer__	Renderer/EntityModelRenderer.h	/^#define __TrenchBroom__EntityModelRenderer__$/;"	d	language:C++
__TrenchBroom__EntityModel__	Assets/EntityModel.h	/^#define __TrenchBroom__EntityModel__$/;"	d	language:C++
__TrenchBroom__EntityProperties__	Model/EntityProperties.h	/^#define __TrenchBroom__EntityProperties__$/;"	d	language:C++
__TrenchBroom__EntityPropertyCommand__	Controller/EntityPropertyCommand.h	/^#define __TrenchBroom__EntityPropertyCommand__$/;"	d	language:C++
__TrenchBroom__EntityPropertyEditor__	View/EntityPropertyEditor.h	/^#define __TrenchBroom__EntityPropertyEditor__$/;"	d	language:C++
__TrenchBroom__EntityPropertyGridTable__	View/EntityPropertyGridTable.h	/^#define __TrenchBroom__EntityPropertyGridTable__$/;"	d	language:C++
__TrenchBroom__EntityPropertyGrid__	View/EntityPropertyGrid.h	/^#define __TrenchBroom__EntityPropertyGrid__$/;"	d	language:C++
__TrenchBroom__EntityPropertyIndex__	Model/EntityPropertyIndex.h	/^#define __TrenchBroom__EntityPropertyIndex__$/;"	d	language:C++
__TrenchBroom__EntityPropertySelectedCommand__	View/EntityPropertySelectedCommand.h	/^#define __TrenchBroom__EntityPropertySelectedCommand__$/;"	d	language:C++
__TrenchBroom__EntityRenderer__	Renderer/EntityRenderer.h	/^#define __TrenchBroom__EntityRenderer__$/;"	d	language:C++
__TrenchBroom__Entity__	Model/Entity.h	/^#define __TrenchBroom__Entity__$/;"	d	language:C++
__TrenchBroom__ExecutableEvent__	View/ExecutableEvent.h	/^#define __TrenchBroom__ExecutableEvent__$/;"	d	language:C++
__TrenchBroom__FaceAdjacencyGraph__	Model/FaceAdjacencyGraph.h	/^#define __TrenchBroom__FaceAdjacencyGraph__$/;"	d	language:C++
__TrenchBroom__FaceAttribsEditor__	View/FaceAttribsEditor.h	/^#define __TrenchBroom__FaceAttribsEditor__$/;"	d	language:C++
__TrenchBroom__FaceAttributeCommand__	Controller/FaceAttributeCommand.h	/^#define __TrenchBroom__FaceAttributeCommand__$/;"	d	language:C++
__TrenchBroom__FaceInspector__	View/FaceInspector.h	/^#define __TrenchBroom__FaceInspector__$/;"	d	language:C++
__TrenchBroom__FaceRenderer__	Renderer/FaceRenderer.h	/^#define __TrenchBroom__FaceRenderer__$/;"	d	language:C++
__TrenchBroom__Face__	Model/BrushFace.h	/^#define __TrenchBroom__Face__$/;"	d	language:C++
__TrenchBroom__FgdParser__	IO/FgdParser.h	/^#define __TrenchBroom__FgdParser__$/;"	d	language:C++
__TrenchBroom__FileSystem__	IO/FileSystem.h	/^#define __TrenchBroom__FileSystem__$/;"	d	language:C++
__TrenchBroom__FixPlanePointsCommand__	Controller/FixPlanePointsCommand.h	/^#define __TrenchBroom__FixPlanePointsCommand__$/;"	d	language:C++
__TrenchBroom__FlagChangedCommand__	View/FlagChangedCommand.h	/^#define __TrenchBroom__FlagChangedCommand__$/;"	d	language:C++
__TrenchBroom__FlagsEditor__	View/FlagsEditor.h	/^#define __TrenchBroom__FlagsEditor__$/;"	d	language:C++
__TrenchBroom__FlagsPopupEditor__	View/FlagsPopupEditor.h	/^#define __TrenchBroom__FlagsPopupEditor__$/;"	d	language:C++
__TrenchBroom__FloatPointsIssueGenerator__	Model/FloatPointsIssueGenerator.h	/^#define __TrenchBroom__FloatPointsIssueGenerator__$/;"	d	language:C++
__TrenchBroom__FloatVerticesIssueGenerator__	Model/FloatVerticesIssueGenerator.h	/^#define __TrenchBroom__FloatVerticesIssueGenerator__$/;"	d	language:C++
__TrenchBroom__FontDescriptor__	Renderer/FontDescriptor.h	/^#define __TrenchBroom__FontDescriptor__$/;"	d	language:C++
__TrenchBroom__FontManager__	Renderer/FontManager.h	/^#define __TrenchBroom__FontManager__$/;"	d	language:C++
__TrenchBroom__FontTexture__	Renderer/FontTexture.h	/^#define __TrenchBroom__FontTexture__$/;"	d	language:C++
__TrenchBroom__Font__	Renderer/TextureFont.h	/^#define __TrenchBroom__Font__$/;"	d	language:C++
__TrenchBroom__FrameManager__	View/FrameManager.h	/^#define __TrenchBroom__FrameManager__$/;"	d	language:C++
__TrenchBroom__GLContextHolder__	View/GLContextHolder.h	/^#define __TrenchBroom__GLContextHolder__$/;"	d	language:C++
__TrenchBroom__GameConfigParser__	IO/GameConfigParser.h	/^#define __TrenchBroom__GameConfigParser__$/;"	d	language:C++
__TrenchBroom__GameConfig__	Model/GameConfig.h	/^#define __TrenchBroom__GameConfig__$/;"	d	language:C++
__TrenchBroom__GameFactory__	Model/GameFactory.h	/^#define __TrenchBroom__GameFactory__$/;"	d	language:C++
__TrenchBroom__GameFileSystem__	IO/GameFileSystem.h	/^#define __TrenchBroom__GameFileSystem__$/;"	d	language:C++
__TrenchBroom__GameImpl__	Model/GameImpl.h	/^#define __TrenchBroom__GameImpl__$/;"	d	language:C++
__TrenchBroom__GameListBox__	View/GameListBox.h	/^#define __TrenchBroom__GameListBox__$/;"	d	language:C++
__TrenchBroom__GameSelectionCommand__	View/GameSelectionCommand.h	/^#define __TrenchBroom__GameSelectionCommand__$/;"	d	language:C++
__TrenchBroom__Game__	Model/Game.h	/^#define __TrenchBroom__Game__$/;"	d	language:C++
__TrenchBroom__GamesPreferencePane__	View/GamesPreferencePane.h	/^#define __TrenchBroom__GamesPreferencePane__$/;"	d	language:C++
__TrenchBroom__GeneralPreferencePane__	View/GeneralPreferencePane.h	/^#define __TrenchBroom__GeneralPreferencePane__$/;"	d	language:C++
__TrenchBroom__GenericDropSource__	View/GenericDropSource.h	/^#define __TrenchBroom__GenericDropSource__$/;"	d	language:C++
__TrenchBroom__Grid__	View/Grid.h	/^#define __TrenchBroom__Grid__$/;"	d	language:C++
__TrenchBroom__Hexen2MapWriter__	IO/Hexen2MapWriter.h	/^#define __TrenchBroom__Hexen2MapWriter__$/;"	d	language:C++
__TrenchBroom__HitFilter__	HitFilter.h	/^#define __TrenchBroom__HitFilter__$/;"	d	language:C++
__TrenchBroom__Hit__	Hit.h	/^#define __TrenchBroom__Hit__$/;"	d	language:C++
__TrenchBroom__ImageListBox__	View/ImageListBox.h	/^#define __TrenchBroom__ImageListBox__$/;"	d	language:C++
__TrenchBroom__ImageLoaderImpl__	IO/ImageLoaderImpl.h	/^#define __TrenchBroom__ImageLoaderImpl__$/;"	d	language:C++
__TrenchBroom__ImageLoader__	IO/ImageLoader.h	/^#define __TrenchBroom__ImageLoader__$/;"	d	language:C++
__TrenchBroom__ImagePanel__	View/ImagePanel.h	/^#define __TrenchBroom__ImagePanel__$/;"	d	language:C++
__TrenchBroom__InfoPanel__	View/InfoPanel.h	/^#define __TrenchBroom__InfoPanel__$/;"	d	language:C++
__TrenchBroom__InputState__	View/InputState.h	/^#define __TrenchBroom__InputState__$/;"	d	language:C++
__TrenchBroom__Inspector__	View/Inspector.h	/^#define __TrenchBroom__Inspector__$/;"	d	language:C++
__TrenchBroom__IntersectBrushGeometryWithFace__	Model/IntersectBrushGeometryWithFace.h	/^#define __TrenchBroom__IntersectBrushGeometryWithFace__$/;"	d	language:C++
__TrenchBroom__IssueBrowser__	View/IssueBrowser.h	/^#define __TrenchBroom__IssueBrowser__$/;"	d	language:C++
__TrenchBroom__IssueGenerator__	Model/IssueGenerator.h	/^#define __TrenchBroom__IssueGenerator__$/;"	d	language:C++
__TrenchBroom__IssueManager__	Model/IssueManager.h	/^#define __TrenchBroom__IssueManager__$/;"	d	language:C++
__TrenchBroom__Issue__	Model/Issue.h	/^#define __TrenchBroom__Issue__$/;"	d	language:C++
__TrenchBroom__KeyboardPreferencePane__	View/KeyboardPreferencePane.h	/^#define __TrenchBroom__KeyboardPreferencePane__$/;"	d	language:C++
__TrenchBroom__KeyboardShortcutEditor__	View/KeyboardShortcutEditor.h	/^#define __TrenchBroom__KeyboardShortcutEditor__$/;"	d	language:C++
__TrenchBroom__KeyboardShortcutEvent__	View/KeyboardShortcutEvent.h	/^#define __TrenchBroom__KeyboardShortcutEvent__$/;"	d	language:C++
__TrenchBroom__KeyboardShortcut__	View/KeyboardShortcut.h	/^#define __TrenchBroom__KeyboardShortcut__$/;"	d	language:C++
__TrenchBroom__Logger__	Logger.h	/^#define __TrenchBroom__Logger__$/;"	d	language:C++
__TrenchBroom__MapDocument__	View/MapDocument.h	/^#define __TrenchBroom__MapDocument__$/;"	d	language:C++
__TrenchBroom__MapFrame__	View/MapFrame.h	/^#define __TrenchBroom__MapFrame__$/;"	d	language:C++
__TrenchBroom__MapInspector__	View/MapInspector.h	/^#define __TrenchBroom__MapInspector__$/;"	d	language:C++
__TrenchBroom__MapRenderer__	Renderer/MapRenderer.h	/^#define __TrenchBroom__MapRenderer__$/;"	d	language:C++
__TrenchBroom__MapTreeView__	View/MapTreeView.h	/^#define __TrenchBroom__MapTreeView__$/;"	d	language:C++
__TrenchBroom__MapView__	View/MapView.h	/^#define __TrenchBroom__MapView__$/;"	d	language:C++
__TrenchBroom__MapWriter__	IO/MapWriter.h	/^#define __TrenchBroom__MapWriter__$/;"	d	language:C++
__TrenchBroom__Map__	Model/Map.h	/^#define __TrenchBroom__Map__$/;"	d	language:C++
__TrenchBroom__MappedFile__	IO/MappedFile.h	/^#define __TrenchBroom__MappedFile__$/;"	d	language:C++
__TrenchBroom__Md2Model__	Assets/Md2Model.h	/^#define __TrenchBroom__Md2Model__$/;"	d	language:C++
__TrenchBroom__Md2Parser__	IO/Md2Parser.h	/^#define __TrenchBroom__Md2Parser__$/;"	d	language:C++
__TrenchBroom__MdlModel__	Assets/MdlModel.h	/^#define __TrenchBroom__MdlModel__$/;"	d	language:C++
__TrenchBroom__MdlParser__	IO/MdlParser.h	/^#define __TrenchBroom__MdlParser__$/;"	d	language:C++
__TrenchBroom__Menu__	View/Menu.h	/^#define __TrenchBroom__Menu__$/;"	d	language:C++
__TrenchBroom__MeshRenderer__	Renderer/MeshRenderer.h	/^#define __TrenchBroom__MeshRenderer__$/;"	d	language:C++
__TrenchBroom__Mesh__	Renderer/Mesh.h	/^#define __TrenchBroom__Mesh__$/;"	d	language:C++
__TrenchBroom__MiniMapBaseView__	View/MiniMapBaseView.h	/^#define __TrenchBroom__MiniMapBaseView__$/;"	d	language:C++
__TrenchBroom__MiniMapRenderer__	Renderer/MiniMapRenderer.h	/^#define __TrenchBroom__MiniMapRenderer__$/;"	d	language:C++
__TrenchBroom__MiniMapXYView__	View/MiniMapXYView.h	/^#define __TrenchBroom__MiniMapXYView__$/;"	d	language:C++
__TrenchBroom__MiniMapZView__	View/MiniMapZView.h	/^#define __TrenchBroom__MiniMapZView__$/;"	d	language:C++
__TrenchBroom__MiniMap__	View/MiniMap.h	/^#define __TrenchBroom__MiniMap__$/;"	d	language:C++
__TrenchBroom__MissingEntityClassnameIssueGenerator__	Model/MissingEntityClassnameIssueGenerator.h	/^#define __TrenchBroom__MissingEntityClassnameIssueGenerator__$/;"	d	language:C++
__TrenchBroom__MissingEntityDefinitionIssueGenerator__	Model/MissingEntityDefinitionIssueGenerator.h	/^#define __TrenchBroom__MissingEntityDefinitionIssueGenerator__$/;"	d	language:C++
__TrenchBroom__MixedBrushContentsIssueGenerator__	Model/MixedBrushContentsIssueGenerator.h	/^#define __TrenchBroom__MixedBrushContentsIssueGenerator__$/;"	d	language:C++
__TrenchBroom__ModEditor__	View/ModEditor.h	/^#define __TrenchBroom__ModEditor__$/;"	d	language:C++
__TrenchBroom__ModelDefinition__	Assets/ModelDefinition.h	/^#define __TrenchBroom__ModelDefinition__$/;"	d	language:C++
__TrenchBroom__ModelFactory__	Model/ModelFactory.h	/^#define __TrenchBroom__ModelFactory__$/;"	d	language:C++
__TrenchBroom__ModelFilter__	Model/ModelFilter.h	/^#define __TrenchBroom__ModelFilter__$/;"	d	language:C++
__TrenchBroom__MoveBrushEdgesAlgorithm__	Model/MoveBrushEdgesAlgorithm.h	/^#define __TrenchBroom__MoveBrushEdgesAlgorithm__$/;"	d	language:C++
__TrenchBroom__MoveBrushEdgesCommand__	Controller/MoveBrushEdgesCommand.h	/^#define __TrenchBroom__MoveBrushEdgesCommand__$/;"	d	language:C++
__TrenchBroom__MoveBrushFacesAlgorithm__	Model/MoveBrushFacesAlgorithm.h	/^#define __TrenchBroom__MoveBrushFacesAlgorithm__$/;"	d	language:C++
__TrenchBroom__MoveBrushFacesCommand__	Controller/MoveBrushFacesCommand.h	/^#define __TrenchBroom__MoveBrushFacesCommand__$/;"	d	language:C++
__TrenchBroom__MoveBrushVertexAlgorithm__	Model/MoveBrushVertexAlgorithm.h	/^#define __TrenchBroom__MoveBrushVertexAlgorithm__$/;"	d	language:C++
__TrenchBroom__MoveBrushVerticesAlgorithm__	Model/MoveBrushVerticesAlgorithm.h	/^#define __TrenchBroom__MoveBrushVerticesAlgorithm__$/;"	d	language:C++
__TrenchBroom__MoveBrushVerticesCommand__	Controller/MoveBrushVerticesCommand.h	/^#define __TrenchBroom__MoveBrushVerticesCommand__$/;"	d	language:C++
__TrenchBroom__MoveIndicatorRenderer__	Renderer/MoveIndicatorRenderer.h	/^#define __TrenchBroom__MoveIndicatorRenderer__$/;"	d	language:C++
__TrenchBroom__MoveObjectsTool__	View/MoveObjectsTool.h	/^#define __TrenchBroom__MoveObjectsTool__$/;"	d	language:C++
__TrenchBroom__MoveTextureHelper__	View/MoveTextureHelper.h	/^#define __TrenchBroom__MoveTextureHelper__$/;"	d	language:C++
__TrenchBroom__MoveTexturesCommand__	Controller/MoveTexturesCommand.h	/^#define __TrenchBroom__MoveTexturesCommand__$/;"	d	language:C++
__TrenchBroom__MoveToolHelper__	View/MoveToolHelper.h	/^#define __TrenchBroom__MoveToolHelper__$/;"	d	language:C++
__TrenchBroom__MoveTool__	View/MoveTool.h	/^#define __TrenchBroom__MoveTool__$/;"	d	language:C++
__TrenchBroom__MovementRestriction__	View/MovementRestriction.h	/^#define __TrenchBroom__MovementRestriction__$/;"	d	language:C++
__TrenchBroom__NavBar__	View/NavBar.h	/^#define __TrenchBroom__NavBar__$/;"	d	language:C++
__TrenchBroom__NewDocumentCommand__	Controller/NewDocumentCommand.h	/^#define __TrenchBroom__NewDocumentCommand__$/;"	d	language:C++
__TrenchBroom__Object__	Model/Object.h	/^#define __TrenchBroom__Object__$/;"	d	language:C++
__TrenchBroom__Octree__	Model/Octree.h	/^#define __TrenchBroom__Octree__$/;"	d	language:C++
__TrenchBroom__OpenDocumentCommand__	Controller/OpenDocumentCommand.h	/^#define __TrenchBroom__OpenDocumentCommand__$/;"	d	language:C++
__TrenchBroom__OrthographicCamera__	Renderer/OrthographicCamera.h	/^#define __TrenchBroom__OrthographicCamera__$/;"	d	language:C++
__TrenchBroom__OutlineTracer__	Renderer/OutlineTracer.h	/^#define __TrenchBroom__OutlineTracer__$/;"	d	language:C++
__TrenchBroom__PakFileSystem__	IO/PakFileSystem.h	/^#define __TrenchBroom__PakFileSystem__$/;"	d	language:C++
__TrenchBroom__Palette__	Assets/Palette.h	/^#define __TrenchBroom__Palette__$/;"	d	language:C++
__TrenchBroom__ParallelTexCoordSystem__	Model/ParallelTexCoordSystem.h	/^#define __TrenchBroom__ParallelTexCoordSystem__$/;"	d	language:C++
__TrenchBroom__ParaxialTexCoordSystem__	Model/ParaxialTexCoordSystem.h	/^#define __TrenchBroom__ParaxialTexCoordSystem__$/;"	d	language:C++
__TrenchBroom__Parser__	IO/Parser.h	/^#define __TrenchBroom__Parser__$/;"	d	language:C++
__TrenchBroom__Path__	IO/Path.h	/^#define __TrenchBroom__Path__$/;"	d	language:C++
__TrenchBroom__PerspectiveCamera__	Renderer/PerspectiveCamera.h	/^#define __TrenchBroom__PerspectiveCamera__$/;"	d	language:C++
__TrenchBroom__Picker__	Model/Picker.h	/^#define __TrenchBroom__Picker__$/;"	d	language:C++
__TrenchBroom__PointEntityWithBrushesIssueGenerator__	Model/PointEntityWithBrushesIssueGenerator.h	/^#define __TrenchBroom__PointEntityWithBrushesIssueGenerator__$/;"	d	language:C++
__TrenchBroom__PointFile__	Model/PointFile.h	/^#define __TrenchBroom__PointFile__$/;"	d	language:C++
__TrenchBroom__PointHandleRenderer__	Renderer/PointHandleRenderer.h	/^#define __TrenchBroom__PointHandleRenderer__$/;"	d	language:C++
__TrenchBroom__PopupButton__	View/PopupButton.h	/^#define __TrenchBroom__PopupButton__$/;"	d	language:C++
__TrenchBroom__PreferenceDialog__	View/PreferenceDialog.h	/^#define __TrenchBroom__PreferenceDialog__$/;"	d	language:C++
__TrenchBroom__PreferenceManager__	PreferenceManager.h	/^#define __TrenchBroom__PreferenceManager__$/;"	d	language:C++
__TrenchBroom__PreferencePane__	View/PreferencePane.h	/^#define __TrenchBroom__PreferencePane__$/;"	d	language:C++
__TrenchBroom__Preference__	Preference.h	/^#define __TrenchBroom__Preference__$/;"	d	language:C++
__TrenchBroom__PropertyDefinition__	Assets/PropertyDefinition.h	/^#define __TrenchBroom__PropertyDefinition__$/;"	d	language:C++
__TrenchBroom__Quake2MapWriter__	IO/Quake2MapWriter.h	/^#define __TrenchBroom__Quake2MapWriter__$/;"	d	language:C++
__TrenchBroom__QuakeEntityRotationPolicy__	Model/QuakeEntityRotationPolicy.h	/^#define __TrenchBroom__QuakeEntityRotationPolicy__$/;"	d	language:C++
__TrenchBroom__QuakeMapParser__	IO/QuakeMapParser.h	/^#define __TrenchBroom__QuakeMapParser__$/;"	d	language:C++
__TrenchBroom__QuakeMapWriter__	IO/QuakeMapWriter.h	/^#define __TrenchBroom__QuakeMapWriter__$/;"	d	language:C++
__TrenchBroom__QuickFix__	Model/QuickFix.h	/^#define __TrenchBroom__QuickFix__$/;"	d	language:C++
__TrenchBroom__RebuildBrushGeometryCommand__	Controller/RebuildBrushGeometryCommand.h	/^#define __TrenchBroom__RebuildBrushGeometryCommand__$/;"	d	language:C++
__TrenchBroom__RecentDocumentListBox__	View/RecentDocumentListBox.h	/^#define __TrenchBroom__RecentDocumentListBox__$/;"	d	language:C++
__TrenchBroom__RecentDocumentSelectedCommand__	View/RecentDocumentSelectedCommand.h	/^#define __TrenchBroom__RecentDocumentSelectedCommand__$/;"	d	language:C++
__TrenchBroom__RecentDocuments__	View/RecentDocuments.h	/^#define __TrenchBroom__RecentDocuments__$/;"	d	language:C++
__TrenchBroom__RenderContext__	Renderer/RenderContext.h	/^#define __TrenchBroom__RenderContext__$/;"	d	language:C++
__TrenchBroom__RenderView__	View/RenderView.h	/^#define __TrenchBroom__RenderView__$/;"	d	language:C++
__TrenchBroom__ReparentBrushesCommand__	Controller/ReparentBrushesCommand.h	/^#define __TrenchBroom__ReparentBrushesCommand__$/;"	d	language:C++
__TrenchBroom__ResizeBrushesCommand__	Controller/ResizeBrushesCommand.h	/^#define __TrenchBroom__ResizeBrushesCommand__$/;"	d	language:C++
__TrenchBroom__ResizeBrushesTool__	View/ResizeBrushesTool.h	/^#define __TrenchBroom__ResizeBrushesTool__$/;"	d	language:C++
__TrenchBroom__ResourceUtils__	IO/ResourceUtils.h	/^#define __TrenchBroom__ResourceUtils__$/;"	d	language:C++
__TrenchBroom__Ring__	Renderer/Ring.h	/^#define __TrenchBroom__Ring__$/;"	d	language:C++
__TrenchBroom__RotateObjectsHandle__	View/RotateObjectsHandle.h	/^#define __TrenchBroom__RotateObjectsHandle__$/;"	d	language:C++
__TrenchBroom__RotateObjectsTool__	View/RotateObjectsTool.h	/^#define __TrenchBroom__RotateObjectsTool__$/;"	d	language:C++
__TrenchBroom__RotateTexturesCommand__	Controller/RotateTexturesCommand.h	/^#define __TrenchBroom__RotateTexturesCommand__$/;"	d	language:C++
__TrenchBroom__RotateToolHelper__	View/RotateToolHelper.h	/^#define __TrenchBroom__RotateToolHelper__$/;"	d	language:C++
__TrenchBroom__SelectionCommand__	Controller/SelectionCommand.h	/^#define __TrenchBroom__SelectionCommand__$/;"	d	language:C++
__TrenchBroom__SelectionResult__	Model/SelectionResult.h	/^#define __TrenchBroom__SelectionResult__$/;"	d	language:C++
__TrenchBroom__SelectionTool__	View/SelectionTool.h	/^#define __TrenchBroom__SelectionTool__$/;"	d	language:C++
__TrenchBroom__Selection__	Model/Selection.h	/^#define __TrenchBroom__Selection__$/;"	d	language:C++
__TrenchBroom__SetBool__	SetBool.h	/^#define __TrenchBroom__SetBool__$/;"	d	language:C++
__TrenchBroom__SetEntityDefinitionFileCommand__	Controller/SetEntityDefinitionFileCommand.h	/^#define __TrenchBroom__SetEntityDefinitionFileCommand__$/;"	d	language:C++
__TrenchBroom__SetModsCommand__	Controller/SetModsCommand.h	/^#define __TrenchBroom__SetModsCommand__$/;"	d	language:C++
__TrenchBroom__ShaderManager__	Renderer/ShaderManager.h	/^#define __TrenchBroom__ShaderManager__$/;"	d	language:C++
__TrenchBroom__ShaderProgram__	Renderer/ShaderProgram.h	/^#define __TrenchBroom__ShaderProgram__$/;"	d	language:C++
__TrenchBroom__Shader__	Renderer/Shader.h	/^#define __TrenchBroom__Shader__$/;"	d	language:C++
__TrenchBroom__SharedQuickFixes__	Model/SharedQuickFixes.h	/^#define __TrenchBroom__SharedQuickFixes__$/;"	d	language:C++
__TrenchBroom__SmartChoiceEditorMatcher__	View/SmartChoiceEditorMatcher.h	/^#define __TrenchBroom__SmartChoiceEditorMatcher__$/;"	d	language:C++
__TrenchBroom__SmartChoiceEditor__	View/SmartChoiceEditor.h	/^#define __TrenchBroom__SmartChoiceEditor__$/;"	d	language:C++
__TrenchBroom__SmartColorEditor__	View/SmartColorEditor.h	/^#define __TrenchBroom__SmartColorEditor__$/;"	d	language:C++
__TrenchBroom__SmartPropertyEditorManager__	View/SmartPropertyEditorManager.h	/^#define __TrenchBroom__SmartPropertyEditorManager__$/;"	d	language:C++
__TrenchBroom__SmartPropertyEditorMatcher__	View/SmartPropertyEditorMatcher.h	/^#define __TrenchBroom__SmartPropertyEditorMatcher__$/;"	d	language:C++
__TrenchBroom__SmartPropertyEditor__	View/SmartPropertyEditor.h	/^#define __TrenchBroom__SmartPropertyEditor__$/;"	d	language:C++
__TrenchBroom__SmartSpawnflagsEditor__	View/SmartSpawnflagsEditor.h	/^#define __TrenchBroom__SmartSpawnflagsEditor__$/;"	d	language:C++
__TrenchBroom__SnapBrushVerticesAlgorithm__	Model/SnapBrushVerticesAlgorithm.h	/^#define __TrenchBroom__SnapBrushVerticesAlgorithm__$/;"	d	language:C++
__TrenchBroom__SnapBrushVerticesCommand__	Controller/SnapBrushVerticesCommand.h	/^#define __TrenchBroom__SnapBrushVerticesCommand__$/;"	d	language:C++
__TrenchBroom__Snapshot__	Model/Snapshot.h	/^#define __TrenchBroom__Snapshot__$/;"	d	language:C++
__TrenchBroom__Sphere__	Renderer/Sphere.h	/^#define __TrenchBroom__Sphere__$/;"	d	language:C++
__TrenchBroom__SpinControl__	View/SpinControl.h	/^#define __TrenchBroom__SpinControl__$/;"	d	language:C++
__TrenchBroom__SplitBrushEdgeAlgorithm__	Model/SplitBrushEdgeAlgorithm.h	/^#define __TrenchBroom__SplitBrushEdgeAlgorithm__$/;"	d	language:C++
__TrenchBroom__SplitBrushEdgesCommand__	Controller/SplitBrushEdgesCommand.h	/^#define __TrenchBroom__SplitBrushEdgesCommand__$/;"	d	language:C++
__TrenchBroom__SplitBrushFaceAlgorithm__	Model/SplitBrushFaceAlgorithm.h	/^#define __TrenchBroom__SplitBrushFaceAlgorithm__$/;"	d	language:C++
__TrenchBroom__SplitBrushFacesCommand__	Controller/SplitBrushFacesCommand.h	/^#define __TrenchBroom__SplitBrushFacesCommand__$/;"	d	language:C++
__TrenchBroom__StatusBar__	View/StatusBar.h	/^#define __TrenchBroom__StatusBar__$/;"	d	language:C++
__TrenchBroom__StringIndex__	StringIndex.h	/^#define __TrenchBroom__StringIndex__$/;"	d	language:C++
__TrenchBroom__TexCoordSystemHelper__	Model/TexCoordSystemHelper.h	/^#define __TrenchBroom__TexCoordSystemHelper__$/;"	d	language:C++
__TrenchBroom__TexCoordSystem__	Model/TexCoordSystem.h	/^#define __TrenchBroom__TexCoordSystem__$/;"	d	language:C++
__TrenchBroom__TextureBrowserView__	View/TextureBrowserView.h	/^#define __TrenchBroom__TextureBrowserView__$/;"	d	language:C++
__TrenchBroom__TextureBrowser__	View/TextureBrowser.h	/^#define __TrenchBroom__TextureBrowser__$/;"	d	language:C++
__TrenchBroom__TextureCollectionCommand__	Controller/TextureCollectionCommand.h	/^#define __TrenchBroom__TextureCollectionCommand__$/;"	d	language:C++
__TrenchBroom__TextureCollectionEditor__	View/TextureCollectionEditor.h	/^#define __TrenchBroom__TextureCollectionEditor__$/;"	d	language:C++
__TrenchBroom__TextureCollectionSpec__	Assets/TextureCollectionSpec.h	/^#define __TrenchBroom__TextureCollectionSpec__$/;"	d	language:C++
__TrenchBroom__TextureCollection__	Assets/TextureCollection.h	/^#define __TrenchBroom__TextureCollection__$/;"	d	language:C++
__TrenchBroom__TextureCoordSystemHelper__	View/TextureCoordSystemHelper.h	/^#define __TrenchBroom__TextureCoordSystemHelper__$/;"	d	language:C++
__TrenchBroom__TextureManager__	Assets/TextureManager.h	/^#define __TrenchBroom__TextureManager__$/;"	d	language:C++
__TrenchBroom__TextureSelectedCommand__	View/TextureSelectedCommand.h	/^#define __TrenchBroom__TextureSelectedCommand__$/;"	d	language:C++
__TrenchBroom__TextureTool__	View/TextureTool.h	/^#define __TrenchBroom__TextureTool__$/;"	d	language:C++
__TrenchBroom__Texture__	Assets/Texture.h	/^#define __TrenchBroom__Texture__$/;"	d	language:C++
__TrenchBroom__TexturingEditor__	View/TexturingEditor.h	/^#define __TrenchBroom__TexturingEditor__$/;"	d	language:C++
__TrenchBroom__TexturingViewCameraTool__	View/TexturingViewCameraTool.h	/^#define __TrenchBroom__TexturingViewCameraTool__$/;"	d	language:C++
__TrenchBroom__TexturingViewHelper__	View/TexturingViewHelper.h	/^#define __TrenchBroom__TexturingViewHelper__$/;"	d	language:C++
__TrenchBroom__TexturingViewOffsetTool__	View/TexturingViewOffsetTool.h	/^#define __TrenchBroom__TexturingViewOffsetTool__$/;"	d	language:C++
__TrenchBroom__TexturingViewRotateTool__	View/TexturingViewRotateTool.h	/^#define __TrenchBroom__TexturingViewRotateTool__$/;"	d	language:C++
__TrenchBroom__TexturingViewScaleOriginTool__	View/TexturingViewScaleOriginTool.h	/^#define __TrenchBroom__TexturingViewScaleOriginTool__$/;"	d	language:C++
__TrenchBroom__TexturingViewScaleTool__	View/TexturingViewScaleTool.h	/^#define __TrenchBroom__TexturingViewScaleTool__$/;"	d	language:C++
__TrenchBroom__TexturingView__	View/TexturingView.h	/^#define __TrenchBroom__TexturingView__$/;"	d	language:C++
__TrenchBroom__Token__	IO/Token.h	/^#define __TrenchBroom__Token__$/;"	d	language:C++
__TrenchBroom__ToolBoxDropTarget__	View/ToolBoxDropTarget.h	/^#define __TrenchBroom__ToolBoxDropTarget__$/;"	d	language:C++
__TrenchBroom__ToolBox__	View/ToolBox.h	/^#define __TrenchBroom__ToolBox__$/;"	d	language:C++
__TrenchBroom__TransformObjectsCommand__	Controller/TransformObjectsCommand.h	/^#define __TrenchBroom__TransformObjectsCommand__$/;"	d	language:C++
__TrenchBroom__Transformation__	Renderer/Transformation.h	/^#define __TrenchBroom__Transformation__$/;"	d	language:C++
__TrenchBroom__TrenchBroomApp__	TrenchBroomApp.h	/^#define __TrenchBroom__TrenchBroomApp__$/;"	d	language:C++
__TrenchBroom__TriangleRenderer__	Renderer/TriangleRenderer.h	/^#define __TrenchBroom__TriangleRenderer__$/;"	d	language:C++
__TrenchBroom__VboBlock__	Renderer/VboBlock.h	/^#define __TrenchBroom__VboBlock__$/;"	d	language:C++
__TrenchBroom__Vbo__	Renderer/Vbo.h	/^#define __TrenchBroom__Vbo__$/;"	d	language:C++
__TrenchBroom__VertexArrayRenderer__	Renderer/VertexArray.h	/^#define __TrenchBroom__VertexArrayRenderer__$/;"	d	language:C++
__TrenchBroom__VertexHandleManager__	View/VertexHandleManager.h	/^#define __TrenchBroom__VertexHandleManager__$/;"	d	language:C++
__TrenchBroom__VertexSpec__	Renderer/VertexSpec.h	/^#define __TrenchBroom__VertexSpec__$/;"	d	language:C++
__TrenchBroom__VertexTool__	View/VertexTool.h	/^#define __TrenchBroom__VertexTool__$/;"	d	language:C++
__TrenchBroom__ViewFactory__	View/ViewFactory.h	/^#define __TrenchBroom__ViewFactory__$/;"	d	language:C++
__TrenchBroom__ViewInspector__	View/ViewInspector.h	/^#define __TrenchBroom__ViewInspector__$/;"	d	language:C++
__TrenchBroom__ViewUtils__	View/ViewUtils.h	/^#define __TrenchBroom__ViewUtils__$/;"	d	language:C++
__TrenchBroom__WadTextureLoader__	IO/WadTextureLoader.h	/^#define __TrenchBroom__WadTextureLoader__$/;"	d	language:C++
__TrenchBroom__Wad__	IO/Wad.h	/^#define __TrenchBroom__Wad__$/;"	d	language:C++
__TrenchBroom__WalTextureLoader__	IO/WalTextureLoader.h	/^#define __TrenchBroom__WalTextureLoader__$/;"	d	language:C++
__TrenchBroom__WelcomeFrame__	View/WelcomeFrame.h	/^#define __TrenchBroom__WelcomeFrame__$/;"	d	language:C++
__TrenchBroom__wxUtils__	View/wxUtils.h	/^#define __TrenchBroom__wxUtils__$/;"	d	language:C++
_unused	Macros.h	/^#define _unused(/;"	d	language:C++
a	Color.cpp	/^float Color::a() const {$/;"	f	language:C++	class:Color
a	Renderer/TextureFont.h	/^                int x, y, w, h, a;$/;"	m	language:C++	struct:TrenchBroom::Renderer::TextureFont::Char
abs	MathUtils.h	/^    T abs(const T v) {$/;"	f	language:C++	namespace:Math
absFirstAxis	Vec.h	/^    const Vec<T,3> absFirstAxis() const {$/;"	f	language:C++	class:Vec
absMajorAxis	Vec.h	/^    const Vec<T,S> absMajorAxis(const size_t k) const {$/;"	f	language:C++	class:Vec
absSecondAxis	Vec.h	/^    const Vec<T,3> absSecondAxis() const {$/;"	f	language:C++	class:Vec
absThirdAxis	Vec.h	/^    const Vec<T,3> absThirdAxis() const {$/;"	f	language:C++	class:Vec
absolute	Vec.h	/^    Vec<T,S> absolute() const {$/;"	f	language:C++	class:Vec
activatable	View/Tool.cpp	/^        bool ActivationPolicy::activatable() const { return true; }$/;"	f	language:C++	class:TrenchBroom::View::ActivationPolicy
activatable	View/Tool.cpp	/^        bool NoActivationPolicy::activatable() const { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoActivationPolicy
activate	Assets/Texture.cpp	/^        void Texture::activate() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
activate	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::activate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
activate	Renderer/TextureFont.cpp	/^        void TextureFont::activate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
activate	Renderer/Vbo.cpp	/^        void Vbo::activate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
activate	View/SmartPropertyEditor.cpp	/^        wxWindow* SmartPropertyEditor::activate(wxWindow* parent, const Model::PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
activate	View/Tool.h	/^            bool activate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
activateEditor	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::activateEditor(EditorPtr editor, const Model::PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
activateTexture	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::activateTexture(Renderer::ActiveShader& shader) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
activateVbo	Assets/EntityModelManager.cpp	/^        void EntityModelManager::activateVbo() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
active	Renderer/Vbo.cpp	/^        void SetVboState::active() {$/;"	f	language:C++	class:TrenchBroom::Renderer::SetVboState
active	View/Tool.h	/^            bool active() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
actualSize	View/Grid.cpp	/^        size_t Grid::actualSize() const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
add	Controller/TextureCollectionCommand.cpp	/^        TextureCollectionCommand::Ptr TextureCollectionCommand::add(View::MapDocumentWPtr document, const String& name) {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
addActionItem	View/Menu.cpp	/^        MenuItem::Ptr Menu::addActionItem(const KeyboardShortcut& shortcut) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
addAllKillSources	Model/Entity.cpp	/^        void Entity::addAllKillSources(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addAllKillTargets	Model/Entity.cpp	/^        void Entity::addAllKillTargets() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addAllLinkSources	Model/Entity.cpp	/^        void Entity::addAllLinkSources(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addAllLinkTargets	Model/Entity.cpp	/^        void Entity::addAllLinkTargets() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addAllObjects	View/MapTreeView.cpp	/^            void addAllObjects() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
addBackwardEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::addBackwardEdge(BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
addBackwardEdges	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::addBackwardEdges(const BrushEdgeList& edges) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
addBrush	Model/Entity.cpp	/^        void Entity::addBrush(Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addBrush	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::addBrush(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
addBrush	View/ControllerFacade.cpp	/^        bool ControllerFacade::addBrush(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addBrush	View/MapDocument.cpp	/^        void MapDocument::addBrush(Model::Brush* brush, Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
addBrush	View/VertexHandleManager.cpp	/^        void VertexHandleManager::addBrush(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
addBrushToMap	View/CreateBrushTool.cpp	/^        void CreateBrushTool::addBrushToMap(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
addBrushes	Controller/BrushVertexHandleCommand.cpp	/^        void BrushVertexHandleCommand::addBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
addBrushes	Renderer/BrushRenderer.h	/^            void addBrushes(I cur, I end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
addBrushes	View/ControllerFacade.cpp	/^        bool ControllerFacade::addBrushes(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addBrushes	View/VertexHandleManager.cpp	/^        void VertexHandleManager::addBrushes(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
addCheckItem	View/Menu.cpp	/^        MenuItem::Ptr Menu::addCheckItem(const KeyboardShortcut& shortcut) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
addClipPoint	View/Clipper.cpp	/^        void Clipper::addClipPoint(const Vec3& position, const Model::BrushFace& face) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
addDeletableQuickFix	Model/Issue.cpp	/^        void Issue::addDeletableQuickFix(const QuickFix* quickFix) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
addDeselectedFace	Model/SelectionResult.cpp	/^        void SelectionResult::addDeselectedFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
addDeselectedObject	Model/SelectionResult.cpp	/^        void SelectionResult::addDeselectedObject(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
addEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::addEdge(BrushEdge* edge, const bool forward) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
addEdge	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::addEdge(const Edge3& edge) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
addEdge	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::addEdge(const Edge3& edge, const Line3& line, Position::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
addEdges	Model/Brush.cpp	/^        void Brush::addEdges(Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
addEmptyBrushEntities	Controller/AddRemoveObjectsCommand.cpp	/^        Model::ObjectParentList AddRemoveObjectsCommand::addEmptyBrushEntities(const Model::ObjectParentList& objects) const {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
addEntities	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::addEntities(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
addEntities	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::addEntities(const Model::EntitySet& entities) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
addEntities	Renderer/EntityRenderer.h	/^            void addEntities(Iter cur, const Iter end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
addEntities	View/ControllerFacade.cpp	/^        bool ControllerFacade::addEntities(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addEntity	Model/EntityPropertyIndex.cpp	/^        void EntityPropertyIndex::addEntity(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
addEntity	Model/Map.cpp	/^        void Map::addEntity(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Map
addEntity	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::addEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
addEntity	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::addEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
addEntity	View/ControllerFacade.cpp	/^        bool ControllerFacade::addEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addEntity	View/MapDocument.cpp	/^        void MapDocument::addEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
addEntityProperty	Model/EntityPropertyIndex.cpp	/^        void EntityPropertyIndex::addEntityProperty(Entity* entity, const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
addEntityPropertyToIndex	Model/Map.cpp	/^        void Map::addEntityPropertyToIndex(Entity* entity, const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Map
addEntityToLayout	View/EntityBrowserView.cpp	/^        void EntityBrowserView::addEntityToLayout(Layout& layout, Assets::PointEntityDefinition* definition, const Renderer::FontDescriptor& font) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
addEntry	ConfigTypes.cpp	/^    void ConfigList::addEntry(ConfigEntry::Ptr entry) {$/;"	f	language:C++	class:TrenchBroom::ConfigList
addEntry	ConfigTypes.cpp	/^    void ConfigTable::addEntry(const String& key, ConfigEntry::Ptr entry) {$/;"	f	language:C++	class:TrenchBroom::ConfigTable
addExtension	IO/Path.cpp	/^        Path Path::addExtension(const String& extension) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
addExternalTextureCollection	Assets/TextureManager.cpp	/^        bool TextureManager::addExternalTextureCollection(const TextureCollectionSpec& spec) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
addExternalTextureCollections	View/MapDocument.cpp	/^        void MapDocument::addExternalTextureCollections(const StringList& names) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
addFace	Model/Brush.cpp	/^        void Brush::addFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
addFace	Model/BrushAlgorithm.h	/^            void addFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
addFace	Model/BrushGeometry.cpp	/^        AddFaceResult BrushGeometry::addFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
addFace	Model/FaceAdjacencyGraph.cpp	/^        void FaceAdjacencyGraph::addFace(const BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
addFace	Model/MoveBrushVertexAlgorithm.h	/^                void addFace(BrushFace* original, BrushFace* copy) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
addFaces	Model/Brush.cpp	/^        void Brush::addFaces(const BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
addFaces	Model/BrushGeometry.cpp	/^        AddFaceResult BrushGeometry::addFaces(const BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
addFile	IO/PakFileSystem.cpp	/^        void PakFileSystem::Directory::addFile(const Path& path, MappedFile::Ptr file) {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
addFileSystem	IO/GameFileSystem.cpp	/^        void GameFileSystem::addFileSystem(const String& pakExtension, const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
addForwardEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::addForwardEdge(BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
addForwardEdges	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::addForwardEdges(const BrushEdgeList& edges) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
addFrame	Assets/MdlModel.cpp	/^        void MdlFrameGroup::addFrame(MdlFrame* frame, const float time) {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
addFrame	Assets/MdlModel.cpp	/^        void MdlModel::addFrame(MdlBaseFrame* frame) {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
addGroup	View/CellLayout.h	/^            void addGroup(const GroupType groupItem, const float titleHeight) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
addHit	Hit.cpp	/^    void Hits::addHit(const Hit& hit) {$/;"	f	language:C++	class:TrenchBroom::Hits
addIssue	View/IssueBrowser.cpp	/^            void addIssue(Model::Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
addItem	View/CellLayout.h	/^            bool addItem(CellType item,$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
addItem	View/CellLayout.h	/^            void addItem(CellType item,$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
addItem	View/CellLayout.h	/^            void addItem(const CellType item,$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
addItem	View/Menu.cpp	/^        void MenuItemParent::addItem(MenuItem::Ptr item) {$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
addKillSource	Model/Entity.cpp	/^        void Entity::addKillSource(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addKillTarget	Model/Entity.cpp	/^        void Entity::addKillTarget(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addKillTargets	Model/Entity.cpp	/^        void Entity::addKillTargets(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addLink	Renderer/EntityLinkRenderer.cpp	/^        void EntityLinkRenderer::addLink(const Model::Entity* source, const Model::Entity* target, const Color& color, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
addLinkSource	Model/Entity.cpp	/^        void Entity::addLinkSource(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addLinkTarget	Model/Entity.cpp	/^        void Entity::addLinkTarget(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addLinkTargets	Model/Entity.cpp	/^        void Entity::addLinkTargets(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addLinks	Model/Entity.cpp	/^        void Entity::addLinks(const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addMenu	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::addMenu(const Menu& menu, EntryList& entries) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
addMenu	View/Menu.cpp	/^        Menu& Menu::addMenu(const String& text, int menuId) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
addMenu	View/Menu.cpp	/^        Menu& MultiMenu::addMenu(const String& text, const int menuId) {$/;"	f	language:C++	class:TrenchBroom::View::MultiMenu
addMenu	View/RecentDocuments.h	/^            void addMenu(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
addModel	Assets/Bsp29Model.cpp	/^        void Bsp29Model::addModel(const FaceList& faces, const BBox3f& bounds) {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
addModelDefinition	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::addModelDefinition(Assets::ModelDefinitionPtr modelDefinition) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
addModelDefinitions	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::addModelDefinitions(const Assets::ModelDefinitionList& modelDefinitions) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
addMultiMenu	View/Menu.cpp	/^        MultiMenu& Menu::addMultiMenu(const String& text, int menuId) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
addNeighbour	Model/FaceAdjacencyGraph.cpp	/^        bool FaceAdjacencyGraph::Node::addNeighbour(Node* node) {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
addObject	Model/Octree.h	/^            bool addObject(const BBox<F,3>& bounds, T object) {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
addObject	Model/Octree.h	/^            void addObject(const BBox<F,3>& bounds, T object) {$/;"	f	language:C++	class:TrenchBroom::Model::Octree
addObject	Model/Picker.cpp	/^        void Picker::addObject(Pickable* object) {$/;"	f	language:C++	class:TrenchBroom::Model::Picker
addObject	View/MapDocument.cpp	/^        void MapDocument::addObject(Model::Object* object, Model::Object* parent) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
addObjects	Controller/AddRemoveObjectsCommand.cpp	/^        AddRemoveObjectsCommand::Ptr AddRemoveObjectsCommand::addObjects(View::MapDocumentWPtr document, const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
addObjects	Controller/AddRemoveObjectsCommand.cpp	/^        void AddRemoveObjectsCommand::addObjects(const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
addObjects	Model/Picker.h	/^            void addObjects(const std::vector<Object>& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Picker
addObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::addObjects(const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addObserver	Notifier.h	/^        bool addObserver(R* receiver, void (R::*function)()) {$/;"	f	language:C++	class:TrenchBroom::Notifier0
addObserver	Notifier.h	/^        bool addObserver(R* receiver, void (R::*function)(A1)) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
addObserver	Notifier.h	/^        bool addObserver(R* receiver, void (R::*function)(A1, A2)) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
addObserver	Notifier.h	/^        bool addObserver(R* receiver, void (R::*function)(A1, A2, A3)) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
addOption	Assets/PropertyDefinition.cpp	/^        void FlagsPropertyDefinition::addOption(const int value, const String& description, const bool isDefault) {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
addOrUpdateProperty	Model/Entity.h	/^            void addOrUpdateProperty(const PropertyKey& key, const T& value) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addOrUpdateProperty	Model/Entity.h	/^            void addOrUpdateProperty(const PropertyKey& key, const Vec<T,S> value) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addOrUpdateProperty	Model/EntityProperties.cpp	/^        const EntityProperty& EntityProperties::addOrUpdateProperty(const PropertyKey& key, const PropertyValue& value) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
addOrUpdateProperty	Model/EntityProperties.h	/^            const EntityProperty& addOrUpdateProperty(const PropertyKey& key, const T& value) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
addOrUpdateProperty	View/SmartPropertyEditor.cpp	/^        void SmartPropertyEditor::addOrUpdateProperty(const Model::PropertyValue& value) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
addPoint	Renderer/BoundsGuideRenderer.cpp	/^        void addPoint(const Vec3& origin, const Vec3& direction, const FloatType length, View::MapDocumentSPtr document, VertexSpecs::P3::Vertex::List& vertices) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
addPoint	View/Clipper.cpp	/^        void Clipper::ClipHandlePoints::addPoint(const Vec3& position, const Vec3::List& normals) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
addPrimitive	Renderer/IndexedVertexList.h	/^            void addPrimitive(const typename T::Vertex::List& vertices) {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
addPropertyDefinition	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::addPropertyDefinition(Assets::PropertyDefinitionPtr propertyDefinition) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
addPropertyDefinitions	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::addPropertyDefinitions(const Assets::PropertyDefinitionList& propertyDefinitions) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
addPropertyDefinitions	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::addPropertyDefinitions(const Assets::PropertyDefinitionMap& propertyDefinitions) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
addPropertyToIndex	Model/Entity.cpp	/^        void Entity::addPropertyToIndex(const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
addRecentDocumentMenu	TrenchBroomApp.cpp	/^        void TrenchBroomApp::addRecentDocumentMenu(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
addRotation	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addRotation(const float rotation) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addSelectedFace	Model/SelectionResult.cpp	/^        void SelectionResult::addSelectedFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
addSelectedObject	Model/SelectionResult.cpp	/^        void SelectionResult::addSelectedObject(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
addSeparator	View/Menu.cpp	/^        void Menu::addSeparator() {$/;"	f	language:C++	class:TrenchBroom::View::Menu
addSharedQuickFix	Model/Issue.cpp	/^        void Issue::addSharedQuickFix(const QuickFix& quickFix) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
addShortcut	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::addShortcut(Preference<KeyboardShortcut>& shortcut, EntryList& entries) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
addSkin	Assets/MdlModel.cpp	/^        void MdlModel::addSkin(MdlSkin* skin) {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
addSpike	Renderer/BoundsGuideRenderer.cpp	/^        void addSpike(const Vec3& origin, const Vec3& direction, const FloatType length, const Color& color, VertexSpecs::P3C4::Vertex::List& vertices) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
addString	Renderer/TextRenderer.h	/^            void addString(Key key, const String& string, TextAnchor::Ptr anchor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
addString	Renderer/TextRenderer.h	/^            void addString(Key key, const Vec2f::List& vertices, const Vec2f& size, TextAnchor::Ptr anchor, TextMap& entries) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
addSurfaceValue	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addSurfaceValue(const float surfaceValue) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addTextureCollection	View/ControllerFacade.cpp	/^        bool ControllerFacade::addTextureCollection(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
addTextureToLayout	View/TextureBrowserView.cpp	/^        void TextureBrowserView::addTextureToLayout(Layout& layout, Assets::Texture* texture, const Renderer::FontDescriptor& font) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
addToMesh	Model/BrushFace.cpp	/^        void BrushFace::addToMesh(Mesh& mesh) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
addTool	View/ToolBox.cpp	/^        void ToolBox::addTool(Tool* tool) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
addTracePoint	View/MoveToolHelper.cpp	/^        void MoveHelper::addTracePoint(const Vec3& point) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
addTriangleFans	Renderer/Mesh.h	/^            void addTriangleFans(Key key, const TriangleSeries& fans) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addTriangleStrips	Renderer/Mesh.h	/^            void addTriangleStrips(Key key, const TriangleSeries& strips) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addTriangleToSet	Renderer/Mesh.h	/^            void addTriangleToSet(const typename VertexSpec::Vertex& v1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addTrianglesToSet	Renderer/Mesh.h	/^            void addTrianglesToSet(const typename VertexSpec::Vertex::List& vertices) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addVertex	Assets/Bsp29Model.cpp	/^        void Bsp29Model::Face::addVertex(const Vec3f& vertex, const Vec2f& texCoord) {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
addVertex	Renderer/IndexedVertexList.h	/^            void addVertex(const typename T::Vertex& vertex) {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
addVertexToFan	Renderer/Mesh.h	/^            void addVertexToFan(const typename VertexSpec::Vertex& v) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addVertexToStrip	Renderer/Mesh.h	/^            void addVertexToStrip(const typename VertexSpec::Vertex& v) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
addVertices	Renderer/IndexedVertexList.h	/^            void addVertices(const typename T::Vertex::List& vertices) {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
addXOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addXOffset(const float xOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addXScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addXScale(const float xScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addYOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addYOffset(const float yOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addYScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::addYScale(const float yScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
addedFaces	Model/BrushAlgorithm.h	/^            const BrushFaceList& addedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
addedFaces	Model/BrushGeometry.h	/^            BrushFaceList addedFaces;$/;"	m	language:C++	struct:TrenchBroom::Model::BrushAlgorithmResult
addedObjects	Controller/AddRemoveObjectsCommand.cpp	/^        const Model::ObjectList& AddRemoveObjectsCommand::addedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
address	IO/Wad.cpp	/^        size_t WadEntry::address() const {$/;"	f	language:C++	class:TrenchBroom::IO::WadEntry
adjoinMatrix	Mat.h	/^Mat<T,S,S>& adjoinMatrix(Mat<T,S,S>& mat) {$/;"	f	language:C++
adjointMatrix	Mat.h	/^const Mat<T,S,S> adjointMatrix(const Mat<T,S,S>& mat) {$/;"	f	language:C++
advance	FilterIterator.h	/^        void advance() {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
advance	IO/IOUtils.h	/^        void advance(const char*& cursor, const size_t i = 1) {$/;"	f	language:C++	namespace:TrenchBroom::IO
advance	IO/Tokenizer.h	/^            void advance() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
advanceOuter	NestedHierarchyIterator.h	/^        void advanceOuter() {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
advanceOuter	NestedIterator.h	/^        void advanceOuter() {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
advancePastEmptyInner	NestedIterator.h	/^        void advancePastEmptyInner() {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
affectedEntities	Controller/EntityPropertyCommand.cpp	/^        const Model::EntityList& EntityPropertyCommand::affectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
affectsImmutablePropertyKey	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::affectsImmutablePropertyKey() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
affectsImmutablePropertyValue	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::affectsImmutablePropertyValue() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
alignedOrthogonalDragPlane	Plane.h	/^const Plane<T,3> alignedOrthogonalDragPlane(const Vec<T,3>& position, const Vec<T,3>& direction) {$/;"	f	language:C++
alignment	Renderer/BoundsInfoRenderer.cpp	/^        Alignment::Type BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor::alignment() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
alignment	Renderer/BoundsInfoRenderer.cpp	/^        Alignment::Type BoundsInfoRenderer::BoundsInfoSizeTextAnchor::alignment() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
alignment	Renderer/EntityRenderer.cpp	/^        Alignment::Type EntityRenderer::EntityClassnameAnchor::alignment() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameAnchor
alignment	Renderer/TextRenderer.cpp	/^        Alignment::Type SimpleTextAnchor::alignment() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
alignmentFactors	Renderer/TextRenderer.cpp	/^        Vec2f TextAnchor::alignmentFactors(const Alignment::Type a) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextAnchor
all	Hit.cpp	/^    const Hits::List& Hits::all() const {$/;"	f	language:C++	class:TrenchBroom::Hits
allEntityDefinitionFiles	Model/Game.cpp	/^        IO::Path::List Game::allEntityDefinitionFiles() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
allEntries	IO/Wad.cpp	/^        const WadEntryList& Wad::allEntries() const {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
allFramesClosed	View/FrameManager.cpp	/^        bool FrameManager::allFramesClosed() const {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
allSelectedBrushes	Model/Selection.cpp	/^        BrushList Selection::allSelectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
allSelectedBrushes	View/MapDocument.cpp	/^        Model::BrushList MapDocument::allSelectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
allSelectedEntities	Model/Selection.cpp	/^        EntityList Selection::allSelectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
allSelectedEntities	View/MapDocument.cpp	/^        Model::EntityList MapDocument::allSelectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
allSelectedFaces	Model/Selection.cpp	/^        const BrushFaceList& Selection::allSelectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
allSelectedFaces	View/MapDocument.cpp	/^        const Model::BrushFaceList& MapDocument::allSelectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
allocate	Allocator.h	/^        T* allocate() {$/;"	f	language:C++	class:Allocator::Chunk
allocateBlock	Renderer/Vbo.cpp	/^        VboBlock* Vbo::allocateBlock(const size_t capacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
alwaysShowModifier	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::alwaysShowModifier() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
anchor	Plane.h	/^    const Vec<T,S> anchor() const {$/;"	f	language:C++	class:Plane
angle	Quat.h	/^    float angle() const {$/;"	f	language:C++	class:Quat
angle	View/Grid.cpp	/^        FloatType Grid::angle() const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
angleAnchor	View/RotateToolHelper.cpp	/^        Renderer::TextAnchor::Ptr RotateHelper::angleAnchor() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
angleBetween	Vec.h	/^T angleBetween(const Vec<T,3> vec, const Vec<T,3>& axis, const Vec<T,3>& up) {$/;"	f	language:C++
angleHandleInFaceCoords	View/TexturingViewHelper.cpp	/^        const Vec2f TexturingViewHelper::angleHandleInFaceCoords(const float distance) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
angleString	View/RotateToolHelper.cpp	/^        String RotateHelper::angleString(const FloatType angle) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
animateCamera	View/MapView.cpp	/^        void MapView::animateCamera(const Vec3f& position, const Vec3f& direction, const Vec3f& up, const wxLongLong duration) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
any	Model/EntityPropertyIndex.cpp	/^        EntityPropertyQuery EntityPropertyQuery::any() {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
any	Model/ModelUtils.h	/^        bool any(Iter cur, Iter end, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom::Model
anyEntityHasProperty	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::anyEntityHasProperty(const Model::PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
anyToolActive	View/MapView.cpp	/^        bool MapView::anyToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
anyToolActive	View/ToolBox.cpp	/^        bool ToolBox::anyToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
appDirectory	IO/SystemPaths.cpp	/^            Path appDirectory() {$/;"	f	language:C++	namespace:TrenchBroom::IO::SystemPaths
append	CollectionUtils.h	/^    void append(std::vector<T1>& vec1, const std::vector<T2>& vec2) {$/;"	f	language:C++	namespace:VectorUtils
append	Model/BrushGeometry.cpp	/^        void BrushAlgorithmResult::append(const BrushAlgorithmResult& other) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithmResult
append	Model/IssueManager.cpp	/^        void IssueManager::IssuePair::append(Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager::IssuePair
append	Renderer/TextureFont.cpp	/^        void TextureFont::Char::append(Vec2f::List& vertices, const int xOffset, const int yOffset, const int textureLength, const bool clockwise) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
appendTool	View/Tool.cpp	/^        void Tool::appendTool(Tool* tool) {$/;"	f	language:C++	class:TrenchBroom::View::Tool
applies	View/MoveTextureHelper.cpp	/^        bool MoveTextureHelper::applies(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
applies	View/ResizeBrushesTool.cpp	/^        bool ResizeBrushesTool::applies(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
applies	View/TextureCoordSystemHelper.cpp	/^        bool TextureCoordSystemHelper::applies(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
apply	Model/MixedBrushContentsIssueGenerator.cpp	/^            void apply(Brush* brush, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void DeleteEntityPropertyQuickFix::apply(Entity* entity, const PropertyKey& key, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::DeleteEntityPropertyQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void DeleteObjectQuickFix::apply(Brush* brush, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void DeleteObjectQuickFix::apply(Entity* entity, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void FindIntegerPlanePointsQuickFix::apply(Brush* brush, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::FindIntegerPlanePointsQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void MoveBrushesToWorldspawnQuickFix::apply(const BrushList& brushes, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushesToWorldspawnQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void SnapPlanePointsToIntegerQuickFix::apply(Brush* brush, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::SnapPlanePointsToIntegerQuickFix
apply	Model/SharedQuickFixes.cpp	/^        void SnapVerticesToIntegerQuickFix::apply(Brush* brush, View::ControllerSPtr controller) const {$/;"	f	language:C++	class:TrenchBroom::Model::SnapVerticesToIntegerQuickFix
apply	View/AnimationCurve.cpp	/^        double AnimationCurve::apply(const double progress) const {$/;"	f	language:C++	class:TrenchBroom::View::AnimationCurve
apply	View/MovementRestriction.cpp	/^        Vec3 MovementRestriction::apply(const Vec3& v) const {$/;"	f	language:C++	class:TrenchBroom::View::MovementRestriction
applyDeselectedFaces	Model/Selection.cpp	/^        void Selection::applyDeselectedFaces(const BrushFaceSet& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
applyDeselectedObjects	Model/Selection.cpp	/^        void Selection::applyDeselectedObjects(const ObjectSet& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
applyQuickFix	Model/EmptyBrushEntityIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssue
applyQuickFix	Model/EntityLinkIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssue
applyQuickFix	Model/FloatPointsIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssue
applyQuickFix	Model/FloatVerticesIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssue
applyQuickFix	Model/Issue.cpp	/^        void Issue::applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {}$/;"	f	language:C++	class:TrenchBroom::Model::Issue
applyQuickFix	Model/MissingEntityClassnameIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssue
applyQuickFix	Model/MissingEntityDefinitionIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssue
applyQuickFix	Model/MixedBrushContentsIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssue
applyQuickFix	Model/PointEntityWithBrushesIssueGenerator.cpp	/^            void applyQuickFix(const QuickFix* quickFix, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssue
applyResult	Model/Selection.cpp	/^        void Selection::applyResult(const SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
applyRotation	Model/Entity.cpp	/^        void Entity::applyRotation(const Mat4x4& rotation) {}$/;"	f	language:C++	class:TrenchBroom::Model::Entity
applyRotation	Model/Entity.h	/^            void applyRotation(const Mat4x4& rotation) {$/;"	f	language:C++	class:TrenchBroom::Model::ConfigurableEntity
applyRotation	Model/QuakeEntityRotationPolicy.cpp	/^        void QuakeEntityRotationPolicy::applyRotation(Entity& entity, const Mat4x4& transformation) {$/;"	f	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
applySelectedFaces	Model/Selection.cpp	/^        void Selection::applySelectedFaces(const BrushFaceSet& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
applySelectedObjects	Model/Selection.cpp	/^        void Selection::applySelectedObjects(const ObjectSet& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
applyTexture	Renderer/FaceRenderer.cpp	/^            bool applyTexture;$/;"	m	language:C++	struct:TrenchBroom::Renderer::SetShaderParms	file:
applyTinting	Renderer/EntityModelRenderer.cpp	/^        bool EntityModelRenderer::applyTinting() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
applyTinting	Renderer/EntityRenderer.cpp	/^        bool EntityRenderer::applyTinting() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
arePointsOnPlane	Model/BrushFace.cpp	/^        bool BrushFace::arePointsOnPlane(const Plane3& plane) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
area	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::HitArea RotateObjectsHandle::Hit::area() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
asString	Assets/ModelDefinition.cpp	/^        const String ModelSpecification::asString() const {$/;"	f	language:C++	class:TrenchBroom::Assets::ModelSpecification
asString	IO/Path.cpp	/^        String Path::asString(const char separator) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
asString	Vec.h	/^    std::string asString(const size_t components = S) const {$/;"	f	language:C++	class:Vec
asString	View/KeyboardShortcut.cpp	/^        String KeyboardShortcut::asString() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
asString	View/SmartColorEditor.cpp	/^        String SmartColorEditor::ByteColor::asString() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::ByteColor
asString	View/SmartColorEditor.cpp	/^        String SmartColorEditor::FloatColor::asString() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
asStrings	IO/Path.cpp	/^        StringList Path::asStrings(const Path::List& paths, const char separator) {$/;"	f	language:C++	class:TrenchBroom::IO::Path
asVertexList	Edge.h	/^        static typename Vec<T,S>::List asVertexList(const typename Edge<T,S>::List& edges) {$/;"	f	language:C++	struct:TrenchBroom::Edge
asVertexList	Polygon.h	/^        static typename Vec<T,S>::List asVertexList(const typename Polygon<T,S>::List& polygons) {$/;"	f	language:C++	struct:TrenchBroom::Polygon
assertType	IO/QuakeMapParser.cpp	/^        void QuakeMapParser::ExtraProperty::assertType(const Type expected) const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
at	Plane.h	/^    T at(const Vec<T,S-1>& point, const Math::Axis::Type axis) const {$/;"	f	language:C++	class:Plane
attach	Renderer/Shader.cpp	/^        void Shader::attach(const GLuint programId) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Shader
attach	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::attach(Shader& shader) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
attribs	Model/BrushFace.cpp	/^        const BrushFaceAttribs& BrushFace::attribs() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
attribs	View/GLContextHolder.cpp	/^        const GLContextHolder::GLAttribs& GLContextHolder::attribs() const {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
attribs	View/MapView.cpp	/^        const GLContextHolder::GLAttribs& MapView::attribs() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
autosave	View/Autosaver.cpp	/^        void Autosaver::autosave(MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
availableMods	Model/Game.cpp	/^        StringList Game::availableMods() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
averageColor	Assets/Texture.cpp	/^        const Color& Texture::averageColor() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
axes	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::axes(const size_t index, Vec3& xAxis, Vec3& yAxis) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
axes	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::axes(size_t index, Vec3& xAxis, Vec3& yAxis, Vec3& projectionAxis) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
axis	Quat.h	/^    Vec<T,3> axis() const {$/;"	f	language:C++	class:Quat
axis	Vec.h	/^    static const Vec<T,S> axis(const size_t index) {$/;"	f	language:C++	class:Vec
axis	View/RotateToolHelper.h	/^            Vec3 axis;$/;"	m	language:C++	struct:TrenchBroom::View::RotateInfo
b	Color.cpp	/^float Color::b() const {$/;"	f	language:C++	class:Color
b	View/SmartColorEditor.h	/^                T b() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color_
bBoxVertices	BBox.h	/^typename Vec<T,3>::List bBoxVertices(const BBox<T,3>& bbox) {$/;"	f	language:C++
backBrushes	View/Clipper.h	/^            Model::EntityBrushesMap backBrushes;$/;"	m	language:C++	struct:TrenchBroom::View::ClipResult
backgroundColor	Renderer/EntityRenderer.cpp	/^        Color EntityRenderer::EntityClassnameColorProvider::backgroundColor(RenderContext& context, const Key& entity) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameColorProvider
backgroundColor	Renderer/TextRenderer.h	/^                Color backgroundColor(RenderContext& context, const Key& key) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::PrefTextColorProvider
backgroundColor	View/RotateToolHelper.cpp	/^            Color backgroundColor(Renderer::RenderContext& context, const size_t& key) const {$/;"	f	language:C++	class:TrenchBroom::View::TextRendererHelper
basePosition	Renderer/BoundsInfoRenderer.cpp	/^        Vec3f BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor::basePosition() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
basePosition	Renderer/BoundsInfoRenderer.cpp	/^        Vec3f BoundsInfoRenderer::BoundsInfoSizeTextAnchor::basePosition() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
basePosition	Renderer/EntityRenderer.cpp	/^        Vec3f EntityRenderer::EntityClassnameAnchor::basePosition() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameAnchor
basePosition	Renderer/TextRenderer.cpp	/^        Vec3f SimpleTextAnchor::basePosition() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
bbox	BBox.h	/^    BBox<T,3> bbox;$/;"	m	language:C++	struct:RotateBBox
bbox	BBox.h	/^    BBox<T,3> bbox;$/;"	m	language:C++	struct:TransformBBox
begin	IO/MappedFile.cpp	/^        const char* MappedFile::begin() const {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
begin	IO/Token.h	/^            const char* begin() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
begin	IO/Wad.h	/^            const char* begin;$/;"	m	language:C++	struct:TrenchBroom::IO::MipData
begin	Model/BrushEdgesIterator.h	/^            static OuterIterator begin(const BrushList& brushes) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
begin	Model/BrushFacesIterator.h	/^            static OuterIterator begin(const BrushList& brushes) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
begin	Model/EntityBrushesIterator.h	/^            static OuterIterator begin(const EntityList& entities) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
begin	Model/EntityFacesIterator.h	/^            static OuterIterator begin(const EntityList& entities) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
begin	Model/FaceEdgesIterator.h	/^            static OuterIterator begin(const BrushFaceList& faces) {$/;"	f	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
begin	Model/MapBrushesIterator.h	/^            static OuterIterator begin(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
begin	Model/MapEntitiesIterator.h	/^            EntityList::const_iterator begin(Map& map) {$/;"	f	language:C++	namespace:TrenchBroom::Model::MapEntitiesIterator
begin	Model/MapFacesIterator.h	/^            static OuterIterator begin(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapFacesIterator
begin	Model/MapObjectsIterator.h	/^            static OuterIterator begin(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
beginGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::beginGroup(const String& name, const bool undoable) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
beginInner	Model/BrushEdgesIterator.h	/^            static InnerIterator beginInner(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
beginInner	Model/BrushFacesIterator.h	/^            static InnerIterator beginInner(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
beginInner	Model/EntityBrushesIterator.h	/^            static InnerIterator beginInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
beginInner	Model/EntityFacesIterator.h	/^            static InnerIterator beginInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
beginInner	Model/FaceEdgesIterator.h	/^            static InnerIterator beginInner(BrushFaceList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
beginInner	Model/MapBrushesIterator.h	/^            static InnerIterator beginInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
beginInner	Model/MapFacesIterator.h	/^            static InnerIterator beginInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapFacesIterator
beginInner	Model/MapObjectsIterator.h	/^            InnerIterator beginInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
beginOneShotGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::beginOneShotGroup(const String& name) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
beginOneShotGroup	View/ControllerFacade.cpp	/^        void ControllerFacade::beginOneShotGroup(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
beginTriangleFan	Renderer/Mesh.h	/^            void beginTriangleFan(Key key) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
beginTriangleSet	Renderer/Mesh.h	/^            void beginTriangleSet(Key key) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
beginTriangleStrip	Renderer/Mesh.h	/^            void beginTriangleStrip(Key key) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
beginUndoableGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::beginUndoableGroup(const String& name) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
beginUndoableGroup	View/ControllerFacade.cpp	/^        void ControllerFacade::beginUndoableGroup(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
between	MathUtils.h	/^    bool between(const T v, const T s, const T e, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
bindEvents	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
bindEvents	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
bindEvents	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
bindEvents	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
bindEvents	View/FaceInspector.cpp	/^        void FaceInspector::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
bindEvents	View/GamesPreferencePane.cpp	/^        void GamesPreferencePane::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
bindEvents	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
bindEvents	View/MapFrame.cpp	/^        void MapFrame::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
bindEvents	View/MapView.cpp	/^        void MapView::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
bindEvents	View/MiniMap.cpp	/^        void MiniMap::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMap
bindEvents	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
bindEvents	View/ModEditor.cpp	/^        void ModEditor::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
bindEvents	View/PreferenceDialog.cpp	/^        void PreferenceDialog::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
bindEvents	View/RenderView.cpp	/^        void RenderView::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
bindEvents	View/TextureBrowser.cpp	/^        void TextureBrowser::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
bindEvents	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
bindEvents	View/TexturingEditor.cpp	/^        void TexturingEditor::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingEditor
bindEvents	View/ToolBox.cpp	/^        void ToolBox::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
bindEvents	View/WelcomeFrame.cpp	/^        void WelcomeFrame::bindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
bindObservers	Renderer/MapRenderer.cpp	/^        void MapRenderer::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
bindObservers	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
bindObservers	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
bindObservers	View/EntityBrowser.cpp	/^        void EntityBrowser::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
bindObservers	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
bindObservers	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
bindObservers	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
bindObservers	View/IssueBrowser.cpp	/^            void bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
bindObservers	View/IssueBrowser.cpp	/^        void IssueBrowser::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
bindObservers	View/MapDocument.cpp	/^        void MapDocument::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
bindObservers	View/MapFrame.cpp	/^        void MapFrame::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
bindObservers	View/MapTreeView.cpp	/^            void bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
bindObservers	View/MapTreeView.cpp	/^        void MapTreeView::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
bindObservers	View/MapView.cpp	/^        void MapView::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
bindObservers	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
bindObservers	View/ModEditor.cpp	/^        void ModEditor::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
bindObservers	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
bindObservers	View/TextureBrowser.cpp	/^        void TextureBrowser::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
bindObservers	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
bindObservers	View/TexturingView.cpp	/^        void TexturingView::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
bindObservers	View/VertexTool.cpp	/^        void VertexTool::bindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
bindSliderEvents	View/PreferencePane.h	/^            void bindSliderEvents(wxSlider* slider, void (T::*function)(wxScrollEvent&), T* handler) {$/;"	f	language:C++	class:TrenchBroom::View::PreferencePane
bitsPerPixel	IO/ImageLoader.cpp	/^        size_t ImageLoader::bitsPerPixel() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
bitsPerPixel	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::bitsPerPixel() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
bottom	View/CellLayout.h	/^            float bottom() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
boundary	Model/BrushFace.cpp	/^        const Plane3& BrushFace::boundary() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
bounds	Assets/Bsp29Model.h	/^                BBox3f bounds;$/;"	m	language:C++	struct:TrenchBroom::Assets::Bsp29Model::SubModel
bounds	Assets/EntityDefinition.cpp	/^        const BBox3& PointEntityDefinition::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
bounds	Assets/EntityModel.cpp	/^        BBox3f EntityModel::bounds(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModel
bounds	Assets/Md2Model.cpp	/^        const BBox3f& Md2Model::Frame::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
bounds	Assets/MdlModel.cpp	/^        BBox3f MdlFrame::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrame
bounds	Model/Brush.cpp	/^        const BBox3& Brush::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
bounds	Model/BrushGeometry.h	/^            BBox3 bounds;$/;"	m	language:C++	class:TrenchBroom::Model::BrushGeometry
bounds	Model/Entity.cpp	/^        const BBox3& Entity::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
bounds	Model/Object.h	/^            static BBox3 bounds(const std::vector<T*>& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
bounds	Model/Selection.cpp	/^        BBox3 Selection::bounds() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
bounds	View/CellLayout.h	/^            const LayoutBounds bounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
bounds	View/CellLayout.h	/^            const LayoutBounds& bounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
bounds	View/EntityBrowserView.h	/^            BBox3f bounds;$/;"	m	language:C++	class:TrenchBroom::View::EntityCellData
boundsColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::boundsColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
boundsColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::boundsColor(const Model::Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
brush	Model/Issue.cpp	/^        Brush* BrushIssue::brush() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
brushEdge1	Model/FaceAdjacencyGraph.cpp	/^        const BrushEdge* FaceAdjacencyGraph::Edge::brushEdge1() const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
brushEdge2	Model/FaceAdjacencyGraph.cpp	/^        const BrushEdge* FaceAdjacencyGraph::Edge::brushEdge2() const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
brushIterator	Model/ModelUtils.h	/^        CastIterator<FilterIterator<Iter, MatchObjectByType>, Brush*> brushIterator(const Iter& cur, const Iter& end) {$/;"	f	language:C++	namespace:TrenchBroom::Model
brushIterator	Model/ModelUtils.h	/^        CastIterator<FilterIterator<Iter, MatchObjectByType>, Brush*> brushIterator(const Iter& end) {$/;"	f	language:C++	namespace:TrenchBroom::Model
brushes	Controller/ResizeBrushesCommand.cpp	/^        const Model::BrushList& ResizeBrushesCommand::brushes() const {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
brushes	Model/Entity.cpp	/^        const BrushList& Entity::brushes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
brushes	Model/Map.cpp	/^        const BrushList Map::brushes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
brushes	Model/Selection.cpp	/^            BrushList brushes;$/;"	m	language:C++	struct:TrenchBroom::Model::Collect	file:
brushes	View/VertexHandleManager.cpp	/^        const Model::BrushList& VertexHandleManager::brushes(const Vec3& handlePosition) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
buffer	Renderer/FontTexture.cpp	/^        const char* FontTexture::buffer() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
buildEdgeRenderer	View/MoveTextureHelper.cpp	/^        Renderer::EdgeRenderer MoveTextureHelper::buildEdgeRenderer(const Model::BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
buildEdgeRenderer	View/ResizeBrushesTool.cpp	/^        Renderer::EdgeRenderer ResizeBrushesTool::buildEdgeRenderer(const Model::BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
buildFrame	IO/Md2Parser.cpp	/^        Assets::Md2Model::Frame* Md2Parser::buildFrame(const Md2Frame& frame, const Md2MeshList& meshes) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
buildFrames	IO/Md2Parser.cpp	/^        Assets::Md2Model::FrameList Md2Parser::buildFrames(const Md2FrameList& frames, const Md2MeshList& meshes) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
buildLinks	Renderer/EntityLinkRenderer.cpp	/^        void EntityLinkRenderer::buildLinks(const Filter& filter, Model::EntitySet& visitedEntities, Model::Entity* entity, const bool isConnectedToSelected, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
buildMenus	View/Menu.cpp	/^        const Menu::MenuMap Menu::buildMenus() {$/;"	f	language:C++	class:TrenchBroom::View::Menu
buildModel	IO/Md2Parser.cpp	/^        Assets::EntityModel* Md2Parser::buildModel(const Md2SkinList& skins, const Md2FrameList& frames, const Md2MeshList& meshes) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
buildRenderer	Assets/EntityModel.cpp	/^        Renderer::MeshRenderer* EntityModel::buildRenderer(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModel
buildVertexArray	Renderer/MiniMapRenderer.cpp	/^        VertexArray MiniMapRenderer::buildVertexArray(const Model::BrushList& brushes) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
builtin	Model/EntityDefinitionFileSpec.cpp	/^        EntityDefinitionFileSpec EntityDefinitionFileSpec::builtin(const IO::Path& path, const IO::Path& fullPath) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
builtin	Model/EntityDefinitionFileSpec.cpp	/^        bool EntityDefinitionFileSpec::builtin() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
builtinTexturesSearchPath	Model/GameConfig.h	/^                IO::Path builtinTexturesSearchPath;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::TextureConfig
byteWidth	IO/ImageLoader.cpp	/^        size_t ImageLoader::byteWidth() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
byteWidth	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::byteWidth() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
camera	Renderer/RenderContext.cpp	/^        const Camera& RenderContext::camera() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
cameraDidChange	View/MapView.cpp	/^        void MapView::cameraDidChange(const Renderer::Camera* camera) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
cameraDidChange	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::cameraDidChange(const Renderer::Camera* camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
cameraDidChange	View/TexturingView.cpp	/^        void TexturingView::cameraDidChange(const Renderer::Camera* camera) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
cameraDidChangeNotifier	Renderer/Camera.h	/^            Notifier1<const Camera*> cameraDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
cameraRotationMatrix	Renderer/Compass.cpp	/^        Mat4x4f Compass::cameraRotationMatrix(const Camera& camera) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
canAddClipPoint	View/Clipper.cpp	/^        bool Clipper::canAddClipPoint(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
canAddPoint	View/Clipper.cpp	/^        bool Clipper::ClipHandlePoints::canAddPoint(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
canDeleteLastClipPoint	View/ClipTool.cpp	/^        bool ClipTool::canDeleteLastClipPoint() const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
canDeleteLastClipPoint	View/MapView.cpp	/^        bool MapView::canDeleteLastClipPoint() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
canExecute	Model/BrushAlgorithm.h	/^            bool canExecute() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
canLoadPointFile	View/MapDocument.cpp	/^        bool MapDocument::canLoadPointFile() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
canMoveBoundary	Model/Brush.cpp	/^        bool Brush::canMoveBoundary(const BBox3& worldBounds, const BrushFace& face, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canMoveEdges	Model/Brush.cpp	/^        bool Brush::canMoveEdges(const BBox3& worldBounds, const Edge3::List& edgePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canMoveEdges	Model/BrushGeometry.cpp	/^        bool BrushGeometry::canMoveEdges(const BBox3& worldBounds, const Edge3::List& edgePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
canMoveFaces	Model/Brush.cpp	/^        bool Brush::canMoveFaces(const BBox3& worldBounds, const Polygon3::List& facePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canMoveFaces	Model/BrushGeometry.cpp	/^        bool BrushGeometry::canMoveFaces(const BBox3& worldBounds, const Polygon3::List& facePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
canMoveVertices	Model/Brush.cpp	/^        bool Brush::canMoveVertices(const BBox3& worldBounds, const Vec3::List& vertexPositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canMoveVertices	Model/BrushGeometry.cpp	/^        bool BrushGeometry::canMoveVertices(const BBox3& worldBounds, const Vec3::List& vertexPositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
canPerformClip	View/ClipTool.cpp	/^        bool ClipTool::canPerformClip() const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
canPerformClip	View/MapView.cpp	/^        bool MapView::canPerformClip() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
canPerformDo	Controller/MoveBrushEdgesCommand.cpp	/^        bool MoveBrushEdgesCommand::canPerformDo(View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
canPerformDo	Controller/MoveBrushFacesCommand.cpp	/^        bool MoveBrushFacesCommand::canPerformDo(View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
canPerformDo	Controller/MoveBrushVerticesCommand.cpp	/^        bool MoveBrushVerticesCommand::canPerformDo(View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
canPerformDo	Controller/SplitBrushEdgesCommand.cpp	/^        bool SplitBrushEdgesCommand::canPerformDo(View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
canPerformDo	Controller/SplitBrushFacesCommand.cpp	/^        bool SplitBrushFacesCommand::canPerformDo(View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
canReparentBrushes	View/MapView.cpp	/^        bool MapView::canReparentBrushes(const Model::BrushList& brushes, const Model::Entity* newParent) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
canSetKey	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::canSetKey() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
canSnapVertices	View/MapView.cpp	/^        bool MapView::canSnapVertices() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
canSnapVertices	View/VertexTool.cpp	/^        bool VertexTool::canSnapVertices() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
canSplitEdge	Model/Brush.cpp	/^        bool Brush::canSplitEdge(const BBox3& worldBounds, const Edge3& edgePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canSplitEdge	Model/BrushGeometry.cpp	/^        bool BrushGeometry::canSplitEdge(const BBox3& worldBounds, const Edge3& edgePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
canSplitFace	Model/Brush.cpp	/^        bool Brush::canSplitFace(const BBox3& worldBounds, const Polygon3& facePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
canSplitFace	Model/BrushGeometry.cpp	/^        bool BrushGeometry::canSplitFace(const BBox3& worldBounds, const Polygon3& facePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
canToggleClipSide	View/ClipTool.cpp	/^        bool ClipTool::canToggleClipSide() const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
canToggleClipSide	View/MapView.cpp	/^        bool MapView::canToggleClipSide() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
canUpdateClipPoint	View/Clipper.cpp	/^        bool Clipper::canUpdateClipPoint(const size_t index, const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
canUpdatePoint	View/Clipper.cpp	/^        bool Clipper::ClipHandlePoints::canUpdatePoint(const size_t index, const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
cancel	Model/MoveBrushVertexAlgorithm.h	/^            MoveVertexResult cancel(BrushGeometry& geometry, BrushVertex* vertex) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
cancelDrag	View/TextureTool.cpp	/^        void TextureToolHelper::cancelDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
cancelDrag	View/ToolBox.cpp	/^        void ToolBox::cancelDrag() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
cancelMouseDrag	View/Tool.h	/^            void cancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
cancelMove	View/MoveToolHelper.cpp	/^        void MoveDelegate::cancelMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
cancelPlaneDrag	View/MoveToolHelper.cpp	/^        void MoveHelper::cancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
cancelPlaneDrag	View/RotateToolHelper.cpp	/^        void RotateHelper::cancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
cancelRotate	View/RotateToolHelper.cpp	/^        void RotateDelegate::cancelRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
capacity	Renderer/VboBlock.cpp	/^        size_t VboBlock::capacity() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
capitalize	StringUtils.cpp	/^    String capitalize(const String& str) {$/;"	f	language:C++	namespace:StringUtils
caption	View/KeyboardPreferencePane.cpp	/^        const String MenuKeyboardShortcutEntry::caption() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuKeyboardShortcutEntry
caption	View/KeyboardPreferencePane.cpp	/^        const String SimpleKeyboardShortcutEntry::caption() const {$/;"	f	language:C++	class:TrenchBroom::View::SimpleKeyboardShortcutEntry
caseInsensitiveEqual	StringUtils.cpp	/^    bool caseInsensitiveEqual(const String& str1, const String& str2) {$/;"	f	language:C++	namespace:StringUtils
caseSensitiveEqual	StringUtils.cpp	/^    bool caseSensitiveEqual(const String& str1, const String& str2) {$/;"	f	language:C++	namespace:StringUtils
cast	CollectionUtils.h	/^    std::vector<O> cast(const std::vector<I>& input) {$/;"	f	language:C++	namespace:VectorUtils
cast	Controller/Command.h	/^            static TrenchBroom::shared_ptr<T> cast(Ptr& command) {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
castIterator	CastIterator.h	/^        static CastIterator<Iterator, OutType> castIterator(const Iterator& iterator) {$/;"	f	language:C++	struct:TrenchBroom::MakeCastIterator
ceil	MathUtils.h	/^    T ceil(const T v) {$/;"	f	language:C++	namespace:Math
cellAt	View/CellLayout.h	/^            bool cellAt(const float x, const float y, const Cell** result) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
cellAt	View/CellLayout.h	/^            bool cellAt(const float x, const float y, const typename Group::Row::Cell** result) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
cellAt	View/CellLayout.h	/^            bool cellAt(const float x, const float y, const typename Row::Cell** result) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
cellBounds	View/CellLayout.h	/^            const LayoutBounds& cellBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
cellMargin	View/CellLayout.h	/^            float cellMargin() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
cells	View/CellLayout.h	/^            const CellList& cells() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
center	BBox.h	/^    const Vec<T,S> center() const {$/;"	f	language:C++	class:BBox
center	Edge.h	/^        Vec<T,S> center() const {$/;"	f	language:C++	struct:TrenchBroom::Edge
center	Model/BrushEdge.cpp	/^        Vec3 BrushEdge::center() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
center	Model/BrushFace.cpp	/^        Vec3 BrushFace::center() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
center	Polygon.h	/^        Vec<T,S> center() const {$/;"	f	language:C++	struct:TrenchBroom::Polygon
center	View/RotateToolHelper.h	/^            Vec3 center;$/;"	m	language:C++	struct:TrenchBroom::View::RotateInfo
centerCameraOnObjectsPosition	View/MapView.cpp	/^        Vec3f MapView::centerCameraOnObjectsPosition(const Model::EntityList& entities, const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
centerCameraOnSelection	View/MapView.cpp	/^        void MapView::centerCameraOnSelection() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
centerOfVertices	Model/BrushVertex.cpp	/^        Vec3 centerOfVertices(const BrushVertexList& vertices) {$/;"	f	language:C++	namespace:TrenchBroom::Model
chainHitFilter	HitFilter.h	/^    HitFilterChain chainHitFilter(const F1& f1, const F2& f2) {$/;"	f	language:C++	namespace:TrenchBroom
chainHitFilter	HitFilter.h	/^    HitFilterChain chainHitFilter(const F1& f1, const F2& f2, const F3& f3) {$/;"	f	language:C++	namespace:TrenchBroom
checkActive	Renderer/ShaderProgram.cpp	/^        bool ShaderProgram::checkActive() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
checkBlockChain	Renderer/Vbo.cpp	/^        bool Vbo::checkBlockChain() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
checkBounds	View/CreateBrushTool.cpp	/^        bool CreateBrushTool::checkBounds(const BBox3& bounds) const {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
checkDroppedEdges	Model/IntersectBrushGeometryWithFace.cpp	/^        bool IntersectBrushGeometryWithFace::checkDroppedEdges() {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
checkFaceGeometryLinks	Model/Brush.cpp	/^        bool Brush::checkFaceGeometryLinks() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
childBrushChanged	Model/Entity.cpp	/^        void Entity::childBrushChanged() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
childSelectionCount	Model/Object.cpp	/^        size_t Object::childSelectionCount() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
chop	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::chop(const size_t vertexIndex, BrushFaceGeometry*& newSide, BrushEdge*& newEdge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
chopFace	Model/MoveBrushVertexAlgorithm.h	/^            void chopFace(BrushGeometry& geometry, BrushFaceGeometry* side, const size_t vertexIndex) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
circle2D	Renderer/RenderUtils.cpp	/^        Vec2f::List circle2D(const float radius, const float startAngle, const float angleLength, const size_t segments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
circle2D	Renderer/RenderUtils.cpp	/^        Vec3f::List circle2D(const float radius, const Math::Axis::Type axis, const float startAngle, const float angleLength, const size_t segments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
circle3D	Renderer/RenderUtils.cpp	/^        VertsAndNormals circle3D(const float radius, const size_t segments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
clamp	MathUtils.h	/^    T clamp(const T v, const T minV = 0.0f, const T maxV = 1.0f) {$/;"	f	language:C++	namespace:Math
classname	Model/Entity.cpp	/^        const PropertyValue& Entity::classname(const PropertyValue& defaultClassname) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
cleanBackups	View/Autosaver.cpp	/^        void Autosaver::cleanBackups(IO::WritableDiskFileSystem& fs, IO::Path::List& backups, const IO::Path& mapBasename) const {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
cleanup	Model/IntersectBrushGeometryWithFace.cpp	/^        void IntersectBrushGeometryWithFace::cleanup() {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
cleanup	Model/MoveBrushVertexAlgorithm.h	/^            void cleanup(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
cleanup	Renderer/AttributeSpec.h	/^            static void cleanup(const size_t index) {$/;"	f	language:C++	class:TrenchBroom::Renderer::AttributeSpec
cleanup	Renderer/AttributeSpec.h	/^            static void cleanup(const size_t index) {}$/;"	f	language:C++	class:TrenchBroom::Renderer::AttributeSpec
cleanup	Renderer/VertexArray.h	/^            virtual void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
cleanup	Renderer/VertexSpec.h	/^            static void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec1
cleanup	Renderer/VertexSpec.h	/^            static void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec2
cleanup	Renderer/VertexSpec.h	/^            static void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec3
cleanup	Renderer/VertexSpec.h	/^            static void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec4
cleanup	Renderer/VertexSpec.h	/^            static void cleanup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec5
clear	Assets/EntityDefinitionManager.cpp	/^        void EntityDefinitionManager::clear() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
clear	Assets/EntityModelManager.cpp	/^        void EntityModelManager::clear() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
clear	Assets/TextureManager.cpp	/^        void TextureManager::clear() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
clear	Model/Selection.cpp	/^        void Selection::clear() {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
clear	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::clear() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
clear	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::clear() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
clear	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::clear() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
clear	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::clear() {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
clear	Renderer/TextRenderer.h	/^            void clear()  {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
clear	StringIndex.h	/^        void clear() {$/;"	f	language:C++	class:TrenchBroom::StringIndex
clear	View/CellLayout.h	/^            void clear() {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
clear	View/CellView.h	/^            void clear() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
clear	View/VertexHandleManager.cpp	/^        void VertexHandleManager::clear() {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
clearAndDelete	CollectionUtils.h	/^    void clearAndDelete(std::list<T*>& list) {$/;"	f	language:C++	namespace:ListUtils
clearAndDelete	CollectionUtils.h	/^    void clearAndDelete(std::map<K, V*>& map) {$/;"	f	language:C++	namespace:MapUtils
clearAndDelete	CollectionUtils.h	/^    void clearAndDelete(std::map<K, std::vector<V*> >& map) {$/;"	f	language:C++	namespace:MapUtils
clearAndDelete	CollectionUtils.h	/^    void clearAndDelete(std::vector<T*>& vec) {$/;"	f	language:C++	namespace:VectorUtils
clearAndDelete	View/ClipTool.cpp	/^        void ClipTool::clearAndDelete(Model::EntityBrushesMap& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
clearBackground	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::clearBackground(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
clearBackground	View/RenderView.cpp	/^        void RenderView::clearBackground() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
clearBindings	View/RecentDocuments.h	/^            void clearBindings() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
clearBuiltinTextureCollections	Assets/TextureManager.cpp	/^        void TextureManager::clearBuiltinTextureCollections() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
clearCache	Assets/EntityDefinitionManager.cpp	/^        void EntityDefinitionManager::clearCache() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
clearEntityModels	View/MapDocument.cpp	/^        void MapDocument::clearEntityModels() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
clearExternalTextureCollections	Assets/TextureManager.cpp	/^        void TextureManager::clearExternalTextureCollections() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
clearGenerators	Model/IssueManager.cpp	/^        void IssueManager::clearGenerators() {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
clearIssues	Model/IssueManager.cpp	/^        void IssueManager::clearIssues() {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
clearMap	View/MapDocument.cpp	/^        void MapDocument::clearMap() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
clearMenu	View/RecentDocuments.h	/^            void clearMenu(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
clearModificationCount	View/MapDocument.cpp	/^        void MapDocument::clearModificationCount() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
clearModifierKeys	View/InputState.cpp	/^        void InputState::clearModifierKeys() {$/;"	f	language:C++	class:TrenchBroom::View::InputState
clearModifierKeys	View/ToolBox.cpp	/^        bool ToolBox::clearModifierKeys() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
clearMouseButtons	View/InputState.cpp	/^        void InputState::clearMouseButtons() {$/;"	f	language:C++	class:TrenchBroom::View::InputState
clearRenderOnce	Renderer/TextRenderer.h	/^            void clearRenderOnce() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
clearState	Renderer/MapRenderer.cpp	/^        void MapRenderer::clearState() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
clearTintSelection	Renderer/RenderContext.cpp	/^        void RenderContext::clearTintSelection() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
clip	Model/Brush.cpp	/^        bool Brush::clip(const BBox3& worldBounds, BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
clip	View/Clipper.cpp	/^        ClipResult Clipper::clip(const Model::BrushList& brushes, const View::MapDocumentSPtr document) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
clipPoint	View/ClipTool.cpp	/^        Vec3 ClipTool::clipPoint(const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
clipPointPositions	View/Clipper.cpp	/^        Vec3::List Clipper::clipPointPositions() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
clipToolActive	View/MapView.cpp	/^        bool MapView::clipToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
clone	Model/Brush.cpp	/^        Brush* Brush::clone(const BBox3& worldBounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
clone	Model/BrushFace.cpp	/^        BrushFace* BrushFace::clone() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
clone	Model/Entity.cpp	/^        Entity* Entity::clone(const BBox3& worldBounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
clone	Model/Object.cpp	/^        Object* Object::clone(const BBox3& worldBounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
clone	Model/TexCoordSystem.cpp	/^        TexCoordSystem* TexCoordSystem::clone() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
closeAllFrames	View/FrameManager.cpp	/^        bool FrameManager::closeAllFrames() {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
closeAllFrames	View/FrameManager.cpp	/^        bool FrameManager::closeAllFrames(bool force) {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
closeGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::closeGroup() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
closeGroup	View/ControllerFacade.cpp	/^        void ControllerFacade::closeGroup() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
collectBackups	View/Autosaver.cpp	/^        IO::Path::List Autosaver::collectBackups(const IO::WritableDiskFileSystem& fs, const IO::Path& mapBasename) const {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
collectBrushes	Controller/ResizeBrushesCommand.cpp	/^        Model::BrushList ResizeBrushesCommand::collectBrushes(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
collectColors	View/SmartColorEditor.cpp	/^        SmartColorEditor::wxColorList SmartColorEditor::collectColors(const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
collectDefaultRows	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow::List EntityPropertyGridTable::RowManager::collectDefaultRows(const Model::EntityList& entities, const PropertyRow::List& propertyRows) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
collectDragFaces	View/ResizeBrushesTool.cpp	/^        Model::BrushFaceList ResizeBrushesTool::collectDragFaces(Model::BrushFace& dragFace) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
collectIfNumbered	StringIndex.h	/^            void collectIfNumbered(ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
collectPastedObjects	View/MapFrame.cpp	/^        void MapFrame::collectPastedObjects(const Model::ObjectList& objects, Model::ObjectParentList& pastedObjects, Model::ObjectList& selectableObjects) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
collectPropertyRows	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow::List EntityPropertyGridTable::RowManager::collectPropertyRows(const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
collectQuickFixes	View/IssueBrowser.cpp	/^        Model::QuickFix::List collectQuickFixes(const wxDataViewItemArray& selections) {$/;"	f	language:C++	namespace:TrenchBroom::View
collectStringVertices	View/EntityBrowserView.cpp	/^        EntityBrowserView::StringMap EntityBrowserView::collectStringVertices(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
collectStringVertices	View/TextureBrowserView.cpp	/^        TextureBrowserView::StringMap TextureBrowserView::collectStringVertices(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
collectValues	StringIndex.h	/^            void collectValues(ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
collections	Assets/TextureManager.cpp	/^        const TextureCollectionList& TextureManager::collections() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
color	Assets/EntityDefinition.cpp	/^        const Color& EntityDefinition::color() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
color	IO/EntityDefinitionClassInfo.cpp	/^        const Color& EntityDefinitionClassInfo::color() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
color	Renderer/EntityRenderer.cpp	/^            Color color;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BuildColoredSolidBoundsVertices	file:
color	Renderer/EntityRenderer.cpp	/^            Color color;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BuildColoredWireframeBoundsVertices	file:
color	View/ColorTableSelectedCommand.cpp	/^        const wxColor& ColorTableSelectedCommand::color() const {$/;"	f	language:C++	class:TrenchBroom::View::ColorTableSelectedCommand
color	View/EntityBrowserView.cpp	/^            const Color& color;$/;"	m	language:C++	struct:TrenchBroom::View::CollectBoundsVertices	file:
colorTableSelectedEventFunction	View/ColorTableSelectedCommand.h	/^typedef void (wxEvtHandler::*colorTableSelectedEventFunction)(TrenchBroom::View::ColorTableSelectedCommand&);$/;"	t	language:C++
column	IO/EntityDefinitionClassInfo.cpp	/^        size_t EntityDefinitionClassInfo::column() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
column	IO/Token.h	/^            size_t column() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
column	IO/Tokenizer.h	/^                size_t column;$/;"	m	language:C++	struct:TrenchBroom::IO::Tokenizer::State
column	IO/Tokenizer.h	/^            size_t column() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
combineBothDistances	View/TexturingViewHelper.cpp	/^        Vec2f combineBothDistances(const Vec2f& r1, const Vec2f& r2) {$/;"	f	language:C++	namespace:TrenchBroom::View
combineColorRanges	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorRange combineColorRanges(const SmartColorEditor::ColorRange oldRange, const SmartColorEditor::ColorRange newRange) {$/;"	f	language:C++	namespace:TrenchBroom::View
combineDeltas	View/Grid.cpp	/^        Vec3 Grid::combineDeltas(const Vec3& delta1, const Vec3& delta2) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
combineFlags	View/ViewUtils.cpp	/^        void combineFlags(const size_t numFlags, const int newFlagValue, int& setFlags, int& mixedFlags) {$/;"	f	language:C++	namespace:TrenchBroom::View
combineIndividualDistances	View/TexturingViewHelper.cpp	/^        Vec2f combineIndividualDistances(const Vec2f& r1, const Vec2f& r2) {$/;"	f	language:C++	namespace:TrenchBroom::View
commandDoFailedNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandDoFailedNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandDoFailedNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandDoFailedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commandDoFailedOrUndone	View/VertexTool.cpp	/^        void VertexTool::commandDoFailedOrUndone(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
commandDoNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandDoNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandDoNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandDoNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commandDoOrUndo	View/VertexTool.cpp	/^        void VertexTool::commandDoOrUndo(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
commandDone	View/MapFrame.cpp	/^        void MapFrame::commandDone(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
commandDoneNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandDoneNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandDoneNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandDoneNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commandDoneOrUndoFailed	View/VertexTool.cpp	/^        void VertexTool::commandDoneOrUndoFailed(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
commandDoneOrUndone	View/MapView.cpp	/^        void MapView::commandDoneOrUndone(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
commandId	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::commandId() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
commandUndoFailedNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandUndoFailedNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandUndoFailedNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandUndoFailedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commandUndoNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandUndoNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandUndoNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandUndoNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commandUndone	View/MapFrame.cpp	/^        void MapFrame::commandUndone(Controller::Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
commandUndoneNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr> commandUndoneNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
commandUndoneNotifier	View/ControllerFacade.h	/^            Notifier1<Controller::Command::Ptr>& commandUndoneNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
commitChanges	Assets/TextureManager.cpp	/^        void TextureManager::commitChanges() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
commitPendingRenderStateChanges	View/MapDocument.cpp	/^        void MapDocument::commitPendingRenderStateChanges() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
compare	IO/Path.cpp	/^        int Path::compare(const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
compare	Line.h	/^    int compare(const Line<T,S>& other, const T epsilon = static_cast<T>(0.0)) const {$/;"	f	language:C++	class:Line
compare	Plane.h	/^    int compare(const Plane<T,S>& other, const T epsilon = static_cast<T>(0.0)) const {$/;"	f	language:C++	class:Plane
compare	Renderer/FontDescriptor.cpp	/^        int FontDescriptor::compare(const FontDescriptor& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
compare	Vec.h	/^    int compare(const Vec<T,S>& right, const T epsilon = static_cast<T>(0.0)) const {$/;"	f	language:C++	class:Vec
compareBackupsByNo	View/Autosaver.cpp	/^        bool compareBackupsByNo(const IO::Path& lhs, const IO::Path& rhs) {$/;"	f	language:C++	namespace:TrenchBroom::View
compareFunctions	Notifier.h	/^            bool compareFunctions(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier0::CObserver
compareFunctions	Notifier.h	/^            bool compareFunctions(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier1::CObserver
compareFunctions	Notifier.h	/^            bool compareFunctions(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier2::CObserver
compareFunctions	Notifier.h	/^            bool compareFunctions(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier3::CObserver
compareValue	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::PropertyRow::compareValue(const String& i_value) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
compensate	Model/TexCoordSystem.cpp	/^        void TexCoordSystem::compensate(const Vec3& normal, const Vec3& center, const Mat4x4& transformation, BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v	language:Python
computeBounds	View/CreateBrushTool.cpp	/^        BBox3 CreateBrushTool::computeBounds(const Vec3& point1, const Vec3& point2) const {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
computeBounds	View/TexturingViewHelper.cpp	/^        BBox3 TexturingViewHelper::computeBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeCols	View/ColorTable.cpp	/^        int ColorTable::computeCols(const int width) const {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
computeDistance	View/TexturingViewHelper.cpp	/^        Vec2f computeDistance(const Vec3& point, const Vec2f& newHandlePosition) {$/;"	f	language:C++	namespace:TrenchBroom::View
computeDistance	View/TexturingViewHelper.cpp	/^        Vec2f computeDistance(const Vec3& position, const Assets::Texture* texture, const Vec2i& subDivisions) {$/;"	f	language:C++	namespace:TrenchBroom::View
computeError	Model/PlanePointFinder.cpp	/^            FloatType computeError(const size_t location) const {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
computeHLineVertices	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::computeHLineVertices(const Renderer::OrthographicCamera& camera, const FloatType y, Vec3& v1, Vec3& v2) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeHeight	View/ColorTable.cpp	/^        int ColorTable::computeHeight(const int rows) const {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
computePlaneFrequency	Model/PlanePointFinder.cpp	/^        FloatType computePlaneFrequency(const Plane3& plane) {$/;"	f	language:C++	namespace:TrenchBroom::Model
computeRows	View/ColorTable.cpp	/^        int ColorTable::computeRows(const int cols) const {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
computeScaleOriginHandleVertices	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::computeScaleOriginHandleVertices(const Renderer::OrthographicCamera& camera, Vec3& x1, Vec3& x2, Vec3& y1, Vec3& y2) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeScaleOriginHandles	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::computeScaleOriginHandles(Line3& xHandle, Line3& yHandle) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeTexPoint	View/TexturingViewHelper.cpp	/^        Vec3 TexturingViewHelper::computeTexPoint(const Ray3& ray) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeVLineVertices	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::computeVLineVertices(const Renderer::OrthographicCamera& camera, const FloatType x, Vec3& v1, Vec3& v2) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
computeZoomFactor	View/TexturingView.cpp	/^        float TexturingView::computeZoomFactor() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
concatenate	CollectionUtils.h	/^    std::vector<T> concatenate(const std::vector<T>& vec1, const std::vector<T>& vec2) {$/;"	f	language:C++	namespace:VectorUtils
concatenate	CollectionUtils.h	/^    void concatenate(const std::vector<T1>& vec1, const std::vector<T2>& vec2, std::vector<R>& result) {$/;"	f	language:C++	namespace:VectorUtils
cone3D	Renderer/RenderUtils.cpp	/^        VertsAndNormals cone3D(const float radius, const float length, const size_t segments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
confirmOrDiscardChanges	View/MapFrame.cpp	/^        bool MapFrame::confirmOrDiscardChanges() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
conjugate	Quat.h	/^    Quat<T>& conjugate() {$/;"	f	language:C++	class:Quat
conjugated	Quat.h	/^    const Quat conjugated() const {$/;"	f	language:C++	class:Quat
connects	Model/BrushEdge.cpp	/^        bool BrushEdge::connects(const BrushVertex* vertex1, BrushVertex* vertex2) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
console	View/InfoPanel.cpp	/^        Console* InfoPanel::console() {$/;"	f	language:C++	class:TrenchBroom::View::InfoPanel
containedBy	Model/Object.cpp	/^        bool Object::containedBy(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
containedBy	Model/Object.cpp	/^        bool Object::containedBy(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
containedBy	Model/Object.cpp	/^        bool Object::containedBy(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
contains	Allocator.h	/^        bool contains(const T* t) const {$/;"	f	language:C++	class:Allocator::Chunk
contains	BBox.h	/^    bool contains(const BBox<T,S>& bounds) const {$/;"	f	language:C++	class:BBox
contains	BBox.h	/^    bool contains(const Vec<T,S>& point) const {$/;"	f	language:C++	class:BBox
contains	CollectionUtils.h	/^    bool contains(const std::vector<T>& vec, const T& item) {$/;"	f	language:C++	namespace:VectorUtils
contains	CollectionUtils.h	/^    bool contains(const std::vector<T>& vec, const T& item, const Cmp& cmp) {$/;"	f	language:C++	namespace:VectorUtils
contains	ConfigTypes.cpp	/^    bool ConfigTable::contains(const String& key) const {$/;"	f	language:C++	class:TrenchBroom::ConfigTable
contains	Model/BrushEdge.cpp	/^        bool BrushEdge::contains(const Vec3& point, const FloatType maxDistance) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
contains	Model/Object.cpp	/^        bool Object::contains(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
contains	Model/Object.cpp	/^        bool Object::contains(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
contains	Model/Object.cpp	/^        bool Object::contains(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
contains	Model/Octree.h	/^            bool contains(const BBox<F,3>& bounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
containsCaseInsensitive	StringUtils.cpp	/^    bool containsCaseInsensitive(const String& haystack, const String& needle) {$/;"	f	language:C++	namespace:StringUtils
containsCaseSensitive	StringUtils.cpp	/^    bool containsCaseSensitive(const String& haystack, const String& needle) {$/;"	f	language:C++	namespace:StringUtils
containsDroppedEdge	Model/BrushFaceGeometry.cpp	/^        bool BrushFaceGeometry::containsDroppedEdge() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
containsLine	Model/Object.cpp	/^        bool Object::containsLine(const size_t line) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
containsObject	Model/Octree.h	/^            bool containsObject(const BBox<F,3>& bounds, T object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Octree
containsObject	Model/Octree.h	/^            bool containsObject(const BBox<F,3>& bounds, T object) const {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
containsPoint	Model/Brush.cpp	/^        bool Brush::containsPoint(const Vec3& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
containsPoint	View/CellLayout.h	/^            bool containsPoint(const float x, const float y) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
containsPtr	CollectionUtils.h	/^    bool containsPtr(const std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
contentBounds	View/CellLayout.h	/^            const LayoutBounds& contentBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
contentFlags	Model/Game.cpp	/^        const GameConfig::FlagsConfig& Game::contentFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
contentFlags	Model/GameConfig.h	/^                FlagsConfig contentFlags;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FaceAttribsConfig
contents	IO/PakFileSystem.cpp	/^        Path::List PakFileSystem::Directory::contents() const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
context	View/GLContextHolder.cpp	/^        wxGLContext* GLContextHolder::context() const {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
context	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::context() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
contextHolder	View/RenderView.cpp	/^        const GLContextHolder::Ptr RenderView::contextHolder() const {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
contextName	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::contextName(const int context) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
controller	View/SmartPropertyEditor.cpp	/^        View::ControllerSPtr SmartPropertyEditor::controller() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
controller	View/Tool.h	/^            ControllerSPtr controller() {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
controller	View/Tool.h	/^            const ControllerSPtr controller() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
convertToFaceSelection	Model/Selection.cpp	/^        void Selection::convertToFaceSelection(SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
coordinateSystem	Renderer/RenderUtils.cpp	/^        VertexSpecs::P3C4::Vertex::List coordinateSystem(const BBox3f& bounds, const Color& x, const Color& y, const Color& z) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
coordinateSystemMatrix	Mat.h	/^const Mat<T,4,4> coordinateSystemMatrix(const Vec<T,3>& x, const Vec<T,3>& y, const Vec<T,3>& z, const Vec<T,3>& o) {$/;"	f	language:C++
copy	Model/BrushGeometry.cpp	/^        void BrushGeometry::copy(const BrushGeometry& original) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex1<A1> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex1<A1> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex2<A1, A2> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex2<A1, A2> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex3<A1, A2, A3> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex3<A1, A2, A3> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex4<A1, A2, A3, A4> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex4<A1, A2, A3, A4> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
copy	Renderer/VertexArray.h	/^            static VertexArray copy(const GLenum primType, const std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
correct	MathUtils.h	/^    T correct(const T v, const size_t decimals = 0, const T epsilon = Constants<T>::CorrectEpsilon) {$/;"	f	language:C++	namespace:Math
correct	Vec.h	/^    Vec<T,S>& correct(const size_t decimals = 0, const T epsilon = Math::Constants<T>::CorrectEpsilon) {$/;"	f	language:C++	class:Vec
correctPoints	Model/BrushFace.cpp	/^        void BrushFace::correctPoints() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
corrected	Vec.h	/^    const Vec<T,S> corrected(const size_t decimals = 0, const T epsilon = Math::Constants<T>::CorrectEpsilon) const {$/;"	f	language:C++	class:Vec
count	ConfigTypes.cpp	/^    size_t ConfigList::count() const {$/;"	f	language:C++	class:TrenchBroom::ConfigList
count	ConfigTypes.cpp	/^    size_t ConfigTable::count() const {$/;"	f	language:C++	class:TrenchBroom::ConfigTable
count	Renderer/OutlineTracer.h	/^                size_t count;$/;"	m	language:C++	struct:TrenchBroom::Renderer::OutlineTracer::Position
countPossibleAxes	View/MoveTextureHelper.cpp	/^        size_t MoveTextureHelper::countPossibleAxes(const Vec3& normal) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
countPossibleAxes	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::countPossibleAxes(const Vec3& normal, size_t (&counts)[3]) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
counts	Renderer/IndexedVertexList.h	/^            CountArray& counts() {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
createAndStoreCommandGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::createAndStoreCommandGroup() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
createAppPanel	View/WelcomeFrame.cpp	/^        wxPanel* WelcomeFrame::createAppPanel(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
createBackupFileSystem	View/Autosaver.cpp	/^        IO::WritableDiskFileSystem Autosaver::createBackupFileSystem(const IO::Path& mapPath) const {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
createBindings	View/RecentDocuments.h	/^            void createBindings() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
createBrush	IO/QuakeMapParser.cpp	/^        Model::Brush* QuakeMapParser::createBrush(const BBox3& worldBounds, const Model::BrushFaceList faces, const ExtraProperties& extraProperties, const size_t firstLine, const size_t lineCount) const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
createBrush	Model/Map.cpp	/^        Brush* Map::createBrush(const BBox3& worldBounds, const BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
createBrush	Model/ModelFactory.cpp	/^        Brush* ModelFactory::createBrush(const BBox3& worldBounds, const BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
createBrush	View/CreateBrushTool.cpp	/^        Model::Brush* CreateBrushTool::createBrush(const BBox3& bounds) const {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
createBrushEntity	View/MapView.cpp	/^        void MapView::createBrushEntity(const Assets::BrushEntityDefinition& definition) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
createBrushFromBounds	Model/ModelUtils.cpp	/^        Brush* createBrushFromBounds(const Map& map, const BBox3& worldBounds, const BBox3& brushBounds, const String& textureName) {$/;"	f	language:C++	namespace:TrenchBroom::Model
createDefaultFace	Model/ModelFactory.cpp	/^        BrushFace* ModelFactory::createDefaultFace(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
createDirectory	IO/FileSystem.cpp	/^        void WritableFileSystem::createDirectory(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableFileSystem
createEditors	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::createEditors(View::MapDocumentWPtr document, View::ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
createEntity	Model/Map.cpp	/^        Entity* Map::createEntity() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
createEntity	Model/ModelFactory.cpp	/^        Entity* ModelFactory::createEntity() const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
createEntityBrowser	View/EntityInspector.cpp	/^        wxWindow* EntityInspector::createEntityBrowser(wxWindow* parent, GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
createEntityDefinitionFileChooser	View/EntityInspector.cpp	/^        wxWindow* EntityInspector::createEntityDefinitionFileChooser(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
createFace	Model/Map.cpp	/^        BrushFace* Map::createFace(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
createFace	Model/ModelFactory.cpp	/^        BrushFace* ModelFactory::createFace(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
createFaceAttribsEditor	View/FaceInspector.cpp	/^        wxWindow* FaceInspector::createFaceAttribsEditor(wxWindow* parent, GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
createFrame	View/FrameManager.cpp	/^        MapFrame* FrameManager::createFrame(MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
createGame	Model/GameFactory.cpp	/^        GamePtr GameFactory::createGame(const String& gameName) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
createGameList	View/ChooseGameDialog.cpp	/^        wxPanel* ChooseGameDialog::createGameList(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
createGamePreferences	View/GamesPreferencePane.cpp	/^        wxWindow* GamesPreferencePane::createGamePreferences() {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
createGui	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::createGui(const wxString& title, const wxString& infoText) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
createGui	View/EntityBrowser.cpp	/^        void EntityBrowser::createGui(GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
createGui	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
createGui	View/EntityInspector.cpp	/^        void EntityInspector::createGui(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
createGui	View/EntityPropertyEditor.cpp	/^        void EntityPropertyEditor::createGui(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyEditor
createGui	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::createGui(MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
createGui	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::createGui(GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
createGui	View/FaceInspector.cpp	/^        void FaceInspector::createGui(GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
createGui	View/GamesPreferencePane.cpp	/^        void GamesPreferencePane::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
createGui	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
createGui	View/MapFrame.cpp	/^        void MapFrame::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
createGui	View/MapInspector.cpp	/^        void MapInspector::createGui(GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, ControllerWPtr controller, Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
createGui	View/MiniMap.cpp	/^        void MiniMap::createGui(GLContextHolder::Ptr sharedContext, View::MapDocumentWPtr document, Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMap
createGui	View/ModEditor.cpp	/^        void ModEditor::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
createGui	View/PreferenceDialog.cpp	/^        void PreferenceDialog::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
createGui	View/TextureBrowser.cpp	/^        void TextureBrowser::createGui(GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
createGui	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
createGui	View/TexturingEditor.cpp	/^        void TexturingEditor::createGui(GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingEditor
createGui	View/WelcomeFrame.cpp	/^        void WelcomeFrame::createGui() {$/;"	f	language:C++	class:TrenchBroom::View::WelcomeFrame
createInfoPanel	View/ChooseGameDialog.cpp	/^        wxPanel* ChooseGameDialog::createInfoPanel(wxWindow* parent, const wxString& title, const wxString& infoText) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
createMapTree	View/MapInspector.cpp	/^        wxWindow* MapInspector::createMapTree(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
createMenu	View/Menu.cpp	/^        wxMenu* Menu::createMenu(const Menu& menu, const MultiMenuSelector& selector, const bool showModifiers) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
createMenu	View/Menu.cpp	/^        wxMenu* Menu::createMenu(const String& name, const MultiMenuSelector& selector, const bool showModifiers) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
createMenuBar	View/MapFrame.cpp	/^        void MapFrame::createMenuBar(const bool showModifiers) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
createMenuBar	View/Menu.cpp	/^        wxMenuBar* Menu::createMenuBar(const MultiMenuSelector& selector, const bool showModifiers) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
createMenuItems	View/RecentDocuments.h	/^            void createMenuItems(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
createMenuShortcutBox	View/KeyboardPreferencePane.cpp	/^        wxStaticBox* KeyboardPreferencePane::createMenuShortcutBox() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
createMiniMap	View/MapInspector.cpp	/^        wxWindow* MapInspector::createMiniMap(wxWindow* parent, GLContextHolder::Ptr sharedContext, MapDocumentWPtr document, Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
createModEditor	View/MapInspector.cpp	/^        wxWindow* MapInspector::createModEditor(wxWindow* parent, MapDocumentWPtr document, ControllerWPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::MapInspector
createMousePreferences	View/GeneralPreferencePane.cpp	/^        wxWindow* GeneralPreferencePane::createMousePreferences() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
createNewSide	Model/IntersectBrushGeometryWithFace.cpp	/^        void IntersectBrushGeometryWithFace::createNewSide() {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
createOrReuseFrame	View/FrameManager.cpp	/^        MapFrame* FrameManager::createOrReuseFrame() {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
createParallel	Model/BrushFace.cpp	/^        BrushFace* BrushFace::createParallel(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
createParaxial	Model/BrushFace.cpp	/^        BrushFace* BrushFace::createParaxial(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
createPointEntity	View/MapView.cpp	/^        void MapView::createPointEntity(const Assets::PointEntityDefinition& definition) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
createProgram	Renderer/ShaderManager.cpp	/^        ShaderProgram* ShaderManager::createProgram(const ShaderConfig& config) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderManager
createPropertyEditor	View/EntityInspector.cpp	/^        wxWindow* EntityInspector::createPropertyEditor(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::EntityInspector
createSuccessor	Renderer/VboBlock.cpp	/^        VboBlock* VboBlock::createSuccessor(const size_t capacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
createTexture	Assets/Texture.cpp	/^        GLuint Texture::createTexture() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
createTextureBrowser	View/FaceInspector.cpp	/^        wxWindow* FaceInspector::createTextureBrowser(wxWindow* parent, GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
createTextureCollectionEditor	View/FaceInspector.cpp	/^        wxWindow* FaceInspector::createTextureCollectionEditor(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
createTexturePanel	View/FaceInspector.cpp	/^        wxWindow* FaceInspector::createTexturePanel(wxWindow* parent, GLContextHolder::Ptr sharedContext) {$/;"	f	language:C++	class:TrenchBroom::View::FaceInspector
createTools	View/MapView.cpp	/^        void MapView::createTools() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
createTools	View/TexturingView.cpp	/^        void TexturingView::createTools() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
createValveFace	Model/ModelFactory.cpp	/^        BrushFace* ModelFactory::createValveFace(const Vec3& point0, const Vec3& point1, const Vec3& point2, const String& textureName) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFactory
createViewPreferences	View/GeneralPreferencePane.cpp	/^        wxWindow* GeneralPreferencePane::createViewPreferences() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
createVisual	View/SmartPropertyEditor.cpp	/^        wxWindow* SmartPropertyEditor::createVisual(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
cross	Vec.h	/^Vec<T,3>& cross(Vec<T,3>& left, const Vec<T,3>& right) {$/;"	f	language:C++
crossed	Vec.h	/^const Vec<T,3> crossed(const Vec<T,3>& left, const Vec<T,3>& right) {$/;"	f	language:C++
cur	IO/Tokenizer.h	/^                const char* cur;$/;"	m	language:C++	struct:TrenchBroom::IO::Tokenizer::State
curChar	IO/Tokenizer.h	/^            char curChar() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
curPos	IO/Tokenizer.h	/^            const char* curPos() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
currentDirection	Model/PointFile.cpp	/^        const Vec3f PointFile::currentDirection() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
currentPoint	Model/PointFile.cpp	/^        const Vec3f& PointFile::currentPoint() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
currentTexture	View/MapDocument.cpp	/^        Assets::Texture* MapDocument::currentTexture() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
currentTextureName	View/MapDocument.cpp	/^        String MapDocument::currentTextureName() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
cylinder3D	Renderer/RenderUtils.cpp	/^        VertsAndNormals cylinder3D(const float radius, const float length, const size_t segments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
data	IO/Token.h	/^            const String data() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
database	.ycm_extra_conf.py	/^  database = None$/;"	v	language:Python
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v	language:Python
deactivate	Assets/Texture.cpp	/^        void Texture::deactivate() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
deactivate	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::deactivate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
deactivate	Renderer/TextureFont.cpp	/^        void TextureFont::deactivate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
deactivate	Renderer/Vbo.cpp	/^        void Vbo::deactivate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
deactivate	View/SmartPropertyEditor.cpp	/^        void SmartPropertyEditor::deactivate() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
deactivate	View/Tool.h	/^            void deactivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
deactivateAllTools	View/ToolBox.cpp	/^        void ToolBox::deactivateAllTools() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
deactivateEditor	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::deactivateEditor() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
deactivateTexture	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::deactivateTexture() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
deactivateVbo	Assets/EntityModelManager.cpp	/^        void EntityModelManager::deactivateVbo() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
deallocate	Allocator.h	/^        void deallocate(T* t) {$/;"	f	language:C++	class:Allocator::Chunk
debug	Logger.cpp	/^    void Logger::debug(const String& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
debug	Logger.cpp	/^    void Logger::debug(const char* format, ...) {$/;"	f	language:C++	class:TrenchBroom::Logger
debug	Logger.cpp	/^    void Logger::debug(const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
decChildSelectionCount	Model/Object.cpp	/^        void Object::decChildSelectionCount() {$/;"	f	language:C++	class:TrenchBroom::Model::Object
decModificationCount	View/MapDocument.cpp	/^        void MapDocument::decModificationCount() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
decSize	View/Grid.cpp	/^        void Grid::decSize() {$/;"	f	language:C++	class:TrenchBroom::View::Grid
decUsageCount	Assets/EntityDefinition.cpp	/^        void EntityDefinition::decUsageCount() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
decUsageCount	Assets/Texture.cpp	/^        void Texture::decUsageCount() {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
defFilePaths	Model/GameConfig.h	/^                IO::Path::List defFilePaths;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::EntityConfig
defaultColor	Model/GameConfig.h	/^                Color defaultColor;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::EntityConfig
defaultColor	Renderer/FaceRenderer.cpp	/^            const Color& defaultColor;$/;"	m	language:C++	struct:TrenchBroom::Renderer::SetShaderParms	file:
defaultEditor	View/SmartPropertyEditorManager.cpp	/^        SmartPropertyEditorManager::EditorPtr SmartPropertyEditorManager::defaultEditor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
defaultEntityDefinitionFile	Model/GameImpl.cpp	/^        EntityDefinitionFileSpec GameImpl::defaultEntityDefinitionFile() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
defaultFont	View/MapView.cpp	/^        Renderer::TextureFont& MapView::defaultFont(Renderer::FontManager& fontManager) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
defaultHiddenGenerators	Model/IssueManager.cpp	/^        int IssueManager::defaultHiddenGenerators() const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
defaultModel	Assets/EntityDefinition.cpp	/^        ModelSpecification PointEntityDefinition::defaultModel() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
defaultModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification ModelDefinition::defaultModelSpecification() const {$/;"	f	language:C++	class:TrenchBroom::Assets::ModelDefinition
defaultPoint	Renderer/Camera.cpp	/^        Vec3f Camera::defaultPoint() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
defaultPoint	Renderer/Camera.cpp	/^        Vec3f Camera::defaultPoint(const Ray3f& ray) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
defaultPoint	Renderer/Camera.cpp	/^        Vec3f Camera::defaultPoint(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
defaultRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow& EntityPropertyGridTable::RowManager::defaultRow(const size_t rowIndex) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
defaultRow	View/EntityPropertyGridTable.cpp	/^        const EntityPropertyGridTable::DefaultRow& EntityPropertyGridTable::RowManager::defaultRow(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
defaultValue	Assets/PropertyDefinition.cpp	/^        String PropertyDefinition::defaultValue(const PropertyDefinition& definition) {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
defaultValue	Assets/PropertyDefinition.cpp	/^        int FlagsPropertyDefinition::defaultValue() const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
defaultValue	Assets/PropertyDefinition.h	/^            const T& defaultValue() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
definition	Assets/EntityDefinitionManager.cpp	/^        EntityDefinition* EntityDefinitionManager::definition(const Model::Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
definition	Assets/EntityDefinitionManager.cpp	/^        EntityDefinition* EntityDefinitionManager::definition(const Model::PropertyValue& classname) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
definition	Model/Entity.cpp	/^        Assets::EntityDefinition* Entity::definition() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
definitionAffected	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::definitionAffected() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
definitions	Assets/EntityDefinitionManager.cpp	/^        EntityDefinitionList EntityDefinitionManager::definitions(const EntityDefinition::Type type, const SortOrder order) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
degrees	MathUtils.h	/^    T degrees(const T r) {$/;"	f	language:C++	namespace:Math
deleteAll	CollectionUtils.h	/^    void deleteAll(const std::vector<T*>& vec) {$/;"	f	language:C++	namespace:VectorUtils
deleteAllPoints	View/Clipper.cpp	/^        void Clipper::ClipHandlePoints::deleteAllPoints() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
deleteDegenerateTriangle	Model/MoveBrushVertexAlgorithm.h	/^            void deleteDegenerateTriangle(BrushGeometry& geometry, BrushFaceGeometry* side, BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
deleteExtension	IO/Path.cpp	/^        Path Path::deleteExtension() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
deleteFile	IO/FileSystem.cpp	/^        void WritableFileSystem::deleteFile(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableFileSystem
deleteFirstComponent	IO/Path.cpp	/^        Path Path::deleteFirstComponent() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
deleteLastClipPoint	View/ClipTool.cpp	/^        void ClipTool::deleteLastClipPoint() {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
deleteLastClipPoint	View/Clipper.cpp	/^        void Clipper::deleteLastClipPoint() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
deleteLastClipPoint	View/MapView.cpp	/^        void MapView::deleteLastClipPoint() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
deleteLastComponent	IO/Path.cpp	/^        Path Path::deleteLastComponent() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
deleteLastPoint	View/Clipper.cpp	/^        void Clipper::ClipHandlePoints::deleteLastPoint() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
deleteRows	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::RowManager::deleteRows(const size_t rowIndex, const size_t count) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
deleteTools	View/MapView.cpp	/^        void MapView::deleteTools() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
depthBits	View/MapView.cpp	/^        int MapView::depthBits() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
description	Assets/EntityDefinition.cpp	/^        const String& EntityDefinition::description() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
description	Assets/PropertyDefinition.cpp	/^        const String& ChoicePropertyOption::description() const {$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
description	Assets/PropertyDefinition.cpp	/^        const String& FlagsPropertyOption::description() const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
description	Assets/PropertyDefinition.cpp	/^        const String& PropertyDefinition::description() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
description	IO/EntityDefinitionClassInfo.cpp	/^        const String& EntityDefinitionClassInfo::description() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
description	Model/EmptyBrushEntityIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssue
description	Model/EmptyBrushEntityIssueGenerator.cpp	/^        const String& EmptyBrushEntityIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssueGenerator
description	Model/EntityLinkIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssue
description	Model/EntityLinkIssueGenerator.cpp	/^        const String& EntityLinkIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssueGenerator
description	Model/FloatPointsIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssue
description	Model/FloatPointsIssueGenerator.cpp	/^        const String& FloatPointsIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssueGenerator
description	Model/FloatVerticesIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssue
description	Model/FloatVerticesIssueGenerator.cpp	/^        const String& FloatVerticesIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssueGenerator
description	Model/GameConfig.h	/^                String description;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FlagConfig
description	Model/MissingEntityClassnameIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssue
description	Model/MissingEntityClassnameIssueGenerator.cpp	/^        const String& MissingEntityClassnameIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssueGenerator
description	Model/MissingEntityDefinitionIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssue
description	Model/MissingEntityDefinitionIssueGenerator.cpp	/^        const String& MissingEntityDefinitionIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssueGenerator
description	Model/MixedBrushContentsIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssue
description	Model/MixedBrushContentsIssueGenerator.cpp	/^        const String& MixedBrushContentsIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssueGenerator
description	Model/PointEntityWithBrushesIssueGenerator.cpp	/^            String description() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssue
description	Model/PointEntityWithBrushesIssueGenerator.cpp	/^        const String& PointEntityWithBrushesIssueGenerator::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssueGenerator
description	Model/QuickFix.cpp	/^        const String& QuickFix::description() const {$/;"	f	language:C++	class:TrenchBroom::Model::QuickFix
deselect	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::deselect(View::MapDocumentWPtr document, const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
deselect	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::deselect(View::MapDocumentWPtr document, const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
deselect	Model/Brush.cpp	/^        void Brush::deselect() {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
deselect	Model/BrushFace.cpp	/^        void BrushFace::deselect() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
deselect	Model/Object.cpp	/^        void Object::deselect() {$/;"	f	language:C++	class:TrenchBroom::Model::Object
deselectAll	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::deselectAll(View::MapDocumentWPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
deselectAll	Model/Selection.cpp	/^        SelectionResult Selection::deselectAll() {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
deselectAll	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectAll() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectAll	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::deselectAll() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
deselectAllAndSelectFace	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectAllAndSelectFace(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectAllAndSelectObject	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectAllAndSelectObject(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectAllAndSelectObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectAllAndSelectObjects(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectAllEdgeHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectAllEdgeHandles() {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectAllFaceHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectAllFaceHandles() {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectAllFaces	Model/Selection.cpp	/^        void Selection::deselectAllFaces(SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
deselectAllHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectAllHandles() {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectAllObjects	Model/Selection.cpp	/^        void Selection::deselectAllObjects(SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
deselectAllVertexHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectAllVertexHandles() {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectEdgeHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectEdgeHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectFace	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectFace(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectFaceHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectFaceHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectFaces	Model/Selection.cpp	/^        SelectionResult Selection::deselectFaces(const BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
deselectFaces	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::deselectFaces(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
deselectObject	View/ControllerFacade.cpp	/^        bool ControllerFacade::deselectObject(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
deselectObjects	Model/Selection.cpp	/^        SelectionResult Selection::deselectObjects(const ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
deselectObjects	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::deselectObjects(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
deselectVertexHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::deselectVertexHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
deselectedFaces	Model/SelectionResult.cpp	/^        const BrushFaceSet& SelectionResult::deselectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
deselectedObjects	Model/SelectionResult.cpp	/^        const ObjectSet& SelectionResult::deselectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
destroyTools	View/TexturingView.cpp	/^        void TexturingView::destroyTools() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
destroyVisual	View/SmartPropertyEditor.cpp	/^        void SmartPropertyEditor::destroyVisual() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
detach	Renderer/Shader.cpp	/^        void Shader::detach(const GLuint programId) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Shader
detach	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::detach(Shader& shader) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
detachFaces	Model/Brush.cpp	/^        void Brush::detachFaces(const BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
detectColorRange	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorRange detectColorRange(const Model::Entity& entity, const Model::PropertyKey& key) {$/;"	f	language:C++	namespace:TrenchBroom::View
detectColorRange	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorRange detectColorRange(const Model::EntityList& entities, const Model::PropertyKey& key) {$/;"	f	language:C++	namespace:TrenchBroom::View
detectEntryType	IO/ConfigParser.cpp	/^        ConfigEntry::Type ConfigParser::detectEntryType() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
detectFormat	IO/QuakeMapParser.cpp	/^        Model::MapFormat::Type QuakeMapParser::detectFormat() {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
detectGame	Model/GameFactory.cpp	/^        GamePtr GameFactory::detectGame(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
detectRange	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorRange SmartColorEditor::Color::detectRange(const String& str) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color
detectRange	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorRange SmartColorEditor::Color::detectRange(const StringList& components) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color
difference	CollectionUtils.h	/^    std::vector<T> difference(const std::vector<T>& vec1, const std::vector<T>& vec2) {$/;"	f	language:C++	namespace:VectorUtils
difference_type	CastIterator.h	/^        typedef typename Iterator::difference_type difference_type;$/;"	t	language:C++	class:TrenchBroom::CastIterator
difference_type	FilterIterator.h	/^        typedef typename Iterator::difference_type difference_type;$/;"	t	language:C++	class:TrenchBroom::FilterIterator
difference_type	NestedHierarchyIterator.h	/^        typedef typename InnerIterator::difference_type difference_type;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
difference_type	NestedIterator.h	/^        typedef typename InnerIterator::difference_type difference_type;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
direction	Edge.h	/^        Vec<T,S> direction() const {$/;"	f	language:C++	struct:TrenchBroom::Edge
direction	Line.h	/^    Vec<T,S> direction;$/;"	m	language:C++	class:Line
direction	Ray.h	/^    Vec<T,S> direction;$/;"	m	language:C++	class:Ray
direction	Renderer/Camera.cpp	/^        const Vec3f& Camera::direction() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
directoryExists	IO/DiskFileSystem.cpp	/^            bool directoryExists(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
directoryExists	IO/FileSystem.cpp	/^        bool FileSystem::directoryExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
directoryExists	IO/PakFileSystem.cpp	/^        bool PakFileSystem::Directory::directoryExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
disable	View/ToolBox.cpp	/^        void ToolBox::disable() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
disabledText	View/ViewConstants.cpp	/^            const wxColour& disabledText() {$/;"	f	language:C++	namespace:TrenchBroom::View::Colors
disambiguateNormal	View/MoveTextureHelper.cpp	/^        Vec3 MoveTextureHelper::disambiguateNormal(const Model::BrushFace* face, const Vec3::List& normals) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
discardChanges	PreferenceManager.cpp	/^    PreferenceBase::Set PreferenceManager::discardChanges() {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
discardUntil	IO/Tokenizer.h	/^            void discardUntil(const String& delims) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
discardWhile	IO/Tokenizer.h	/^            void discardWhile(const String& allow) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
dismissClick	View/VertexTool.cpp	/^        bool VertexTool::dismissClick(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
distance	Hit.cpp	/^    FloatType Hit::distance() const {$/;"	f	language:C++	class:TrenchBroom::Hit
distance	Plane.h	/^    T distance;$/;"	m	language:C++	class:Plane
distance	Ray.h	/^        T distance;$/;"	m	language:C++	struct:Ray::LineDistance
distance	Ray.h	/^        T distance;$/;"	m	language:C++	struct:Ray::PointDistance
distance	View/RotateObjectsHandle.cpp	/^        FloatType RotateObjectsHandle::Hit::distance() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
distanceTo	Renderer/Camera.cpp	/^        float Camera::distanceTo(const Vec3f& point) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
distanceTo	Vec.h	/^    T distanceTo(const Vec<T,S>& other) const {$/;"	f	language:C++	class:Vec
distanceToLine	Ray.h	/^    const LineDistance distanceToLine(const Vec<T,S>& lineAnchor, const Vec<T,S>& lineDir) const {$/;"	f	language:C++	class:Ray
distanceToLineSquared	Ray.h	/^    const LineDistance distanceToLineSquared(const Vec<T,S>& lineAnchor, const Vec<T,S>& lineDir) const {$/;"	f	language:C++	class:Ray
distanceToPoint	Ray.h	/^    const PointDistance distanceToPoint(const Vec<T,S>& point) const {$/;"	f	language:C++	class:Ray
distanceToSegment	Ray.h	/^    const LineDistance distanceToSegment(const Vec<T,S>& start, const Vec<T,S>& end) const {$/;"	f	language:C++	class:Ray
dndData	View/CellView.h	/^            virtual wxString dndData(const typename Layout::Group::Row::Cell& cell) { assert(false); return ""; }$/;"	f	language:C++	class:TrenchBroom::View::CellView
dndData	View/EntityBrowserView.cpp	/^        wxString EntityBrowserView::dndData(const Layout::Group::Row::Cell& cell) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
dndEnabled	View/CellView.h	/^            virtual bool dndEnabled() { return false; }$/;"	f	language:C++	class:TrenchBroom::View::CellView
dndEnabled	View/EntityBrowserView.cpp	/^        bool EntityBrowserView::dndEnabled() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
dndImage	View/CellView.h	/^            virtual wxImage dndImage(const typename Layout::Group::Row::Cell& cell) { assert(false); return wxImage(); }$/;"	f	language:C++	class:TrenchBroom::View::CellView
doActivate	View/ClipTool.cpp	/^        bool ClipTool::doActivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doActivate	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doActivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doActivate	View/TextureTool.cpp	/^        bool TextureTool::doActivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doActivate	View/Tool.cpp	/^        bool NoActivationPolicy::doActivate(const InputState& inputState) { return true; }$/;"	f	language:C++	class:TrenchBroom::View::NoActivationPolicy
doActivate	View/VertexTool.cpp	/^        bool VertexTool::doActivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doAddBrushes	Controller/MoveBrushEdgesCommand.cpp	/^        void MoveBrushEdgesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doAddBrushes	Controller/MoveBrushFacesCommand.cpp	/^        void MoveBrushFacesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doAddBrushes	Controller/MoveBrushVerticesCommand.cpp	/^        void MoveBrushVerticesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doAddBrushes	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
doAddBrushes	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doAddBrushes	Controller/SplitBrushEdgesCommand.cpp	/^        void SplitBrushEdgesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doAddBrushes	Controller/SplitBrushFacesCommand.cpp	/^        void SplitBrushFacesCommand::doAddBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doAddExternalTextureCollections	View/MapDocument.cpp	/^        void MapDocument::doAddExternalTextureCollections(const StringList& names) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
doAddTextureCollection	Assets/TextureManager.cpp	/^        void TextureManager::doAddTextureCollection(const TextureCollectionSpec& spec, TextureCollectionList& collections, TextureCollectionMap& collectionsByName) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
doAllEntityDefinitionFiles	Model/GameImpl.cpp	/^        IO::Path::List GameImpl::doAllEntityDefinitionFiles() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doApply	View/AnimationCurve.cpp	/^        double EaseInEaseOutAnimationCurve::doApply(const double progress) const {$/;"	f	language:C++	class:TrenchBroom::View::EaseInEaseOutAnimationCurve
doApply	View/AnimationCurve.cpp	/^        double FlatAnimationCurve::doApply(const double progress) const {$/;"	f	language:C++	class:TrenchBroom::View::FlatAnimationCurve
doAvailableMods	Model/GameImpl.cpp	/^        StringList GameImpl::doAvailableMods() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doBuildRenderer	Assets/Bsp29Model.cpp	/^        Renderer::MeshRenderer* Bsp29Model::doBuildRenderer(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
doBuildRenderer	Assets/Md2Model.cpp	/^        Renderer::MeshRenderer* Md2Model::doBuildRenderer(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model
doBuildRenderer	Assets/MdlModel.cpp	/^        Renderer::MeshRenderer* MdlModel::doBuildRenderer(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
doCanExecute	Model/BrushAlgorithm.h	/^            virtual bool doCanExecute(BrushGeometry& geometry) { return true; }$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
doCanExecute	Model/MoveBrushEdgesAlgorithm.cpp	/^        bool MoveBrushEdgesAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
doCanExecute	Model/MoveBrushFacesAlgorithm.cpp	/^        bool MoveBrushFacesAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
doCanExecute	Model/MoveBrushVerticesAlgorithm.cpp	/^        bool MoveBrushVerticesAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
doCanExecute	Model/SnapBrushVerticesAlgorithm.cpp	/^        bool SnapBrushVerticesAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
doCanExecute	Model/SplitBrushEdgeAlgorithm.cpp	/^        bool SplitBrushEdgeAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
doCanExecute	Model/SplitBrushFaceAlgorithm.cpp	/^        bool SplitBrushFaceAlgorithm::doCanExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
doCancelDrag	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::doCancelDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doCancelDrag	View/TextureCoordSystemHelper.cpp	/^        void TextureCoordSystemHelper::doCancelDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doCancelMouseDrag	View/CameraTool.cpp	/^        void CameraTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
doCancelMouseDrag	View/ClipTool.cpp	/^        void ClipTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doCancelMouseDrag	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doCancelMouseDrag	View/SelectionTool.cpp	/^        void SelectionTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doCancelMouseDrag	View/TexturingViewCameraTool.cpp	/^        void TexturingViewCameraTool::doCancelMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
doCancelMouseDrag	View/TexturingViewOffsetTool.cpp	/^        void TexturingViewOffsetTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
doCancelMouseDrag	View/TexturingViewRotateTool.cpp	/^        void TexturingViewRotateTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doCancelMouseDrag	View/TexturingViewScaleOriginTool.cpp	/^        void TexturingViewScaleOriginTool::doCancelMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doCancelMouseDrag	View/TexturingViewScaleTool.cpp	/^        void TexturingViewScaleTool::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doCancelMouseDrag	View/Tool.cpp	/^        void NoMouseDragPolicy::doCancelMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::NoMouseDragPolicy
doCancelMouseDrag	View/Tool.cpp	/^        void PlaneDragPolicy::doCancelMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
doCancelMove	View/MoveTool.h	/^            virtual void doCancelMove(const InputState& inputState) {};$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doCancelMove	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doCancelMove(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doCancelPlaneDrag	View/CreateBrushTool.cpp	/^        void CreateBrushTool::doCancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doCancelPlaneDrag	View/MoveTool.h	/^            void doCancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doCancelPlaneDrag	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doCancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doCancelPlaneDrag	View/TextureTool.cpp	/^        void TextureTool::doCancelPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doCancelRotate	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doCancelRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doCheckCaseSensitive	IO/DiskFileSystem.cpp	/^            bool doCheckCaseSensitive() {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
doClear	View/CellView.h	/^            virtual void doClear() {}$/;"	f	language:C++	class:TrenchBroom::View::CellView
doClear	View/EntityBrowserView.cpp	/^        void EntityBrowserView::doClear() {}$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
doClear	View/TextureBrowserView.cpp	/^        void TextureBrowserView::doClear() {}$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
doClone	Model/Brush.cpp	/^        Object* Brush::doClone(const BBox3& worldBounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doClone	Model/Entity.h	/^            Object* doClone(const BBox3& worldBounds) const {$/;"	f	language:C++	class:TrenchBroom::Model::ConfigurableEntity
doClone	Model/ParallelTexCoordSystem.cpp	/^        TexCoordSystem* ParallelTexCoordSystem::doClone() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
doClone	Model/ParaxialTexCoordSystem.cpp	/^        TexCoordSystem* ParaxialTexCoordSystem::doClone() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::doCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
doCompensate	Model/ParallelTexCoordSystem.cpp	/^        void ParallelTexCoordSystem::doCompensate(const Vec3& normal, const Vec3& center, const Mat4x4& transformation, BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
doCompensate	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::doCompensate(const Vec3& normal, const Vec3& center, const Mat4x4& transformation, BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doComputeBounds	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doComputeBounds(BBox3f& bounds) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doComputeBounds	View/MiniMapZView.cpp	/^        void MiniMapZView::doComputeBounds(BBox3f& bounds) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doComputeFrustumPlanes	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::doComputeFrustumPlanes(Plane3f& topPlane, Plane3f& rightPlane, Plane3f& bottomPlane, Plane3f& leftPlane) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
doComputeFrustumPlanes	Renderer/PerspectiveCamera.cpp	/^        void PerspectiveCamera::doComputeFrustumPlanes(Plane3f& topPlane, Plane3f& rightPlane, Plane3f& bottomPlane, Plane3f& leftPlane) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
doContainedBy	Model/Brush.cpp	/^        bool Brush::doContainedBy(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContainedBy	Model/Brush.cpp	/^        bool Brush::doContainedBy(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContainedBy	Model/Brush.cpp	/^        bool Brush::doContainedBy(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContainedBy	Model/Entity.cpp	/^        bool Entity::doContainedBy(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContainedBy	Model/Entity.cpp	/^        bool Entity::doContainedBy(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContainedBy	Model/Entity.cpp	/^        bool Entity::doContainedBy(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContains	Model/Brush.cpp	/^        bool Brush::doContains(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContains	Model/Brush.cpp	/^        bool Brush::doContains(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContains	Model/Brush.cpp	/^        bool Brush::doContains(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doContains	Model/Entity.cpp	/^        bool Entity::doContains(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContains	Model/Entity.cpp	/^        bool Entity::doContains(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContains	Model/Entity.cpp	/^        bool Entity::doContains(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doContentFlags	Model/GameImpl.cpp	/^        const GameConfig::FlagsConfig& GameImpl::doContentFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doCreateDirectory	IO/DiskFileSystem.cpp	/^        void WritableDiskFileSystem::doCreateDirectory(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableDiskFileSystem
doCreateVisual	View/SmartChoiceEditor.cpp	/^        wxWindow* SmartChoiceEditor::doCreateVisual(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
doCreateVisual	View/SmartColorEditor.cpp	/^        wxWindow* SmartColorEditor::doCreateVisual(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
doCreateVisual	View/SmartDefaultPropertyEditor.cpp	/^        wxWindow* SmartDefaultPropertyEditor::doCreateVisual(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::SmartDefaultPropertyEditor
doCreateVisual	View/SmartSpawnflagsEditor.cpp	/^        wxWindow* SmartSpawnflagsEditor::doCreateVisual(wxWindow* parent) {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
doDeactivate	View/ClipTool.cpp	/^        bool ClipTool::doDeactivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doDeactivate	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doDeactivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doDeactivate	View/TextureTool.cpp	/^        bool TextureTool::doDeactivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doDeactivate	View/Tool.cpp	/^        bool NoActivationPolicy::doDeactivate(const InputState& inputState) { return true; }$/;"	f	language:C++	class:TrenchBroom::View::NoActivationPolicy
doDeactivate	View/VertexTool.cpp	/^        bool VertexTool::doDeactivate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doDefaultModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification DynamicModelDefinition::doDefaultModelSpecification() const {$/;"	f	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
doDefaultModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification StaticModelDefinition::doDefaultModelSpecification() const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
doDeleteFile	IO/DiskFileSystem.cpp	/^        void WritableDiskFileSystem::doDeleteFile(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableDiskFileSystem
doDestroyVisual	View/SmartChoiceEditor.cpp	/^        void SmartChoiceEditor::doDestroyVisual() {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
doDestroyVisual	View/SmartColorEditor.cpp	/^        void SmartColorEditor::doDestroyVisual() {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
doDestroyVisual	View/SmartDefaultPropertyEditor.cpp	/^        void SmartDefaultPropertyEditor::doDestroyVisual() {$/;"	f	language:C++	class:TrenchBroom::View::SmartDefaultPropertyEditor
doDestroyVisual	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::doDestroyVisual() {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
doDirectoryExists	IO/DiskFileSystem.cpp	/^        bool DiskFileSystem::doDirectoryExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
doDirectoryExists	IO/GameFileSystem.cpp	/^        bool GameFileSystem::doDirectoryExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
doDirectoryExists	IO/PakFileSystem.cpp	/^        bool PakFileSystem::doDirectoryExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
doDrag	View/MoveTextureHelper.cpp	/^        bool MoveTextureHelper::doDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doDrag	View/TextureCoordSystemHelper.cpp	/^        bool TextureCoordSystemHelper::doDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doDrag3DCamera	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doDrag3DCamera(const Vec3f& delta, Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doDrag3DCamera	View/MiniMapZView.cpp	/^        void MiniMapZView::doDrag3DCamera(const Vec3f& delta, Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doDragDrop	View/CreateEntityTool.cpp	/^        bool CreateEntityTool::doDragDrop(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
doDragDrop	View/Tool.cpp	/^        bool NoDropPolicy::doDragDrop(const InputState& inputState) { assert(false); return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoDropPolicy
doDragEnter	View/CreateEntityTool.cpp	/^        bool CreateEntityTool::doDragEnter(const InputState& inputState, const String& payload) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
doDragEnter	View/Tool.cpp	/^        bool NoDropPolicy::doDragEnter(const InputState& inputState, const String& payload) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoDropPolicy
doDragLeave	View/CreateEntityTool.cpp	/^        void CreateEntityTool::doDragLeave(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
doDragLeave	View/Tool.cpp	/^        void NoDropPolicy::doDragLeave(const InputState& inputState) { assert(false); }$/;"	f	language:C++	class:TrenchBroom::View::NoDropPolicy
doDragMove	View/CreateEntityTool.cpp	/^        bool CreateEntityTool::doDragMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
doDragMove	View/Tool.cpp	/^        bool NoDropPolicy::doDragMove(const InputState& inputState) { assert(false); return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoDropPolicy
doEndDrag	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::doEndDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doEndDrag	View/TextureCoordSystemHelper.cpp	/^        void TextureCoordSystemHelper::doEndDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doEndMouseDrag	View/CameraTool.cpp	/^        void CameraTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
doEndMouseDrag	View/ClipTool.cpp	/^        void ClipTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doEndMouseDrag	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doEndMouseDrag	View/SelectionTool.cpp	/^        void SelectionTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doEndMouseDrag	View/TexturingViewCameraTool.cpp	/^        void TexturingViewCameraTool::doEndMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
doEndMouseDrag	View/TexturingViewOffsetTool.cpp	/^        void TexturingViewOffsetTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
doEndMouseDrag	View/TexturingViewRotateTool.cpp	/^        void TexturingViewRotateTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doEndMouseDrag	View/TexturingViewScaleOriginTool.cpp	/^        void TexturingViewScaleOriginTool::doEndMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doEndMouseDrag	View/TexturingViewScaleTool.cpp	/^        void TexturingViewScaleTool::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doEndMouseDrag	View/Tool.cpp	/^        void NoMouseDragPolicy::doEndMouseDrag(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::NoMouseDragPolicy
doEndMouseDrag	View/Tool.cpp	/^        void PlaneDragPolicy::doEndMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
doEndMove	View/MoveObjectsTool.cpp	/^        void MoveObjectsTool::doEndMove(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doEndMove	View/MoveTool.h	/^            virtual void doEndMove(const InputState& inputState) {};$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doEndMove	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doEndMove(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doEndMove	View/VertexTool.cpp	/^        void VertexTool::doEndMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doEndPlaneDrag	View/CreateBrushTool.cpp	/^        void CreateBrushTool::doEndPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doEndPlaneDrag	View/MoveTool.h	/^            void doEndPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doEndPlaneDrag	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doEndPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doEndPlaneDrag	View/TextureTool.cpp	/^        void TextureTool::doEndPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doEndRotate	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doEndRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doEquals	Assets/PropertyDefinition.cpp	/^        bool ChoicePropertyDefinition::doEquals(const PropertyDefinition* other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyDefinition
doEquals	Assets/PropertyDefinition.cpp	/^        bool FlagsPropertyDefinition::doEquals(const PropertyDefinition* other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
doEquals	Assets/PropertyDefinition.cpp	/^        bool PropertyDefinition::doEquals(const PropertyDefinition* other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
doExecute	Model/IntersectBrushGeometryWithFace.cpp	/^        AddFaceResult::Code IntersectBrushGeometryWithFace::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
doExecute	Model/MoveBrushEdgesAlgorithm.cpp	/^        MoveEdgesResult MoveBrushEdgesAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
doExecute	Model/MoveBrushFacesAlgorithm.cpp	/^        MoveFacesResult MoveBrushFacesAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
doExecute	Model/MoveBrushVerticesAlgorithm.cpp	/^        MoveVerticesResult MoveBrushVerticesAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
doExecute	Model/SnapBrushVerticesAlgorithm.cpp	/^        SnapVerticesResult SnapBrushVerticesAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
doExecute	Model/SplitBrushEdgeAlgorithm.cpp	/^        SplitResult SplitBrushEdgeAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
doExecute	Model/SplitBrushFaceAlgorithm.cpp	/^        SplitResult SplitBrushFaceAlgorithm::doExecute(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
doExtractEnabledMods	Model/GameImpl.cpp	/^        StringList GameImpl::doExtractEnabledMods(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doExtractEntityDefinitionFile	Model/GameImpl.cpp	/^        EntityDefinitionFileSpec GameImpl::doExtractEntityDefinitionFile(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doExtractExternalTextureCollections	Model/GameImpl.cpp	/^        StringList GameImpl::doExtractExternalTextureCollections(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doFileExists	IO/DiskFileSystem.cpp	/^        bool DiskFileSystem::doFileExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
doFileExists	IO/GameFileSystem.cpp	/^        bool GameFileSystem::doFileExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
doFileExists	IO/PakFileSystem.cpp	/^        bool PakFileSystem::doFileExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
doFindBuiltinTextureCollections	Model/GameImpl.cpp	/^        IO::Path::List GameImpl::doFindBuiltinTextureCollections() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doFindItems	IO/FileSystem.h	/^            void doFindItems(const Path& searchPath, const Matcher& matcher, const bool recurse, Path::List& result) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
doGameName	Model/GameImpl.cpp	/^        const String& GameImpl::doGameName() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doGamePath	Model/GameImpl.cpp	/^        IO::Path GameImpl::doGamePath() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doGetActionName	View/MoveObjectsTool.cpp	/^        String MoveObjectsTool::doGetActionName(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doGetActionName	View/VertexTool.cpp	/^        String VertexTool::doGetActionName(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doGetAngle	View/RotateObjectsTool.cpp	/^        FloatType RotateObjectsTool::doGetAngle(const InputState& inputState, const Vec3& handlePoint, const Vec3& curPoint, const Vec3& axis) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doGetAttribs	View/GLContextHolder.cpp	/^        const GLContextHolder::GLAttribs& RootGLContextHolder::doGetAttribs() const {$/;"	f	language:C++	class:TrenchBroom::View::RootGLContextHolder
doGetAttribs	View/GLContextHolder.cpp	/^        const GLContextHolder::GLAttribs& SharedGLContextHolder::doGetAttribs() const {$/;"	f	language:C++	class:TrenchBroom::View::SharedGLContextHolder
doGetBounds	Assets/Bsp29Model.cpp	/^        BBox3f Bsp29Model::doGetBounds(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
doGetBounds	Assets/Md2Model.cpp	/^        BBox3f Md2Model::doGetBounds(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model
doGetBounds	Assets/MdlModel.cpp	/^        BBox3f MdlModel::doGetBounds(const size_t skinIndex, const size_t frameIndex) const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
doGetDirectoryContents	IO/DiskFileSystem.cpp	/^        Path::List DiskFileSystem::doGetDirectoryContents(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
doGetDirectoryContents	IO/GameFileSystem.cpp	/^        Path::List GameFileSystem::doGetDirectoryContents(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
doGetDirectoryContents	IO/PakFileSystem.cpp	/^        Path::List PakFileSystem::doGetDirectoryContents(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
doGetFontManager	View/GLContextHolder.cpp	/^        Renderer::FontManager& RootGLContextHolder::doGetFontManager() {$/;"	f	language:C++	class:TrenchBroom::View::RootGLContextHolder
doGetFontManager	View/GLContextHolder.cpp	/^        Renderer::FontManager& SharedGLContextHolder::doGetFontManager() {$/;"	f	language:C++	class:TrenchBroom::View::SharedGLContextHolder
doGetKillColor	Renderer/MapRenderer.cpp	/^            const Color& doGetKillColor(const Model::Entity* source, const Model::Entity* target, bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter
doGetLinkColor	Renderer/MapRenderer.cpp	/^            const Color& doGetLinkColor(const Model::Entity* source, const Model::Entity* target, bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter
doGetMoveOrigin	View/MoveObjectsTool.cpp	/^        Vec3 MoveObjectsTool::doGetMoveOrigin(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doGetMoveOrigin	View/RotateObjectsTool.cpp	/^        Vec3 RotateObjectsTool::doGetMoveOrigin(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doGetMoveOrigin	View/VertexTool.cpp	/^        Vec3 VertexTool::doGetMoveOrigin(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doGetPickRay	Renderer/OrthographicCamera.cpp	/^        Ray3f OrthographicCamera::doGetPickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
doGetPickRay	Renderer/PerspectiveCamera.cpp	/^        Ray3f PerspectiveCamera::doGetPickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
doGetPickRay	View/MapView.cpp	/^        Ray3 MapView::doGetPickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doGetPickRay	View/TexturingView.cpp	/^        Ray3 TexturingView::doGetPickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
doGetRotateInfo	View/RotateObjectsTool.cpp	/^        RotateInfo RotateObjectsTool::doGetRotateInfo(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doGetShaderManager	View/GLContextHolder.cpp	/^        Renderer::ShaderManager& RootGLContextHolder::doGetShaderManager() {$/;"	f	language:C++	class:TrenchBroom::View::RootGLContextHolder
doGetShaderManager	View/GLContextHolder.cpp	/^        Renderer::ShaderManager& SharedGLContextHolder::doGetShaderManager() {$/;"	f	language:C++	class:TrenchBroom::View::SharedGLContextHolder
doGetShowLink	Renderer/MapRenderer.cpp	/^            bool doGetShowLink(const Model::Entity* source, const Model::Entity* target, bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter
doGetTexCoords	Model/ParallelTexCoordSystem.cpp	/^        Vec2f ParallelTexCoordSystem::doGetTexCoords(const Vec3& point, const BrushFaceAttribs& attribs) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
doGetTexCoords	Model/ParaxialTexCoordSystem.cpp	/^        Vec2f ParaxialTexCoordSystem::doGetTexCoords(const Vec3& point, const BrushFaceAttribs& attribs) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doGetTransformedBounds	Assets/Bsp29Model.cpp	/^        BBox3f Bsp29Model::doGetTransformedBounds(const size_t skinIndex, const size_t frameIndex, const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
doGetTransformedBounds	Assets/Md2Model.cpp	/^        BBox3f Md2Model::doGetTransformedBounds(const size_t skinIndex, const size_t frameIndex, const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model
doGetTransformedBounds	Assets/MdlModel.cpp	/^        BBox3f MdlModel::doGetTransformedBounds(const size_t skinIndex, const size_t frameIndex, const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
doGetVertices	Renderer/VertexArray.h	/^            const VertexList& doGetVertices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::CopyHolder
doGetVertices	Renderer/VertexArray.h	/^            const VertexList& doGetVertices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RefHolder
doGetVertices	Renderer/VertexArray.h	/^            const VertexList& doGetVertices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SwapHolder
doGetViewCamera	View/MiniMapXYView.cpp	/^        const Renderer::Camera& MiniMapXYView::doGetViewCamera() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doGetViewCamera	View/MiniMapZView.cpp	/^        const Renderer::Camera& MiniMapZView::doGetViewCamera() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doHandleMove	View/MoveObjectsTool.cpp	/^        bool MoveObjectsTool::doHandleMove(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doHandleMove	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doHandleMove(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doHandleMove	View/VertexTool.cpp	/^        bool VertexTool::doHandleMove(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doHandleRotate	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doHandleRotate(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doInitLayout	View/EntityBrowserView.cpp	/^        void EntityBrowserView::doInitLayout(Layout& layout) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
doInitLayout	View/TextureBrowserView.cpp	/^        void TextureBrowserView::doInitLayout(Layout& layout) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
doInitialize	View/GLContextHolder.cpp	/^        void RootGLContextHolder::doInitialize() {$/;"	f	language:C++	class:TrenchBroom::View::RootGLContextHolder
doInitialize	View/GLContextHolder.cpp	/^        void SharedGLContextHolder::doInitialize() {$/;"	f	language:C++	class:TrenchBroom::View::SharedGLContextHolder
doInitializeGL	View/MapView.cpp	/^        void MapView::doInitializeGL() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doInitializeGL	View/RenderView.cpp	/^        void RenderView::doInitializeGL() {}$/;"	f	language:C++	class:TrenchBroom::View::RenderView
doIntersects	Model/Brush.cpp	/^        bool Brush::doIntersects(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doIntersects	Model/Brush.cpp	/^        bool Brush::doIntersects(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doIntersects	Model/Brush.cpp	/^        bool Brush::doIntersects(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doIntersects	Model/Entity.cpp	/^        bool Entity::doIntersects(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doIntersects	Model/Entity.cpp	/^        bool Entity::doIntersects(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doIntersects	Model/Entity.cpp	/^        bool Entity::doIntersects(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doIsHidden	Model/Issue.cpp	/^        bool BrushIssue::doIsHidden(const IssueType type) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
doIsHidden	Model/Issue.cpp	/^        bool EntityIssue::doIsHidden(const IssueType type) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
doLayout	View/CellLayout.h	/^            void doLayout(const float maxUpScale,$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
doLeftClick	View/CellView.h	/^            virtual void doLeftClick(Layout& layout, const float x, const float y) {}$/;"	f	language:C++	class:TrenchBroom::View::CellView
doLeftClick	View/TextureBrowserView.cpp	/^        void TextureBrowserView::doLeftClick(Layout& layout, const float x, const float y) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
doLoadEntityDefinitions	Model/GameImpl.cpp	/^        Assets::EntityDefinitionList GameImpl::doLoadEntityDefinitions(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doLoadMap	Model/GameImpl.cpp	/^        Map* GameImpl::doLoadMap(const BBox3& worldBounds, const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doLoadModel	Model/GameImpl.cpp	/^        Assets::EntityModel* GameImpl::doLoadModel(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doLoadTextureCollection	IO/WadTextureLoader.cpp	/^        Assets::TextureCollection* WadTextureLoader::doLoadTextureCollection(const Assets::TextureCollectionSpec& spec) {$/;"	f	language:C++	class:TrenchBroom::IO::WadTextureLoader
doLoadTextureCollection	IO/WalTextureLoader.cpp	/^        Assets::TextureCollection* WalTextureLoader::doLoadTextureCollection(const Assets::TextureCollectionSpec& spec) {$/;"	f	language:C++	class:TrenchBroom::IO::WalTextureLoader
doLoadTextureCollection	Model/GameImpl.cpp	/^        Assets::TextureCollection* GameImpl::doLoadTextureCollection(const Assets::TextureCollectionSpec& spec) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doLog	View/CachingLogger.cpp	/^        void CachingLogger::doLog(const LogLevel level, const String& message) {$/;"	f	language:C++	class:TrenchBroom::View::CachingLogger
doLog	View/CachingLogger.cpp	/^        void CachingLogger::doLog(const LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::View::CachingLogger
doLog	View/Console.cpp	/^        void Console::doLog(const LogLevel level, const String& message) {$/;"	f	language:C++	class:TrenchBroom::View::Console
doLog	View/Console.cpp	/^        void Console::doLog(const LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::View::Console
doMatches	Assets/ModelDefinition.cpp	/^        bool DynamicModelDefinition::doMatches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
doMatches	Assets/ModelDefinition.cpp	/^        bool StaticModelDefinition::doMatches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
doMatches	Assets/ModelDefinition.cpp	/^        bool StaticModelDefinitionFlagMatcher::doMatches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionFlagMatcher
doMatches	Assets/ModelDefinition.cpp	/^        bool StaticModelDefinitionPropertyMatcher::doMatches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionPropertyMatcher
doMatches	View/SmartChoiceEditorMatcher.cpp	/^        bool SmartChoiceEditorMatcher::doMatches(const Model::PropertyKey& key, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditorMatcher
doMatches	View/SmartPropertyEditorMatcher.cpp	/^        bool SmartPropertyEditorDefaultMatcher::doMatches(const Model::PropertyKey& key, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorDefaultMatcher
doMatches	View/SmartPropertyEditorMatcher.cpp	/^        bool SmartPropertyEditorKeyMatcher::doMatches(const Model::PropertyKey& key, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorKeyMatcher
doMeasureAngle	Model/ParallelTexCoordSystem.cpp	/^        float ParallelTexCoordSystem::doMeasureAngle(const float currentAngle, const Vec2f& center, const Vec2f& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
doMeasureAngle	Model/ParaxialTexCoordSystem.cpp	/^        float ParaxialTexCoordSystem::doMeasureAngle(const float currentAngle, const Vec2f& center, const Vec2f& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification DynamicModelDefinition::doModelSpecification(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
doModelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification StaticModelDefinition::doModelSpecification(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
doModifierKeyChange	View/CreateBrushTool.cpp	/^        void CreateBrushTool::doModifierKeyChange(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doModifierKeyChange	View/MoveTool.h	/^            void doModifierKeyChange(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doModifierKeyChange	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doModifierKeyChange(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doModifierKeyChange	View/Tool.h	/^            virtual void doModifierKeyChange(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
doMouseDoubleClick	View/SelectionTool.cpp	/^        bool SelectionTool::doMouseDoubleClick(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doMouseDoubleClick	View/Tool.cpp	/^        bool MousePolicy::doMouseDoubleClick(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
doMouseDoubleClick	View/Tool.cpp	/^        bool NoMousePolicy::doMouseDoubleClick(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
doMouseDoubleClick	View/VertexTool.cpp	/^        bool VertexTool::doMouseDoubleClick(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMouseDown	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doMouseDown(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doMouseDown	View/Tool.cpp	/^        bool MousePolicy::doMouseDown(const InputState& inputState) { return false;}$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
doMouseDown	View/Tool.cpp	/^        bool NoMousePolicy::doMouseDown(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
doMouseDown	View/VertexTool.cpp	/^        bool VertexTool::doMouseDown(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMouseDrag	View/CameraTool.cpp	/^        bool CameraTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
doMouseDrag	View/ClipTool.cpp	/^        bool ClipTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doMouseDrag	View/ResizeBrushesTool.cpp	/^        bool ResizeBrushesTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doMouseDrag	View/SelectionTool.cpp	/^        bool SelectionTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doMouseDrag	View/TexturingViewCameraTool.cpp	/^        bool TexturingViewCameraTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
doMouseDrag	View/TexturingViewOffsetTool.cpp	/^        bool TexturingViewOffsetTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
doMouseDrag	View/TexturingViewRotateTool.cpp	/^        bool TexturingViewRotateTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doMouseDrag	View/TexturingViewScaleOriginTool.cpp	/^        bool TexturingViewScaleOriginTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doMouseDrag	View/TexturingViewScaleTool.cpp	/^        bool TexturingViewScaleTool::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doMouseDrag	View/Tool.cpp	/^        bool NoMouseDragPolicy::doMouseDrag(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoMouseDragPolicy
doMouseDrag	View/Tool.cpp	/^        bool PlaneDragPolicy::doMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
doMouseMove	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doMouseMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doMouseMove	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doMouseMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doMouseMove	View/Tool.cpp	/^        void MousePolicy::doMouseMove(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
doMouseMove	View/Tool.cpp	/^        void NoMousePolicy::doMouseMove(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
doMouseUp	View/ClipTool.cpp	/^        bool ClipTool::doMouseUp(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doMouseUp	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doMouseUp(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doMouseUp	View/SelectionTool.cpp	/^        bool SelectionTool::doMouseUp(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doMouseUp	View/Tool.cpp	/^        bool MousePolicy::doMouseUp(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
doMouseUp	View/Tool.cpp	/^        bool NoMousePolicy::doMouseUp(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
doMouseUp	View/VertexTool.cpp	/^        bool VertexTool::doMouseUp(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMove	View/MoveObjectsTool.cpp	/^        MoveResult MoveObjectsTool::doMove(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doMove	View/RotateObjectsTool.cpp	/^        MoveResult RotateObjectsTool::doMove(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doMove	View/VertexTool.cpp	/^        MoveResult VertexTool::doMove(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMoveEdges	View/VertexTool.cpp	/^        MoveResult VertexTool::doMoveEdges(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMoveFaces	View/VertexTool.cpp	/^        MoveResult VertexTool::doMoveFaces(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doMoveFile	IO/DiskFileSystem.cpp	/^        void WritableDiskFileSystem::doMoveFile(const Path& sourcePath, const Path& destPath, const bool overwrite) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableDiskFileSystem
doMoveVertices	View/VertexTool.cpp	/^        MoveResult VertexTool::doMoveVertices(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doNewMap	Model/GameImpl.cpp	/^        Map* GameImpl::doNewMap(const MapFormat::Type format) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doOpenFile	IO/DiskFileSystem.cpp	/^        const MappedFile::Ptr DiskFileSystem::doOpenFile(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
doOpenFile	IO/GameFileSystem.cpp	/^        const MappedFile::Ptr GameFileSystem::doOpenFile(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameFileSystem
doOpenFile	IO/PakFileSystem.cpp	/^        const MappedFile::Ptr PakFileSystem::doOpenFile(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
doPanView	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doPanView(const Vec3f& diff) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doPanView	View/MiniMapZView.cpp	/^        void MiniMapZView::doPanView(const Vec3f& diff) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doParseBrushes	IO/QuakeMapParser.cpp	/^        Model::BrushList QuakeMapParser::doParseBrushes(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
doParseBrushes	Model/GameImpl.cpp	/^        Model::BrushList GameImpl::doParseBrushes(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doParseDefinitions	IO/DefParser.cpp	/^        Assets::EntityDefinitionList DefParser::doParseDefinitions() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
doParseDefinitions	IO/FgdParser.cpp	/^        Assets::EntityDefinitionList FgdParser::doParseDefinitions() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
doParseEntities	IO/QuakeMapParser.cpp	/^        Model::EntityList QuakeMapParser::doParseEntities(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
doParseEntities	Model/GameImpl.cpp	/^        Model::EntityList GameImpl::doParseEntities(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doParseFaces	IO/QuakeMapParser.cpp	/^        Model::BrushFaceList QuakeMapParser::doParseFaces(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
doParseFaces	Model/GameImpl.cpp	/^        Model::BrushFaceList GameImpl::doParseFaces(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doParseMap	IO/QuakeMapParser.cpp	/^        Model::Map* QuakeMapParser::doParseMap(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
doParseModel	IO/Bsp29Parser.cpp	/^        Assets::EntityModel* Bsp29Parser::doParseModel() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
doParseModel	IO/Md2Parser.cpp	/^        Assets::EntityModel* Md2Parser::doParseModel() {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
doParseModel	IO/MdlParser.cpp	/^        Assets::EntityModel* MdlParser::doParseModel() {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
doPerformDo	Controller/AddRemoveObjectsCommand.cpp	/^        bool AddRemoveObjectsCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
doPerformDo	Controller/CommandProcessor.cpp	/^        bool CommandGroup::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandGroup
doPerformDo	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
doPerformDo	Controller/FaceAttributeCommand.cpp	/^        bool FaceAttributeCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
doPerformDo	Controller/FixPlanePointsCommand.cpp	/^        bool FixPlanePointsCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
doPerformDo	Controller/MoveBrushEdgesCommand.cpp	/^        bool MoveBrushEdgesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doPerformDo	Controller/MoveBrushFacesCommand.cpp	/^        bool MoveBrushFacesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doPerformDo	Controller/MoveBrushVerticesCommand.cpp	/^        bool MoveBrushVerticesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doPerformDo	Controller/MoveTexturesCommand.cpp	/^        bool MoveTexturesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
doPerformDo	Controller/NewDocumentCommand.cpp	/^        bool NewDocumentCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
doPerformDo	Controller/OpenDocumentCommand.cpp	/^        bool OpenDocumentCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
doPerformDo	Controller/RebuildBrushGeometryCommand.cpp	/^        bool RebuildBrushGeometryCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
doPerformDo	Controller/ReparentBrushesCommand.cpp	/^        bool ReparentBrushesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
doPerformDo	Controller/ResizeBrushesCommand.cpp	/^        bool ResizeBrushesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
doPerformDo	Controller/RotateTexturesCommand.cpp	/^        bool RotateTexturesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
doPerformDo	Controller/SelectionCommand.cpp	/^        bool SelectionCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
doPerformDo	Controller/SetEntityDefinitionFileCommand.cpp	/^        bool SetEntityDefinitionFileCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
doPerformDo	Controller/SetModsCommand.cpp	/^        bool SetModsCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SetModsCommand
doPerformDo	Controller/SnapBrushVerticesCommand.cpp	/^        bool SnapBrushVerticesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doPerformDo	Controller/SplitBrushEdgesCommand.cpp	/^        bool SplitBrushEdgesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doPerformDo	Controller/SplitBrushFacesCommand.cpp	/^        bool SplitBrushFacesCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doPerformDo	Controller/TextureCollectionCommand.cpp	/^        bool TextureCollectionCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
doPerformDo	Controller/TransformObjectsCommand.cpp	/^        bool TransformObjectsCommand::doPerformDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
doPerformUndo	Controller/AddRemoveObjectsCommand.cpp	/^        bool AddRemoveObjectsCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
doPerformUndo	Controller/Command.cpp	/^        bool Command::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
doPerformUndo	Controller/CommandProcessor.cpp	/^        bool CommandGroup::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandGroup
doPerformUndo	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
doPerformUndo	Controller/FaceAttributeCommand.cpp	/^        bool FaceAttributeCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
doPerformUndo	Controller/FixPlanePointsCommand.cpp	/^        bool FixPlanePointsCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
doPerformUndo	Controller/MoveBrushEdgesCommand.cpp	/^        bool MoveBrushEdgesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doPerformUndo	Controller/MoveBrushFacesCommand.cpp	/^        bool MoveBrushFacesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doPerformUndo	Controller/MoveBrushVerticesCommand.cpp	/^        bool MoveBrushVerticesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doPerformUndo	Controller/MoveTexturesCommand.cpp	/^        bool MoveTexturesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
doPerformUndo	Controller/ReparentBrushesCommand.cpp	/^        bool ReparentBrushesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
doPerformUndo	Controller/ResizeBrushesCommand.cpp	/^        bool ResizeBrushesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
doPerformUndo	Controller/RotateTexturesCommand.cpp	/^        bool RotateTexturesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
doPerformUndo	Controller/SelectionCommand.cpp	/^        bool SelectionCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
doPerformUndo	Controller/SetEntityDefinitionFileCommand.cpp	/^        bool SetEntityDefinitionFileCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
doPerformUndo	Controller/SetModsCommand.cpp	/^        bool SetModsCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SetModsCommand
doPerformUndo	Controller/SnapBrushVerticesCommand.cpp	/^        bool SnapBrushVerticesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doPerformUndo	Controller/SplitBrushEdgesCommand.cpp	/^        bool SplitBrushEdgesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doPerformUndo	Controller/SplitBrushFacesCommand.cpp	/^        bool SplitBrushFacesCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doPerformUndo	Controller/TextureCollectionCommand.cpp	/^        bool TextureCollectionCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
doPerformUndo	Controller/TransformObjectsCommand.cpp	/^        bool TransformObjectsCommand::doPerformUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
doPick	View/ClipTool.cpp	/^        void ClipTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doPick	View/MapView.cpp	/^        Hits MapView::doPick(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doPick	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doPick	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doPick	View/TexturingView.cpp	/^        Hits TexturingView::doPick(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
doPick	View/TexturingViewRotateTool.cpp	/^        void TexturingViewRotateTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doPick	View/TexturingViewScaleOriginTool.cpp	/^        void TexturingViewScaleOriginTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doPick	View/TexturingViewScaleTool.cpp	/^        void TexturingViewScaleTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doPick	View/Tool.cpp	/^        void NoPickingPolicy::doPick(const InputState& inputState, Hits& hits) {}$/;"	f	language:C++	class:TrenchBroom::View::NoPickingPolicy
doPick	View/VertexTool.cpp	/^        void VertexTool::doPick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doPick3DCamera	View/MiniMapXYView.cpp	/^        float MiniMapXYView::doPick3DCamera(const Ray3f& pickRay, const Renderer::Camera& camera) const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doPick3DCamera	View/MiniMapZView.cpp	/^        float MiniMapZView::doPick3DCamera(const Ray3f& pickRay, const Renderer::Camera& camera) const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doPickFrustum	Renderer/OrthographicCamera.cpp	/^        float OrthographicCamera::doPickFrustum(const float size, const Ray3f& ray) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
doPickFrustum	Renderer/PerspectiveCamera.cpp	/^        float PerspectiveCamera::doPickFrustum(const float size, const Ray3f& ray) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
doPlaneDrag	View/CreateBrushTool.cpp	/^        bool CreateBrushTool::doPlaneDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doPlaneDrag	View/MoveTool.h	/^            bool doPlaneDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doPlaneDrag	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doPlaneDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doPlaneDrag	View/TextureTool.cpp	/^        bool TextureTool::doPlaneDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doReloadLayout	View/EntityBrowserView.cpp	/^        void EntityBrowserView::doReloadLayout(Layout& layout) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
doReloadLayout	View/TextureBrowserView.cpp	/^        void TextureBrowserView::doReloadLayout(Layout& layout) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
doRemove	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::doRemove(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
doRemoveBrushes	Controller/MoveBrushEdgesCommand.cpp	/^        void MoveBrushEdgesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doRemoveBrushes	Controller/MoveBrushFacesCommand.cpp	/^        void MoveBrushFacesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doRemoveBrushes	Controller/MoveBrushVerticesCommand.cpp	/^        void MoveBrushVerticesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doRemoveBrushes	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
doRemoveBrushes	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doRemoveBrushes	Controller/SplitBrushEdgesCommand.cpp	/^        void SplitBrushEdgesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doRemoveBrushes	Controller/SplitBrushFacesCommand.cpp	/^        void SplitBrushFacesCommand::doRemoveBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doRemoveTextureCollection	Assets/TextureManager.cpp	/^        void TextureManager::doRemoveTextureCollection(const String& name, TextureCollectionList& collections, TextureCollectionMap& collectionsByName, TextureCollectionMap& toRemove) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
doRename	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::doRename(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
doRender	View/CellView.h	/^            void doRender() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
doRender	View/ClipTool.cpp	/^        void ClipTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doRender	View/CreateBrushTool.cpp	/^        void CreateBrushTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doRender	View/CreateEntityTool.cpp	/^        void CreateEntityTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
doRender	View/EntityBrowserView.cpp	/^        void EntityBrowserView::doRender(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
doRender	View/MapView.cpp	/^        void MapView::doRender() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doRender	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::doRender() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
doRender	View/MoveObjectsTool.cpp	/^        void MoveObjectsTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doRender	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::doRender(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doRender	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doRender	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doRender	View/TextureBrowserView.cpp	/^        void TextureBrowserView::doRender(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
doRender	View/TextureCoordSystemHelper.cpp	/^        void TextureCoordSystemHelper::doRender(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doRender	View/TextureTool.cpp	/^        void TextureTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doRender	View/TexturingView.cpp	/^        void TexturingView::doRender() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
doRender	View/TexturingViewRotateTool.cpp	/^        void TexturingViewRotateTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doRender	View/TexturingViewScaleOriginTool.cpp	/^        void TexturingViewScaleOriginTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doRender	View/TexturingViewScaleTool.cpp	/^        void TexturingViewScaleTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doRender	View/Tool.cpp	/^        void RenderPolicy::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {}$/;"	f	language:C++	class:TrenchBroom::View::RenderPolicy
doRender	View/VertexTool.cpp	/^        void VertexTool::doRender(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doRender3DCamera	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doRender3DCamera(Renderer::RenderContext& renderContext, Renderer::Vbo& vbo, const Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doRender3DCamera	View/MiniMapZView.cpp	/^        void MiniMapZView::doRender3DCamera(Renderer::RenderContext& renderContext, Renderer::Vbo& vbo, const Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doRenderFrustum	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::doRenderFrustum(RenderContext& renderContext, Vbo& vbo, const float size, const Color& color) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
doRenderFrustum	Renderer/PerspectiveCamera.cpp	/^        void PerspectiveCamera::doRenderFrustum(RenderContext& renderContext, Vbo& vbo, const float size, const Color& color) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
doResetPlane	View/CreateBrushTool.cpp	/^        void CreateBrushTool::doResetPlane(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doResetPlane	View/MoveTool.h	/^            void doResetPlane(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doResetPlane	View/Tool.h	/^            virtual void doResetPlane(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {}$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
doRotate	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doRotate(const Vec3& center, const Vec3& axis, const FloatType angle) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doSaveDocument	View/MapDocument.cpp	/^        void MapDocument::doSaveDocument(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
doScroll	View/CameraTool.cpp	/^        void CameraTool::doScroll(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
doScroll	View/TexturingViewCameraTool.cpp	/^        void TexturingViewCameraTool::doScroll(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
doScroll	View/Tool.cpp	/^        void MousePolicy::doScroll(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
doScroll	View/Tool.cpp	/^        void NoMousePolicy::doScroll(const InputState& inputState) {}$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
doSelectNewHandlePositions	Controller/MoveBrushEdgesCommand.cpp	/^        void MoveBrushEdgesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doSelectNewHandlePositions	Controller/MoveBrushFacesCommand.cpp	/^        void MoveBrushFacesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doSelectNewHandlePositions	Controller/MoveBrushVerticesCommand.cpp	/^        void MoveBrushVerticesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doSelectNewHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
doSelectNewHandlePositions	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doSelectNewHandlePositions	Controller/SplitBrushEdgesCommand.cpp	/^        void SplitBrushEdgesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doSelectNewHandlePositions	Controller/SplitBrushFacesCommand.cpp	/^        void SplitBrushFacesCommand::doSelectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doSelectOldHandlePositions	Controller/MoveBrushEdgesCommand.cpp	/^        void MoveBrushEdgesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
doSelectOldHandlePositions	Controller/MoveBrushFacesCommand.cpp	/^        void MoveBrushFacesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
doSelectOldHandlePositions	Controller/MoveBrushVerticesCommand.cpp	/^        void MoveBrushVerticesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
doSelectOldHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {}$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
doSelectOldHandlePositions	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
doSelectOldHandlePositions	Controller/SplitBrushEdgesCommand.cpp	/^        void SplitBrushEdgesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
doSelectOldHandlePositions	Controller/SplitBrushFacesCommand.cpp	/^        void SplitBrushFacesCommand::doSelectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
doSetAdditionalSearchPaths	Model/GameImpl.cpp	/^        void GameImpl::doSetAdditionalSearchPaths(const IO::Path::List& searchPaths) {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doSetGamePath	Model/GameImpl.cpp	/^        void GameImpl::doSetGamePath(const IO::Path& gamePath) {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doSetHidden	Model/Issue.cpp	/^        void BrushIssue::doSetHidden(const IssueType type, const bool hidden) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
doSetHidden	Model/Issue.cpp	/^        void EntityIssue::doSetHidden(const IssueType type, const bool hidden) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
doSetRenderOptions	View/ClipTool.cpp	/^        void ClipTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doSetRenderOptions	View/MoveObjectsTool.cpp	/^        void MoveObjectsTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doSetRenderOptions	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::doSetRenderOptions(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doSetRenderOptions	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doSetRenderOptions	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doSetRenderOptions	View/SelectionTool.cpp	/^        void SelectionTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doSetRenderOptions	View/TextureCoordSystemHelper.cpp	/^        void TextureCoordSystemHelper::doSetRenderOptions(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doSetRenderOptions	View/TextureTool.cpp	/^        void TextureTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doSetRenderOptions	View/Tool.cpp	/^        void RenderPolicy::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {}$/;"	f	language:C++	class:TrenchBroom::View::RenderPolicy
doSetRenderOptions	View/VertexTool.cpp	/^        void VertexTool::doSetRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doSetValue	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::doSetValue(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
doShowDrag3DCameraCursor	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doShowDrag3DCameraCursor() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doShowDrag3DCameraCursor	View/MiniMapZView.cpp	/^        void MiniMapZView::doShowDrag3DCameraCursor() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doShowPopupMenu	View/MapView.cpp	/^        void MapView::doShowPopupMenu() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doShowPopupMenu	View/ToolBox.cpp	/^        void ToolBoxHelper::doShowPopupMenu() {}$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxHelper
doSnapDelta	View/MoveObjectsTool.cpp	/^        Vec3 MoveObjectsTool::doSnapDelta(const InputState& inputState, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doSnapDelta	View/RotateObjectsTool.cpp	/^        Vec3 RotateObjectsTool::doSnapDelta(const InputState& inputState, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doSnapDelta	View/VertexTool.cpp	/^        Vec3 VertexTool::doSnapDelta(const InputState& inputState, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doSplitEdges	View/VertexTool.cpp	/^        MoveResult VertexTool::doSplitEdges(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doSplitFaces	View/VertexTool.cpp	/^        MoveResult VertexTool::doSplitFaces(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doStartDrag	View/MoveTextureHelper.cpp	/^        bool MoveTextureHelper::doStartDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
doStartDrag	View/TextureCoordSystemHelper.cpp	/^        bool TextureCoordSystemHelper::doStartDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
doStartMouseDrag	View/CameraTool.cpp	/^        bool CameraTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
doStartMouseDrag	View/ClipTool.cpp	/^        bool ClipTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
doStartMouseDrag	View/ResizeBrushesTool.cpp	/^        bool ResizeBrushesTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
doStartMouseDrag	View/SelectionTool.cpp	/^        bool SelectionTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::SelectionTool
doStartMouseDrag	View/TexturingViewCameraTool.cpp	/^        bool TexturingViewCameraTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
doStartMouseDrag	View/TexturingViewOffsetTool.cpp	/^        bool TexturingViewOffsetTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
doStartMouseDrag	View/TexturingViewRotateTool.cpp	/^        bool TexturingViewRotateTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
doStartMouseDrag	View/TexturingViewScaleOriginTool.cpp	/^        bool TexturingViewScaleOriginTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
doStartMouseDrag	View/TexturingViewScaleTool.cpp	/^        bool TexturingViewScaleTool::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
doStartMouseDrag	View/Tool.cpp	/^        bool NoMouseDragPolicy::doStartMouseDrag(const InputState& inputState) { return false; }$/;"	f	language:C++	class:TrenchBroom::View::NoMouseDragPolicy
doStartMouseDrag	View/Tool.cpp	/^        bool PlaneDragPolicy::doStartMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
doStartMove	View/MoveObjectsTool.cpp	/^        bool MoveObjectsTool::doStartMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
doStartMove	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doStartMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doStartMove	View/VertexTool.cpp	/^        bool VertexTool::doStartMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
doStartPlaneDrag	View/CreateBrushTool.cpp	/^        bool CreateBrushTool::doStartPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
doStartPlaneDrag	View/MoveTool.h	/^            bool doStartPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
doStartPlaneDrag	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doStartPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doStartPlaneDrag	View/TextureTool.cpp	/^        bool TextureTool::doStartPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
doStartRotate	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::doStartRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
doSurfaceFlags	Model/GameImpl.cpp	/^        const GameConfig::FlagsConfig& GameImpl::doSurfaceFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doTransform	Model/Brush.cpp	/^        void Brush::doTransform(const Mat4x4& transformation, const bool lockTextures, const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doTransform	Model/Entity.cpp	/^        void Entity::doTransform(const Mat4x4& transformation, const bool lockTextures, const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doUpdate	Model/ParallelTexCoordSystem.cpp	/^        void ParallelTexCoordSystem::doUpdate(const Vec3& normal, const BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
doUpdate	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::doUpdate(const Vec3& normal, const BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doUpdate	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::doUpdate(const Vec3& normal, float rotation) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
doUpdate	View/CameraAnimation.cpp	/^        void CameraAnimation::doUpdate(const double progress) {$/;"	f	language:C++	class:TrenchBroom::View::CameraAnimation
doUpdateExternalTextureCollections	Model/GameImpl.cpp	/^        void GameImpl::doUpdateExternalTextureCollections(Map* map, const StringList& collections) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doUpdateViewport	View/MapView.cpp	/^        void MapView::doUpdateViewport(int x, int y, int width, int height) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
doUpdateViewport	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doUpdateViewport(int x, int y, int width, int height) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doUpdateViewport	View/MiniMapZView.cpp	/^        void MiniMapZView::doUpdateViewport(int x, int y, int width, int height) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
doUpdateViewport	View/RenderView.cpp	/^        void RenderView::doUpdateViewport(const int x, const int y, const int width, const int height) {}$/;"	f	language:C++	class:TrenchBroom::View::RenderView
doUpdateViewport	View/TexturingView.cpp	/^        void TexturingView::doUpdateViewport(int x, int y, int width, int height) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
doUpdateVisual	View/SmartChoiceEditor.cpp	/^        void SmartChoiceEditor::doUpdateVisual(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartChoiceEditor
doUpdateVisual	View/SmartColorEditor.cpp	/^        void SmartColorEditor::doUpdateVisual(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
doUpdateVisual	View/SmartDefaultPropertyEditor.cpp	/^        void SmartDefaultPropertyEditor::doUpdateVisual(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartDefaultPropertyEditor
doUpdateVisual	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::doUpdateVisual(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
doUploadTextureBuffer	Assets/Texture.cpp	/^        void Texture::doUploadTextureBuffer(const GLuint textureId) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
doValidate	View/GamesPreferencePane.cpp	/^        bool GamesPreferencePane::doValidate() {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
doValidate	View/GeneralPreferencePane.cpp	/^        bool GeneralPreferencePane::doValidate() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
doValidate	View/KeyboardPreferencePane.cpp	/^        bool KeyboardPreferencePane::doValidate() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
doValidateMatrices	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::doValidateMatrices(Mat4x4f& projectionMatrix, Mat4x4f& viewMatrix) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
doValidateMatrices	Renderer/PerspectiveCamera.cpp	/^        void PerspectiveCamera::doValidateMatrices(Mat4x4f& projectionMatrix, Mat4x4f& viewMatrix) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
doVisit	Model/Brush.cpp	/^        void Brush::doVisit(ObjectVisitor& visitor) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
doVisit	Model/Entity.cpp	/^        void Entity::doVisit(ObjectVisitor& visitor) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
doVisit	Model/IssueGenerator.cpp	/^            void doVisit(Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Model::Visitor
doVisit	Model/IssueGenerator.cpp	/^            void doVisit(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Visitor
doVisit	Model/Object.cpp	/^        void ObjectVisitor::doVisit(Brush* brush) {}$/;"	f	language:C++	class:TrenchBroom::Model::ObjectVisitor
doVisit	Model/Object.cpp	/^        void ObjectVisitor::doVisit(Entity* entity) {}$/;"	f	language:C++	class:TrenchBroom::Model::ObjectVisitor
doWriteFacesToStream	Model/GameImpl.cpp	/^        void GameImpl::doWriteFacesToStream(const MapFormat::Type format, const Model::BrushFaceList& faces, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doWriteMap	Model/GameImpl.cpp	/^        void GameImpl::doWriteMap(Map& map, const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doWriteObjectsToStream	Model/GameImpl.cpp	/^        void GameImpl::doWriteObjectsToStream(const MapFormat::Type format, const Model::ObjectList& objects, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
doZoomView	View/MiniMapXYView.cpp	/^        void MiniMapXYView::doZoomView(const Vec3f& factors) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
doZoomView	View/MiniMapZView.cpp	/^        void MiniMapZView::doZoomView(const Vec3f& factors) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
document	View/MiniMapBaseView.cpp	/^        View::MapDocumentSPtr MiniMapBaseView::document() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
document	View/SmartPropertyEditor.cpp	/^        View::MapDocumentSPtr SmartPropertyEditor::document() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
document	View/Tool.h	/^            MapDocumentSPtr document() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
document	View/Tool.h	/^            MapDocumentSPtr document() {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
documentPath	View/RecentDocumentSelectedCommand.cpp	/^        const IO::Path& RecentDocumentSelectedCommand::documentPath() const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentSelectedCommand
documentWasCleared	Renderer/MapRenderer.cpp	/^        void MapRenderer::documentWasCleared() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
documentWasCleared	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::documentWasCleared() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
documentWasCleared	View/MapTreeView.cpp	/^            void documentWasCleared() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
documentWasCleared	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::documentWasCleared() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
documentWasClearedNotifier	View/MapDocument.h	/^            Notifier0 documentWasClearedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
documentWasLoaded	View/EntityBrowser.cpp	/^        void EntityBrowser::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
documentWasLoaded	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
documentWasLoaded	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
documentWasLoaded	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
documentWasLoaded	View/ModEditor.cpp	/^        void ModEditor::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
documentWasLoaded	View/TextureBrowser.cpp	/^        void TextureBrowser::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
documentWasLoaded	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::documentWasLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
documentWasLoadedNotifier	View/MapDocument.h	/^            Notifier0 documentWasLoadedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
documentWasNewed	View/EntityBrowser.cpp	/^        void EntityBrowser::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
documentWasNewed	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
documentWasNewed	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
documentWasNewed	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
documentWasNewed	View/ModEditor.cpp	/^        void ModEditor::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
documentWasNewed	View/TextureBrowser.cpp	/^        void TextureBrowser::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
documentWasNewed	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::documentWasNewed() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
documentWasNewedNotifier	View/MapDocument.h	/^            Notifier0 documentWasNewedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
documentWasNewedOrLoaded	Renderer/MapRenderer.cpp	/^        void MapRenderer::documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
documentWasNewedOrLoaded	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
documentWasNewedOrLoaded	View/IssueBrowser.cpp	/^        void IssueBrowser::documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
documentWasNewedOrLoaded	View/MapTreeView.cpp	/^            void documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
documentWasNewedOrLoaded	View/MapView.cpp	/^        void MapView::documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
documentWasNewedOrLoaded	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::documentWasNewedOrLoaded() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
documentWasSaved	View/IssueBrowser.cpp	/^        void IssueBrowser::documentWasSaved() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
documentWasSavedNotifier	View/MapDocument.h	/^            Notifier0 documentWasSavedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
dot	Vec.h	/^    const T dot(const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
drag	View/TextureTool.cpp	/^        bool TextureToolHelper::drag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
drag3DCamera	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::drag3DCamera(const wxPoint& lastPos, const wxPoint& currentPos) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
dragDrop	View/Tool.h	/^            bool dragDrop(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
dragDrop	View/ToolBox.cpp	/^        bool ToolBox::dragDrop(const wxCoord x, const wxCoord y, const String& text) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
dragEnter	View/Tool.h	/^            Tool* dragEnter(const InputState& inputState, const String& payload) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
dragEnter	View/ToolBox.cpp	/^        bool ToolBox::dragEnter(const wxCoord x, const wxCoord y, const String& text) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
dragLeave	View/Tool.h	/^            void dragLeave(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
dragLeave	View/ToolBox.cpp	/^        void ToolBox::dragLeave() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
dragMove	View/Tool.h	/^            bool dragMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
dragMove	View/ToolBox.cpp	/^        bool ToolBox::dragMove(const wxCoord x, const wxCoord y, const String& text) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
dragPlane	View/MoveToolHelper.cpp	/^        Plane3 MoveHelper::dragPlane(const InputState& inputState, const Vec3& initialPoint) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
dragging	View/Tool.h	/^            bool dragging() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
drawEmptyItem	View/ImageListBox.cpp	/^        void ImageListBox::drawEmptyItem(wxDC& dc, const wxRect& rect) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
drawGlyph	Renderer/FontTexture.cpp	/^        void FontTexture::drawGlyph(const int x, const int y, const int maxAscend, const FT_GlyphSlot glyph) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
drawItem	View/ImageListBox.cpp	/^        void ImageListBox::drawItem(wxDC& dc, const wxRect& rect, size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::ImageListBox
dropFace	Model/MoveBrushVertexAlgorithm.h	/^                void dropFace(BrushFaceGeometry* side) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
droppedFaces	Model/BrushGeometry.h	/^            BrushFaceList droppedFaces;$/;"	m	language:C++	struct:TrenchBroom::Model::BrushAlgorithmResult
duplicate	View/KeyboardPreferencePane.h	/^            inline bool duplicate() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
duplicateObjects	View/ControllerFacade.cpp	/^        Model::ObjectList ControllerFacade::duplicateObjects(const Model::ObjectList& objects, const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
duplicateObjects	View/MapFrame.cpp	/^        void MapFrame::duplicateObjects() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
duplicateObjects	View/MoveObjectsTool.cpp	/^        bool MoveObjectsTool::duplicateObjects(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveObjectsTool
each	Model/ModelUtils.h	/^        bool each(Iter cur, Iter end, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom::Model
each	Model/ModelUtils.h	/^        void each(Iter cur, Iter end, Operator& op, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom::Model
each	Model/ModelUtils.h	/^        void each(Iter cur, Iter end, const Operator& op, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom::Model
eachBBoxEdge	BBox.h	/^void eachBBoxEdge(const BBox<T,3>& bbox, Op& op) {$/;"	f	language:C++
eachBBoxFace	BBox.h	/^void eachBBoxFace(const BBox<T,3>& bbox, Op& op) {$/;"	f	language:C++
eachBBoxVertex	BBox.h	/^void eachBBoxVertex(const BBox<T,3>& bbox, Op& op) {$/;"	f	language:C++
edgeColor	Renderer/BrushRenderer.cpp	/^        const Color& BrushRenderer::edgeColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
edgeCount	IO/Bsp29Parser.h	/^                size_t edgeCount;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::FaceInfo
edgeHandleClicked	View/VertexTool.cpp	/^        void VertexTool::edgeHandleClicked(const InputState& inputState, const Hits::List& hits) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
edgeIndex	IO/Bsp29Parser.h	/^                size_t edgeIndex;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::FaceInfo
edgeInfo	Model/BrushEdge.cpp	/^        Edge3 BrushEdge::edgeInfo() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
edges	Model/Brush.cpp	/^        const BrushEdgeList& Brush::edges() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
edges	Model/BrushFace.cpp	/^        const BrushEdgeList& BrushFace::edges() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
edges	Model/BrushFaceGeometry.h	/^            BrushEdgeList edges;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
edges	Model/BrushGeometry.h	/^            BrushEdgeList edges;$/;"	m	language:C++	class:TrenchBroom::Model::BrushGeometry
edges	Model/IntersectBrushGeometryWithFace.cpp	/^        const BrushEdgeList& IntersectBrushGeometryWithFace::edges() const {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
edges	Renderer/OutlineTracer.cpp	/^        Edge3::List OutlineTracer::edges() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
edges	View/VertexHandleManager.cpp	/^        const Model::BrushEdgeList& VertexHandleManager::edges(const Vec3& handlePosition) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
emitToken	IO/ConfigParser.cpp	/^        ConfigTokenizer::Token ConfigTokenizer::emitToken() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigTokenizer
emitToken	IO/DefParser.cpp	/^        DefTokenizer::Token DefTokenizer::emitToken() {$/;"	f	language:C++	class:TrenchBroom::IO::DefTokenizer
emitToken	IO/FgdParser.cpp	/^        FgdTokenizer::Token FgdTokenizer::emitToken() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdTokenizer
emitToken	IO/QuakeMapParser.cpp	/^        QuakeMapTokenizer::Token QuakeMapTokenizer::emitToken() {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapTokenizer
empty	Allocator.h	/^        bool empty() const {$/;"	f	language:C++	class:Allocator::Chunk
empty	Hit.cpp	/^    bool Hits::empty() const {$/;"	f	language:C++	class:TrenchBroom::Hits
empty	Model/PointFile.cpp	/^        bool PointFile::empty() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
empty	Renderer/MeshRenderer.cpp	/^        bool MeshRenderer::empty() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
empty	Renderer/TextRenderer.h	/^            bool empty() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
emptyChunks	Allocator.h	/^    static ChunkList emptyChunks() {$/;"	f	language:C++	class:Allocator
emptyEntities	Controller/ReparentBrushesCommand.cpp	/^        const Model::EntityList& ReparentBrushesCommand::emptyEntities() const {$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
enable	View/ToolBox.cpp	/^        void ToolBox::enable() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
enabled	View/ToolBox.cpp	/^        bool ToolBox::enabled() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
end	Edge.h	/^        Vec<T,S> end;$/;"	m	language:C++	struct:TrenchBroom::Edge
end	IO/MappedFile.cpp	/^        const char* MappedFile::end() const {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
end	IO/Token.h	/^            const char* end() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
end	IO/Wad.h	/^            const char* end;$/;"	m	language:C++	struct:TrenchBroom::IO::MipData
end	Model/BrushEdge.h	/^            BrushVertex* end;$/;"	m	language:C++	class:TrenchBroom::Model::BrushEdge
end	Model/BrushEdgesIterator.h	/^            static OuterIterator end(const BrushList& brushes) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
end	Model/BrushFacesIterator.h	/^            static OuterIterator end(const BrushList& brushes) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
end	Model/EntityBrushesIterator.h	/^            static OuterIterator end(const EntityList& entities) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
end	Model/EntityFacesIterator.h	/^            static OuterIterator end(const EntityList& entities) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
end	Model/FaceEdgesIterator.h	/^            static OuterIterator end(const BrushFaceList& faces) {$/;"	f	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
end	Model/MapBrushesIterator.h	/^            static OuterIterator end(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
end	Model/MapEntitiesIterator.h	/^            EntityList::const_iterator end(Map& map) {$/;"	f	language:C++	namespace:TrenchBroom::Model::MapEntitiesIterator
end	Model/MapFacesIterator.h	/^            static OuterIterator end(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapFacesIterator
end	Model/MapObjectsIterator.h	/^            static OuterIterator end(const Map& map) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
endDrag	View/TextureTool.cpp	/^        void TextureToolHelper::endDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
endInner	Model/BrushEdgesIterator.h	/^            static InnerIterator endInner(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
endInner	Model/BrushFacesIterator.h	/^            static InnerIterator endInner(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
endInner	Model/EntityBrushesIterator.h	/^            static InnerIterator endInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
endInner	Model/EntityFacesIterator.h	/^            static InnerIterator endInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
endInner	Model/FaceEdgesIterator.h	/^            static InnerIterator endInner(BrushFaceList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
endInner	Model/MapBrushesIterator.h	/^            static InnerIterator endInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
endInner	Model/MapFacesIterator.h	/^            static InnerIterator endInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapFacesIterator
endInner	Model/MapObjectsIterator.h	/^            InnerIterator endInner(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapObjectsIterator
endMouseDrag	View/Tool.h	/^            void endMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
endMove	View/MoveToolHelper.cpp	/^        void MoveDelegate::endMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
endPlaneDrag	View/MoveToolHelper.cpp	/^        void MoveHelper::endPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
endPlaneDrag	View/RotateToolHelper.cpp	/^        void RotateHelper::endPlaneDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
endPrimitive	Renderer/IndexedVertexList.h	/^            void endPrimitive() {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
endRotate	View/RotateToolHelper.cpp	/^        void RotateDelegate::endRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
endTriangleFan	Renderer/Mesh.h	/^            void endTriangleFan() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
endTriangleSet	Renderer/Mesh.h	/^            void endTriangleSet() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
endTriangleStrip	Renderer/Mesh.h	/^            void endTriangleStrip() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
endVertex	Model/BrushEdge.cpp	/^        BrushVertex* BrushEdge::endVertex(const BrushFaceGeometry* side) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
endVertex	Model/BrushEdge.cpp	/^        const BrushVertex* BrushEdge::endVertex(const BrushFaceGeometry* side) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
entities	Model/Map.cpp	/^        const EntityList& Map::entities() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
entities	Model/Selection.cpp	/^            EntityList entities;$/;"	m	language:C++	struct:TrenchBroom::Model::Collect	file:
entities	View/SmartPropertyEditor.cpp	/^        const Model::EntityList SmartPropertyEditor::entities() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
entity	Model/Issue.cpp	/^        Entity* EntityIssue::entity() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
entityAffected	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::entityAffected(const Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
entityConfig	Model/GameConfig.cpp	/^        const GameConfig::EntityConfig& GameConfig::entityConfig() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
entityDefinition	View/EntityBrowserView.h	/^            Assets::PointEntityDefinition* entityDefinition;$/;"	m	language:C++	class:TrenchBroom::View::EntityCellData
entityDefinitionFile	View/MapDocument.cpp	/^        Model::EntityDefinitionFileSpec MapDocument::entityDefinitionFile() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityDefinitionFiles	View/MapDocument.cpp	/^        IO::Path::List MapDocument::entityDefinitionFiles() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityDefinitionManager	View/MapDocument.cpp	/^        Assets::EntityDefinitionManager& MapDocument::entityDefinitionManager() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityDefinitionsDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::entityDefinitionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
entityDefinitionsDidChange	View/EntityBrowser.cpp	/^        void EntityBrowser::entityDefinitionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
entityDefinitionsDidChange	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::entityDefinitionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
entityDefinitionsDidChange	View/MapDocument.cpp	/^        void MapDocument::entityDefinitionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityDefinitionsDidChangeNotifier	View/MapDocument.h	/^            Notifier0 entityDefinitionsDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
entityIterator	Model/ModelUtils.h	/^        CastIterator<FilterIterator<Iter, MatchObjectByType>, Entity*> entityIterator(const Iter& cur, const Iter& end) {$/;"	f	language:C++	namespace:TrenchBroom::Model
entityIterator	Model/ModelUtils.h	/^        CastIterator<FilterIterator<Iter, MatchObjectByType>, Entity*> entityIterator(const Iter& end) {$/;"	f	language:C++	namespace:TrenchBroom::Model
entityModelManager	View/MapDocument.cpp	/^        Assets::EntityModelManager& MapDocument::entityModelManager() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityPropertyDidChange	View/MapDocument.cpp	/^        void MapDocument::entityPropertyDidChange(Model::Entity* entity, const Model::EntityProperty& before, const Model::EntityProperty& after) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
entityPropertyDidChangeNotifier	View/MapDocument.h	/^            Notifier3<Model::Entity*, const Model::EntityProperty&, const Model::EntityProperty&> entityPropertyDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
entityPropertySelectedEventFunction	View/EntityPropertySelectedCommand.h	/^typedef void (wxEvtHandler::*entityPropertySelectedEventFunction)(TrenchBroom::View::EntityPropertySelectedCommand&);$/;"	t	language:C++
entriesWithType	IO/Wad.cpp	/^        const WadEntryList Wad::entriesWithType(const char type) const {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
eof	IO/Tokenizer.h	/^            bool eof() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
eq	MathUtils.h	/^    bool eq(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
equals	Assets/PropertyDefinition.cpp	/^        bool PropertyDefinition::equals(const PropertyDefinition* other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
equals	Mat.h	/^    bool equals(const Mat<T,R,C>& other, const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Mat
equals	Plane.h	/^    bool equals(const Plane<T,S>& other, const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Plane
equals	Vec.h	/^    bool equals(const Vec<T,S>& other, const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Vec
eraseAndDelete	CollectionUtils.h	/^    bool eraseAndDelete(std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
eraseAndDelete	CollectionUtils.h	/^    void eraseAndDelete(std::vector<T*>& vec, typename std::vector<T*>::iterator first) {$/;"	f	language:C++	namespace:VectorUtils
eraseAndDelete	CollectionUtils.h	/^    void eraseAndDelete(std::vector<T*>& vec, typename std::vector<T*>::iterator first, typename std::vector<T*>::iterator last) {$/;"	f	language:C++	namespace:VectorUtils
error	Hit.cpp	/^    FloatType Hit::error() const {$/;"	f	language:C++	class:TrenchBroom::Hit
error	IO/Tokenizer.h	/^            void error(const char c) const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
error	Logger.cpp	/^    void Logger::error(const String& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
error	Logger.cpp	/^    void Logger::error(const char* format, ...) {$/;"	f	language:C++	class:TrenchBroom::Logger
error	Logger.cpp	/^    void Logger::error(const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
errorIfEof	IO/Tokenizer.h	/^            void errorIfEof() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
escape	StringUtils.cpp	/^    String escape(const String& str, const String& chars) {$/;"	f	language:C++	namespace:StringUtils
evaluate	Controller/FaceAttributeCommand.h	/^            T evaluate(const T oldValue, const T newValue, const FlagOp op) const {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
evaluate	Controller/FaceAttributeCommand.h	/^            T evaluate(const T oldValue, const T newValue, const ValueOp op) const {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
exact	Model/EntityPropertyIndex.cpp	/^        EntityPropertyQuery EntityPropertyQuery::exact(const String& pattern) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
executableEventFunction	View/ExecutableEvent.h	/^typedef void (wxEvtHandler::*executableEventFunction)(TrenchBroom::View::ExecutableEvent&);$/;"	t	language:C++
execute	Model/BrushAlgorithm.h	/^            R execute() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
execute	Model/EntityPropertyIndex.cpp	/^        EntitySet EntityPropertyQuery::execute(const StringIndex<Entity*>& index) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
execute	View/Animation.cpp	/^        void ExecutableAnimation::execute() {$/;"	f	language:C++	class:TrenchBroom::View::ExecutableAnimation
execute	View/ExecutableEvent.cpp	/^        void ExecutableEvent::execute() {$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent
expand	BBox.h	/^    BBox<T,S>& expand(const T f) {$/;"	f	language:C++	class:BBox
expanded	BBox.h	/^    const BBox<T,S> expanded(const T f) const {$/;"	f	language:C++	class:BBox
expect	IO/Parser.h	/^            void expect(const TokenType typeMask, const Token& token) const {$/;"	f	language:C++	class:TrenchBroom::IO::Parser
expect	Preference.h	/^        void expect(const wxString& token, const String& expected1, const String& expected2 = "", const String& expected3 = "") const {$/;"	f	language:C++	class:TrenchBroom::Converter
expect	Preference.h	/^        wxString expect(wxStringTokenizer& tokenizer, const String& expected1, const String& expected2 = "", const String& expected3 = "") const {$/;"	f	language:C++	class:TrenchBroom::Converter
expectEntry	IO/GameConfigParser.cpp	/^        void GameConfigParser::expectEntry(const int typeMask, const ConfigEntry& entry) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
expectTableEntry	IO/GameConfigParser.cpp	/^        void GameConfigParser::expectTableEntry(const String& key, const int typeMask, const ConfigTable& parent) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
expired	SharedPointer.h	/^bool expired(TrenchBroom::shared_ptr<T> ptr) {$/;"	f	language:C++
expired	SharedPointer.h	/^bool expired(TrenchBroom::weak_ptr<T> ptr) {$/;"	f	language:C++
extension	IO/Path.cpp	/^        const String Path::extension() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
external	Model/EntityDefinitionFileSpec.cpp	/^        EntityDefinitionFileSpec EntityDefinitionFileSpec::external(const IO::Path& fullPath) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
externalCollectionNames	Assets/TextureManager.cpp	/^        const StringList TextureManager::externalCollectionNames() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
extraOffsets	Renderer/BoundsInfoRenderer.cpp	/^        Vec2f BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor::extraOffsets(const Alignment::Type a) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
extraOffsets	Renderer/BoundsInfoRenderer.cpp	/^        Vec2f BoundsInfoRenderer::BoundsInfoSizeTextAnchor::extraOffsets(const Alignment::Type a) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
extraOffsets	Renderer/TextRenderer.cpp	/^        Vec2f SimpleTextAnchor::extraOffsets(const Alignment::Type a) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
extraOffsets	Renderer/TextRenderer.cpp	/^        Vec2f TextAnchor::extraOffsets(const Alignment::Type a) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextAnchor
extractAllVertices	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::extractAllVertices() {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
extractBackupNo	View/Autosaver.cpp	/^        size_t extractBackupNo(const IO::Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::View
extractEdges	Controller/MoveBrushEdgesCommand.cpp	/^        void MoveBrushEdgesCommand::extractEdges(const Model::VertexToEdgesMap& edges) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
extractEdges	Controller/SplitBrushEdgesCommand.cpp	/^        void SplitBrushEdgesCommand::extractEdges(const Model::VertexToEdgesMap& edges) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
extractEnabledMods	Model/Game.cpp	/^        StringList Game::extractEnabledMods(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
extractEntityDefinitionFile	Model/Game.cpp	/^        EntityDefinitionFileSpec Game::extractEntityDefinitionFile(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
extractExternalTextureCollections	Model/Game.cpp	/^        StringList Game::extractExternalTextureCollections(const Map* map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
extractFaces	Controller/MoveBrushFacesCommand.cpp	/^        void MoveBrushFacesCommand::extractFaces(const Model::VertexToFacesMap& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
extractFaces	Controller/SplitBrushFacesCommand.cpp	/^        void SplitBrushFacesCommand::extractFaces(const Model::VertexToFacesMap& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
extractVertices	Controller/MoveBrushVerticesCommand.cpp	/^        void MoveBrushVerticesCommand::extractVertices(const Model::VertexToBrushesMap& vertices) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
extractVertices	Controller/SnapBrushVerticesCommand.cpp	/^        void SnapBrushVerticesCommand::extractVertices(const Model::VertexToBrushesMap& vertices) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
face	Model/BrushFaceGeometry.h	/^            BrushFace* face;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
face	View/TexturingViewHelper.cpp	/^        Model::BrushFace* TexturingViewHelper::face() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
faceAttribsConfig	Model/GameConfig.cpp	/^        const GameConfig::FaceAttribsConfig& GameConfig::faceAttribsConfig() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
faceColor	Renderer/BrushRenderer.cpp	/^        const Color& BrushRenderer::faceColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
faceCoordSystem	Model/TexCoordSystemHelper.cpp	/^        TexCoordSystemHelper TexCoordSystemHelper::faceCoordSystem(const BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
faceDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::faceDidChange(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
faceDidChange	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::faceDidChange(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
faceDidChange	View/MapDocument.cpp	/^        void MapDocument::faceDidChange(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
faceDidChange	View/MapView.cpp	/^        void MapView::faceDidChange(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
faceDidChange	View/TexturingView.cpp	/^        void TexturingView::faceDidChange(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
faceDidChange	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::faceDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
faceDidChangeNotifier	View/MapDocument.h	/^            Notifier1<Model::BrushFace*> faceDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
faceHandleClicked	View/VertexTool.cpp	/^        void VertexTool::faceHandleClicked(const InputState& inputState, const Hits::List& hits) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
faceInfo	Model/BrushFaceGeometry.cpp	/^        Polygon3 BrushFaceGeometry::faceInfo() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
faceToTex	Model/TexCoordSystemHelper.h	/^            static T faceToTex(const BrushFace* face, const T& v) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
faceWillChangeNotifier	View/MapDocument.h	/^            Notifier1<Model::BrushFace*> faceWillChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
faces	Assets/Bsp29Model.h	/^                FaceList faces;$/;"	m	language:C++	struct:TrenchBroom::Assets::Bsp29Model::SubModel
faces	Model/Brush.cpp	/^        const BrushFaceList& Brush::faces() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
faces	Model/Brush.h	/^                BrushFaceList faces;$/;"	m	language:C++	struct:TrenchBroom::Model::BrushSnapshot::FacesHolder
faces	Model/Selection.cpp	/^            BrushFaceList faces;$/;"	m	language:C++	struct:TrenchBroom::Model::Collect	file:
faces	Model/Selection.cpp	/^            BrushFaceList faces;$/;"	m	language:C++	struct:TrenchBroom::Model::CollectFaces	file:
faces	View/VertexHandleManager.cpp	/^        const Model::BrushFaceList& VertexHandleManager::faces(const Vec3& handlePosition) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
false	Preferences.cpp	/^        Preference<bool>  CameraLookInvertH(IO::Path("Controls\/Camera\/Invert horizontal look"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool>  CameraLookInvertV(IO::Path("Controls\/Camera\/Invert vertical look"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool>  CameraPanInvertH(IO::Path("Controls\/Camera\/Invert horizontal pan"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool>  CameraPanInvertV(IO::Path("Controls\/Camera\/Invert vertical pan"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool> CameraAltMoveInvert(IO::Path("Controls\/Camera\/Invert zoom direction when using alt to move"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool> CameraEnableAltMove(IO::Path("Controls\/Camera\/Use alt to move"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool> CameraMoveInCursorDir(IO::Path("Controls\/Camera\/Move camera in cursor dir"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool> GridCheckerboard(IO::Path("Renderer\/Grid\/Checkerboard"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
false	Preferences.cpp	/^        Preference<bool> UseFog(IO::Path("Renderer\/UseFog"), false);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
farPlane	Renderer/Camera.cpp	/^        float Camera::farPlane() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
fileExists	IO/DiskFileSystem.cpp	/^            bool fileExists(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
fileExists	IO/FileSystem.cpp	/^        bool FileSystem::fileExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
fileExists	IO/PakFileSystem.cpp	/^        bool PakFileSystem::Directory::fileExists(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
fileFormats	Model/GameConfig.cpp	/^        const StringSet& GameConfig::fileFormats() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
filePosition	Model/Issue.cpp	/^        size_t BrushIssue::filePosition() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
filePosition	Model/Issue.cpp	/^        size_t EntityIssue::filePosition() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
filePosition	Model/Object.cpp	/^        size_t Object::filePosition() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
fileSystemConfig	Model/GameConfig.cpp	/^        const GameConfig::FileSystemConfig& GameConfig::fileSystemConfig() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
filename	View/MapDocument.cpp	/^        String MapDocument::filename() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
fill	Vec.h	/^    static Vec<T,S> fill(const T value) {$/;"	f	language:C++	class:Vec
filter	Hit.cpp	/^    Hits::List Hits::filter(const Hit::HitType type) const {$/;"	f	language:C++	class:TrenchBroom::Hits
filter	Hit.cpp	/^    Hits::List Hits::filter(const HitFilter& filter) const {$/;"	f	language:C++	class:TrenchBroom::Hits
filter	Model/ModelUtils.h	/^        void filter(InputIter cur, InputIter end, const Filter& filter, OutputIter output) {$/;"	f	language:C++	namespace:TrenchBroom::Model
filter	Renderer/BrushRenderer.h	/^                BrushRenderer::Filter& filter;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BrushRenderer::BuildBrushEdges
filter	View/MapDocument.cpp	/^        Model::ModelFilter& MapDocument::filter() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
filter	View/MapDocument.cpp	/^        const Model::ModelFilter& MapDocument::filter() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
filterIterator	FilterIterator.h	/^    FilterIterator<Iterator, Filter> filterIterator(const Iterator& cur, const Iterator& end, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom
find	CollectionUtils.h	/^    typename std::vector<T*>::const_iterator find(const std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
find	CollectionUtils.h	/^    typename std::vector<T*>::iterator find(std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
find	CollectionUtils.h	/^    typename std::vector<T>::const_iterator find(const std::vector<T>& vec, const T& item) {$/;"	f	language:C++	namespace:VectorUtils
find	CollectionUtils.h	/^    typename std::vector<T>::iterator find(std::vector<T>& vec, const T& item) {$/;"	f	language:C++	namespace:VectorUtils
find	Model/ModelUtils.h	/^        Iter find(Iter cur, Iter end, const Filter& filter) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findApplicablePlaneNormals	View/MoveTextureHelper.cpp	/^        Vec3::List MoveTextureHelper::findApplicablePlaneNormals(const Model::BrushFaceList& faces, const Model::BrushFace* reference) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
findBrushByFilePosition	Model/Entity.cpp	/^        Brush* Entity::findBrushByFilePosition(const size_t position) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
findBrushEdge	Model/BrushEdge.cpp	/^        BrushEdgeList::const_iterator findBrushEdge(const BrushEdgeList& edges, const Vec3& position1, const Vec3& position2) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBrushEdge	Model/BrushEdge.cpp	/^        BrushEdgeList::iterator findBrushEdge(BrushEdgeList& edges, const Vec3& position1, const Vec3& position2) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBrushFaceGeometry	Model/BrushFaceGeometry.cpp	/^        BrushFaceGeometryList::const_iterator findBrushFaceGeometry(const BrushFaceGeometryList& faceGeometries, const Vec3::List& positions) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBrushFaceGeometry	Model/BrushFaceGeometry.cpp	/^        BrushFaceGeometryList::iterator findBrushFaceGeometry(BrushFaceGeometryList& faceGeometries, const Vec3::List& positions) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBrushVertex	Model/BrushVertex.cpp	/^        BrushVertexList::const_iterator findBrushVertex(const BrushVertexList& vertices, const Vec3& position) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBrushVertex	Model/BrushVertex.cpp	/^        BrushVertexList::iterator findBrushVertex(BrushVertexList& vertices, const Vec3& position) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findBuiltinTextureCollections	Model/Game.cpp	/^        IO::Path::List Game::findBuiltinTextureCollections() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
findCaseSensitivePath	IO/DiskFileSystem.cpp	/^            Path findCaseSensitivePath(const Path::List& list, const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
findConfigFile	Model/GameConfig.cpp	/^        const IO::Path GameConfig::findConfigFile(const IO::Path& filePath) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
findDefaultRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow::List::const_iterator EntityPropertyGridTable::RowManager::findDefaultRow(const DefaultRow::List& rows, const String& key) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
findDefaultRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::DefaultRow::List::iterator EntityPropertyGridTable::RowManager::findDefaultRow(DefaultRow::List& rows, const String& key) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
findDirectory	IO/PakFileSystem.cpp	/^        const PakFileSystem::Directory& PakFileSystem::Directory::findDirectory(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
findEdgeHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        Vec3::List RebuildBrushGeometryCommand::findEdgeHandlePositions(const Vec3& original) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
findEntities	Model/EntityPropertyIndex.cpp	/^        EntityList EntityPropertyIndex::findEntities(const EntityPropertyQuery& keyQuery, const EntityPropertyQuery& valueQuery) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
findEntitiesWithNumberedProperty	Model/Map.cpp	/^        EntityList Map::findEntitiesWithNumberedProperty(const PropertyKey& prefix, const PropertyValue& value) const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
findEntitiesWithProperty	Model/Map.cpp	/^        EntityList Map::findEntitiesWithProperty(const PropertyKey& key, const PropertyValue& value) const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
findEntityDefinition	View/MapView.cpp	/^        Assets::EntityDefinition* MapView::findEntityDefinition(const Assets::EntityDefinitionGroups& groups, const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
findFaceHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        Vec3::List RebuildBrushGeometryCommand::findFaceHandlePositions(const Vec3& original) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
findFile	IO/PakFileSystem.cpp	/^        const MappedFile::Ptr PakFileSystem::Directory::findFile(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const Hit::HitType type, const Hit::HitType ignoreOccluderMask) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const Hit::HitType type, const HitFilter& ignoreFilter) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const Hit::HitType type, const bool ignoreOccluders) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const HitFilter& filter, const Hit::HitType ignoreOccluderMask) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const HitFilter& filter, const HitFilter& ignoreFilter) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirst	Hit.cpp	/^    const Hit& Hits::findFirst(const HitFilter& filter, const bool ignoreOccluders) const {$/;"	f	language:C++	class:TrenchBroom::Hits
findFirstDifference	StringUtils.cpp	/^    size_t findFirstDifference(const String& str1, const String& str2) {$/;"	f	language:C++	namespace:StringUtils
findFirstHit	Model/HitAdapter.cpp	/^        const Hit& findFirstHit(const Hits& hits, Hit::HitType type, const ModelFilter& filter, bool ignoreOccluders) {$/;"	f	language:C++	namespace:TrenchBroom::Model
findFontFile	IO/SystemPaths.cpp	/^            Path findFontFile(const String& fontName) {$/;"	f	language:C++	namespace:TrenchBroom::IO::SystemPaths
findFrame	View/wxUtils.cpp	/^        wxFrame* findFrame(wxWindow* window) {$/;"	f	language:C++	namespace:TrenchBroom::View
findFreeBlock	Renderer/Vbo.cpp	/^        Vbo::VboBlockList::iterator Vbo::findFreeBlock(const size_t minCapacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
findIf	CollectionUtils.h	/^    T* findIf(const std::vector<T*>& vec, const P& predicate) {$/;"	f	language:C++	namespace:VectorUtils
findIf	CollectionUtils.h	/^    const T* findIf(const std::vector<T>& vec, const P& predicate) {$/;"	f	language:C++	namespace:VectorUtils
findIf	CollectionUtils.h	/^    const TrenchBroom::shared_ptr<T> findIf(const std::vector<TrenchBroom::shared_ptr<T> >& vec, const P& predicate) {$/;"	f	language:C++	namespace:VectorUtils
findInsertPos	Renderer/OutlineTracer.cpp	/^        OutlineTracer::Position::List::iterator OutlineTracer::findInsertPos(const Position& position, Position::List& positions) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
findIntegerPlanePoints	Model/Brush.cpp	/^        void Brush::findIntegerPlanePoints(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
findIntegerPlanePoints	Model/BrushFace.cpp	/^        void BrushFace::findIntegerPlanePoints() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
findIssues	Model/IssueManager.cpp	/^        Issue* IssueManager::findIssues(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
findItems	IO/FileSystem.cpp	/^        Path::List FileSystem::findItems(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
findItems	IO/FileSystem.h	/^            Path::List findItems(const Path& path, const Matcher& matcher) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
findItemsRecursively	IO/FileSystem.cpp	/^        Path::List FileSystem::findItemsRecursively(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
findItemsRecursively	IO/FileSystem.h	/^            Path::List findItemsRecursively(const Path& path, const Matcher& matcher) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
findLocalMinimum	Model/PlanePointFinder.cpp	/^            void findLocalMinimum() {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
findMatchingFace	View/ResizeBrushesTool.cpp	/^        Model::BrushFace* ResizeBrushesTool::findMatchingFace(const Model::Brush& brush, const Model::BrushFace& face) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
findMatchingFaces	View/ResizeBrushesTool.cpp	/^        Model::BrushFaceList ResizeBrushesTool::findMatchingFaces(const Model::BrushList& brushes, const Model::BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
findMinimum	Model/PlanePointFinder.cpp	/^            Vec3 findMinimum(const Vec3& initialPosition) {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor
findMissingKillTargets	Model/Entity.cpp	/^        PropertyKeyList Entity::findMissingKillTargets() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
findMissingLinkTargets	Model/Entity.cpp	/^        PropertyKeyList Entity::findMissingLinkTargets() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
findMissingTargets	Model/Entity.cpp	/^        void Entity::findMissingTargets(const PropertyKey& prefix, PropertyKeyList& result) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
findNewBrushParent	View/MapView.cpp	/^        Model::Entity* MapView::findNewBrushParent(const Model::BrushList& brushes) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
findObjectByFilePosition	Model/Map.cpp	/^        Object* Map::findObjectByFilePosition(const size_t position) const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
findObjects	Model/Octree.h	/^            List findObjects(const Ray<F,3>& ray) const {$/;"	f	language:C++	class:TrenchBroom::Model::Octree
findObjects	Model/Octree.h	/^            void findObjects(const Ray<F,3>& ray, List& result) const {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
findOrCreateChild	StringIndex.h	/^            const Node& findOrCreateChild(const String& key) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
findOrCreateDirectory	IO/PakFileSystem.cpp	/^        PakFileSystem::Directory& PakFileSystem::Directory::findOrCreateDirectory(const Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
findOrInsert	CollectionUtils.h	/^    typename std::map<K, V>::iterator findOrInsert(std::map<K, V>& map, const K& key) {$/;"	f	language:C++	namespace:MapUtils
findOrInsert	CollectionUtils.h	/^    typename std::map<K, V>::iterator findOrInsert(std::map<K, V>& map, const K& key, const W& value) {$/;"	f	language:C++	namespace:MapUtils
findOther	CollectionUtils.h	/^    typename std::vector<T*>::const_iterator findOther(const std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
findPlanePoints	Controller/FixPlanePointsCommand.cpp	/^        FixPlanePointsCommand::Ptr FixPlanePointsCommand::findPlanePoints(View::MapDocumentWPtr document, const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
findPlanePoints	View/ControllerFacade.cpp	/^        bool ControllerFacade::findPlanePoints(Model::Brush& brush) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
findPoints	Model/PlanePointFinder.cpp	/^        void PlanePointFinder::findPoints(const Plane3& plane, BrushFace::Points& points, const size_t numPoints) {$/;"	f	language:C++	class:TrenchBroom::Model::PlanePointFinder
findProperty	Model/EntityProperties.cpp	/^        EntityProperty::List::const_iterator EntityProperties::findProperty(const PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
findProperty	Model/EntityProperties.cpp	/^        EntityProperty::List::iterator EntityProperties::findProperty(const PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
findPropertyRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow::List::const_iterator EntityPropertyGridTable::RowManager::findPropertyRow(const PropertyRow::List& rows, const String& key) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
findPropertyRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow::List::iterator EntityPropertyGridTable::RowManager::findPropertyRow(PropertyRow::List& rows, const String& key) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
findRecentDocumentsMenu	View/Menu.cpp	/^        wxMenu* Menu::findRecentDocumentsMenu(const wxMenuBar* menuBar) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
findSmallestError	Model/PlanePointFinder.cpp	/^            size_t findSmallestError() {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
findUndecidedEdge	Model/BrushFaceGeometry.cpp	/^        BrushEdge* BrushFaceGeometry::findUndecidedEdge() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
findUniformLocation	Renderer/ShaderProgram.cpp	/^        GLint ShaderProgram::findUniformLocation(const String& name) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
findVertexHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        Vec3::List RebuildBrushGeometryCommand::findVertexHandlePositions(const Vec3& original) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
findWorldspawn	Model/Map.cpp	/^        Entity* Map::findWorldspawn() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
fireChangeEvent	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::fireChangeEvent() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
first	BBox.h	/^    bool first;$/;"	m	language:C++	struct:RotateBBox
first	BBox.h	/^    bool first;$/;"	m	language:C++	struct:TransformBBox
first	Model/IssueManager.h	/^                Issue* first;$/;"	m	language:C++	struct:TrenchBroom::Model::IssueManager::IssuePair
firstAxis	Vec.h	/^    const Vec<T,3> firstAxis() const {$/;"	f	language:C++	class:Vec
firstComponent	IO/Path.cpp	/^        Path Path::firstComponent() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
firstComponent	Vec.h	/^    size_t firstComponent() const {$/;"	f	language:C++	class:Vec
firstFrame	Assets/MdlModel.cpp	/^        const MdlFrame* MdlFrame::firstFrame() const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrame
firstFrame	Assets/MdlModel.cpp	/^        const MdlFrame* MdlFrameGroup::firstFrame() const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
firstHit	View/VertexTool.cpp	/^        const Hit& VertexTool::firstHit(const Hits& hits) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
firstHits	View/VertexTool.cpp	/^        Hits::List VertexTool::firstHits(const Hits& hits) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
firstPicture	Assets/MdlModel.cpp	/^        const Texture* MdlSkin::firstPicture() const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlSkin
fixCase	IO/DiskFileSystem.cpp	/^            Path fixCase(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
fixCase	IO/DiskFileSystem.cpp	/^        Path DiskFileSystem::fixCase(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
fixCounts	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::fixCounts(Position::List::iterator it, Position::List::iterator end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
fixPath	IO/DiskFileSystem.cpp	/^            Path fixPath(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
fixPath	IO/DiskFileSystem.cpp	/^        Path DiskFileSystem::fixPath(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
flagChangedEventFunction	View/FlagChangedCommand.h	/^typedef void (wxEvtHandler::*flagChangedEventFunction)(TrenchBroom::View::FlagChangedCommand&);$/;"	t	language:C++
flagMixedValue	View/FlagChangedCommand.cpp	/^        int FlagChangedCommand::flagMixedValue() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
flagName	Model/GameConfig.cpp	/^        String GameConfig::FlagsConfig::flagName(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FlagsConfig
flagNames	Model/GameConfig.cpp	/^        StringList GameConfig::FlagsConfig::flagNames(const int mask) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig::FlagsConfig
flagSet	View/FlagChangedCommand.cpp	/^        bool FlagChangedCommand::flagSet() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
flagSetValue	View/FlagChangedCommand.cpp	/^        int FlagChangedCommand::flagSetValue() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
flags	.ycm_extra_conf.py	/^flags = [$/;"	v	language:Python
flags	Model/GameConfig.h	/^                FlagConfigList flags;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FlagsConfig
flip	Edge.h	/^        void flip() {$/;"	f	language:C++	struct:TrenchBroom::Edge
flip	Model/BrushEdge.cpp	/^        void BrushEdge::flip() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
flip	Plane.h	/^    Plane<T,S>& flip() {$/;"	f	language:C++	class:Plane
flipObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::flipObjects(const Model::ObjectList& objects, const Vec3& center, const Math::Axis::Type axis, const bool lockTextures) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
flipObjects	View/MapView.cpp	/^        void MapView::flipObjects(const Math::Direction direction) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
flipped	Plane.h	/^    Plane<T,S> flipped() {$/;"	f	language:C++	class:Plane
floor	MathUtils.h	/^    T floor(const T v) {$/;"	f	language:C++	namespace:Math
font	Renderer/EntityRenderer.cpp	/^        TextureFont& EntityRenderer::font(FontManager& fontManager) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
font	Renderer/FontManager.cpp	/^        TextureFont& FontManager::font(const FontDescriptor& fontDescriptor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontManager
fontDescriptor	View/EntityBrowserView.h	/^            Renderer::FontDescriptor fontDescriptor;$/;"	m	language:C++	class:TrenchBroom::View::EntityCellData
fontDescriptor	View/TextureBrowserView.h	/^            Renderer::FontDescriptor fontDescriptor;$/;"	m	language:C++	class:TrenchBroom::View::TextureCellData
fontManager	View/GLContextHolder.cpp	/^        Renderer::FontManager& GLContextHolder::fontManager() {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
format	Model/Map.cpp	/^        MapFormat::Type Map::format() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
formatString	StringUtils.cpp	/^    String formatString(const char* format, ...) {$/;"	f	language:C++	namespace:StringUtils
formatStringV	StringUtils.cpp	/^    String formatStringV(const char* format, va_list arguments) {$/;"	f	language:C++	namespace:StringUtils
fov	Renderer/PerspectiveCamera.cpp	/^        float PerspectiveCamera::fov() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
fragmentShaders	Renderer/ShaderManager.cpp	/^        const StringList& ShaderConfig::fragmentShaders() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderConfig
frameIndex	Assets/ModelDefinition.h	/^            size_t frameIndex;$/;"	m	language:C++	struct:TrenchBroom::Assets::ModelSpecification
frameManager	TrenchBroomApp.cpp	/^        FrameManager* TrenchBroomApp::frameManager() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
frames	View/FrameManager.cpp	/^        FrameList FrameManager::frames() const {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
free	Renderer/Vbo.cpp	/^        void Vbo::free() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
free	Renderer/VboBlock.cpp	/^        void VboBlock::free() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
freeBlock	Renderer/Vbo.cpp	/^        void Vbo::freeBlock(VboBlock* block) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
freeHitType	Hit.cpp	/^    Hit::HitType Hit::freeHitType() {$/;"	f	language:C++	class:TrenchBroom::Hit
freeType	Controller/Command.cpp	/^        Command::CommandType Command::freeType() {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
freeType	Model/Issue.cpp	/^        IssueType Issue::freeType() {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
freeType	Model/QuickFix.cpp	/^        QuickFixType QuickFix::freeType() {$/;"	f	language:C++	class:TrenchBroom::Model::QuickFix
freeType	View/Animation.cpp	/^        Animation::Type Animation::freeType() {$/;"	f	language:C++	class:TrenchBroom::View::Animation
fromLists	Renderer/Vertex.h	/^            static List fromLists(const std::vector<typename A1::ElementType>& list,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex1
fromLists	Renderer/Vertex.h	/^            static List fromLists(const std::vector<typename A1::ElementType>& list1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex2
fromLists	Renderer/Vertex.h	/^            static List fromLists(const std::vector<typename A1::ElementType>& list1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex3
fromLists	Renderer/Vertex.h	/^            static List fromLists(const std::vector<typename A1::ElementType>& list1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex4
fromLists	Renderer/Vertex.h	/^            static List fromLists(const std::vector<typename A1::ElementType>& list1,$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex5
fromMatrix	Model/TexCoordSystem.cpp	/^        Mat4x4 TexCoordSystem::fromMatrix(const Vec2f& offset, const Vec2f& scale) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
fromTexCoordSystemMatrix	Model/BrushFace.cpp	/^        Mat4x4 BrushFace::fromTexCoordSystemMatrix(const Vec2f& offset, const Vec2f& scale) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
fromWxColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::Color::fromWxColor(const wxColor& wxColor, const ColorRange range) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color
fromWxColor	View/wxUtils.cpp	/^        Color fromWxColor(const wxColor& color) {$/;"	f	language:C++	namespace:TrenchBroom::View
fromWxString	Preference.h	/^        Color fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        IO::Path fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        String fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        StringMap fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        T fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        View::KeyboardShortcut fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        bool fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        double fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        float fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
fromWxString	Preference.h	/^        int fromWxString(const wxString& string) const {$/;"	f	language:C++	class:TrenchBroom::Converter
front	IO/MdlParser.h	/^                bool front;$/;"	m	language:C++	struct:TrenchBroom::IO::MdlParser::MdlSkinTriangle
frontBrushes	View/Clipper.h	/^            Model::EntityBrushesMap frontBrushes;$/;"	m	language:C++	struct:TrenchBroom::View::ClipResult
frustumPlanes	Renderer/Camera.cpp	/^        void Camera::frustumPlanes(Plane3f& top, Plane3f& right, Plane3f& bottom, Plane3f& left) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
full	Allocator.h	/^        bool full() const {$/;"	f	language:C++	class:Allocator::Chunk
fullChunks	Allocator.h	/^    static ChunkList& fullChunks() {$/;"	f	language:C++	class:Allocator
fullPath	Model/EntityDefinitionFileSpec.cpp	/^        const IO::Path& EntityDefinitionFileSpec::fullPath() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
function	Notifier.h	/^            F function() const {$/;"	f	language:C++	class:TrenchBroom::Notifier0::CObserver
function	Notifier.h	/^            F function() const {$/;"	f	language:C++	class:TrenchBroom::Notifier1::CObserver
function	Notifier.h	/^            F function() const {$/;"	f	language:C++	class:TrenchBroom::Notifier2::CObserver
function	Notifier.h	/^            F function() const {$/;"	f	language:C++	class:TrenchBroom::Notifier3::CObserver
g	Color.cpp	/^float Color::g() const {$/;"	f	language:C++	class:Color
g	View/SmartColorEditor.h	/^                T g() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color_
game	View/MapDocument.cpp	/^        Model::GamePtr MapDocument::game() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
gameConfig	Model/GameFactory.cpp	/^        const GameConfig& GameFactory::gameConfig(const String& name) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
gameCount	Model/GameFactory.cpp	/^        size_t GameFactory::gameCount() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
gameList	Model/GameFactory.cpp	/^        const StringList& GameFactory::gameList() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
gameName	Model/Game.cpp	/^        const String& Game::gameName() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
gameName	View/GameSelectionCommand.cpp	/^        const String& GameSelectionCommand::gameName() const {$/;"	f	language:C++	class:TrenchBroom::View::GameSelectionCommand
gamePath	Model/Game.cpp	/^        IO::Path Game::gamePath() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
gamePath	Model/GameFactory.cpp	/^        IO::Path GameFactory::gamePath(const String& gameName) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
gameSelectionEventFunction	View/GameSelectionCommand.h	/^typedef void (wxEvtHandler::*gameSelectionEventFunction)(TrenchBroom::View::GameSelectionCommand&);$/;"	t	language:C++
generate	Model/EmptyBrushEntityIssueGenerator.cpp	/^        Issue* EmptyBrushEntityIssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssueGenerator
generate	Model/EntityLinkIssueGenerator.cpp	/^        Issue* EntityLinkIssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssueGenerator
generate	Model/FloatPointsIssueGenerator.cpp	/^        Issue* FloatPointsIssueGenerator::generate(Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssueGenerator
generate	Model/FloatVerticesIssueGenerator.cpp	/^        Issue* FloatVerticesIssueGenerator::generate(Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssueGenerator
generate	Model/IssueGenerator.cpp	/^        Issue* IssueGenerator::generate(Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueGenerator
generate	Model/IssueGenerator.cpp	/^        Issue* IssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueGenerator
generate	Model/IssueGenerator.cpp	/^        Issue* IssueGenerator::generate(Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueGenerator
generate	Model/MissingEntityClassnameIssueGenerator.cpp	/^        Issue* MissingEntityClassnameIssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssueGenerator
generate	Model/MissingEntityDefinitionIssueGenerator.cpp	/^        Issue* MissingEntityDefinitionIssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssueGenerator
generate	Model/MixedBrushContentsIssueGenerator.cpp	/^        Issue* MixedBrushContentsIssueGenerator::generate(Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssueGenerator
generate	Model/PointEntityWithBrushesIssueGenerator.cpp	/^        Issue* PointEntityWithBrushesIssueGenerator::generate(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssueGenerator
get	PreferenceManager.h	/^        const T& get(Preference<T>& preference) const {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
getActionName	View/MoveTool.h	/^            String getActionName(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
getAngle	Model/QuakeEntityRotationPolicy.cpp	/^        FloatType QuakeEntityRotationPolicy::getAngle(Vec3 direction) {$/;"	f	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
getAngle	View/RotateToolHelper.cpp	/^        FloatType RotateDelegate::getAngle(const InputState& inputState, const Vec3& handlePoint, const Vec3& curPoint, const Vec3& axis) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
getAngleIndicatorColor	View/RotateObjectsHandle.cpp	/^        Color RotateObjectsHandle::getAngleIndicatorColor(const HitArea area) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
getContentFlags	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::getContentFlags(wxArrayString& names, wxArrayString& descriptions) const {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
getCurrentDropSource	View/GenericDropSource.cpp	/^        GenericDropSource* GenericDropSource::getCurrentDropSource() {$/;"	f	language:C++	class:TrenchBroom::View::GenericDropSource
getCurrentWorkingDir	IO/DiskFileSystem.cpp	/^            Path getCurrentWorkingDir() {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
getDirection	View/MoveToolHelper.cpp	/^        Renderer::MoveIndicatorRenderer::Direction MoveHelper::getDirection() const {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
getDirectoryContents	IO/DiskFileSystem.cpp	/^            Path::List getDirectoryContents(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
getDirectoryContents	IO/FileSystem.cpp	/^        Path::List FileSystem::getDirectoryContents(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
getDragText	View/ToolBoxDropTarget.cpp	/^        String ToolBoxDropTarget::getDragText() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
getFaces	Model/MoveBrushVertexAlgorithm.h	/^                void getFaces(BrushFaceList& newFaces, BrushFaceList& droppedFaces) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
getFlagLabel	View/FlagsEditor.cpp	/^        wxString FlagsEditor::getFlagLabel(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
getFlagValueFromEntity	View/SmartSpawnflagsEditor.cpp	/^        int SmartSpawnflagsEditor::getFlagValueFromEntity(const Model::Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
getFlagValuesFromEntities	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::getFlagValuesFromEntities(const Model::EntityList& entities, int& setFlags, int& mixedFlags) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
getFlags	View/FaceAttribsEditor.cpp	/^        void getFlags(const Model::GameConfig::FlagConfigList& flags, wxArrayString& names, wxArrayString& descriptions) {$/;"	f	language:C++	namespace:TrenchBroom::View
getFlagsFromEntities	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::getFlagsFromEntities(const Model::EntityList& entities, wxArrayString& labels) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
getFrustum	Renderer/PerspectiveCamera.cpp	/^        Vec2f PerspectiveCamera::getFrustum() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
getFrustumVertices	Renderer/PerspectiveCamera.cpp	/^        void PerspectiveCamera::getFrustumVertices(const float size, Vec3f (&verts)[4]) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
getHandleVertices	View/TexturingViewScaleOriginTool.cpp	/^        TexturingViewScaleOriginTool::EdgeVertex::List TexturingViewScaleOriginTool::getHandleVertices(const Hits& hits) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
getHandleVertices	View/TexturingViewScaleTool.cpp	/^        TexturingViewScaleTool::EdgeVertex::List TexturingViewScaleTool::getHandleVertices(const Hits& hits) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
getHitPointInFaceCoords	View/TexturingViewScaleTool.cpp	/^        Vec2f TexturingViewScaleTool::getHitPointInFaceCoords(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
getIndexFromEvent	View/FlagsEditor.cpp	/^        size_t FlagsEditor::getIndexFromEvent(const wxCommandEvent& event) const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
getMenu	View/Menu.cpp	/^        const Menu& Menu::getMenu(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::Menu
getMixedFlagValue	View/FlagsEditor.cpp	/^        int FlagsEditor::getMixedFlagValue() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
getMoveOrigin	View/MoveToolHelper.cpp	/^        Vec3 MoveDelegate::getMoveOrigin(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
getNormals	View/Clipper.cpp	/^        Vec3::List Clipper::getNormals(const Model::BrushFaceList& faces) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
getNormals	View/Clipper.cpp	/^        Vec3::List Clipper::getNormals(const Vec3& point, const Model::BrushFace& face) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
getNumFlags	View/FlagsEditor.cpp	/^        size_t FlagsEditor::getNumFlags() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
getPath	IO/DiskFileSystem.cpp	/^        const Path& DiskFileSystem::getPath() const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
getPointHandleAxis	View/RotateObjectsHandle.cpp	/^        Vec3 RotateObjectsHandle::getPointHandleAxis(const HitArea area) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
getPointHandlePosition	View/RotateObjectsHandle.cpp	/^        Vec3 RotateObjectsHandle::getPointHandlePosition(const HitArea area) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
getPointHandlePosition	View/RotateObjectsHandle.cpp	/^        Vec3 RotateObjectsHandle::getPointHandlePosition(const Vec3& axis) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
getRotateInfo	View/RotateToolHelper.cpp	/^        RotateInfo RotateDelegate::getRotateInfo(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
getRotation	Model/QuakeEntityRotationPolicy.cpp	/^        Quat3 QuakeEntityRotationPolicy::getRotation(const Entity& entity) {$/;"	f	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
getRotationAxis	View/RotateObjectsHandle.cpp	/^        Vec3 RotateObjectsHandle::getRotationAxis(const HitArea area) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
getScaleHandle	View/TexturingViewScaleTool.cpp	/^        Vec2i TexturingViewScaleTool::getScaleHandle(const Hit& xHandleHit, const Hit& yHandleHit) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
getScaleHandlePositionInFaceCoords	View/TexturingViewScaleTool.cpp	/^        Vec2f TexturingViewScaleTool::getScaleHandlePositionInFaceCoords(const Vec2i& scaleHandle) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
getScaleHandlePositionInTexCoords	View/TexturingViewScaleTool.cpp	/^        Vec2f TexturingViewScaleTool::getScaleHandlePositionInTexCoords(const Vec2i& scaleHandle) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
getSelectedHandles	Controller/RebuildBrushGeometryCommand.h	/^            Vec3::List getSelectedHandles(const std::map<Vec3, T, O>& handles) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
getSetFlagValue	View/FlagsEditor.cpp	/^        int FlagsEditor::getSetFlagValue() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
getSurfaceFlags	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::getSurfaceFlags(wxArrayString& names, wxArrayString& descriptions) const {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
getTexCoords	Model/TexCoordSystem.cpp	/^        Vec2f TexCoordSystem::getTexCoords(const Vec3& point, const BrushFaceAttribs& attribs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
getTextureQuad	View/TexturingView.cpp	/^        Vec3f::List TexturingView::getTextureQuad() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
getValues	StringIndex.h	/^            void getValues(ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
getXAxis	Model/ParallelTexCoordSystem.cpp	/^        const Vec3& ParallelTexCoordSystem::getXAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
getXAxis	Model/ParaxialTexCoordSystem.cpp	/^        const Vec3& ParaxialTexCoordSystem::getXAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
getYAxis	Model/ParallelTexCoordSystem.cpp	/^        const Vec3& ParallelTexCoordSystem::getYAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
getYAxis	Model/ParaxialTexCoordSystem.cpp	/^        const Vec3& ParaxialTexCoordSystem::getYAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
getZAxis	Model/ParallelTexCoordSystem.cpp	/^        const Vec3& ParallelTexCoordSystem::getZAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
getZAxis	Model/ParaxialTexCoordSystem.cpp	/^        const Vec3& ParaxialTexCoordSystem::getZAxis() const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
glResetEdgeOffset	Renderer/RenderUtils.cpp	/^        void glResetEdgeOffset() {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
glSetEdgeOffset	Renderer/RenderUtils.cpp	/^        void glSetEdgeOffset(const float f) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
grayscale	Renderer/BrushRenderer.cpp	/^        bool BrushRenderer::grayscale() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
grid	View/MapDocument.cpp	/^        View::Grid& MapDocument::grid() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
gridDidChange	View/MapView.cpp	/^        void MapView::gridDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
gridDidChange	View/TexturingView.cpp	/^        void TexturingView::gridDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
gridDidChangeNotifier	View/Grid.h	/^            Notifier0 gridDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::Grid
gridSize	Renderer/RenderContext.cpp	/^        size_t RenderContext::gridSize() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
gridVisible	Renderer/RenderContext.cpp	/^        bool RenderContext::gridVisible() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
groupAt	View/CellLayout.h	/^            bool groupAt(const float x, const float y, Group* result) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
groupMargin	View/CellLayout.h	/^            float groupMargin() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
groupName	Assets/EntityDefinition.cpp	/^        String EntityDefinition::groupName() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
groups	Assets/EntityDefinitionManager.cpp	/^        EntityDefinitionGroups EntityDefinitionManager::groups(const EntityDefinition::Type type, const SortOrder order) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
groups	Assets/TextureManager.cpp	/^        const TextureManager::GroupList& TextureManager::groups(const SortOrder sortOrder) const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
gt	MathUtils.h	/^    bool gt(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
gte	MathUtils.h	/^    bool gte(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
h	Renderer/TextureFont.h	/^                int x, y, w, h, a;$/;"	m	language:C++	struct:TrenchBroom::Renderer::TextureFont::Char
handleMove	View/MoveToolHelper.cpp	/^        bool MoveDelegate::handleMove(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
handleRotate	View/RotateToolHelper.cpp	/^        bool RotateDelegate::handleRotate(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
hasColor	IO/EntityDefinitionClassInfo.cpp	/^        bool EntityDefinitionClassInfo::hasColor() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
hasDefaultValue	Assets/PropertyDefinition.h	/^            bool hasDefaultValue() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
hasDescription	IO/EntityDefinitionClassInfo.cpp	/^        bool EntityDefinitionClassInfo::hasDescription() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
hasDriveSpec	IO/Path.cpp	/^        bool Path::hasDriveSpec(const String& component) {$/;"	f	language:C++	class:TrenchBroom::IO::Path
hasDriveSpec	IO/Path.cpp	/^        bool Path::hasDriveSpec(const StringList& components) {$/;"	f	language:C++	class:TrenchBroom::IO::Path
hasDuplicates	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::hasDuplicates() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
hasIndices	IO/ImageLoader.cpp	/^        bool ImageLoader::hasIndices() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
hasIndices	IO/ImageLoaderImpl.cpp	/^        bool ImageLoaderImpl::hasIndices() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
hasLastCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::hasLastCommand() const {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
hasLastCommand	View/ControllerFacade.cpp	/^        bool ControllerFacade::hasLastCommand() const {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
hasMajorComponent	Vec.h	/^    bool hasMajorComponent(const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Vec
hasModifier	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::hasModifier() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
hasNextCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::hasNextCommand() const {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
hasNextCommand	View/ControllerFacade.cpp	/^        bool ControllerFacade::hasNextCommand() const {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
hasNextPoint	Model/PointFile.cpp	/^        bool PointFile::hasNextPoint() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
hasPalette	IO/ImageLoader.cpp	/^        bool ImageLoader::hasPalette() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
hasPalette	IO/ImageLoaderImpl.cpp	/^        bool ImageLoaderImpl::hasPalette() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
hasPixels	IO/ImageLoader.cpp	/^        bool ImageLoader::hasPixels() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
hasPixels	IO/ImageLoaderImpl.cpp	/^        bool ImageLoaderImpl::hasPixels() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
hasPositions	Model/BrushEdge.cpp	/^        bool BrushEdge::hasPositions(const Vec3& position1, const Vec3& position2) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
hasPreviousPoint	Model/PointFile.cpp	/^        bool PointFile::hasPreviousPoint() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
hasProperty	Model/Entity.cpp	/^        bool Entity::hasProperty(const PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
hasProperty	Model/EntityProperties.cpp	/^        bool EntityProperties::hasProperty(const PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
hasRemainingVertices	Controller/MoveBrushVerticesCommand.cpp	/^        bool MoveBrushVerticesCommand::hasRemainingVertices() const {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
hasRemainingVertices	View/ControllerFacade.h	/^                bool hasRemainingVertices;$/;"	m	language:C++	struct:TrenchBroom::View::ControllerFacade::MoveVerticesResult
hasSelectedBrushes	Model/Selection.cpp	/^        bool Selection::hasSelectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
hasSelectedBrushes	View/MapDocument.cpp	/^        bool MapDocument::hasSelectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
hasSelectedEntities	Model/Selection.cpp	/^        bool Selection::hasSelectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
hasSelectedEntities	View/MapDocument.cpp	/^        bool MapDocument::hasSelectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
hasSelectedFaces	Model/Selection.cpp	/^        bool Selection::hasSelectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
hasSelectedFaces	View/MapDocument.cpp	/^        bool MapDocument::hasSelectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
hasSelectedHandles	View/VertexTool.cpp	/^        bool VertexTool::hasSelectedHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
hasSelectedObjects	Model/Selection.cpp	/^        bool Selection::hasSelectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
hasSelectedObjects	View/MapDocument.cpp	/^        bool MapDocument::hasSelectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
hasSelectedVertices	View/MapView.cpp	/^        bool MapView::hasSelectedVertices() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
hasSelection	Model/Selection.cpp	/^        bool Selection::hasSelection() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
hasSelection	View/MapDocument.cpp	/^        bool MapDocument::hasSelection() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
hasSize	IO/EntityDefinitionClassInfo.cpp	/^        bool EntityDefinitionClassInfo::hasSize() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
hasSurfaceAttribs	View/FaceAttribsEditor.cpp	/^        bool FaceAttribsEditor::hasSurfaceAttribs() const {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
hasType	Hit.cpp	/^    bool Hit::hasType(const HitType typeMask) const {$/;"	f	language:C++	class:TrenchBroom::Hit
hasType	Model/Issue.cpp	/^        bool Issue::hasType(IssueType mask) const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
hasVertexPositions	Model/BrushFaceGeometry.cpp	/^        bool BrushFaceGeometry::hasVertexPositions(const Vec3::List& positions) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
height	Assets/Texture.cpp	/^        size_t Texture::height() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
height	IO/ImageLoader.cpp	/^        size_t ImageLoader::height() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
height	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::height() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
height	IO/Wad.h	/^            size_t height;$/;"	m	language:C++	struct:TrenchBroom::IO::MipSize
height	Renderer/Camera.h	/^                unsigned int width, height;$/;"	m	language:C++	struct:TrenchBroom::Renderer::Camera::Viewport
height	Renderer/FontTexture.cpp	/^        size_t FontTexture::height() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
height	View/CellLayout.h	/^            float height() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
height	View/CellLayout.h	/^            float height() {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
hiddenIssues	Model/Object.cpp	/^        IssueType Object::hiddenIssues() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
hideSelection	Renderer/RenderContext.cpp	/^        bool RenderContext::hideSelection() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
hideSurfaceAttribEditors	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::hideSurfaceAttribEditors() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
highlightApplicableFaces	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::highlightApplicableFaces(const Model::BrushFace* reference, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
highlightHandleArea	View/RotateObjectsTool.cpp	/^        RotateObjectsHandle::HitArea RotateObjectsTool::highlightHandleArea(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
hit	Hit.h	/^        static Hit hit(const HitType type, const FloatType distance, const Vec3& hitPoint, T target, const FloatType error = 0.0) {$/;"	f	language:C++	class:TrenchBroom::Hit
hit	View/ResizeBrushesTool.cpp	/^            Hit hit() const {$/;"	f	language:C++	struct:TrenchBroom::View::FindClosestFaceHit
hitAsBrush	Model/HitAdapter.cpp	/^        Brush* hitAsBrush(const Hit& hit) {$/;"	f	language:C++	namespace:TrenchBroom::Model
hitAsEntity	Model/HitAdapter.cpp	/^        Entity* hitAsEntity(const Hit& hit) {$/;"	f	language:C++	namespace:TrenchBroom::Model
hitAsFace	Model/HitAdapter.cpp	/^        BrushFace* hitAsFace(const Hit& hit) {$/;"	f	language:C++	namespace:TrenchBroom::Model
hitAsObject	Model/HitAdapter.cpp	/^        Object* hitAsObject(const Hit& hit) {$/;"	f	language:C++	namespace:TrenchBroom::Model
hitPoint	Hit.cpp	/^    const Vec3& Hit::hitPoint() const {$/;"	f	language:C++	class:TrenchBroom::Hit
hitTest	View/CellLayout.h	/^            bool hitTest(const float x, const float y) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
hitTest	View/CellLayout.h	/^            bool hitTest(const float x, const float y) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
hits	View/InputState.cpp	/^        const Hits& InputState::hits() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
hits	View/ToolBox.cpp	/^        const Hits& ToolBox::hits() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
horizontalDragPlane	Plane.h	/^const Plane<T,3> horizontalDragPlane(const Vec<T,3>& position) {$/;"	f	language:C++
icon	Model/GameConfig.cpp	/^        const IO::Path& GameConfig::icon() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
iconPath	Model/GameFactory.cpp	/^        IO::Path GameFactory::iconPath(const String& gameName) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
identicalWithAnyPoint	View/Clipper.cpp	/^        bool Clipper::ClipHandlePoints::identicalWithAnyPoint(const Vec3& position, const size_t disregardIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
image	View/GameListBox.cpp	/^        const wxBitmap& GameListBox::image(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
image	View/GameListBox.h	/^                wxBitmap image;$/;"	m	language:C++	struct:TrenchBroom::View::GameListBox::Info
image	View/RecentDocumentListBox.cpp	/^        const wxBitmap& RecentDocumentListBox::image(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentListBox
incChildSelectionCount	Model/Object.cpp	/^        void Object::incChildSelectionCount() {$/;"	f	language:C++	class:TrenchBroom::Model::Object
incModificationCount	View/MapDocument.cpp	/^        void MapDocument::incModificationCount() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
incSize	View/Grid.cpp	/^        void Grid::incSize() {$/;"	f	language:C++	class:TrenchBroom::View::Grid
incUsageCount	Assets/EntityDefinition.cpp	/^        void EntityDefinition::incUsageCount() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
incUsageCount	Assets/Texture.cpp	/^        void Texture::incUsageCount() {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
incidentFaces	Model/Brush.cpp	/^        BrushFaceList Brush::incidentFaces(const BrushVertex& vertex) const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
incidentSides	Model/BrushGeometry.cpp	/^        BrushFaceGeometryList BrushGeometry::incidentSides(const BrushVertex* vertex) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
incidentSides	Model/BrushVertex.cpp	/^        BrushFaceGeometryList BrushVertex::incidentSides(const BrushEdgeList& edges) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushVertex
increaseCapacity	Renderer/Vbo.cpp	/^        void Vbo::increaseCapacity(const size_t delta) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
increaseCapacityToAccomodate	Renderer/Vbo.cpp	/^        void Vbo::increaseCapacityToAccomodate(const size_t capacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
index	View/FlagChangedCommand.cpp	/^        size_t FlagChangedCommand::index() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
indexOf	CollectionUtils.h	/^    size_t indexOf(const std::vector<T>& vec, const T& item) {$/;"	f	language:C++	namespace:VectorUtils
indexOf	View/EntityPropertyGridTable.cpp	/^        size_t EntityPropertyGridTable::RowManager::indexOf(const String& key) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
indexOfPoint	View/Clipper.cpp	/^        size_t Clipper::ClipHandlePoints::indexOfPoint(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
indexOfPoint	View/Clipper.cpp	/^        size_t Clipper::indexOfPoint(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
indexOfRowAt	View/CellLayout.h	/^            size_t indexOfRowAt(const float y) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
indexedToRgb	Assets/Palette.h	/^            void indexedToRgb(const Buffer<IndexT>& indexedImage, const size_t pixelCount, Buffer<ColorT>& rgbImage, Color& averageColor) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
indexedToRgb	Assets/Palette.h	/^            void indexedToRgb(const IndexT* indexedImage, const size_t pixelCount, Buffer<ColorT>& rgbImage, Color& averageColor) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
indices	IO/ImageLoader.cpp	/^        const Buffer<unsigned char>& ImageLoader::indices() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
indices	IO/ImageLoaderImpl.cpp	/^        const Buffer<unsigned char>& ImageLoaderImpl::indices() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
indices	Renderer/IndexedVertexList.h	/^            IndexArray& indices() {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
info	Logger.cpp	/^    void Logger::info(const String& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
info	Logger.cpp	/^    void Logger::info(const char* format, ...) {$/;"	f	language:C++	class:TrenchBroom::Logger
info	Logger.cpp	/^    void Logger::info(const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
init	IO/MappedFile.cpp	/^        void MappedFile::init(const char* begin, const char* end) {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
init2D	Renderer/Circle.cpp	/^        void Circle::init2D(const float radius, const size_t segments, const bool filled, const float startAngle, const float angleLength) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
init3D	Renderer/Circle.cpp	/^        void Circle::init3D(const float radius, const size_t segments, const bool filled, const Math::Axis::Type axis, const float startAngle, const float angleLength) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
initLayout	View/CellView.h	/^            void initLayout() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
initialize	IO/ImageLoaderImpl.cpp	/^        void ImageLoaderImpl::initialize() {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
initialize	View/GLContextHolder.cpp	/^        void GLContextHolder::initialize() {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
initializeGL	View/RenderView.cpp	/^        void RenderView::initializeGL() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
initializeIndexedPixels	IO/ImageLoaderImpl.cpp	/^        void ImageLoaderImpl::initializeIndexedPixels(const size_t pSize) const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
initializePixels	IO/ImageLoaderImpl.cpp	/^        void ImageLoaderImpl::initializePixels(const size_t pSize) const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
initializeWithBounds	Model/BrushGeometry.cpp	/^        void BrushGeometry::initializeWithBounds(const BBox3& bounds) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
initialized	Preference.h	/^        bool initialized() const {$/;"	f	language:C++	class:TrenchBroom::Preference
initiallyActive	View/ClipTool.cpp	/^        bool ClipTool::initiallyActive() const {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
initiallyActive	View/RotateObjectsTool.cpp	/^        bool RotateObjectsTool::initiallyActive() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
initiallyActive	View/TextureTool.cpp	/^        bool TextureTool::initiallyActive() const {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
initiallyActive	View/Tool.cpp	/^        bool ActivationPolicy::initiallyActive() const { return false; }$/;"	f	language:C++	class:TrenchBroom::View::ActivationPolicy
initiallyActive	View/Tool.cpp	/^        bool NoActivationPolicy::initiallyActive() const { return true; }$/;"	f	language:C++	class:TrenchBroom::View::NoActivationPolicy
initiallyActive	View/VertexTool.cpp	/^        bool VertexTool::initiallyActive() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
insert	StringIndex.h	/^            void insert(const String& key, const V& value) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
insert	StringIndex.h	/^        void insert(const String& key, const V& value) {$/;"	f	language:C++	class:TrenchBroom::StringIndex
insertAfter	Model/Issue.cpp	/^        void Issue::insertAfter(Issue* previous) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
insertBefore	Model/Issue.cpp	/^        void Issue::insertBefore(Issue* next) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
insertFreeBlock	Renderer/Vbo.cpp	/^        void Vbo::insertFreeBlock(VboBlock* block) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
insertOrReplace	CollectionUtils.h	/^    bool insertOrReplace(std::map<K, V*>& map, const K& key, V* value) {$/;"	f	language:C++	namespace:MapUtils
insertOrReplace	CollectionUtils.h	/^    bool insertOrReplace(std::map<K, V>& map, const K& key, V& value) {$/;"	f	language:C++	namespace:MapUtils
insertPath	View/RecentDocuments.h	/^            void insertPath(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
insertRows	View/EntityPropertyGridTable.cpp	/^        StringList EntityPropertyGridTable::RowManager::insertRows(const size_t rowIndex, const size_t count, const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
insertValue	StringIndex.h	/^            void insertValue(const V& value) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
instance	Model/GameFactory.cpp	/^        GameFactory& GameFactory::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
instance	Model/SharedQuickFixes.cpp	/^        const DeleteEntityPropertyQuickFix& DeleteEntityPropertyQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::DeleteEntityPropertyQuickFix
instance	Model/SharedQuickFixes.cpp	/^        const DeleteObjectQuickFix& DeleteObjectQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::DeleteObjectQuickFix
instance	Model/SharedQuickFixes.cpp	/^        const FindIntegerPlanePointsQuickFix& FindIntegerPlanePointsQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::FindIntegerPlanePointsQuickFix
instance	Model/SharedQuickFixes.cpp	/^        const MoveBrushesToWorldspawnQuickFix& MoveBrushesToWorldspawnQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushesToWorldspawnQuickFix
instance	Model/SharedQuickFixes.cpp	/^        const SnapPlanePointsToIntegerQuickFix& SnapPlanePointsToIntegerQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::SnapPlanePointsToIntegerQuickFix
instance	Model/SharedQuickFixes.cpp	/^        const SnapVerticesToIntegerQuickFix& SnapVerticesToIntegerQuickFix::instance() {$/;"	f	language:C++	class:TrenchBroom::Model::SnapVerticesToIntegerQuickFix
instance	PreferenceManager.cpp	/^    PreferenceManager& PreferenceManager::instance() {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
instance	TrenchBroomApp.cpp	/^        TrenchBroomApp& TrenchBroomApp::instance() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
intValue	IO/QuakeMapParser.h	/^                T intValue() const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
intersectLineWithTriangle	Line.h	/^const TT intersectLineWithTriangle(const Line<TT,3>& L, const Vec<TT,3>& V0, const Vec<TT,3>& V1, const Vec<TT,3>& V2) {$/;"	f	language:C++
intersectRayWithTriangle	Ray.h	/^const TT intersectRayWithTriangle(const Ray<TT, 3>& R, const Vec<TT,3>& V0, const Vec<TT,3>& V1, const Vec<TT,3>& V2) {$/;"	f	language:C++
intersectWith	BBox.h	/^    const BBox<T,S>& intersectWith(const BBox<T,S>& right) {$/;"	f	language:C++	class:BBox
intersectWithLine	Plane.h	/^    T intersectWithLine(const Line<T,S>& line) const {$/;"	f	language:C++	class:Plane
intersectWithPlane	Ray.h	/^    const T intersectWithPlane(const Vec<T,S>& normal, const Vec<T,S>& anchor) const {$/;"	f	language:C++	class:Ray
intersectWithRay	BBox.h	/^    T intersectWithRay(const Ray<T,S>& ray, Vec<T,S>* sideNormal = NULL) const {$/;"	f	language:C++	class:BBox
intersectWithRay	Model/BrushFace.cpp	/^        FloatType BrushFace::intersectWithRay(const Ray3& ray) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
intersectWithRay	Plane.h	/^    T intersectWithRay(const Ray<T,S>& ray) const {$/;"	f	language:C++	class:Plane
intersectWithRay	View/Grid.cpp	/^        FloatType Grid::intersectWithRay(const Ray3& ray, const size_t skip) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
intersectWithSphere	Ray.h	/^    const T intersectWithSphere(const Vec<T,S>& position, const T radius) const {$/;"	f	language:C++	class:Ray
intersectWithSphere	Ray.h	/^    const T intersectWithSphere(const Vec<T,S>& position, const T radius, const T scalingFactor, const T maxDistance) const {$/;"	f	language:C++	class:Ray
intersectedWith	BBox.h	/^    const BBox<T,S> intersectedWith(const BBox<T,S>& right) const {$/;"	f	language:C++	class:BBox
intersection	CollectionUtils.h	/^    void intersection(const std::set<T>& lhs, const std::set<T>& rhs, std::set<T>& result) {$/;"	f	language:C++	namespace:SetUtils
intersection	CollectionUtils.h	/^    void intersection(const std::set<T>& lhs, const std::set<T>& rhs, std::vector<T>& result) {$/;"	f	language:C++	namespace:SetUtils
intersects	BBox.h	/^    bool intersects(const BBox<T,S>& bounds) const {$/;"	f	language:C++	class:BBox
intersects	Model/Object.cpp	/^        bool Object::intersects(const Brush& brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
intersects	Model/Object.cpp	/^        bool Object::intersects(const Entity& entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
intersects	Model/Object.cpp	/^        bool Object::intersects(const Object& object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
intersectsY	View/CellLayout.h	/^            bool intersectsY(const float y, const float height) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
intersectsY	View/CellLayout.h	/^            bool intersectsY(const float y, const float height) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
intersectsY	View/CellLayout.h	/^            bool intersectsY(const float y, const float height) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
invalidate	Model/BrushFace.cpp	/^        void BrushFace::invalidate() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
invalidate	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::invalidate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
invalidate	Renderer/EntityLinkRenderer.cpp	/^        void EntityLinkRenderer::invalidate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
invalidate	View/CellLayout.h	/^            void invalidate() {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
invalidateBounds	Model/Entity.cpp	/^        void Entity::invalidateBounds() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
invalidateBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::invalidateBounds() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
invalidateVertexCache	Model/BrushFace.cpp	/^        void BrushFace::invalidateVertexCache() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
invert	Model/BrushFace.cpp	/^        void BrushFace::invert() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
invertFaceXScale	View/ControllerFacade.cpp	/^        bool ControllerFacade::invertFaceXScale(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
invertFaceYScale	View/ControllerFacade.cpp	/^        bool ControllerFacade::invertFaceYScale(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
invertMatrix	Mat.h	/^Mat<T,S,S>& invertMatrix(Mat<T,S,S>& mat) {$/;"	f	language:C++
invertMatrix	Mat.h	/^Mat<T,S,S>& invertMatrix(Mat<T,S,S>& mat, bool& invertible) {$/;"	f	language:C++
invertPlaneNormal	View/Clipper.cpp	/^        void Clipper::ClipPoints::invertPlaneNormal() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
invertedMatrix	Mat.h	/^const Mat<T,S,S> invertedMatrix(const Mat<T,S,S>& mat) {$/;"	f	language:C++
invertedMatrix	Mat.h	/^const Mat<T,S,S> invertedMatrix(const Mat<T,S,S>& mat, bool& invertible) {$/;"	f	language:C++
isAbsolute	IO/Path.cpp	/^        bool Path::isAbsolute() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
isActive	Renderer/Vbo.cpp	/^        bool Vbo::isActive() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
isAnyOf	IO/Tokenizer.h	/^            bool isAnyOf(const char c, const String& allow) const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
isCanonical	Line.h	/^    bool isCanonical() const {$/;"	f	language:C++	class:Line
isCaseSensitive	IO/DiskFileSystem.cpp	/^            bool isCaseSensitive() {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
isClosed	Model/BrushFaceGeometry.cpp	/^        bool BrushFaceGeometry::isClosed() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
isClosed	Model/BrushGeometry.cpp	/^        bool BrushGeometry::isClosed() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
isColinearTriangle	Model/BrushFaceGeometry.cpp	/^        size_t BrushFaceGeometry::isColinearTriangle() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
isDefault	Assets/PropertyDefinition.cpp	/^        bool FlagsPropertyOption::isDefault() const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
isDefaultRow	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::RowManager::isDefaultRow(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
isDigit	IO/Tokenizer.h	/^            bool isDigit(const char c) const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
isDuplicateOf	View/KeyboardPreferencePane.cpp	/^        bool KeyboardShortcutEntry::isDuplicateOf(const KeyboardShortcutEntry& entry) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
isEdgeHandleSelected	View/VertexHandleManager.cpp	/^        bool VertexHandleManager::isEdgeHandleSelected(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
isEmpty	IO/Path.cpp	/^        bool Path::isEmpty() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
isFaceHandleSelected	View/VertexHandleManager.cpp	/^        bool VertexHandleManager::isFaceHandleSelected(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
isFaceIdenticalWithAnySide	Model/IntersectBrushGeometryWithFace.cpp	/^        bool IntersectBrushGeometryWithFace::isFaceIdenticalWithAnySide(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
isFlagMixed	View/FlagsEditor.cpp	/^        bool FlagsEditor::isFlagMixed(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
isFlagSet	View/FlagsEditor.cpp	/^        bool FlagsEditor::isFlagSet(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
isFree	Renderer/VboBlock.cpp	/^        bool VboBlock::isFree() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
isGamePathPreference	Model/Game.cpp	/^        bool Game::isGamePathPreference(const IO::Path& prefPath) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
isGamePathPreference	Model/GameFactory.cpp	/^        bool GameFactory::isGamePathPreference(const String& gameName, const IO::Path& prefPath) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
isGamePathPreference	View/MapDocument.cpp	/^        bool MapDocument::isGamePathPreference(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
isHandleSelected	View/VertexHandleManager.cpp	/^        bool VertexHandleManager::isHandleSelected(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
isHidden	Model/Issue.cpp	/^        bool Issue::isHidden() const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
isIncidentWith	Model/BrushEdge.cpp	/^        bool BrushEdge::isIncidentWith(const BrushEdge* edge) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
isInnerEmpty	Model/BrushEdgesIterator.h	/^            static bool isInnerEmpty(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushEdgesIterator
isInnerEmpty	Model/BrushFacesIterator.h	/^            static bool isInnerEmpty(BrushList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::BrushFacesIterator
isInnerEmpty	Model/EntityBrushesIterator.h	/^            static bool isInnerEmpty(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityBrushesIterator
isInnerEmpty	Model/EntityFacesIterator.h	/^            static bool isInnerEmpty(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::EntityFacesIterator
isInnerEmpty	Model/FaceEdgesIterator.h	/^            static bool isInnerEmpty(BrushFaceList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::FaceEdgesIterator
isInnerEmpty	Model/MapBrushesIterator.h	/^            static bool isInnerEmpty(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapBrushesIterator
isInnerEmpty	Model/MapFacesIterator.h	/^            static bool isInnerEmpty(EntityList::const_iterator it) {$/;"	f	language:C++	struct:TrenchBroom::Model::MapFacesIterator
isInteger	MathUtils.h	/^    bool isInteger(const T v) {$/;"	f	language:C++	namespace:Math
isInteger	Vec.h	/^    bool isInteger(const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Vec
isIssueHidden	Model/Object.cpp	/^        bool Object::isIssueHidden(const Issue* issue) const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
isMapped	Renderer/Vbo.cpp	/^        bool Vbo::isMapped() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
isMatch	Hit.cpp	/^    bool Hit::isMatch() const {$/;"	f	language:C++	class:TrenchBroom::Hit
isNormalized	Vec.h	/^    bool isNormalized() const {$/;"	f	language:C++	class:Vec
isNumber	StringUtils.cpp	/^    bool isNumber(const String& str) {$/;"	f	language:C++	namespace:StringUtils
isNumberedProperty	Model/EntityProperties.cpp	/^        bool isNumberedProperty(const String& prefix, const PropertyKey& key) {$/;"	f	language:C++	namespace:TrenchBroom::Model
isPointFileLoaded	View/MapDocument.cpp	/^        bool MapDocument::isPointFileLoaded() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
isPrefix	StringUtils.cpp	/^    bool isPrefix(const String& str, const String& prefix) {$/;"	f	language:C++	namespace:StringUtils
isPrepared	Assets/Texture.cpp	/^        bool Texture::isPrepared() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
isPropertyKeyMutable	Model/EntityProperties.cpp	/^        bool isPropertyKeyMutable(const PropertyKey& key) {$/;"	f	language:C++	namespace:TrenchBroom::Model
isPropertyRow	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::RowManager::isPropertyRow(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
isPropertyValueMutable	Model/EntityProperties.cpp	/^        bool isPropertyValueMutable(const PropertyKey& key) {$/;"	f	language:C++	namespace:TrenchBroom::Model
isRestricted	View/MovementRestriction.cpp	/^        bool MovementRestriction::isRestricted(const Math::Axis::Type axis) const {$/;"	f	language:C++	class:TrenchBroom::View::MovementRestriction
isRotationInverted	Model/ParallelTexCoordSystem.cpp	/^        bool ParallelTexCoordSystem::isRotationInverted(const Vec3& normal) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
isRotationInverted	Model/ParaxialTexCoordSystem.cpp	/^        bool ParaxialTexCoordSystem::isRotationInverted(const Vec3& normal) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
isSharedEdgePair	Model/FaceAdjacencyGraph.cpp	/^        bool FaceAdjacencyGraph::Node::isSharedEdgePair(const BrushEdge* edge1, const BrushEdge* edge2) const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
isShortcutValid	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::isShortcutValid(const int key, const int modifierKey1, const int modifierKey2, const int modifierKey3) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
isVertexHandleSelected	View/VertexHandleManager.cpp	/^        bool VertexHandleManager::isVertexHandleSelected(const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
isWhitespace	IO/Tokenizer.h	/^            bool isWhitespace(const char c) const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
isnan	MathUtils.h	/^    bool isnan(const T f) {$/;"	f	language:C++	namespace:Math
issue	Model/IssueGenerator.cpp	/^            Issue* issue() const {$/;"	f	language:C++	class:TrenchBroom::Model::Visitor
issueCount	Model/IssueManager.cpp	/^        size_t IssueManager::issueCount() const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
issueIgnoreChanged	View/IssueBrowser.cpp	/^            void issueIgnoreChanged(Model::Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
issueIgnoreChangedNotifier	Model/IssueManager.h	/^            Notifier1<Issue*> issueIgnoreChangedNotifier;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
issueManager	View/MapDocument.cpp	/^        Model::IssueManager& MapDocument::issueManager() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
issueWasAdded	View/IssueBrowser.cpp	/^            void issueWasAdded(Model::Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
issueWasAddedNotifier	Model/IssueManager.h	/^            Notifier1<Issue*> issueWasAddedNotifier;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
issueWillBeRemoved	View/IssueBrowser.cpp	/^            void issueWillBeRemoved(Model::Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
issueWillBeRemovedNotifier	Model/IssueManager.h	/^            Notifier1<Issue*> issueWillBeRemovedNotifier;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
issues	Model/IssueManager.cpp	/^        Issue* IssueManager::issues() const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
issuesCleared	View/IssueBrowser.cpp	/^            void issuesCleared() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
issuesClearedNotifier	Model/IssueManager.h	/^            Notifier0 issuesClearedNotifier;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
item	View/CellLayout.h	/^            CellType item() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
item	View/CellLayout.h	/^            GroupType item() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
itemBounds	View/CellLayout.h	/^            const LayoutBounds& itemBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
itemTransformation	View/EntityBrowserView.cpp	/^        Mat4x4f EntityBrowserView::itemTransformation(const Layout::Group::Row::Cell& cell, const float y, const float height) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
items	View/MapTreeView.cpp	/^            wxDataViewItemArray& items;$/;"	m	language:C++	struct:TrenchBroom::View::AddObjectToItemArray	file:
items	View/Menu.cpp	/^        const MenuItemParent::List& MenuItemParent::items() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
iterator_category	CastIterator.h	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	language:C++	class:TrenchBroom::CastIterator
iterator_category	FilterIterator.h	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	language:C++	class:TrenchBroom::FilterIterator
iterator_category	NestedHierarchyIterator.h	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
iterator_category	NestedIterator.h	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
join	StringUtils.h	/^    String join(const StringList& objs, const D1& delim, const D2& lastDelim, const D3& delimForTwo) {$/;"	f	language:C++	namespace:StringUtils
join	StringUtils.h	/^    String join(const StringList& strs, const D& d) {$/;"	f	language:C++	namespace:StringUtils
join	StringUtils.h	/^    String join(const std::vector<T>& objs, const D& delim, const S& toString) {$/;"	f	language:C++	namespace:StringUtils
join	StringUtils.h	/^    String join(const std::vector<T>& objs, const D1& delim, const D2& lastDelim, const D3& delimForTwo, const S& toString) {$/;"	f	language:C++	namespace:StringUtils
keepBackBrushes	View/Clipper.cpp	/^        bool Clipper::keepBackBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
keepFrontBrushes	View/Clipper.cpp	/^        bool Clipper::keepFrontBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
key	Controller/EntityPropertyCommand.cpp	/^        const Model::PropertyKey& EntityPropertyCommand::key() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
key	Model/EntityProperties.h	/^            PropertyKey key;$/;"	m	language:C++	struct:TrenchBroom::Model::EntityProperty
key	Renderer/Mesh.h	/^            Key key;$/;"	m	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
key	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::DefaultRow::key() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
key	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::PropertyRow::key() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
key	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::RowManager::key(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
key	View/EntityPropertySelectedCommand.cpp	/^        const Model::PropertyKey& EntityPropertySelectedCommand::key() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertySelectedCommand
key	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::key() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
key	View/KeyboardShortcutEditor.h	/^            inline int key() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
key	View/KeyboardShortcutEvent.h	/^            inline int key() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
key	View/SmartPropertyEditor.cpp	/^        const Model::PropertyKey& SmartPropertyEditor::key() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
keyDisplayText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::keyDisplayText() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
keyDisplayText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::keyDisplayText(const int key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
keyMenuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::keyMenuText() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
keyMenuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::keyMenuText(const int key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
keyboardShortcutEventFunction	View/KeyboardShortcutEvent.h	/^typedef void (wxEvtHandler::*keyboardShortcutEventFunction)(TrenchBroom::View::KeyboardShortcutEvent&);$/;"	t	language:C++
keys	ConfigTypes.cpp	/^    const StringSet& ConfigTable::keys() const {$/;"	f	language:C++	class:TrenchBroom::ConfigTable
keys	View/EntityPropertyGridTable.cpp	/^        const StringList EntityPropertyGridTable::RowManager::keys(const size_t rowIndex, const size_t count) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
killColor	Renderer/EntityLinkRenderer.cpp	/^        const Color& EntityLinkRenderer::Filter::killColor(const Model::Entity* source, const Model::Entity* target, const bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer::Filter
killSources	Model/Entity.cpp	/^        const EntityList& Entity::killSources() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
killTargets	Model/Entity.cpp	/^        const EntityList& Entity::killTargets() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
last	Model/IssueManager.h	/^                Issue* last;$/;"	m	language:C++	struct:TrenchBroom::Model::IssueManager::IssuePair
lastColumn	IO/Tokenizer.h	/^                size_t lastColumn;$/;"	m	language:C++	struct:TrenchBroom::IO::Tokenizer::State
lastCommandName	Controller/CommandProcessor.cpp	/^        const String& CommandProcessor::lastCommandName() const {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
lastCommandName	View/ControllerFacade.cpp	/^        const String& ControllerFacade::lastCommandName() const {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
lastComponent	IO/Path.cpp	/^        Path Path::lastComponent() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
lastResult	Controller/SelectionCommand.cpp	/^        const Model::SelectionResult& SelectionCommand::lastResult() const {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
lastSelectedFace	Model/Selection.cpp	/^        BrushFace* Selection::lastSelectedFace() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
lastSelectedFace	Model/SelectionResult.cpp	/^        BrushFace* SelectionResult::lastSelectedFace() const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
left	Model/BrushEdge.h	/^            BrushFaceGeometry* left;$/;"	m	language:C++	class:TrenchBroom::Model::BrushEdge
left	View/CellLayout.h	/^            float left() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
leftFace	Model/BrushEdge.cpp	/^        BrushFace* BrushEdge::leftFace() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
leftFace	Model/BrushEdge.cpp	/^        const BrushFace* BrushEdge::leftFace() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
length	IO/Path.cpp	/^        size_t Path::length() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
length	IO/Token.h	/^            size_t length() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
length	IO/Tokenizer.h	/^            size_t length() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
length	Vec.h	/^    T length() const {$/;"	f	language:C++	class:Vec
level	View/CachingLogger.h	/^                LogLevel level;$/;"	m	language:C++	struct:TrenchBroom::View::CachingLogger::Message
line	IO/EntityDefinitionClassInfo.cpp	/^        size_t EntityDefinitionClassInfo::line() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
line	IO/Token.h	/^            size_t line() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
line	IO/Tokenizer.h	/^                size_t line;$/;"	m	language:C++	struct:TrenchBroom::IO::Tokenizer::State
line	IO/Tokenizer.h	/^            size_t line() const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
lineHeight	View/FlagsEditor.cpp	/^        int FlagsEditor::lineHeight() const {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
linearlyDependent	View/Clipper.cpp	/^        bool Clipper::ClipHandlePoints::linearlyDependent(const Vec3& p1, const Vec3& p2, const Vec3& p3) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
link	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::link() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
linkColor	Renderer/EntityLinkRenderer.cpp	/^        const Color& EntityLinkRenderer::Filter::linkColor(const Model::Entity* source, const Model::Entity* target, const bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer::Filter
linkSources	Model/Entity.cpp	/^        const EntityList& Entity::linkSources() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
linkTargets	Model/Entity.cpp	/^        const EntityList& Entity::linkTargets() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
load	Model/PointFile.cpp	/^        void PointFile::load(const IO::Path& pointFilePath) {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
load	Preference.h	/^        void load(wxConfigBase* config) {$/;"	f	language:C++	class:TrenchBroom::Preference
loadAndUpdateEntityDefinitions	View/MapDocument.cpp	/^        void MapDocument::loadAndUpdateEntityDefinitions() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadAndUpdateTextures	View/MapDocument.cpp	/^        void MapDocument::loadAndUpdateTextures() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadBspModel	Model/GameImpl.cpp	/^        Assets::EntityModel* GameImpl::loadBspModel(const String& name, const IO::MappedFile::Ptr file) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
loadBuiltinTextures	View/MapDocument.cpp	/^        void MapDocument::loadBuiltinTextures() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadDefinitions	Assets/EntityDefinitionManager.cpp	/^        void EntityDefinitionManager::loadDefinitions(Model::GamePtr game, const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
loadEntityDefinitions	Model/Game.cpp	/^        Assets::EntityDefinitionList Game::loadEntityDefinitions(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
loadEntityDefinitions	View/MapDocument.cpp	/^        void MapDocument::loadEntityDefinitions() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadEntries	IO/Wad.cpp	/^        void Wad::loadEntries() {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
loadExternalTextures	View/MapDocument.cpp	/^        void MapDocument::loadExternalTextures() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadFromConfig	View/RecentDocuments.h	/^            void loadFromConfig() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
loadGameConfig	Model/GameFactory.cpp	/^        void GameFactory::loadGameConfig(const IO::DiskFileSystem& fs, const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
loadGameConfigs	Model/GameFactory.cpp	/^        void GameFactory::loadGameConfigs() {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
loadImageResource	IO/ResourceUtils.cpp	/^        wxBitmap loadImageResource(const IO::Path& imagePath) {$/;"	f	language:C++	namespace:TrenchBroom::IO
loadLmpPalette	Assets/Palette.cpp	/^        void Palette::loadLmpPalette(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
loadMap	Model/Game.cpp	/^        Map* Game::loadMap(const BBox3& worldBounds, const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
loadMap	Renderer/MapRenderer.cpp	/^        void MapRenderer::loadMap(Model::Map& map) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
loadMd2Model	Model/GameImpl.cpp	/^        Assets::EntityModel* GameImpl::loadMd2Model(const String& name, const IO::MappedFile::Ptr file) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
loadMdlModel	Model/GameImpl.cpp	/^        Assets::EntityModel* GameImpl::loadMdlModel(const String& name, const IO::MappedFile::Ptr file) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
loadModel	Model/Game.cpp	/^        Assets::EntityModel* Game::loadModel(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
loadModelViewMatrix	Renderer/Transformation.cpp	/^        void Transformation::loadModelViewMatrix(const Mat4x4f& matrix) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
loadPcxPalette	Assets/Palette.cpp	/^        void Palette::loadPcxPalette(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
loadPointFile	View/MapDocument.cpp	/^        void MapDocument::loadPointFile() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadProjectionMatrix	Renderer/Transformation.cpp	/^        void Transformation::loadProjectionMatrix(const Mat4x4f& matrix) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
loadShader	Renderer/ShaderManager.cpp	/^        Shader& ShaderManager::loadShader(const String& name, const GLenum type) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderManager
loadSource	Renderer/Shader.cpp	/^        StringList Shader::loadSource(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Shader
loadTexture	IO/Md2Parser.cpp	/^        Assets::Texture* Md2Parser::loadTexture(const Md2Skin& skin) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
loadTextureCollection	IO/TextureLoader.cpp	/^        Assets::TextureCollection* TextureLoader::loadTextureCollection(const Assets::TextureCollectionSpec& spec) {$/;"	f	language:C++	class:TrenchBroom::IO::TextureLoader
loadTextureCollection	Model/Game.cpp	/^        Assets::TextureCollection* Game::loadTextureCollection(const Assets::TextureCollectionSpec& spec) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
loadTextures	IO/Md2Parser.cpp	/^        Assets::TextureList Md2Parser::loadTextures(const Md2SkinList& skins) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
loadTextures	View/MapDocument.cpp	/^        void MapDocument::loadTextures() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
loadWadTextureCollection	Model/GameImpl.cpp	/^        Assets::TextureCollection* GameImpl::loadWadTextureCollection(const Assets::TextureCollectionSpec& spec) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
loadWalTextureCollection	Model/GameImpl.cpp	/^        Assets::TextureCollection* GameImpl::loadWalTextureCollection(const Assets::TextureCollectionSpec& spec) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
loaded	Assets/TextureCollection.cpp	/^        bool TextureCollection::loaded() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
lock	SharedPointer.h	/^TrenchBroom::shared_ptr<T> lock(TrenchBroom::shared_ptr<T> ptr) {$/;"	f	language:C++
lock	SharedPointer.h	/^TrenchBroom::shared_ptr<T> lock(TrenchBroom::weak_ptr<T> ptr) {$/;"	f	language:C++
log	Logger.cpp	/^    void Logger::log(const LogLevel level, const String& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
log	Logger.cpp	/^    void Logger::log(const LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
log	View/StatusBar.cpp	/^        void StatusBar::log(Logger::LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::View::StatusBar
logNotifier	View/Console.h	/^            Notifier2<LogLevel, const wxString&> logNotifier;$/;"	m	language:C++	class:TrenchBroom::View::Console
logToConsole	View/Console.cpp	/^        void Console::logToConsole(const LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::View::Console
logToDebugOut	View/Console.cpp	/^        void Console::logToDebugOut(const LogLevel level, const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::View::Console
logger	View/MapFrame.cpp	/^        Logger* MapFrame::logger() const {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
longText	View/Menu.cpp	/^        const String ShortcutMenuItem::longText() const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
look	View/CameraTool.cpp	/^        bool CameraTool::look(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
lookAhead	IO/Tokenizer.h	/^            char lookAhead(const size_t offset = 1) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
lookAt	Renderer/Camera.cpp	/^        void Camera::lookAt(const Vec3f& point, const Vec3f& up) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
lookSpeedH	View/CameraTool.cpp	/^        float CameraTool::lookSpeedH() const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
lookSpeedV	View/CameraTool.cpp	/^        float CameraTool::lookSpeedV() const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
lt	MathUtils.h	/^    bool lt(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
lte	MathUtils.h	/^    bool lte(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
m_abs	Vec.h	/^        bool m_abs;$/;"	m	language:C++	class:Vec::SelectionHeapCmp
m_absPath	View/ChoosePathTypeDialog.h	/^            IO::Path m_absPath;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_absRadio	View/ChoosePathTypeDialog.h	/^            wxRadioButton* m_absRadio;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_absolute	IO/Path.h	/^            bool m_absolute;$/;"	m	language:C++	class:TrenchBroom::IO::Path
m_action	Controller/AddRemoveObjectsCommand.h	/^            Action m_action;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_action	Controller/EntityPropertyCommand.h	/^            const Action m_action;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_action	Controller/FixPlanePointsCommand.h	/^            Action m_action;$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
m_action	Controller/SelectionCommand.h	/^            Action m_action;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_action	Controller/TextureCollectionCommand.h	/^            Action m_action;$/;"	m	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
m_active	View/SmartPropertyEditor.h	/^            bool m_active;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditor
m_active	View/Tool.h	/^            bool m_active;$/;"	m	language:C++	class:TrenchBroom::View::ToolImpl
m_activeEditor	View/SmartPropertyEditorManager.h	/^            EditorPtr m_activeEditor;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
m_adapter	NestedHierarchyIterator.h	/^        InnerAdapter m_adapter;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_addModsButton	View/ModEditor.h	/^            wxBitmapButton* m_addModsButton;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_addPropertyButton	View/EntityPropertyGrid.h	/^            wxButton* m_addPropertyButton;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_addTextureCollectionsButton	View/TextureCollectionEditor.h	/^            wxBitmapButton* m_addTextureCollectionsButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_addedFaces	Model/BrushAlgorithm.h	/^            BrushFaceList m_addedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::BrushAlgorithm
m_addedObjects	Controller/AddRemoveObjectsCommand.cpp	/^            Model::ObjectList& m_addedObjects;$/;"	m	language:C++	struct:TrenchBroom::Controller::AddObjectToDocument	file:
m_addedObjects	Controller/AddRemoveObjectsCommand.h	/^            Model::ObjectList m_addedObjects;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_additionalSearchPaths	Model/GameImpl.h	/^            IO::Path::List m_additionalSearchPaths;$/;"	m	language:C++	class:TrenchBroom::Model::GameImpl
m_address	IO/MappedFile.h	/^            char* m_address;$/;"	m	language:C++	class:TrenchBroom::IO::PosixMappedFile
m_address	IO/MappedFile.h	/^            char* m_address;$/;"	m	language:C++	class:TrenchBroom::IO::WinMappedFile
m_address	IO/Wad.h	/^            size_t m_address;$/;"	m	language:C++	class:TrenchBroom::IO::WadEntry
m_alignment	Renderer/TextRenderer.h	/^            Alignment::Type m_alignment;$/;"	m	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
m_allCollections	Assets/TextureManager.h	/^            TextureCollectionList m_allCollections;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_angle	Controller/RotateTexturesCommand.h	/^            const float m_angle;$/;"	m	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
m_animationManager	View/MapView.h	/^            AnimationManager* m_animationManager;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_animations	View/Animation.h	/^            Animation::List m_animations;$/;"	m	language:C++	class:TrenchBroom::View::ExecutableAnimation
m_animations	View/Animation.h	/^            AnimationMap m_animations;$/;"	m	language:C++	class:TrenchBroom::View::AnimationManager
m_appRelativePath	View/ChoosePathTypeDialog.h	/^            IO::Path m_appRelativePath;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_appRelativeRadio	View/ChoosePathTypeDialog.h	/^            wxRadioButton* m_appRelativeRadio;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_applyTinting	Renderer/EntityModelRenderer.h	/^            bool m_applyTinting;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
m_applyTinting	Renderer/EntityRenderer.h	/^            bool m_applyTinting;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_applyTinting	Renderer/TriangleRenderer.h	/^            bool m_applyTinting;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_area	View/RotateObjectsHandle.h	/^                HitArea m_area;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
m_array	Renderer/Circle.h	/^            VertexArray m_array;$/;"	m	language:C++	class:TrenchBroom::Renderer::Circle
m_array	Renderer/Ring.h	/^            VertexArray m_array;$/;"	m	language:C++	class:TrenchBroom::Renderer::Ring
m_array	Renderer/Sphere.h	/^            VertexArray m_array;$/;"	m	language:C++	class:TrenchBroom::Renderer::Sphere
m_attribs	Model/BrushFace.h	/^            BrushFaceAttribs m_attribs;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_attribs	Model/BrushFace.h	/^            BrushFaceAttribs m_attribs;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceSnapshot
m_attribs	View/GLContextHolder.h	/^            GLAttribs m_attribs;$/;"	m	language:C++	class:TrenchBroom::View::RootGLContextHolder
m_autosaveTimer	View/MapFrame.h	/^            wxTimer* m_autosaveTimer;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_autosaver	View/MapFrame.h	/^            Autosaver* m_autosaver;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_auxVbo	View/MiniMapBaseView.h	/^            Renderer::Vbo m_auxVbo;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapBaseView
m_availableModList	View/ModEditor.h	/^            wxListBox* m_availableModList;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_availableMods	View/ModEditor.h	/^            StringList m_availableMods;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_averageColor	Assets/Texture.h	/^            Color m_averageColor;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_axis	CoordinatePlane.h	/^    size_t m_axis;$/;"	m	language:C++	class:CoordinatePlane
m_axis	Renderer/BoundsInfoRenderer.h	/^                Math::Axis::Type m_axis;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
m_axis	View/RotateToolHelper.h	/^            Vec3 m_axis;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_backBrushes	View/ClipTool.h	/^            Model::EntityBrushesMap m_backBrushes;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
m_backRenderer	Renderer/ClipperRenderer.h	/^            BrushRenderer m_backRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
m_background	Renderer/Compass.h	/^            VertexArray m_background;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_backgroundColor	Renderer/EntityRenderer.h	/^                const Color& m_backgroundColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameColorProvider
m_backgroundColorPref	Renderer/TextRenderer.h	/^                Preference<Color>& m_backgroundColorPref;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer::PrefTextColorProvider
m_backgroundOutline	Renderer/Compass.h	/^            VertexArray m_backgroundOutline;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_baseClasses	IO/DefParser.h	/^            EntityDefinitionClassInfoMap m_baseClasses;$/;"	m	language:C++	class:TrenchBroom::IO::DefParser
m_baseClasses	IO/FgdParser.h	/^            EntityDefinitionClassInfoMap m_baseClasses;$/;"	m	language:C++	class:TrenchBroom::IO::FgdParser
m_baseId	View/RecentDocuments.h	/^            int m_baseId;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_begin	IO/Bsp29Parser.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::Bsp29Parser
m_begin	IO/MappedFile.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::MappedFile
m_begin	IO/Md2Parser.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser
m_begin	IO/MdlParser.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser
m_begin	IO/Token.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_begin	IO/Tokenizer.h	/^            const char* m_begin;$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
m_bitmap	IO/ImageLoaderImpl.h	/^            FIBITMAP* m_bitmap;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_bitmap	View/ImagePanel.h	/^            wxBitmap m_bitmap;$/;"	m	language:C++	class:TrenchBroom::View::ImagePanel
m_block	Renderer/VertexArray.h	/^            VboBlock* m_block;$/;"	m	language:C++	class:TrenchBroom::Renderer::Holder
m_blocks	Allocator.h	/^        unsigned char m_blocks[BlocksPerChunk * sizeof(T)];$/;"	m	language:C++	class:Allocator::Chunk
m_boundary	Model/BrushFace.h	/^            Plane3 m_boundary;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_bounds	Assets/EntityDefinition.h	/^            BBox3 m_bounds;$/;"	m	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
m_bounds	Assets/Md2Model.h	/^                BBox3f m_bounds;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
m_bounds	Assets/MdlModel.h	/^            BBox3f m_bounds;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlFrame
m_bounds	Model/Entity.h	/^            mutable BBox3 m_bounds;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_bounds	Model/ModelUtils.h	/^            const BBox3& m_bounds;$/;"	m	language:C++	struct:TrenchBroom::Model::CheckBounds
m_bounds	Model/Octree.h	/^            BBox<F,3> m_bounds;$/;"	m	language:C++	class:TrenchBroom::Model::Octree
m_bounds	Model/Octree.h	/^            BBox<F,3> m_bounds;$/;"	m	language:C++	class:TrenchBroom::Model::OctreeNode
m_bounds	Renderer/BoundsGuideRenderer.h	/^            BBox3 m_bounds;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_bounds	Renderer/BoundsInfoRenderer.h	/^                const BBox3& m_bounds;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
m_bounds	Renderer/BoundsInfoRenderer.h	/^                const BBox3& m_bounds;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
m_bounds	Renderer/BoundsInfoRenderer.h	/^            BBox3 m_bounds;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
m_bounds	View/CellLayout.h	/^            LayoutBounds m_bounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_boundsColor	Renderer/EntityRenderer.h	/^            Color m_boundsColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_boundsValid	Model/Entity.h	/^            mutable bool m_boundsValid;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_boundsValid	Renderer/EntityRenderer.h	/^            bool m_boundsValid;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_boxArray	Renderer/BoundsGuideRenderer.h	/^            VertexArray m_boxArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_brightnessSlider	View/GeneralPreferencePane.h	/^            wxSlider* m_brightnessSlider;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_brush	Model/Brush.h	/^            Brush* m_brush;$/;"	m	language:C++	class:TrenchBroom::Model::BrushSnapshot
m_brush	Model/Issue.h	/^            Brush* m_brush;$/;"	m	language:C++	class:TrenchBroom::Model::BrushIssue
m_brush	View/CreateBrushTool.h	/^            Model::Brush* m_brush;$/;"	m	language:C++	class:TrenchBroom::View::CreateBrushTool
m_brushEdge1	Model/FaceAdjacencyGraph.h	/^                const BrushEdge* m_brushEdge1;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
m_brushEdge2	Model/FaceAdjacencyGraph.h	/^                const BrushEdge* m_brushEdge2;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
m_brushEdges	Controller/MoveBrushEdgesCommand.h	/^            BrushEdgesMap m_brushEdges;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_brushEdges	Controller/SplitBrushEdgesCommand.h	/^            BrushEdgesMap m_brushEdges;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_brushFaces	Controller/MoveBrushFacesCommand.h	/^            BrushFacesMap m_brushFaces;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_brushFaces	Controller/SplitBrushFacesCommand.h	/^            BrushFacesMap m_brushFaces;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_brushRenderer	View/CreateBrushTool.h	/^            Renderer::BrushRenderer m_brushRenderer;$/;"	m	language:C++	class:TrenchBroom::View::CreateBrushTool
m_brushSnapshots	Model/Snapshot.h	/^            BrushSnapshotList m_brushSnapshots;$/;"	m	language:C++	class:TrenchBroom::Model::Snapshot
m_brushVertices	Controller/MoveBrushVerticesCommand.h	/^            BrushVerticesMap m_brushVertices;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_brushVertices	Controller/SnapBrushVerticesCommand.h	/^            BrushVerticesMap m_brushVertices;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_brushes	Controller/FixPlanePointsCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
m_brushes	Controller/MoveBrushEdgesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_brushes	Controller/MoveBrushFacesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_brushes	Controller/MoveBrushVerticesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_brushes	Controller/RebuildBrushGeometryCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
m_brushes	Controller/ReparentBrushesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
m_brushes	Controller/ResizeBrushesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
m_brushes	Controller/SnapBrushVerticesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_brushes	Controller/SplitBrushEdgesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_brushes	Controller/SplitBrushFacesCommand.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_brushes	Model/Entity.h	/^            BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_brushes	Renderer/BrushRenderer.h	/^            Model::BrushList m_brushes;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_buffer	ByteBuffer.h	/^    InternalBufferPtr m_buffer;$/;"	m	language:C++	class:Buffer
m_buffer	Renderer/FontTexture.h	/^            char* m_buffer;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontTexture
m_buffer	Renderer/Vbo.h	/^            unsigned char* m_buffer;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_buffers	Assets/Texture.h	/^            mutable TextureBuffer::List m_buffers;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_builtin	Model/EntityDefinitionFileSpec.h	/^            bool m_builtin;$/;"	m	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
m_builtin	View/EntityDefinitionFileChooser.h	/^            wxListBox* m_builtin;$/;"	m	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
m_builtinCollections	Assets/TextureManager.h	/^            TextureCollectionList m_builtinCollections;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_builtinCollectionsByName	Assets/TextureManager.h	/^            TextureCollectionMap m_builtinCollectionsByName;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_button	View/FlagsPopupEditor.h	/^            PopupButton* m_button;$/;"	m	language:C++	class:TrenchBroom::View::FlagsPopupEditor
m_button	View/PopupButton.h	/^            wxToggleButton* m_button;$/;"	m	language:C++	class:TrenchBroom::View::PopupButton
m_byteRadio	View/SmartColorEditor.h	/^            wxRadioButton* m_byteRadio;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
m_cache	Assets/EntityDefinitionManager.h	/^            Cache m_cache;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
m_cache	Renderer/FontManager.h	/^            FontCache m_cache;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontManager
m_cachedMessages	View/CachingLogger.h	/^            MessageList m_cachedMessages;$/;"	m	language:C++	class:TrenchBroom::View::CachingLogger
m_cachedVertices	Model/BrushFace.h	/^            mutable Vertex::List m_cachedVertices;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_camera	Renderer/BoundsInfoRenderer.h	/^                const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
m_camera	Renderer/BoundsInfoRenderer.h	/^                const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoSizeTextAnchor
m_camera	Renderer/RenderContext.h	/^            const Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_camera	View/CameraAnimation.h	/^            Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_camera	View/CameraTool.h	/^            Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::CameraTool
m_camera	View/Clipper.h	/^            const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::Clipper
m_camera	View/CreateBrushTool.h	/^            const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::CreateBrushTool
m_camera	View/CreateEntityTool.h	/^            const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::CreateEntityTool
m_camera	View/MapView.h	/^            Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_camera	View/MiniMapXYView.h	/^            Renderer::OrthographicCamera* m_camera;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapXYView
m_camera	View/MiniMapZView.h	/^            Renderer::OrthographicCamera* m_camera;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapZView
m_camera	View/ResizeBrushesTool.h	/^            const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
m_camera	View/RotateObjectsTool.h	/^            const Renderer::Camera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
m_camera	View/TexturingView.h	/^            Renderer::OrthographicCamera m_camera;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_camera	View/TexturingViewCameraTool.h	/^            Renderer::OrthographicCamera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewCameraTool
m_camera	View/TexturingViewRotateTool.h	/^            Renderer::OrthographicCamera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
m_camera	View/TexturingViewScaleOriginTool.h	/^            Renderer::OrthographicCamera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
m_camera	View/TexturingViewScaleTool.h	/^            Renderer::OrthographicCamera& m_camera;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
m_camera3D	View/MapFrame.h	/^            Renderer::PerspectiveCamera m_camera3D;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_camera3D	View/MiniMapBaseView.h	/^            Renderer::Camera& m_camera3D;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapBaseView
m_cameraTool	View/MapView.h	/^            CameraTool* m_cameraTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_cameraTool	View/TexturingView.h	/^            TexturingViewCameraTool* m_cameraTool;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_cameraZoom	View/TexturingViewHelper.h	/^            float m_cameraZoom;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_capacity	Renderer/VboBlock.h	/^            size_t m_capacity;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_cellBounds	View/CellLayout.h	/^            LayoutBounds m_cellBounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_cellEditor	View/KeyboardPreferencePane.h	/^            KeyboardGridCellEditor* m_cellEditor;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardGridTable
m_cellMargin	View/CellLayout.h	/^            float m_cellMargin;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_cellMargin	View/CellLayout.h	/^            float m_cellMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_cellMargin	View/CellLayout.h	/^            float m_cellMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_cellSize	View/ColorTable.h	/^            int m_cellSize;$/;"	m	language:C++	class:TrenchBroom::View::ColorTable
m_cells	View/CellLayout.h	/^            CellList m_cells;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_center	View/RotateToolHelper.h	/^            Vec3 m_center;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_changeCount	View/VertexTool.h	/^            size_t m_changeCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
m_chars	Renderer/TextureFont.h	/^            CharList m_chars;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_checkBoxes	View/FlagsEditor.h	/^            CheckBoxList m_checkBoxes;$/;"	m	language:C++	class:TrenchBroom::View::FlagsEditor
m_childSelectionCount	Model/Object.h	/^            size_t m_childSelectionCount;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_children	Model/Octree.h	/^            OctreeNode* m_children[8];$/;"	m	language:C++	class:TrenchBroom::Model::OctreeNode
m_children	StringIndex.h	/^            mutable NodeSet m_children;$/;"	m	language:C++	class:TrenchBroom::StringIndex::Node
m_chooseExternal	View/EntityDefinitionFileChooser.h	/^            wxButton* m_chooseExternal;$/;"	m	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
m_chooseGamePathButton	View/GamesPreferencePane.h	/^            wxButton* m_chooseGamePathButton;$/;"	m	language:C++	class:TrenchBroom::View::GamesPreferencePane
m_circle	Renderer/PointHandleRenderer.h	/^            Circle m_circle;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_classnameRenderer	Renderer/EntityRenderer.h	/^            ClassnameRenderer m_classnameRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_clickPos	View/ToolBox.h	/^            wxPoint m_clickPos;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_clickToActivate	View/ToolBox.h	/^            bool m_clickToActivate;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_clipPoints	View/Clipper.h	/^            ClipPoints m_clipPoints;$/;"	m	language:C++	class:TrenchBroom::View::Clipper
m_clipSide	View/Clipper.h	/^            ClipSide m_clipSide;$/;"	m	language:C++	class:TrenchBroom::View::Clipper
m_clipTool	View/MapView.h	/^            ClipTool* m_clipTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_clipper	Renderer/ClipperRenderer.h	/^            const View::Clipper& m_clipper;$/;"	m	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
m_clipper	View/ClipTool.h	/^            Clipper m_clipper;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
m_closestDistance	View/ResizeBrushesTool.cpp	/^            double m_closestDistance;$/;"	m	language:C++	struct:TrenchBroom::View::FindClosestFaceHit	file:
m_closestFace	View/ResizeBrushesTool.cpp	/^            Model::BrushFace* m_closestFace;$/;"	m	language:C++	struct:TrenchBroom::View::FindClosestFaceHit	file:
m_cmp	CollectionUtils.h	/^        Cmp m_cmp;$/;"	m	language:C++	struct:Utils::PtrCmp
m_cmp	MathUtils.h	/^        Cmp<T, Abs> m_cmp;$/;"	m	language:C++	struct:Math::Less
m_collection	Assets/Texture.h	/^            TextureCollection* m_collection;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_collections	View/TextureCollectionEditor.h	/^            wxListBox* m_collections;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_color	Assets/EntityDefinition.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinition
m_color	IO/EntityDefinitionClassInfo.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_color	Renderer/BoundsGuideRenderer.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_color	Renderer/EdgeRenderer.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
m_color	Renderer/PointHandleRenderer.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_color	Renderer/TriangleRenderer.h	/^            Color m_color;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_color	View/ColorTableSelectedCommand.h	/^            wxColor m_color;$/;"	m	language:C++	class:TrenchBroom::View::ColorTableSelectedCommand
m_color	View/SmartColorEditor.cpp	/^            SmartColorEditor::ColorPtr m_color;$/;"	m	language:C++	struct:TrenchBroom::View::SetColor	file:
m_colorHistory	View/SmartColorEditor.h	/^            ColorTable* m_colorHistory;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
m_colorPicker	View/SmartColorEditor.h	/^            wxColourPickerCtrl* m_colorPicker;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
m_colors	View/ColorTable.h	/^            ColorList m_colors;$/;"	m	language:C++	class:TrenchBroom::View::ColorTable
m_column	IO/EntityDefinitionClassInfo.h	/^            size_t m_column;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_column	IO/QuakeMapParser.h	/^                size_t m_column;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
m_column	IO/Token.h	/^            size_t m_column;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_comboBox	View/SmartChoiceEditor.h	/^            wxComboBox* m_comboBox;$/;"	m	language:C++	class:TrenchBroom::View::SmartChoiceEditor
m_commandDoNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr>& m_commandDoNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
m_commandDoneNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr>& m_commandDoneNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
m_commandId	View/KeyboardShortcut.h	/^            int m_commandId;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_commandProcessor	View/ControllerFacade.h	/^            Controller::CommandProcessor m_commandProcessor;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
m_commandUndoNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr>& m_commandUndoNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
m_commandUndoneNotifier	Controller/CommandProcessor.h	/^            Notifier1<Command::Ptr>& m_commandUndoneNotifier;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
m_commands	Controller/CommandProcessor.h	/^            List m_commands;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandGroup
m_compare	StringUtils.h	/^        Cmp m_compare;$/;"	m	language:C++	struct:StringUtils::CharEqual
m_compare	StringUtils.h	/^        Cmp m_compare;$/;"	m	language:C++	struct:StringUtils::CharLess
m_compass	View/MapView.h	/^            Renderer::Compass m_compass;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_components	IO/Path.h	/^            StringList m_components;$/;"	m	language:C++	class:TrenchBroom::IO::Path
m_config	Model/GameImpl.h	/^            GameConfig m_config;$/;"	m	language:C++	class:TrenchBroom::Model::GameImpl
m_configs	Model/GameFactory.h	/^            ConfigMap m_configs;$/;"	m	language:C++	class:TrenchBroom::Model::GameFactory
m_console	View/InfoPanel.h	/^            Console* m_console;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_consoleActiveBitmap	View/InfoPanel.h	/^            wxBitmap m_consoleActiveBitmap;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_consoleButton	View/InfoPanel.h	/^            wxButton* m_consoleButton;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_consoleInactiveBitmap	View/InfoPanel.h	/^            wxBitmap m_consoleInactiveBitmap;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_contentBounds	View/CellLayout.h	/^            LayoutBounds m_contentBounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_contentFlags	Controller/FaceAttributeCommand.h	/^            int m_contentFlags;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_contentFlags	Model/MixedBrushContentsIssueGenerator.cpp	/^            int m_contentFlags;$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsQuickFix	file:
m_contentFlagsEditor	View/FaceAttribsEditor.h	/^            FlagsPopupEditor* m_contentFlagsEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_contentFlagsLabel	View/FaceAttribsEditor.h	/^            wxStaticText* m_contentFlagsLabel;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_contentFlagsOp	Controller/FaceAttributeCommand.h	/^            FlagOp m_contentFlagsOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_context	View/GLContextHolder.h	/^            wxGLContext* m_context;$/;"	m	language:C++	class:TrenchBroom::View::GLContextHolder
m_context	View/KeyboardShortcut.h	/^            int m_context;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_contextHolder	View/RenderView.h	/^            GLContextHolder::Ptr m_contextHolder;$/;"	m	language:C++	class:TrenchBroom::View::RenderView
m_controller	View/EntityDefinitionFileChooser.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
m_controller	View/EntityInspector.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::EntityInspector
m_controller	View/EntityPropertyGridTable.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_controller	View/FaceAttribsEditor.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_controller	View/FaceInspector.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::FaceInspector
m_controller	View/IssueBrowser.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_controller	View/MapFrame.h	/^            ControllerSPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_controller	View/MapTreeView.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeView
m_controller	View/MapView.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_controller	View/ModEditor.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_controller	View/MoveTextureHelper.h	/^            View::ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper
m_controller	View/SmartColorEditor.cpp	/^            View::ControllerSPtr m_controller;$/;"	m	language:C++	struct:TrenchBroom::View::ConvertColorRange	file:
m_controller	View/SmartColorEditor.cpp	/^            View::ControllerSPtr m_controller;$/;"	m	language:C++	struct:TrenchBroom::View::SetColor	file:
m_controller	View/SmartPropertyEditor.h	/^            View::ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditor
m_controller	View/SmartPropertyEditorManager.h	/^            View::ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
m_controller	View/SmartSpawnflagsEditor.cpp	/^            ControllerSPtr m_controller;$/;"	m	language:C++	struct:TrenchBroom::View::UpdateSpawnflag	file:
m_controller	View/TextureCollectionEditor.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_controller	View/TextureCoordSystemHelper.h	/^            View::ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
m_controller	View/TexturingEditor.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::TexturingEditor
m_controller	View/TexturingView.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_controller	View/Tool.h	/^            ControllerWPtr m_controller;$/;"	m	language:C++	class:TrenchBroom::View::ToolImpl
m_converter	Preference.h	/^        Converter<T> m_converter;$/;"	m	language:C++	class:TrenchBroom::Preference
m_count	View/EntityPropertyGridTable.h	/^                size_t m_count;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_counts	Renderer/IndexedVertexList.h	/^            CountArray m_counts;$/;"	m	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
m_counts	Renderer/VertexArray.h	/^            CountArray m_counts;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
m_createBrushTool	View/MapView.h	/^            CreateBrushTool* m_createBrushTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_createEntityTool	View/MapView.h	/^            CreateEntityTool* m_createEntityTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_createNewDocumentButton	View/WelcomeFrame.h	/^            wxButton* m_createNewDocumentButton;$/;"	m	language:C++	class:TrenchBroom::View::WelcomeFrame
m_ctrlIncrement	View/SpinControl.h	/^    double m_ctrlIncrement;$/;"	m	language:C++	class:SpinControl
m_cur	FilterIterator.h	/^        Iterator m_cur;$/;"	m	language:C++	class:TrenchBroom::FilterIterator
m_current	Model/PointFile.h	/^            size_t m_current;$/;"	m	language:C++	class:TrenchBroom::Model::PointFile
m_currentDropSource	View/GenericDropSource.cpp	/^        GenericDropSource* GenericDropSource::m_currentDropSource = NULL;$/;"	m	language:C++	class:TrenchBroom::View::GenericDropSource	file:
m_currentDropSource	View/GenericDropSource.h	/^            static GenericDropSource* m_currentDropSource;$/;"	m	language:C++	class:TrenchBroom::View::GenericDropSource
m_currentFan	Renderer/Mesh.h	/^            typename TriangleSeriesMap::iterator m_currentFan;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_currentHelper	View/TextureTool.h	/^            TextureToolHelper* m_currentHelper;$/;"	m	language:C++	class:TrenchBroom::View::TextureTool
m_currentPane	View/PreferenceDialog.h	/^            PrefPane m_currentPane;$/;"	m	language:C++	class:TrenchBroom::View::PreferenceDialog
m_currentSet	Renderer/Mesh.h	/^            typename TriangleSetMap::iterator m_currentSet;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_currentStrip	Renderer/Mesh.h	/^            typename TriangleSeriesMap::iterator m_currentStrip;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_currentType	Renderer/Mesh.h	/^            TriangleType m_currentType;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_curve	View/Animation.h	/^            const AnimationCurve* m_curve;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_data	Assets/Palette.h	/^            char* m_data;$/;"	m	language:C++	class:TrenchBroom::Assets::Palette
m_defaultEntityColor	IO/DefParser.h	/^            Color m_defaultEntityColor;$/;"	m	language:C++	class:TrenchBroom::IO::DefParser
m_defaultEntityColor	IO/FgdParser.h	/^            Color m_defaultEntityColor;$/;"	m	language:C++	class:TrenchBroom::IO::FgdParser
m_defaultHiddenGenerators	Model/IssueManager.h	/^            int m_defaultHiddenGenerators;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
m_defaultRows	View/EntityPropertyGridTable.h	/^                DefaultRow::List m_defaultRows;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
m_defaultValue	Assets/PropertyDefinition.h	/^            T m_defaultValue;$/;"	m	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
m_definition	Model/Entity.h	/^            Assets::EntityDefinition* m_definition;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_definitionAffected	Controller/EntityPropertyCommand.h	/^            bool m_definitionAffected;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_definitionManager	View/MapDocument.cpp	/^            Assets::EntityDefinitionManager& m_definitionManager;$/;"	m	language:C++	class:TrenchBroom::View::SetEntityDefinition	file:
m_definitions	Assets/EntityDefinitionManager.h	/^            EntityDefinitionList m_definitions;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
m_delegate	View/MoveToolHelper.h	/^            MoveDelegate& m_delegate;$/;"	m	language:C++	class:TrenchBroom::View::MoveHelper
m_delegate	View/RotateToolHelper.h	/^            RotateDelegate& m_delegate;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_deletableFixes	Model/Issue.h	/^            QuickFix::List m_deletableFixes;$/;"	m	language:C++	class:TrenchBroom::Model::Issue
m_delta	Controller/MoveBrushEdgesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_delta	Controller/MoveBrushFacesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_delta	Controller/MoveBrushVerticesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_delta	Controller/ResizeBrushesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
m_delta	Controller/SplitBrushEdgesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_delta	Controller/SplitBrushFacesCommand.h	/^            Vec3 m_delta;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_delta	Model/MoveBrushEdgesAlgorithm.h	/^            const Vec3& m_delta;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
m_delta	Model/MoveBrushFacesAlgorithm.h	/^            const Vec3& m_delta;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
m_delta	Model/MoveBrushVerticesAlgorithm.h	/^            const Vec3& m_delta;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
m_delta	Model/SplitBrushEdgeAlgorithm.h	/^            const Vec3& m_delta;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
m_delta	Model/SplitBrushFaceAlgorithm.h	/^            const Vec3& m_delta;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
m_description	Assets/EntityDefinition.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinition
m_description	Assets/PropertyDefinition.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
m_description	Assets/PropertyDefinition.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
m_description	Assets/PropertyDefinition.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::Assets::PropertyDefinition
m_description	IO/EntityDefinitionClassInfo.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_description	Model/QuickFix.h	/^            String m_description;$/;"	m	language:C++	class:TrenchBroom::Model::QuickFix
m_descriptionTxt	View/SmartDefaultPropertyEditor.h	/^            wxTextCtrl* m_descriptionTxt;$/;"	m	language:C++	class:TrenchBroom::View::SmartDefaultPropertyEditor
m_deselectedFaces	Model/SelectionResult.h	/^            BrushFaceSet m_deselectedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::SelectionResult
m_deselectedObjects	Model/SelectionResult.h	/^            ObjectSet m_deselectedObjects;$/;"	m	language:C++	class:TrenchBroom::Model::SelectionResult
m_deterministic	IO/QuakeMapParser.h	/^                bool m_deterministic;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::PlaneWeightOrder
m_deterministic	Plane.h	/^        bool m_deterministic;$/;"	m	language:C++	class:Plane::WeightOrder
m_digits	View/SpinControl.h	/^    unsigned int m_digits;$/;"	m	language:C++	class:SpinControl
m_dir	Vec.h	/^        const Vec<T,S>& m_dir;$/;"	m	language:C++	class:Vec::DotOrder
m_dir	Vec.h	/^        const Vec<T,S>& m_dir;$/;"	m	language:C++	class:Vec::InverseDotOrder
m_direction	Controller/MoveTexturesCommand.h	/^            const Math::Direction m_direction;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_direction	Renderer/Camera.h	/^            Vec3f m_direction;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_directories	IO/FileSystem.h	/^                bool m_directories;$/;"	m	language:C++	class:TrenchBroom::IO::FileSystem::TypeMatcher
m_directories	IO/PakFileSystem.h	/^                DirMap m_directories;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
m_dirty	View/Autosaver.h	/^            bool m_dirty;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_distance	Controller/MoveTexturesCommand.h	/^            const float m_distance;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_distance	Hit.h	/^        FloatType m_distance;$/;"	m	language:C++	class:TrenchBroom::Hit
m_distance	View/RotateObjectsHandle.h	/^                FloatType m_distance;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
m_docRelativePath	View/ChoosePathTypeDialog.h	/^            IO::Path m_docRelativePath;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_docRelativeRadio	View/ChoosePathTypeDialog.h	/^            wxRadioButton* m_docRelativeRadio;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_document	Controller/AddRemoveObjectsCommand.cpp	/^            View::MapDocumentSPtr m_document;$/;"	m	language:C++	struct:TrenchBroom::Controller::AddObjectToDocument	file:
m_document	Controller/AddRemoveObjectsCommand.cpp	/^            View::MapDocumentSPtr m_document;$/;"	m	language:C++	struct:TrenchBroom::Controller::RemoveObjectFromDocument	file:
m_document	Controller/AddRemoveObjectsCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_document	Controller/EntityPropertyCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_document	Controller/FaceAttributeCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_document	Controller/FixPlanePointsCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
m_document	Controller/MoveBrushEdgesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_document	Controller/MoveBrushFacesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_document	Controller/MoveBrushVerticesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_document	Controller/MoveTexturesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_document	Controller/NewDocumentCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
m_document	Controller/OpenDocumentCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
m_document	Controller/RebuildBrushGeometryCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
m_document	Controller/ReparentBrushesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
m_document	Controller/ResizeBrushesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
m_document	Controller/RotateTexturesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
m_document	Controller/SelectionCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_document	Controller/SetEntityDefinitionFileCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
m_document	Controller/SetModsCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SetModsCommand
m_document	Controller/SnapBrushVerticesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_document	Controller/SplitBrushEdgesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_document	Controller/SplitBrushFacesCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_document	Controller/TextureCollectionCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
m_document	Controller/TransformObjectsCommand.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
m_document	Renderer/MapRenderer.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_document	Renderer/MiniMapRenderer.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_document	View/Autosaver.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_document	View/ControllerFacade.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::ControllerFacade
m_document	View/EntityBrowser.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_document	View/EntityDefinitionFileChooser.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
m_document	View/EntityInspector.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityInspector
m_document	View/EntityPropertyEditor.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyEditor
m_document	View/EntityPropertyGrid.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_document	View/EntityPropertyGridTable.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_document	View/FaceAttribsEditor.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_document	View/FaceInspector.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::FaceInspector
m_document	View/IssueBrowser.cpp	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
m_document	View/IssueBrowser.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_document	View/MapFrame.cpp	/^            const MapDocumentSPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::FrameMenuSelector	file:
m_document	View/MapFrame.h	/^            MapDocumentSPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_document	View/MapTreeView.cpp	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeViewDataModel	file:
m_document	View/MapTreeView.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeView
m_document	View/MapView.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_document	View/MiniMapBaseView.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapBaseView
m_document	View/ModEditor.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_document	View/MoveTextureHelper.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper
m_document	View/SmartPropertyEditor.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditor
m_document	View/SmartPropertyEditorManager.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
m_document	View/StatusBar.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_document	View/TextureBrowser.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_document	View/TextureCollectionEditor.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_document	View/TextureCoordSystemHelper.h	/^            View::MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
m_document	View/TexturingEditor.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::TexturingEditor
m_document	View/TexturingView.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_document	View/Tool.h	/^            MapDocumentWPtr m_document;$/;"	m	language:C++	class:TrenchBroom::View::ToolImpl
m_documentIcon	View/RecentDocumentListBox.h	/^            wxBitmap m_documentIcon;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocumentListBox
m_documentPath	View/RecentDocumentSelectedCommand.h	/^            IO::Path m_documentPath;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocumentSelectedCommand
m_dragFace	View/ResizeBrushesTool.cpp	/^            const Model::BrushFace& m_dragFace;$/;"	m	language:C++	struct:TrenchBroom::View::CollectDragFaces	file:
m_dragFaces	View/ResizeBrushesTool.h	/^            Model::BrushFaceList m_dragFaces;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
m_dragHandlePosition	View/VertexTool.h	/^            Vec3 m_dragHandlePosition;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
m_dragMode	View/TexturingViewRotateTool.h	/^            DragMode m_dragMode;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
m_dragOrigin	View/ResizeBrushesTool.h	/^            Vec3 m_dragOrigin;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
m_dragPointIndex	View/ClipTool.h	/^            size_t m_dragPointIndex;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
m_dragReceiver	View/ToolBox.h	/^            Tool* m_dragReceiver;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_dragging	View/Tool.h	/^            bool m_dragging;$/;"	m	language:C++	class:TrenchBroom::View::ToolImpl
m_dropReceiver	View/ToolBox.h	/^            Tool* m_dropReceiver;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_droppedEdges	Model/IntersectBrushGeometryWithFace.h	/^            BrushEdgeList m_droppedEdges;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_droppedFaces	Model/MoveBrushVertexAlgorithm.h	/^                BrushFaceSet m_droppedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
m_droppedSides	Model/IntersectBrushGeometryWithFace.h	/^            BrushFaceGeometryList m_droppedSides;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_droppedVertices	Model/IntersectBrushGeometryWithFace.h	/^            BrushVertexList m_droppedVertices;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_duplicate	View/KeyboardPreferencePane.h	/^            bool m_duplicate;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
m_duplicateObjects	View/MoveObjectsTool.h	/^            bool m_duplicateObjects;$/;"	m	language:C++	class:TrenchBroom::View::MoveObjectsTool
m_duration	View/Animation.h	/^            const wxLongLong m_duration;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_edge	Model/SplitBrushEdgeAlgorithm.h	/^            const Edge3 m_edge;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
m_edgeColor	Renderer/BrushRenderer.h	/^            Color m_edgeColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_edgeRenderer	Renderer/BrushRenderer.h	/^            EdgeRenderer m_edgeRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_edgeRenderer	View/VertexHandleManager.h	/^            Renderer::EdgeRenderer m_edgeRenderer;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_edges	Model/FaceAdjacencyGraph.h	/^                Edge::List m_edges;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
m_edges	Model/MoveBrushEdgesAlgorithm.h	/^            const Edge3::List& m_edges;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
m_edges	Renderer/OutlineTracer.h	/^            EdgeMap m_edges;$/;"	m	language:C++	class:TrenchBroom::Renderer::OutlineTracer
m_editor	View/FlagsPopupEditor.h	/^            FlagsEditor* m_editor;$/;"	m	language:C++	class:TrenchBroom::View::FlagsPopupEditor
m_editor	View/KeyboardPreferencePane.h	/^            KeyboardShortcutEditor* m_editor;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
m_editors	View/SmartPropertyEditorManager.h	/^            EditorList m_editors;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
m_elapsed	View/Animation.h	/^            wxLongLong m_elapsed;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_empty	View/ImageListBox.h	/^            bool m_empty;$/;"	m	language:C++	class:TrenchBroom::View::ImageListBox
m_emptyEntities	Controller/ReparentBrushesCommand.h	/^            Model::EntityList m_emptyEntities;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
m_emptyText	View/ImageListBox.h	/^            wxString m_emptyText;$/;"	m	language:C++	class:TrenchBroom::View::ImageListBox
m_enableAltMoveCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_enableAltMoveCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_enabled	View/ToolBox.h	/^            bool m_enabled;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_enabledModList	View/ModEditor.h	/^            wxListBox* m_enabledModList;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_end	FilterIterator.h	/^        Iterator m_end;$/;"	m	language:C++	class:TrenchBroom::FilterIterator
m_end	IO/MappedFile.h	/^            const char* m_end;$/;"	m	language:C++	class:TrenchBroom::IO::MappedFile
m_end	IO/MdlParser.h	/^            const char* m_end;$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser
m_end	IO/Token.h	/^            const char* m_end;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_end	IO/Tokenizer.h	/^            const char* m_end;$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
m_entities	Controller/EntityPropertyCommand.h	/^            const Model::EntityList m_entities;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_entities	Model/Map.h	/^            EntityList m_entities;$/;"	m	language:C++	class:TrenchBroom::Model::Map
m_entities	Renderer/EntityModelRenderer.h	/^            EntityMap m_entities;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
m_entities	Renderer/EntityRenderer.h	/^            Model::EntitySet m_entities;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_entities	View/SmartPropertyEditor.h	/^            Model::EntityList m_entities;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditor
m_entity	Model/Entity.h	/^            Entity* m_entity;$/;"	m	language:C++	class:TrenchBroom::Model::EntitySnapshot
m_entity	Model/Issue.h	/^            Entity* m_entity;$/;"	m	language:C++	class:TrenchBroom::Model::EntityIssue
m_entity	Renderer/EntityRenderer.h	/^                const Model::Entity* m_entity;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameAnchor
m_entity	View/CreateEntityTool.h	/^            Model::Entity* m_entity;$/;"	m	language:C++	class:TrenchBroom::View::CreateEntityTool
m_entity	View/MapDocument.cpp	/^            Model::Entity& m_entity;$/;"	m	language:C++	class:TrenchBroom::View::AddToEntity	file:
m_entity	View/MapDocument.cpp	/^            Model::Entity& m_entity;$/;"	m	language:C++	class:TrenchBroom::View::RemoveFromEntity	file:
m_entityBrowser	View/EntityInspector.h	/^            EntityBrowser* m_entityBrowser;$/;"	m	language:C++	class:TrenchBroom::View::EntityInspector
m_entityConfig	Model/GameConfig.h	/^            EntityConfig m_entityConfig;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_entityDefinitionFileChooser	View/EntityInspector.h	/^            EntityDefinitionFileChooser* m_entityDefinitionFileChooser;$/;"	m	language:C++	class:TrenchBroom::View::EntityInspector
m_entityDefinitionManager	View/EntityBrowserView.h	/^            Assets::EntityDefinitionManager& m_entityDefinitionManager;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_entityDefinitionManager	View/MapDocument.h	/^            Assets::EntityDefinitionManager m_entityDefinitionManager;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_entityInspector	View/Inspector.h	/^            EntityInspector* m_entityInspector;$/;"	m	language:C++	class:TrenchBroom::View::Inspector
m_entityLinkRenderer	Renderer/MapRenderer.h	/^            EntityLinkRenderer m_entityLinkRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_entityLinks	Renderer/EntityLinkRenderer.h	/^            VertexArray m_entityLinks;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
m_entityModelManager	Renderer/EntityModelRenderer.h	/^            Assets::EntityModelManager& m_entityModelManager;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
m_entityModelManager	View/EntityBrowserView.h	/^            Assets::EntityModelManager& m_entityModelManager;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_entityModelManager	View/MapDocument.h	/^            Assets::EntityModelManager m_entityModelManager;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_entityPropertyIndex	Model/Map.h	/^            EntityPropertyIndex m_entityPropertyIndex;$/;"	m	language:C++	class:TrenchBroom::Model::Map
m_entitySnapshots	Model/Snapshot.h	/^            EntitySnapshotList m_entitySnapshots;$/;"	m	language:C++	class:TrenchBroom::Model::Snapshot
m_entries	ConfigTypes.h	/^        EntryList m_entries;$/;"	m	language:C++	class:TrenchBroom::ConfigList
m_entries	ConfigTypes.h	/^        EntryMap m_entries;$/;"	m	language:C++	class:TrenchBroom::ConfigTable
m_entries	IO/Wad.h	/^            WadEntryList m_entries;$/;"	m	language:C++	class:TrenchBroom::IO::Wad
m_entries	Renderer/TextRenderer.h	/^            TextMap m_entries;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_entries	View/KeyboardPreferencePane.h	/^            EntryList m_entries;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardGridTable
m_error	Hit.h	/^        FloatType m_error;$/;"	m	language:C++	class:TrenchBroom::Hit
m_errors	Model/PlanePointFinder.cpp	/^            FloatType m_errors[9];$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
m_evtHandler	View/KeyboardPreferencePane.h	/^            wxEvtHandler* m_evtHandler;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardGridCellEditor
m_executable	View/ExecutableEvent.h	/^            Executable* m_executable;$/;"	m	language:C++	class:TrenchBroom::View::ExecutableEvent
m_extension	IO/FileSystem.h	/^                String m_extension;$/;"	m	language:C++	class:TrenchBroom::IO::FileSystem::ExtensionMatcher
m_external	View/EntityDefinitionFileChooser.h	/^            wxStaticText* m_external;$/;"	m	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
m_externalCollections	Assets/TextureManager.h	/^            TextureCollectionList m_externalCollections;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_externalCollectionsByName	Assets/TextureManager.h	/^            TextureCollectionMap m_externalCollectionsByName;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_extraBook	View/InfoPanel.h	/^            wxSimplebook* m_extraBook;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_extraOffsets	Renderer/TextRenderer.h	/^            Vec2f m_extraOffsets;$/;"	m	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
m_face	Model/BrushFace.h	/^            BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceSnapshot
m_face	Model/FaceAdjacencyGraph.h	/^                const BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Node
m_face	Model/IntersectBrushGeometryWithFace.h	/^            BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_face	Model/SplitBrushFaceAlgorithm.h	/^            const Polygon3 m_face;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
m_face	Model/TexCoordSystemHelper.h	/^            const BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_face	View/MoveTextureHelper.h	/^            Model::BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper
m_face	View/TextureCoordSystemHelper.h	/^            Model::BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::View::TextureCoordSystemHelper
m_face	View/TexturingViewHelper.h	/^            Model::BrushFace* m_face;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_faceAttribsConfig	Model/GameConfig.h	/^            FaceAttribsConfig m_faceAttribsConfig;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_faceAttribsEditor	View/FaceInspector.h	/^            FaceAttribsEditor* m_faceAttribsEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceInspector
m_faceAttribsSizer	View/FaceAttribsEditor.h	/^            wxGridBagSizer* m_faceAttribsSizer;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_faceColor	Renderer/BrushRenderer.h	/^            Color m_faceColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_faceColor	Renderer/FaceRenderer.h	/^            Color m_faceColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::FaceRenderer
m_faceInspector	View/Inspector.h	/^            FaceInspector* m_faceInspector;$/;"	m	language:C++	class:TrenchBroom::View::Inspector
m_faceManager	Model/MoveBrushVertexAlgorithm.h	/^            FaceManager m_faceManager;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
m_faceRenderer	Renderer/BrushRenderer.h	/^            FaceRenderer m_faceRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_faceSnapshots	Model/Snapshot.h	/^            BrushFaceSnapshotList m_faceSnapshots;$/;"	m	language:C++	class:TrenchBroom::Model::Snapshot
m_faces	Controller/FaceAttributeCommand.h	/^            const Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_faces	Controller/MoveTexturesCommand.h	/^            Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_faces	Controller/ResizeBrushesCommand.h	/^            Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
m_faces	Controller/RotateTexturesCommand.h	/^            Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
m_faces	Controller/SelectionCommand.h	/^            Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_faces	Model/Brush.h	/^            BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::Model::Brush
m_faces	Model/MoveBrushFacesAlgorithm.h	/^            const Polygon3::List& m_faces;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
m_faces	View/FaceAttribsEditor.h	/^            Model::BrushFaceList m_faces;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_faces	View/ResizeBrushesTool.cpp	/^            Model::BrushFaceList& m_faces;$/;"	m	language:C++	struct:TrenchBroom::View::CollectDragFaces	file:
m_factory	Model/Map.h	/^            ModelFactory m_factory;$/;"	m	language:C++	class:TrenchBroom::Model::Map
m_fadeDistance	Renderer/TextRenderer.h	/^            float m_fadeDistance;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_fans	Renderer/Compass.h	/^            VertexArray m_fans;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_farPlane	Renderer/Camera.h	/^            float m_farPlane;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_file	IO/PakFileSystem.h	/^            MappedFile::Ptr m_file;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem
m_file	IO/Wad.h	/^            MappedFile::Ptr m_file;$/;"	m	language:C++	class:TrenchBroom::IO::Wad
m_fileFormats	Model/GameConfig.h	/^            StringSet m_fileFormats;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_fileHandle	IO/MappedFile.h	/^            HANDLE m_fileHandle;$/;"	m	language:C++	class:TrenchBroom::IO::WinMappedFile
m_fileSystemConfig	Model/GameConfig.h	/^            FileSystemConfig m_fileSystemConfig;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_fileSystems	IO/GameFileSystem.h	/^            FileSystemList m_fileSystems;$/;"	m	language:C++	class:TrenchBroom::IO::GameFileSystem
m_filedesc	IO/MappedFile.h	/^            int m_filedesc;$/;"	m	language:C++	class:TrenchBroom::IO::PosixMappedFile
m_files	IO/FileSystem.h	/^                bool m_files;$/;"	m	language:C++	class:TrenchBroom::IO::FileSystem::TypeMatcher
m_files	IO/PakFileSystem.h	/^                FileMap m_files;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
m_filter	FilterIterator.h	/^        Filter m_filter;$/;"	m	language:C++	class:TrenchBroom::FilterIterator
m_filter	HitFilter.h	/^        FilterPtr m_filter;$/;"	m	language:C++	class:TrenchBroom::HitFilterChain
m_filter	Model/HitAdapter.h	/^            const ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Model::DefaultHitFilter
m_filter	Model/Selection.cpp	/^            const ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Model::SetSelection	file:
m_filter	Model/Selection.h	/^            const ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_filter	Renderer/BrushRenderer.h	/^            Filter* m_filter;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_filter	Renderer/EntityModelRenderer.h	/^            const Model::ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
m_filter	Renderer/EntityRenderer.h	/^                const Model::ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameFilter
m_filter	Renderer/EntityRenderer.h	/^            const Model::ModelFilter& m_filter;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_filter	Renderer/MapRenderer.cpp	/^            const Model::ModelFilter& m_filter;$/;"	m	language:C++	struct:TrenchBroom::Renderer::SelectedBrushRendererFilter	file:
m_filter	Renderer/MapRenderer.cpp	/^            const Model::ModelFilter& m_filter;$/;"	m	language:C++	struct:TrenchBroom::Renderer::UnselectedBrushRendererFilter	file:
m_filter	View/MapDocument.h	/^            Model::ModelFilter m_filter;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_filterBox	View/EntityBrowser.h	/^            wxSearchCtrl* m_filterBox;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_filterBox	View/ModEditor.h	/^            wxSearchCtrl* m_filterBox;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_filterBox	View/TextureBrowser.h	/^            wxSearchCtrl* m_filterBox;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_filterEditor	View/IssueBrowser.h	/^            FlagsPopupEditor* m_filterEditor;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_filterText	View/EntityBrowserView.h	/^            String m_filterText;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_filterText	View/TextureBrowserView.h	/^            String m_filterText;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_firstBlock	Renderer/Vbo.h	/^            VboBlock* m_firstBlock;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_firstFreeBlock	Allocator.h	/^        unsigned char m_firstFreeBlock;$/;"	m	language:C++	class:Allocator::Chunk
m_firstPoint	View/RotateToolHelper.h	/^            Vec3 m_firstPoint;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_flagIndex	View/SmartSpawnflagsEditor.cpp	/^            size_t m_flagIndex;$/;"	m	language:C++	struct:TrenchBroom::View::UpdateSpawnflag	file:
m_flagMixedValue	View/FlagChangedCommand.h	/^            int m_flagMixedValue;$/;"	m	language:C++	class:TrenchBroom::View::FlagChangedCommand
m_flagSetValue	View/FlagChangedCommand.h	/^            int m_flagSetValue;$/;"	m	language:C++	class:TrenchBroom::View::FlagChangedCommand
m_flagsConfig	Model/MixedBrushContentsIssueGenerator.h	/^            const GameConfig::FlagsConfig& m_flagsConfig;$/;"	m	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssueGenerator
m_flagsEditor	View/SmartSpawnflagsEditor.h	/^            FlagsEditor* m_flagsEditor;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
m_flagsTxt	View/FlagsPopupEditor.h	/^            wxStaticText* m_flagsTxt;$/;"	m	language:C++	class:TrenchBroom::View::FlagsPopupEditor
m_flipXButton	View/FaceAttribsEditor.h	/^            wxButton* m_flipXButton;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_flipYButton	View/FaceAttribsEditor.h	/^            wxButton* m_flipYButton;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_floatRadio	View/SmartColorEditor.h	/^            wxRadioButton* m_floatRadio;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
m_focusColor	View/RenderView.h	/^            Color m_focusColor;$/;"	m	language:C++	class:TrenchBroom::View::RenderView
m_font	Renderer/TextRenderer.h	/^            TextureFont& m_font;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_fontManager	Renderer/MapRenderer.h	/^            FontManager& m_fontManager;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_fontManager	View/GLContextHolder.h	/^            Renderer::FontManager m_fontManager;$/;"	m	language:C++	class:TrenchBroom::View::RootGLContextHolder
m_force	Controller/EntityPropertyCommand.h	/^            bool m_force;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_format	IO/QuakeMapParser.h	/^            Model::MapFormat::Type m_format;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser
m_format	Model/Map.h	/^            MapFormat::Type m_format;$/;"	m	language:C++	class:TrenchBroom::Model::Map
m_format	Model/ModelFactory.h	/^            MapFormat::Type m_format;$/;"	m	language:C++	class:TrenchBroom::Model::ModelFactory
m_format	View/SpinControl.h	/^    wxString m_format;$/;"	m	language:C++	class:SpinControl
m_fov	Renderer/PerspectiveCamera.h	/^            float m_fov;$/;"	m	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
m_fragmentShaders	Renderer/ShaderManager.h	/^            StringList m_fragmentShaders;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderConfig
m_frameIndex	Assets/ModelDefinition.h	/^            size_t m_frameIndex;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
m_frameKey	Assets/ModelDefinition.h	/^            Model::PropertyKey m_frameKey;$/;"	m	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
m_frameManager	TrenchBroomApp.h	/^            FrameManager* m_frameManager;$/;"	m	language:C++	class:TrenchBroom::View::TrenchBroomApp
m_frameManager	View/MapFrame.h	/^            FrameManager* m_frameManager;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_frames	Assets/Md2Model.h	/^            FrameList m_frames;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model
m_frames	Assets/MdlModel.h	/^            MdlFrameList m_frames;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlModel
m_frames	Assets/MdlModel.h	/^            SingleFrameList m_frames;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
m_frames	View/FrameManager.h	/^            FrameList m_frames;$/;"	m	language:C++	class:TrenchBroom::View::FrameManager
m_free	Renderer/VboBlock.h	/^            bool m_free;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_freeBlocks	Renderer/Vbo.h	/^            VboBlockList m_freeBlocks;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_freeCapacity	Renderer/Vbo.h	/^            size_t m_freeCapacity;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_frequency	Model/PlanePointFinder.cpp	/^            const FloatType m_frequency;$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
m_fromFaceTransform	View/TexturingViewHelper.h	/^            Mat4x4 m_fromFaceTransform;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_frontBrushes	View/ClipTool.h	/^            Model::EntityBrushesMap m_frontBrushes;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
m_frontRenderer	Renderer/ClipperRenderer.h	/^            BrushRenderer m_frontRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
m_fs	IO/Md2Parser.h	/^            const GameFileSystem& m_fs;$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser
m_fs	IO/WalTextureLoader.h	/^            const FileSystem& m_fs;$/;"	m	language:C++	class:TrenchBroom::IO::WalTextureLoader
m_fs	Model/GameImpl.h	/^            IO::GameFileSystem m_fs;$/;"	m	language:C++	class:TrenchBroom::Model::GameImpl
m_fullPath	Model/EntityDefinitionFileSpec.h	/^            IO::Path m_fullPath;$/;"	m	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
m_function	Notifier.h	/^            F m_function;$/;"	m	language:C++	class:TrenchBroom::Notifier0::CObserver
m_function	Notifier.h	/^            F m_function;$/;"	m	language:C++	class:TrenchBroom::Notifier1::CObserver
m_function	Notifier.h	/^            F m_function;$/;"	m	language:C++	class:TrenchBroom::Notifier2::CObserver
m_function	Notifier.h	/^            F m_function;$/;"	m	language:C++	class:TrenchBroom::Notifier3::CObserver
m_function	SetBool.h	/^        F m_function;$/;"	m	language:C++	class:TrenchBroom::SetBoolFun
m_function	View/RecentDocuments.h	/^            Function m_function;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_game	Assets/EntityModelManager.h	/^            Model::GamePtr m_game;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_game	Assets/TextureManager.h	/^            Model::GamePtr m_game;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_game	Controller/NewDocumentCommand.h	/^            Model::GamePtr m_game;$/;"	m	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
m_game	Controller/OpenDocumentCommand.h	/^            Model::GamePtr m_game;$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
m_game	View/MapDocument.h	/^            Model::GamePtr m_game;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_gameInfos	View/GameListBox.h	/^            InfoList m_gameInfos;$/;"	m	language:C++	class:TrenchBroom::View::GameListBox
m_gameListBox	View/ChooseGameDialog.h	/^            GameListBox* m_gameListBox;$/;"	m	language:C++	class:TrenchBroom::View::ChooseGameDialog
m_gameListBox	View/GamesPreferencePane.h	/^            GameListBox* m_gameListBox;$/;"	m	language:C++	class:TrenchBroom::View::GamesPreferencePane
m_gameName	View/GameSelectionCommand.h	/^            String m_gameName;$/;"	m	language:C++	class:TrenchBroom::View::GameSelectionCommand
m_gamePath	Model/GameImpl.h	/^            IO::Path m_gamePath;$/;"	m	language:C++	class:TrenchBroom::Model::GameImpl
m_gamePathValueLabel	View/GamesPreferencePane.h	/^            wxStaticText* m_gamePathValueLabel;$/;"	m	language:C++	class:TrenchBroom::View::GamesPreferencePane
m_gamePaths	Model/GameFactory.h	/^            mutable GamePathMap m_gamePaths;$/;"	m	language:C++	class:TrenchBroom::Model::GameFactory
m_gameRelativePath	View/ChoosePathTypeDialog.h	/^            IO::Path m_gameRelativePath;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_gameRelativeRadio	View/ChoosePathTypeDialog.h	/^            wxRadioButton* m_gameRelativeRadio;$/;"	m	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
m_generator	Model/IssueGenerator.cpp	/^            const IssueGenerator& m_generator;$/;"	m	language:C++	class:TrenchBroom::Model::Visitor	file:
m_generators	Model/IssueManager.h	/^            GeneratorList m_generators;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
m_geometry	Model/Brush.h	/^            BrushGeometry* m_geometry;$/;"	m	language:C++	class:TrenchBroom::Model::Brush
m_geometry	Model/BrushAlgorithm.h	/^            BrushGeometry& m_geometry;$/;"	m	language:C++	class:TrenchBroom::Model::BrushAlgorithm
m_grayscale	Renderer/BrushRenderer.h	/^            bool m_grayscale;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_grid	View/EntityPropertyGrid.h	/^            wxGrid* m_grid;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_grid	View/KeyboardPreferencePane.h	/^            wxGrid* m_grid;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
m_grid	View/MapDocument.h	/^            View::Grid m_grid;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_gridAlphaSlider	View/GeneralPreferencePane.h	/^            wxSlider* m_gridAlphaSlider;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_gridIconPanel	View/StatusBar.h	/^            ImagePanel* m_gridIconPanel;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_gridSize	Renderer/RenderContext.h	/^            size_t m_gridSize;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_gridSize	View/StatusBar.h	/^            size_t m_gridSize;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_gridSizeText	View/StatusBar.h	/^            wxStaticText* m_gridSizeText;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_gridVisible	Renderer/RenderContext.h	/^            bool m_gridVisible;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_group	View/EntityBrowserView.h	/^            bool m_group;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_group	View/TextureBrowserView.h	/^            bool m_group;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_groupButton	View/EntityBrowser.h	/^            wxToggleButton* m_groupButton;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_groupButton	View/TextureBrowser.h	/^            wxToggleButton* m_groupButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_groupLevel	Controller/CommandProcessor.h	/^            size_t m_groupLevel;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_groupMargin	View/CellLayout.h	/^            float m_groupMargin;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_groupName	Controller/CommandProcessor.h	/^            String m_groupName;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_groupUndoable	Controller/CommandProcessor.h	/^            bool m_groupUndoable;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_groupedCommands	Controller/CommandProcessor.h	/^            CommandStack m_groupedCommands;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_groups	View/CellLayout.h	/^            GroupList m_groups;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_guideRenderer	View/CreateBrushTool.h	/^            Renderer::BoundsGuideRenderer m_guideRenderer;$/;"	m	language:C++	class:TrenchBroom::View::CreateBrushTool
m_hInset	Renderer/TextRenderer.h	/^            float m_hInset;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_handle	View/RotateObjectsTool.h	/^            RotateObjectsHandle m_handle;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
m_handle	View/TexturingViewScaleTool.h	/^            Vec2i m_handle;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
m_handleManager	View/VertexTool.h	/^            VertexHandleManager m_handleManager;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
m_handlePoints	View/Clipper.h	/^            ClipHandlePoints m_handlePoints;$/;"	m	language:C++	class:TrenchBroom::View::Clipper
m_handleRenderer	Renderer/ClipperRenderer.h	/^            PointHandleRenderer m_handleRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
m_handleRenderer	View/VertexHandleManager.h	/^            Renderer::PointHandleRenderer m_handleRenderer;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_handler	View/RecentDocuments.h	/^            EventHandler* m_handler;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_hasColor	IO/EntityDefinitionClassInfo.h	/^            bool m_hasColor;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_hasDefaultValue	Assets/PropertyDefinition.h	/^            bool m_hasDefaultValue;$/;"	m	language:C++	class:TrenchBroom::Assets::PropertyDefinitionWithDefaultValue
m_hasDescription	IO/EntityDefinitionClassInfo.h	/^            bool m_hasDescription;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_hasSize	IO/EntityDefinitionClassInfo.h	/^            bool m_hasSize;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_headLength	Renderer/Compass.cpp	/^        const float Compass::m_headLength = 7.0f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass	file:
m_headLength	Renderer/Compass.h	/^            static const float m_headLength;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_headRadius	Renderer/Compass.cpp	/^        const float Compass::m_headRadius = 3.5f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass	file:
m_headRadius	Renderer/Compass.h	/^            static const float m_headRadius;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_height	Assets/Texture.h	/^            size_t m_height;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_height	Renderer/FontTexture.h	/^            size_t m_height;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontTexture
m_height	View/CellLayout.h	/^            float m_height;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_height	View/CellLayout.h	/^            float m_height;$/;"	m	language:C++	class:TrenchBroom::View::LayoutBounds
m_helper	View/MoveTool.h	/^            MoveHelper m_helper;$/;"	m	language:C++	class:TrenchBroom::View::MoveTool
m_helper	View/RotateObjectsTool.h	/^            PlaneDragHelper* m_helper;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
m_helper	View/TexturingView.h	/^            TexturingViewHelper m_helper;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_helper	View/TexturingViewOffsetTool.h	/^            const TexturingViewHelper& m_helper;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
m_helper	View/TexturingViewRotateTool.h	/^            TexturingViewHelper& m_helper;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
m_helper	View/TexturingViewScaleOriginTool.h	/^            TexturingViewHelper& m_helper;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
m_helper	View/TexturingViewScaleTool.h	/^            TexturingViewHelper& m_helper;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
m_helper	View/ToolBox.h	/^            ToolBoxHelper* m_helper;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_hiddenGenerators	View/IssueBrowser.cpp	/^            Model::IssueType m_hiddenGenerators;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
m_hiddenIssues	Model/Object.h	/^            IssueType m_hiddenIssues;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_hideSelection	Renderer/RenderContext.h	/^            bool m_hideSelection;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_hideUnused	View/EntityBrowserView.h	/^            bool m_hideUnused;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_hideUnused	View/TextureBrowserView.h	/^            bool m_hideUnused;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_highlightColor	Renderer/PointHandleRenderer.h	/^            Color m_highlightColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_hitDistance	View/ResizeBrushesTool.cpp	/^            double m_hitDistance;$/;"	m	language:C++	struct:TrenchBroom::View::FindClosestFaceHit	file:
m_hitPoint	Hit.h	/^        Vec3 m_hitPoint;$/;"	m	language:C++	class:TrenchBroom::Hit
m_hits	Hit.h	/^        List m_hits;$/;"	m	language:C++	class:TrenchBroom::Hits
m_hits	View/InputState.h	/^            Hits m_hits;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_holder	Hit.h	/^        BaseHolder::Ptr m_holder;$/;"	m	language:C++	class:TrenchBroom::Hit
m_holder	Model/Brush.h	/^            FacesHolder::Ptr m_holder;$/;"	m	language:C++	class:TrenchBroom::Model::BrushSnapshot
m_holder	Renderer/VertexArray.h	/^            BaseHolder::Ptr m_holder;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
m_horizontalRestriction	View/MovementRestriction.h	/^            Restriction m_horizontalRestriction;$/;"	m	language:C++	class:TrenchBroom::View::MovementRestriction
m_icon	Model/GameConfig.h	/^            IO::Path m_icon;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_idleInterval	View/Autosaver.h	/^            time_t m_idleInterval;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_ignoreDocumentSelection	View/MapTreeView.h	/^            bool m_ignoreDocumentSelection;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeView
m_ignoreNextClick	View/ToolBox.h	/^            bool m_ignoreNextClick;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_ignoreNextDrag	View/ToolBox.h	/^            bool m_ignoreNextDrag;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_ignoreNotifier	View/ModEditor.h	/^            bool m_ignoreNotifier;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_ignoreObjectChangeNotifications	View/VertexTool.h	/^            bool m_ignoreObjectChangeNotifications;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
m_ignoreSelection	View/EntityPropertyGrid.h	/^            bool m_ignoreSelection;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_ignoreTreeSelection	View/MapTreeView.h	/^            bool m_ignoreTreeSelection;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeView
m_ignoreUpdates	View/EntityPropertyGridTable.h	/^            bool m_ignoreUpdates;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_ignoreUpdates	View/SmartSpawnflagsEditor.h	/^            bool m_ignoreUpdates;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
m_imageSize	View/ImageListBox.h	/^            wxSize m_imageSize;$/;"	m	language:C++	class:TrenchBroom::View::ImageListBox
m_impl	IO/ImageLoader.h	/^            ImageLoaderImpl* m_impl;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoader
m_index	Model/ParaxialTexCoordSystem.h	/^            size_t m_index;$/;"	m	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
m_index	View/FlagChangedCommand.h	/^            size_t m_index;$/;"	m	language:C++	class:TrenchBroom::View::FlagChangedCommand
m_index1	Renderer/RenderUtils.cpp	/^                size_t m_index1;$/;"	m	language:C++	class:TrenchBroom::Renderer::SphereBuilder::MidPointIndex	file:
m_index2	Renderer/RenderUtils.cpp	/^                size_t m_index2;$/;"	m	language:C++	class:TrenchBroom::Renderer::SphereBuilder::MidPointIndex	file:
m_indices	IO/ImageLoaderImpl.h	/^            mutable Buffer<unsigned char> m_indices;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_indices	Renderer/IndexedVertexList.h	/^            IndexArray m_indices;$/;"	m	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
m_indices	Renderer/RenderUtils.cpp	/^                size_t m_indices[3];$/;"	m	language:C++	class:TrenchBroom::Renderer::SphereBuilder::Triangle	file:
m_indices	Renderer/VertexArray.h	/^            IndexArray m_indices;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
m_indicesInitialized	IO/ImageLoaderImpl.h	/^            mutable bool m_indicesInitialized;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_infoPanel	View/MapFrame.h	/^            InfoPanel* m_infoPanel;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_infoRenderer	Renderer/BoundsGuideRenderer.h	/^            BoundsInfoRenderer m_infoRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_initialPoint	View/CreateBrushTool.h	/^            Vec3 m_initialPoint;$/;"	m	language:C++	class:TrenchBroom::View::CreateBrushTool
m_initialXAxis	Model/ParallelTexCoordSystem.h	/^            Vec3 m_initialXAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
m_initialYAxis	Model/ParallelTexCoordSystem.h	/^            Vec3 m_initialYAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
m_initialized	Preference.h	/^        bool m_initialized;$/;"	m	language:C++	class:TrenchBroom::Preference
m_initialized	View/RenderView.h	/^            bool m_initialized;$/;"	m	language:C++	class:TrenchBroom::View::RenderView
m_innerCur	NestedHierarchyIterator.h	/^        InnerIterator m_innerCur;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_innerCur	NestedIterator.h	/^        InnerIterator m_innerCur;$/;"	m	language:C++	class:TrenchBroom::NestedIterator
m_innerEnd	NestedHierarchyIterator.h	/^        InnerIterator m_innerEnd;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_innerEnd	NestedIterator.h	/^        InnerIterator m_innerEnd;$/;"	m	language:C++	class:TrenchBroom::NestedIterator
m_inputState	View/ToolBox.h	/^            InputState m_inputState;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_inspector	View/MapFrame.h	/^            Inspector* m_inspector;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_invertAltMoveAxisCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_invertAltMoveAxisCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_invertLookHAxisCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_invertLookHAxisCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_invertLookVAxisCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_invertLookVAxisCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_invertPanHAxisCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_invertPanHAxisCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_invertPanVAxisCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_invertPanVAxisCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_invertedMatrix	Renderer/Camera.h	/^            mutable Mat4x4f m_invertedMatrix;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_isDefault	Assets/PropertyDefinition.h	/^            bool m_isDefault;$/;"	m	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
m_isWorldspawn	Model/Entity.h	/^            bool m_isWorldspawn;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_issue	Model/IssueGenerator.cpp	/^            Issue* m_issue;$/;"	m	language:C++	class:TrenchBroom::Model::Visitor	file:
m_issueBrowser	View/InfoPanel.h	/^            IssueBrowser* m_issueBrowser;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_issueBrowserActiveBitmap	View/InfoPanel.h	/^            wxBitmap m_issueBrowserActiveBitmap;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_issueBrowserButton	View/InfoPanel.h	/^            wxButton* m_issueBrowserButton;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_issueBrowserInactiveBitmap	View/InfoPanel.h	/^            wxBitmap m_issueBrowserInactiveBitmap;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_issueCount	View/StatusBar.h	/^            size_t m_issueCount;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_issueList	Model/IssueManager.h	/^            Issue* m_issueList;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
m_issueManager	View/MapDocument.cpp	/^            Model::IssueManager& m_issueManager;$/;"	m	language:C++	class:TrenchBroom::View::AddObjectToIssueManager	file:
m_issueManager	View/MapDocument.cpp	/^            Model::IssueManager& m_issueManager;$/;"	m	language:C++	class:TrenchBroom::View::RemoveObjectFromIssueManager	file:
m_issueManager	View/MapDocument.cpp	/^            Model::IssueManager& m_issueManager;$/;"	m	language:C++	class:TrenchBroom::View::UpdateObjectInIssueManager	file:
m_issueManager	View/MapDocument.h	/^            Model::IssueManager m_issueManager;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_issueMap	Model/IssueManager.h	/^            IssueMap m_issueMap;$/;"	m	language:C++	class:TrenchBroom::Model::IssueManager
m_issuesIconPanel	View/StatusBar.h	/^            ImagePanel* m_issuesIconPanel;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_issuesText	View/StatusBar.h	/^            wxStaticText* m_issuesText;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_item	View/CellLayout.h	/^            CellType m_item;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_item	View/CellLayout.h	/^            GroupType m_item;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_item	View/KeyboardPreferencePane.h	/^            const ShortcutMenuItem& m_item;$/;"	m	language:C++	class:TrenchBroom::View::MenuKeyboardShortcutEntry
m_itemBounds	View/CellLayout.h	/^            LayoutBounds m_itemBounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_itemHeight	View/CellLayout.h	/^            float m_itemHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_itemWidth	View/CellLayout.h	/^            float m_itemWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_items	View/Menu.h	/^            List m_items;$/;"	m	language:C++	class:TrenchBroom::View::MenuItemParent
m_iterator	CastIterator.h	/^        Iterator m_iterator;$/;"	m	language:C++	class:TrenchBroom::CastIterator
m_keepBrushSelection	Controller/SelectionCommand.h	/^            bool m_keepBrushSelection;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_key	Assets/ModelDefinition.h	/^            Model::PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionFlagMatcher
m_key	Assets/ModelDefinition.h	/^            Model::PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionPropertyMatcher
m_key	Model/EntityLinkIssueGenerator.cpp	/^            PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::Model::EntityLinkIssue	file:
m_key	StringIndex.h	/^            mutable String m_key;$/;"	m	language:C++	class:TrenchBroom::StringIndex::Node
m_key	View/EntityPropertyGridTable.h	/^                String m_key;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
m_key	View/EntityPropertyGridTable.h	/^                String m_key;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_key	View/EntityPropertySelectedCommand.h	/^            Model::PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertySelectedCommand
m_key	View/KeyboardShortcut.h	/^            int m_key;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_key	View/KeyboardShortcutEditor.h	/^            int m_key;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_key	View/KeyboardShortcutEvent.h	/^            int m_key;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
m_key	View/SmartColorEditor.cpp	/^            Model::PropertyKey m_key;$/;"	m	language:C++	struct:TrenchBroom::View::ConvertColorRange	file:
m_key	View/SmartColorEditor.cpp	/^            Model::PropertyKey m_key;$/;"	m	language:C++	struct:TrenchBroom::View::SetColor	file:
m_key	View/SmartPropertyEditor.h	/^            Model::PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditor
m_key	View/SmartPropertyEditorManager.h	/^            Model::PropertyKey m_key;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
m_key	View/SmartSpawnflagsEditor.cpp	/^            const Model::PropertyKey& m_key;$/;"	m	language:C++	struct:TrenchBroom::View::UpdateSpawnflag	file:
m_keyIndex	Model/EntityPropertyIndex.h	/^            StringIndex<Entity*> m_keyIndex;$/;"	m	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
m_keys	ConfigTypes.h	/^        StringSet m_keys;$/;"	m	language:C++	class:TrenchBroom::ConfigTable
m_keys	Renderer/Mesh.h	/^            KeySet m_keys;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_keys	View/SmartPropertyEditorMatcher.h	/^            Model::PropertyKeySet m_keys;$/;"	m	language:C++	class:TrenchBroom::View::SmartPropertyEditorKeyMatcher
m_killColor	Renderer/MapRenderer.cpp	/^            Color m_killColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter	file:
m_killSources	Model/Entity.h	/^            EntityList m_killSources;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_killTargets	Model/Entity.h	/^            EntityList m_killTargets;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_label	View/KeyboardShortcutEditor.h	/^            wxStaticText* m_label;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_lastActivation	TrenchBroomApp.h	/^            wxLongLong m_lastActivation;$/;"	m	language:C++	class:TrenchBroom::View::TrenchBroomApp
m_lastActivation	View/ToolBox.h	/^            wxDateTime m_lastActivation;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_lastAngle	View/RotateToolHelper.h	/^            FloatType m_lastAngle;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_lastBlock	Renderer/Vbo.h	/^            VboBlock* m_lastBlock;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_lastCommandStack	Controller/CommandProcessor.h	/^            CommandStack m_lastCommandStack;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_lastFocusedWindow	TrenchBroomApp.h	/^            wxWindow* m_lastFocusedWindow;$/;"	m	language:C++	class:TrenchBroom::View::TrenchBroomApp
m_lastFocusedWindowIsMapView	TrenchBroomApp.h	/^            bool m_lastFocusedWindowIsMapView;$/;"	m	language:C++	class:TrenchBroom::View::TrenchBroomApp
m_lastHitPoint	View/TexturingViewScaleTool.h	/^            Vec2f m_lastHitPoint; \/\/ in face coords$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
m_lastHoveredCell	View/EntityPropertyGrid.h	/^            wxGridCellCoords m_lastHoveredCell;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_lastModificationTime	View/Autosaver.h	/^            time_t m_lastModificationTime;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_lastPoint	View/TexturingViewOffsetTool.h	/^            Vec2f m_lastPoint;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewOffsetTool
m_lastPoint	View/TexturingViewScaleOriginTool.h	/^            Vec2f m_lastPoint;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
m_lastPoint	View/Tool.h	/^            Vec3 m_lastPoint;$/;"	m	language:C++	class:TrenchBroom::View::PlaneDragPolicy
m_lastPos	View/MiniMapBaseView.h	/^            wxPoint m_lastPos;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapBaseView
m_lastResult	Controller/SelectionCommand.h	/^            Model::SelectionResult m_lastResult;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_lastSaveTime	View/Autosaver.h	/^            time_t m_lastSaveTime;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_lastScrollPos	View/SmartSpawnflagsEditor.h	/^            wxPoint m_lastScrollPos;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
m_lastSelectedCol	View/EntityPropertyGrid.h	/^            int m_lastSelectedCol;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_lastSelectedFace	Model/Selection.h	/^            BrushFace* m_lastSelectedFace;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_lastSelectedFace	Model/SelectionResult.h	/^            BrushFace* m_lastSelectedFace;$/;"	m	language:C++	class:TrenchBroom::Model::SelectionResult
m_lastSelectedKey	View/EntityPropertyGrid.h	/^            Model::PropertyKey m_lastSelectedKey;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_lastTime	View/Animation.h	/^            wxLongLong m_lastTime;$/;"	m	language:C++	class:TrenchBroom::View::AnimationManager
m_layout	View/CellView.h	/^            Layout m_layout;$/;"	m	language:C++	class:TrenchBroom::View::CellView
m_layoutInitialized	View/CellView.h	/^            bool m_layoutInitialized;$/;"	m	language:C++	class:TrenchBroom::View::CellView
m_less	CollectionUtils.h	/^        const Less& m_less;$/;"	m	language:C++	struct:Utils::EqualsUsingLess
m_lhs	Notifier.h	/^            const Observer& m_lhs;$/;"	m	language:C++	struct:TrenchBroom::Notifier0::CompareObservers
m_lhs	Notifier.h	/^            const Observer& m_lhs;$/;"	m	language:C++	struct:TrenchBroom::Notifier1::CompareObservers
m_lhs	Notifier.h	/^            const Observer& m_lhs;$/;"	m	language:C++	struct:TrenchBroom::Notifier2::CompareObservers
m_lhs	Notifier.h	/^            const Observer& m_lhs;$/;"	m	language:C++	struct:TrenchBroom::Notifier3::CompareObservers
m_library	Renderer/FontManager.h	/^            FT_Library m_library;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontManager
m_line	IO/EntityDefinitionClassInfo.h	/^            size_t m_line;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_line	IO/QuakeMapParser.h	/^                size_t m_line;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
m_line	IO/Token.h	/^            size_t m_line;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_lineCount	Model/BrushFace.h	/^            size_t m_lineCount;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_lineCount	Model/Object.h	/^            size_t m_lineCount;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_lineHeight	Renderer/TextureFont.h	/^            int m_lineHeight;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_lineNumber	Model/BrushFace.h	/^            size_t m_lineNumber;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_lineNumber	Model/Object.h	/^            size_t m_lineNumber;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_linkColor	Renderer/MapRenderer.cpp	/^            Color m_linkColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter	file:
m_linkSources	Model/Entity.h	/^            EntityList m_linkSources;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_linkTargets	Model/Entity.h	/^            EntityList m_linkTargets;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_loaded	Assets/TextureCollection.h	/^            bool m_loaded;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollection
m_locale	StringUtils.h	/^        std::locale m_locale;$/;"	m	language:C++	struct:StringUtils::CaseInsensitiveCharCompare
m_lock	View/Animation.h	/^            wxCriticalSection m_lock;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_lock	View/Animation.h	/^            wxCriticalSection m_lock;$/;"	m	language:C++	class:TrenchBroom::View::AnimationManager
m_lockTextures	Controller/ResizeBrushesCommand.h	/^            bool m_lockTextures;$/;"	m	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
m_lockTextures	Controller/TransformObjectsCommand.h	/^            bool m_lockTextures;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
m_lockTextures	Model/ModelUtils.h	/^            const bool m_lockTextures;$/;"	m	language:C++	struct:TrenchBroom::Model::Transform
m_locked	View/RotateObjectsHandle.h	/^            bool m_locked;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_logger	Assets/EntityModelManager.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_logger	Assets/TextureManager.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_logger	IO/QuakeMapParser.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser
m_logger	View/Autosaver.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_logger	View/CachingLogger.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::View::CachingLogger
m_logger	View/EntityBrowserView.h	/^            Logger& m_logger;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_logger	View/MapDocument.cpp	/^            Logger& m_logger;$/;"	m	language:C++	class:TrenchBroom::View::SetEntityModel	file:
m_logger	View/MapView.h	/^            Logger* m_logger;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_lookSpeedSlider	View/GeneralPreferencePane.h	/^            wxSlider* m_lookSpeedSlider;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_mainBook	View/InfoPanel.h	/^            wxSimplebook* m_mainBook;$/;"	m	language:C++	class:TrenchBroom::View::InfoPanel
m_map	Model/Entity.h	/^            Map* m_map;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_map	View/MapDocument.cpp	/^            Model::Map& m_map;$/;"	m	language:C++	class:TrenchBroom::View::AddToMap	file:
m_map	View/MapDocument.cpp	/^            Model::Map& m_map;$/;"	m	language:C++	class:TrenchBroom::View::RemoveFromMap	file:
m_map	View/MapDocument.h	/^            Model::Map* m_map;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_mapInspector	View/Inspector.h	/^            MapInspector* m_mapInspector;$/;"	m	language:C++	class:TrenchBroom::View::Inspector
m_mapView	View/MapFrame.cpp	/^            const MapView* m_mapView;$/;"	m	language:C++	class:TrenchBroom::View::FrameMenuSelector	file:
m_mapView	View/MapFrame.h	/^            MapView* m_mapView;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_mappingHandle	IO/MappedFile.h	/^	        HANDLE m_mappingHandle;$/;"	m	language:C++	class:TrenchBroom::IO::WinMappedFile
m_margin	View/ColorTable.h	/^            int m_margin;$/;"	m	language:C++	class:TrenchBroom::View::ColorTable
m_matcher	Assets/ModelDefinition.h	/^            StaticModelDefinitionMatcher* m_matcher;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
m_matrix	Renderer/Camera.h	/^            mutable Mat4x4f m_matrix;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_maxBackups	View/Autosaver.h	/^            size_t m_maxBackups;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_maxCellHeight	View/CellLayout.h	/^            float m_maxCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_maxCellHeight	View/CellLayout.h	/^            float m_maxCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_maxCellHeight	View/CellLayout.h	/^            float m_maxCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_maxCellWidth	View/CellLayout.h	/^            float m_maxCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_maxCellWidth	View/CellLayout.h	/^            float m_maxCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_maxCellWidth	View/CellLayout.h	/^            float m_maxCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_maxCells	View/CellLayout.h	/^            size_t m_maxCells;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_maxCellsPerRow	View/CellLayout.h	/^            size_t m_maxCellsPerRow;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_maxCellsPerRow	View/CellLayout.h	/^            size_t m_maxCellsPerRow;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_maxChar	Renderer/TextureFont.h	/^            unsigned char m_maxChar;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_maxCount	View/EntityPropertyGridTable.h	/^                size_t m_maxCount;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_maxSize	View/RecentDocuments.h	/^            size_t m_maxSize;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_maxUpScale	View/CellLayout.h	/^            float m_maxUpScale;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_maxUpScale	View/CellLayout.h	/^            float m_maxUpScale;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_maxUpScale	View/CellLayout.h	/^            float m_maxUpScale;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_maxValue	View/SpinControl.h	/^    double m_maxValue;$/;"	m	language:C++	class:SpinControl
m_maxWidth	View/CellLayout.h	/^            float m_maxWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_maxWidth	View/CellLayout.h	/^            float m_maxWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_menuId	View/Menu.h	/^            int m_menuId;$/;"	m	language:C++	class:TrenchBroom::View::MenuItemParent
m_menus	View/RecentDocuments.h	/^            MenuList m_menus;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_meshRenderer	Renderer/FaceRenderer.h	/^            MeshRenderer m_meshRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::FaceRenderer
m_message	View/StatusBar.h	/^            wxStaticText* m_message;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_minCellHeight	View/CellLayout.h	/^            float m_minCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_minCellHeight	View/CellLayout.h	/^            float m_minCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_minCellHeight	View/CellLayout.h	/^            float m_minCellHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_minCellWidth	View/CellLayout.h	/^            float m_minCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_minCellWidth	View/CellLayout.h	/^            float m_minCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_minCellWidth	View/CellLayout.h	/^            float m_minCellWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_minChar	Renderer/TextureFont.h	/^            unsigned char m_minChar;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_minMax	Renderer/BoundsInfoRenderer.h	/^                BBox3::Corner m_minMax;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer::BoundsInfoMinMaxTextAnchor
m_minSize	Model/Octree.h	/^            F m_minSize;$/;"	m	language:C++	class:TrenchBroom::Model::OctreeNode
m_minValue	View/SpinControl.h	/^    double m_minValue;$/;"	m	language:C++	class:SpinControl
m_miniMapXYView	View/MiniMap.h	/^            MiniMapXYView* m_miniMapXYView;$/;"	m	language:C++	class:TrenchBroom::View::MiniMap
m_miniMapZView	View/MiniMap.h	/^            MiniMapZView* m_miniMapZView;$/;"	m	language:C++	class:TrenchBroom::View::MiniMap
m_modalReceiver	View/ToolBox.h	/^            Tool* m_modalReceiver;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_mode	Model/TexCoordSystemHelper.h	/^            Mode m_mode;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_mode	View/VertexTool.h	/^            Mode m_mode;$/;"	m	language:C++	class:TrenchBroom::View::VertexTool
m_model	Model/Entity.h	/^            Assets::EntityModel* m_model;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_model	View/IssueBrowser.h	/^            IssueBrowserDataModel* m_model;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_modelDefinitions	Assets/EntityDefinition.h	/^            ModelDefinitionList m_modelDefinitions;$/;"	m	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
m_modelManager	View/MapDocument.cpp	/^            Assets::EntityModelManager& m_modelManager;$/;"	m	language:C++	class:TrenchBroom::View::SetEntityModel	file:
m_modelMismatches	Assets/EntityModelManager.h	/^            mutable ModelMismatches m_modelMismatches;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_modelRenderer	Renderer/EntityRenderer.h	/^            EntityModelRenderer m_modelRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_modelStack	Renderer/Transformation.h	/^            Mat4x4f::List m_modelStack;$/;"	m	language:C++	class:TrenchBroom::Renderer::Transformation
m_models	Assets/EntityModelManager.h	/^            mutable ModelCache m_models;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_models	IO/EntityDefinitionClassInfo.h	/^            Assets::ModelDefinitionList m_models;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_modificationCount	View/MapDocument.h	/^            size_t m_modificationCount;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_modified	Preference.h	/^        bool m_modified;$/;"	m	language:C++	class:TrenchBroom::Preference
m_modifierKey1	View/KeyboardShortcut.h	/^            int m_modifierKey1;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_modifierKey1	View/KeyboardShortcutEditor.h	/^            int m_modifierKey1;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_modifierKey1	View/KeyboardShortcutEvent.h	/^            int m_modifierKey1;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
m_modifierKey2	View/KeyboardShortcut.h	/^            int m_modifierKey2;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_modifierKey2	View/KeyboardShortcutEditor.h	/^            int m_modifierKey2;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_modifierKey2	View/KeyboardShortcutEvent.h	/^            int m_modifierKey2;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
m_modifierKey3	View/KeyboardShortcut.h	/^            int m_modifierKey3;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_modifierKey3	View/KeyboardShortcutEditor.h	/^            int m_modifierKey3;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_modifierKey3	View/KeyboardShortcutEvent.h	/^            int m_modifierKey3;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
m_modifierKeys	View/InputState.h	/^            ModifierKeyState m_modifierKeys;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_modifiesDocument	Controller/Command.h	/^            bool m_modifiesDocument;$/;"	m	language:C++	class:TrenchBroom::Controller::Command
m_mouseButtons	View/InputState.h	/^            MouseButtonState m_mouseButtons;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_mouseDX	View/InputState.h	/^            int m_mouseDX;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_mouseDY	View/InputState.h	/^            int m_mouseDY;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_mouseX	View/InputState.h	/^            int m_mouseX;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_mouseY	View/InputState.h	/^            int m_mouseY;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_moveHelper	View/RotateObjectsTool.h	/^            MoveHelper m_moveHelper;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
m_moveInCursorDirCheckBox	View/GeneralPreferencePane.h	/^            wxCheckBox* m_moveInCursorDirCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_moveModDownButton	View/ModEditor.h	/^            wxBitmapButton* m_moveModDownButton;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_moveModUpButton	View/ModEditor.h	/^            wxBitmapButton* m_moveModUpButton;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_moveObjectsTool	View/MapView.h	/^            MoveObjectsTool* m_moveObjectsTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_moveSpeedSlider	View/GeneralPreferencePane.h	/^            wxSlider* m_moveSpeedSlider;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_moveTextureCollectionDownButton	View/TextureCollectionEditor.h	/^            wxBitmapButton* m_moveTextureCollectionDownButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_moveTextureCollectionUpButton	View/TextureCollectionEditor.h	/^            wxBitmapButton* m_moveTextureCollectionUpButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_moveTextureHelper	View/TextureTool.h	/^            MoveTextureHelper* m_moveTextureHelper;$/;"	m	language:C++	class:TrenchBroom::View::TextureTool
m_movementRestriction	View/MapView.h	/^            MovementRestriction m_movementRestriction;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_movementRestriction	View/MoveToolHelper.h	/^            MovementRestriction& m_movementRestriction;$/;"	m	language:C++	class:TrenchBroom::View::MoveHelper
m_msg	Exceptions.h	/^        String m_msg;$/;"	m	language:C++	class:TrenchBroom::Exception
m_multi	View/EntityPropertyGridTable.h	/^                bool m_multi;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_name	Assets/Bsp29Model.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model
m_name	Assets/EntityDefinition.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinition
m_name	Assets/Md2Model.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model
m_name	Assets/MdlModel.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlFrame
m_name	Assets/MdlModel.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlModel
m_name	Assets/PropertyDefinition.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::PropertyDefinition
m_name	Assets/Texture.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_name	Assets/TextureCollection.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollection
m_name	Assets/TextureCollectionSpec.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
m_name	Controller/Command.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Controller::Command
m_name	IO/Bsp29Parser.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::Bsp29Parser
m_name	IO/EntityDefinitionClassInfo.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_name	IO/Md2Parser.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser
m_name	IO/MdlParser.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser
m_name	IO/QuakeMapParser.h	/^                String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
m_name	IO/Wad.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::IO::WadEntry
m_name	Model/GameConfig.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_name	Renderer/FontDescriptor.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontDescriptor
m_name	Renderer/Shader.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Renderer::Shader
m_name	Renderer/ShaderManager.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderConfig
m_name	Renderer/ShaderProgram.h	/^            String m_name;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderProgram
m_nameHash	Renderer/FontDescriptor.h	/^            long m_nameHash;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontDescriptor
m_names	Controller/TextureCollectionCommand.h	/^            StringList m_names;$/;"	m	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
m_names	Model/GameFactory.h	/^            StringList m_names;$/;"	m	language:C++	class:TrenchBroom::Model::GameFactory
m_navBar	View/MapFrame.h	/^            NavBar* m_navBar;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_navPanel	View/NavBar.h	/^            wxPanel* m_navPanel;$/;"	m	language:C++	class:TrenchBroom::View::NavBar
m_nearPlane	Renderer/Camera.h	/^            float m_nearPlane;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_needsLinking	Renderer/ShaderProgram.h	/^            bool m_needsLinking;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderProgram
m_newEdgePositions	Controller/MoveBrushEdgesCommand.h	/^            Edge3::List m_newEdgePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_newFacePositions	Controller/MoveBrushFacesCommand.h	/^            Polygon3::List m_newFacePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_newFaces	Model/MoveBrushVertexAlgorithm.h	/^                CopyMap m_newFaces;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
m_newFile	Controller/SetEntityDefinitionFileCommand.h	/^            IO::Path m_newFile;$/;"	m	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
m_newKey	Controller/EntityPropertyCommand.h	/^            Model::PropertyKey m_newKey;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_newMods	Controller/SetModsCommand.h	/^            StringList m_newMods;$/;"	m	language:C++	class:TrenchBroom::Controller::SetModsCommand
m_newParent	Controller/ReparentBrushesCommand.h	/^            Model::Entity* m_newParent;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
m_newSideEdges	Model/IntersectBrushGeometryWithFace.h	/^            BrushEdgeList m_newSideEdges;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_newValue	Controller/EntityPropertyCommand.h	/^            Model::PropertyValue m_newValue;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_newVertexPositions	Controller/MoveBrushVerticesCommand.h	/^            Vec3::List m_newVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_newVertexPositions	Controller/SnapBrushVerticesCommand.h	/^            Vec3::List m_newVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_newVertexPositions	Controller/SplitBrushEdgesCommand.h	/^            Vec3::List m_newVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_newVertexPositions	Controller/SplitBrushFacesCommand.h	/^            Vec3::List m_newVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_next	HitFilter.h	/^        FilterPtr m_next;$/;"	m	language:C++	class:TrenchBroom::HitFilterChain
m_next	Model/Issue.h	/^            Issue* m_next;$/;"	m	language:C++	class:TrenchBroom::Model::Issue
m_next	Renderer/VboBlock.h	/^            VboBlock* m_next;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_next	View/Tool.h	/^            Tool* m_next;$/;"	m	language:C++	class:TrenchBroom::View::Tool
m_nextCommandStack	Controller/CommandProcessor.h	/^            CommandStack m_nextCommandStack;$/;"	m	language:C++	class:TrenchBroom::Controller::CommandProcessor
m_node1	Model/FaceAdjacencyGraph.h	/^                Node* m_node1;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
m_node2	Model/FaceAdjacencyGraph.h	/^                Node* m_node2;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
m_nodeMap	Model/FaceAdjacencyGraph.h	/^            NodeMap m_nodeMap;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
m_nodes	Model/FaceAdjacencyGraph.h	/^            Node::List m_nodes;$/;"	m	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
m_notebook	View/Inspector.h	/^            wxNotebook* m_notebook;$/;"	m	language:C++	class:TrenchBroom::View::Inspector
m_notified	Model/ModelUtils.h	/^            ObjectSet m_notified;$/;"	m	language:C++	struct:TrenchBroom::Model::NotifyParent
m_notifier	Model/ModelUtils.h	/^            Notifier1<Object*>& m_notifier;$/;"	m	language:C++	struct:TrenchBroom::Model::NotifyParent
m_notifying	Notifier.h	/^        bool m_notifying;$/;"	m	language:C++	class:TrenchBroom::Notifier0
m_notifying	Notifier.h	/^        bool m_notifying;$/;"	m	language:C++	class:TrenchBroom::Notifier1
m_notifying	Notifier.h	/^        bool m_notifying;$/;"	m	language:C++	class:TrenchBroom::Notifier2
m_notifying	Notifier.h	/^        bool m_notifying;$/;"	m	language:C++	class:TrenchBroom::Notifier3
m_numCols	View/FlagsEditor.h	/^            size_t m_numCols;$/;"	m	language:C++	class:TrenchBroom::View::FlagsEditor
m_numFreeBlocks	Allocator.h	/^        unsigned char m_numFreeBlocks;$/;"	m	language:C++	class:Allocator::Chunk
m_numPoints	View/Clipper.h	/^                size_t m_numPoints;$/;"	m	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
m_object	Holder.h	/^    T m_object;$/;"	m	language:C++	class:Holder
m_objects	Controller/SelectionCommand.h	/^            Model::ObjectList m_objects;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_objects	Controller/TransformObjectsCommand.h	/^            Model::ObjectList m_objects;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
m_objects	Model/Octree.h	/^            List m_objects;$/;"	m	language:C++	class:TrenchBroom::Model::OctreeNode
m_objectsToAdd	Controller/AddRemoveObjectsCommand.h	/^            Model::ObjectParentList m_objectsToAdd;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_objectsToRemove	Controller/AddRemoveObjectsCommand.h	/^            Model::ObjectParentList m_objectsToRemove;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_observers	Notifier.h	/^        Observer::List m_observers;$/;"	m	language:C++	class:TrenchBroom::Notifier0
m_observers	Notifier.h	/^        typename Observer::List m_observers;$/;"	m	language:C++	class:TrenchBroom::Notifier1
m_observers	Notifier.h	/^        typename Observer::List m_observers;$/;"	m	language:C++	class:TrenchBroom::Notifier2
m_observers	Notifier.h	/^        typename Observer::List m_observers;$/;"	m	language:C++	class:TrenchBroom::Notifier3
m_occludedBoundsColor	Renderer/EntityRenderer.h	/^            Color m_occludedBoundsColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_occludedColor	Renderer/PointHandleRenderer.h	/^            Color m_occludedColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_occludedEdgeColor	Renderer/BrushRenderer.h	/^            Color m_occludedEdgeColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_octree	Model/Picker.h	/^            Octree<FloatType, Pickable*> m_octree;$/;"	m	language:C++	class:TrenchBroom::Model::Picker
m_offset	Model/BrushFace.h	/^            Vec2f m_offset;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_offset	Model/TexCoordSystemHelper.h	/^            Vec2f m_offset;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_offset	Renderer/VboBlock.h	/^            size_t m_offset;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_offset	View/TexturingViewRotateTool.h	/^            Vec2f m_offset;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewRotateTool
m_offsetTool	View/TexturingView.h	/^            TexturingViewOffsetTool* m_offsetTool;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_oldEdgePositions	Controller/MoveBrushEdgesCommand.h	/^            Edge3::List m_oldEdgePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_oldEdgePositions	Controller/SplitBrushEdgesCommand.h	/^            Edge3::List m_oldEdgePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_oldFacePositions	Controller/MoveBrushFacesCommand.h	/^            Polygon3::List m_oldFacePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_oldFacePositions	Controller/SplitBrushFacesCommand.h	/^            Polygon3::List m_oldFacePositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_oldFile	Controller/SetEntityDefinitionFileCommand.h	/^            IO::Path m_oldFile;$/;"	m	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
m_oldKey	Controller/EntityPropertyCommand.h	/^            Model::PropertyKey m_oldKey;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_oldMods	Controller/SetModsCommand.h	/^            StringList m_oldMods;$/;"	m	language:C++	class:TrenchBroom::Controller::SetModsCommand
m_oldParents	Controller/ReparentBrushesCommand.h	/^            Model::BrushEntityMap m_oldParents;$/;"	m	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
m_oldValue	PreferenceManager.h	/^        T m_oldValue;$/;"	m	language:C++	class:TrenchBroom::SetTemporaryPreference
m_oldVertexPositions	Controller/MoveBrushVerticesCommand.h	/^            Vec3::List m_oldVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_oldVertexPositions	Controller/SnapBrushVerticesCommand.h	/^            Vec3::List m_oldVertexPositions;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_openOtherDocumentButton	View/WelcomeFrame.h	/^            wxButton* m_openOtherDocumentButton;$/;"	m	language:C++	class:TrenchBroom::View::WelcomeFrame
m_openPreferencesButton	View/ChooseGameDialog.h	/^            wxButton* m_openPreferencesButton;$/;"	m	language:C++	class:TrenchBroom::View::ChooseGameDialog
m_options	Assets/PropertyDefinition.h	/^            ChoicePropertyOption::List m_options;$/;"	m	language:C++	class:TrenchBroom::Assets::ChoicePropertyDefinition
m_options	Assets/PropertyDefinition.h	/^            FlagsPropertyOption::List m_options;$/;"	m	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
m_orbit	View/CameraTool.h	/^            bool m_orbit;$/;"	m	language:C++	class:TrenchBroom::View::CameraTool
m_orbitCenter	View/CameraTool.h	/^            Vec3f m_orbitCenter;$/;"	m	language:C++	class:TrenchBroom::View::CameraTool
m_origin	View/TexturingViewHelper.h	/^            Vec3 m_origin;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_outerCur	NestedHierarchyIterator.h	/^        OuterIterator m_outerCur;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_outerCur	NestedIterator.h	/^        OuterIterator m_outerCur;$/;"	m	language:C++	class:TrenchBroom::NestedIterator
m_outerEnd	NestedHierarchyIterator.h	/^        OuterIterator m_outerEnd;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_outerEnd	NestedIterator.h	/^        OuterIterator m_outerEnd;$/;"	m	language:C++	class:TrenchBroom::NestedIterator
m_outerMargin	View/CellLayout.h	/^            float m_outerMargin;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_overlayBackgroundColor	Renderer/EntityRenderer.h	/^            Color m_overlayBackgroundColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_overlayTextColor	Renderer/EntityRenderer.h	/^            Color m_overlayTextColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_overridden	Assets/Texture.h	/^            bool m_overridden;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_overrideBoundsColor	Renderer/EntityRenderer.h	/^            bool m_overrideBoundsColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_overrideOffset	Model/TexCoordSystemHelper.h	/^            bool m_overrideOffset;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_overrideScale	Model/TexCoordSystemHelper.h	/^            bool m_overrideScale;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_palette	IO/Bsp29Parser.h	/^            const Assets::Palette& m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::Bsp29Parser
m_palette	IO/ImageLoaderImpl.h	/^            mutable Buffer<unsigned char> m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_palette	IO/Md2Parser.h	/^            const Assets::Palette& m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::Md2Parser
m_palette	IO/MdlParser.h	/^            const Assets::Palette& m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::MdlParser
m_palette	IO/WadTextureLoader.h	/^            const Assets::Palette& m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::WadTextureLoader
m_palette	IO/WalTextureLoader.h	/^            const Assets::Palette& m_palette;$/;"	m	language:C++	class:TrenchBroom::IO::WalTextureLoader
m_palette	Model/GameImpl.h	/^            Assets::Palette* m_palette;$/;"	m	language:C++	class:TrenchBroom::Model::GameImpl
m_paletteInitialized	IO/ImageLoaderImpl.h	/^            mutable bool m_paletteInitialized;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_panSpeedSlider	View/GeneralPreferencePane.h	/^            wxSlider* m_panSpeedSlider;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_pane	View/PreferenceDialog.h	/^            PreferencePane* m_pane;$/;"	m	language:C++	class:TrenchBroom::View::PreferenceDialog
m_paneContainer	View/PreferenceDialog.h	/^            wxPanel* m_paneContainer;$/;"	m	language:C++	class:TrenchBroom::View::PreferenceDialog
m_panel	View/SmartChoiceEditor.h	/^            wxPanel* m_panel;$/;"	m	language:C++	class:TrenchBroom::View::SmartChoiceEditor
m_panel	View/SmartColorEditor.h	/^            wxPanel* m_panel;$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor
m_parent	Model/Brush.h	/^            Entity* m_parent;$/;"	m	language:C++	class:TrenchBroom::Model::Brush
m_parent	Model/BrushFace.h	/^            Brush* m_parent;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_parent	View/GLContextHolder.h	/^            Ptr m_parent;$/;"	m	language:C++	class:TrenchBroom::View::SharedGLContextHolder
m_parent	View/Menu.h	/^            MenuItemParent* m_parent;$/;"	m	language:C++	class:TrenchBroom::View::MenuItem
m_parser	IO/GameConfigParser.h	/^            ConfigParser m_parser;$/;"	m	language:C++	class:TrenchBroom::IO::GameConfigParser
m_partiallySelectedBrushes	Model/Selection.h	/^            BrushList m_partiallySelectedBrushes;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_partiallySelectedEntities	Model/Selection.h	/^            EntityList m_partiallySelectedEntities;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_path	Assets/ModelDefinition.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
m_path	Assets/TextureCollectionSpec.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
m_path	Controller/OpenDocumentCommand.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
m_path	IO/GameConfigParser.h	/^            Path m_path;$/;"	m	language:C++	class:TrenchBroom::IO::GameConfigParser
m_path	IO/PakFileSystem.h	/^                Path m_path;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem::Directory
m_path	IO/PakFileSystem.h	/^            Path m_path;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem
m_path	Model/EntityDefinitionFileSpec.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
m_path	Model/GameConfig.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_path	Preference.h	/^        IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::Preference
m_path	View/MapDocument.h	/^            IO::Path m_path;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_pathKey	Assets/ModelDefinition.h	/^            Model::PropertyKey m_pathKey;$/;"	m	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
m_pattern	Model/EntityPropertyIndex.h	/^            String m_pattern;$/;"	m	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
m_pickRay	View/InputState.h	/^            Ray3 m_pickRay;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_pickRay	View/ResizeBrushesTool.cpp	/^            const Ray3& m_pickRay;$/;"	m	language:C++	struct:TrenchBroom::View::FindClosestFaceHit	file:
m_picker	View/MapDocument.cpp	/^            Model::Picker& m_picker;$/;"	m	language:C++	class:TrenchBroom::View::AddToPicker	file:
m_picker	View/MapDocument.cpp	/^            Model::Picker& m_picker;$/;"	m	language:C++	class:TrenchBroom::View::RemoveFromPicker	file:
m_picker	View/MapDocument.h	/^            Model::Picker m_picker;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_pixels	IO/ImageLoaderImpl.h	/^            mutable Buffer<unsigned char> m_pixels;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_pixelsInitialized	IO/ImageLoaderImpl.h	/^            mutable bool m_pixelsInitialized;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_plane	Model/PlanePointFinder.cpp	/^            const Plane3& m_plane;$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
m_plane	View/Tool.h	/^            Plane3 m_plane;$/;"	m	language:C++	class:TrenchBroom::View::PlaneDragPolicy
m_planeOrder	IO/QuakeMapParser.h	/^                const PlaneWeightOrder& m_planeOrder;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::FaceWeightOrder
m_point	View/RotateObjectsHandle.h	/^                Vec3 m_point;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
m_pointArray	Renderer/BoundsGuideRenderer.h	/^            VertexArray m_pointArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_pointFile	View/MapDocument.h	/^            Model::PointFile m_pointFile;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_pointFileRenderer	Renderer/MapRenderer.h	/^            EdgeRenderer m_pointFileRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_points	Model/BrushFace.h	/^            BrushFace::Points m_points;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_points	Model/PointFile.h	/^            Vec3f::List m_points;$/;"	m	language:C++	class:TrenchBroom::Model::PointFile
m_points	View/Clipper.h	/^                ClipHandlePoint m_points[3];$/;"	m	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
m_points	View/Clipper.h	/^                Vec3 m_points[3];$/;"	m	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
m_position	IO/Token.h	/^            size_t m_position;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_position	Model/ModelUtils.h	/^            size_t m_position;$/;"	m	language:C++	struct:TrenchBroom::Model::MatchObjectByFilePosition
m_position	Model/PlanePointFinder.cpp	/^            Vec2 m_position;$/;"	m	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
m_position	Renderer/Camera.h	/^            Vec3f m_position;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_position	Renderer/TextRenderer.h	/^            Vec3f m_position;$/;"	m	language:C++	class:TrenchBroom::Renderer::SimpleTextAnchor
m_position	View/RotateObjectsHandle.h	/^            Vec3 m_position;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_positions	BBox.h	/^        Range m_positions[S];$/;"	m	language:C++	class:BBox::RelativePosition
m_positions	Renderer/PointHandleRenderer.h	/^            Vec3f::List m_positions;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_pref	PreferenceManager.h	/^        Preference<T>& m_pref;$/;"	m	language:C++	class:TrenchBroom::SetTemporaryPreference
m_preference	View/KeyboardPreferencePane.h	/^            Preference<KeyboardShortcut>& m_preference;$/;"	m	language:C++	class:TrenchBroom::View::SimpleKeyboardShortcutEntry
m_preference	View/Menu.h	/^            mutable Preference<KeyboardShortcut> m_preference;$/;"	m	language:C++	class:TrenchBroom::View::ShortcutMenuItem
m_prepared	Assets/EntityModelManager.h	/^            mutable bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_prepared	Renderer/EdgeRenderer.h	/^            bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
m_prepared	Renderer/FaceRenderer.h	/^            bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Renderer::FaceRenderer
m_prepared	Renderer/MeshRenderer.h	/^            bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Renderer::MeshRenderer
m_prepared	Renderer/TriangleRenderer.h	/^            bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_prepared	Renderer/VertexArray.h	/^            bool m_prepared;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
m_previous	Model/Issue.h	/^            Issue* m_previous;$/;"	m	language:C++	class:TrenchBroom::Model::Issue
m_previous	Renderer/VboBlock.h	/^            VboBlock* m_previous;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_previousState	Renderer/Vbo.h	/^            VboState::Type m_previousState;$/;"	m	language:C++	class:TrenchBroom::Renderer::SetVboState
m_previouslySelectedFaces	Controller/SelectionCommand.h	/^            Model::BrushFaceList m_previouslySelectedFaces;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_previouslySelectedObjects	Controller/SelectionCommand.h	/^            Model::ObjectList m_previouslySelectedObjects;$/;"	m	language:C++	class:TrenchBroom::Controller::SelectionCommand
m_primStart	Renderer/IndexedVertexList.h	/^            size_t m_primStart;$/;"	m	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
m_primType	Renderer/VertexArray.h	/^            GLenum m_primType;$/;"	m	language:C++	class:TrenchBroom::Renderer::VertexArray
m_program	Renderer/ShaderManager.h	/^            ShaderProgram& m_program;$/;"	m	language:C++	class:TrenchBroom::Renderer::ActiveShader
m_programId	Renderer/ShaderProgram.h	/^            GLuint m_programId;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderProgram
m_programs	Renderer/ShaderManager.h	/^            ShaderProgramCache m_programs;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderManager
m_progress	View/Animation.h	/^            double m_progress;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_projectionMatrix	Renderer/Camera.h	/^            mutable Mat4x4f m_projectionMatrix;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_projectionStack	Renderer/Transformation.h	/^            Mat4x4f::List m_projectionStack;$/;"	m	language:C++	class:TrenchBroom::Renderer::Transformation
m_properties	IO/EntityDefinitionClassInfo.h	/^            Assets::PropertyDefinitionMap m_properties;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_properties	Model/Entity.h	/^            EntityProperties m_properties;$/;"	m	language:C++	class:TrenchBroom::Model::Entity
m_properties	Model/Entity.h	/^            EntityProperty::List m_properties;$/;"	m	language:C++	class:TrenchBroom::Model::EntitySnapshot
m_properties	Model/EntityProperties.h	/^            EntityProperty::List m_properties;$/;"	m	language:C++	class:TrenchBroom::Model::EntityProperties
m_propertyDefinitions	Assets/EntityDefinition.h	/^            PropertyDefinitionList m_propertyDefinitions;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinition
m_propertyEditor	View/EntityInspector.h	/^            EntityPropertyEditor* m_propertyEditor;$/;"	m	language:C++	class:TrenchBroom::View::EntityInspector
m_propertyGrid	View/EntityPropertyEditor.h	/^            EntityPropertyGrid* m_propertyGrid;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyEditor
m_propertyRows	View/EntityPropertyGridTable.h	/^                PropertyRow::List m_propertyRows;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
m_quickFixes	Model/Issue.h	/^            QuickFix::List m_quickFixes;$/;"	m	language:C++	class:TrenchBroom::Model::Issue
m_readonlyCellColor	View/EntityPropertyGridTable.h	/^            wxColor m_readonlyCellColor;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_receiver	Notifier.h	/^            R* m_receiver;$/;"	m	language:C++	class:TrenchBroom::Notifier0::CObserver
m_receiver	Notifier.h	/^            R* m_receiver;$/;"	m	language:C++	class:TrenchBroom::Notifier1::CObserver
m_receiver	Notifier.h	/^            R* m_receiver;$/;"	m	language:C++	class:TrenchBroom::Notifier2::CObserver
m_receiver	Notifier.h	/^            R* m_receiver;$/;"	m	language:C++	class:TrenchBroom::Notifier3::CObserver
m_receiver	SetBool.h	/^        R* m_receiver;$/;"	m	language:C++	class:TrenchBroom::SetBoolFun
m_recentDocumentListBox	View/WelcomeFrame.h	/^            RecentDocumentListBox* m_recentDocumentListBox;$/;"	m	language:C++	class:TrenchBroom::View::WelcomeFrame
m_recentDocuments	TrenchBroomApp.h	/^            RecentDocuments<TrenchBroomApp>* m_recentDocuments;$/;"	m	language:C++	class:TrenchBroom::View::TrenchBroomApp
m_recentDocuments	View/RecentDocuments.h	/^            IO::Path::List m_recentDocuments;$/;"	m	language:C++	class:TrenchBroom::View::RecentDocuments
m_refPoint	View/Tool.h	/^            Vec3 m_refPoint;$/;"	m	language:C++	class:TrenchBroom::View::PlaneDragPolicy
m_regularIncrement	View/SpinControl.h	/^    double m_regularIncrement;$/;"	m	language:C++	class:SpinControl
m_remainingEdges	Model/IntersectBrushGeometryWithFace.h	/^            BrushEdgeList m_remainingEdges;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_remainingSides	Model/IntersectBrushGeometryWithFace.h	/^            BrushFaceGeometryList m_remainingSides;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_remainingVertices	Model/IntersectBrushGeometryWithFace.h	/^            BrushVertexList m_remainingVertices;$/;"	m	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
m_removeModsButton	View/ModEditor.h	/^            wxBitmapButton* m_removeModsButton;$/;"	m	language:C++	class:TrenchBroom::View::ModEditor
m_removePropertiesButton	View/EntityPropertyGrid.h	/^            wxButton* m_removePropertiesButton;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_removeTextureCollectionsButton	View/TextureCollectionEditor.h	/^            wxBitmapButton* m_removeTextureCollectionsButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureCollectionEditor
m_removedFaces	Model/BrushAlgorithm.h	/^            BrushFaceList m_removedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::BrushAlgorithm
m_removedObjects	Controller/AddRemoveObjectsCommand.cpp	/^            Model::ObjectList& m_removedObjects;$/;"	m	language:C++	struct:TrenchBroom::Controller::RemoveObjectFromDocument	file:
m_removedObjects	Controller/AddRemoveObjectsCommand.h	/^            Model::ObjectList m_removedObjects;$/;"	m	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
m_renderData	Renderer/MeshRenderer.h	/^            RenderData::List m_renderData;$/;"	m	language:C++	class:TrenchBroom::Renderer::MeshRenderer
m_renderOccluded	Renderer/PointHandleRenderer.h	/^            bool m_renderOccluded;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_renderOccludedBounds	Renderer/EntityRenderer.h	/^            bool m_renderOccludedBounds;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_renderOccludedEdges	Renderer/BrushRenderer.h	/^            bool m_renderOccludedEdges;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_renderOnce	Renderer/TextRenderer.h	/^            TextMap m_renderOnce;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_renderStateValid	View/VertexHandleManager.h	/^            bool m_renderStateValid;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_renderer	View/ClipTool.h	/^            Renderer::ClipperRenderer m_renderer;$/;"	m	language:C++	class:TrenchBroom::View::ClipTool
m_renderer	View/CreateEntityTool.h	/^            Renderer::EntityRenderer m_renderer;$/;"	m	language:C++	class:TrenchBroom::View::CreateEntityTool
m_renderer	View/MapView.h	/^            Renderer::MapRenderer m_renderer;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_renderer	View/MiniMap.h	/^            Renderer::MiniMapRenderer m_renderer;$/;"	m	language:C++	class:TrenchBroom::View::MiniMap
m_renderer	View/MiniMapBaseView.h	/^            Renderer::MiniMapRenderer& m_renderer;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapBaseView
m_rendererMismatches	Assets/EntityModelManager.h	/^            mutable RendererMismatches m_rendererMismatches;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_renderers	Assets/EntityModelManager.h	/^            mutable RendererCache m_renderers;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_resetOnNextKey	View/KeyboardShortcutEditor.h	/^            bool m_resetOnNextKey;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
m_resizeBrushesTool	View/MapView.h	/^            ResizeBrushesTool* m_resizeBrushesTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_result	Model/Selection.cpp	/^            SelectionResult& m_result;$/;"	m	language:C++	class:TrenchBroom::Model::SetSelection	file:
m_returnOuter	NestedHierarchyIterator.h	/^        bool m_returnOuter;$/;"	m	language:C++	class:TrenchBroom::NestedHierarchyIterator
m_right	Controller/MoveTexturesCommand.h	/^            const Vec3 m_right;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_right	Renderer/Camera.h	/^            Vec3f m_right;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_root	IO/DiskFileSystem.h	/^            Path m_root;$/;"	m	language:C++	class:TrenchBroom::IO::DiskFileSystem
m_root	IO/PakFileSystem.h	/^            Directory m_root;$/;"	m	language:C++	class:TrenchBroom::IO::PakFileSystem
m_root	Model/Octree.h	/^            NodePtr m_root;$/;"	m	language:C++	class:TrenchBroom::Model::Octree
m_root	StringIndex.h	/^        Node* m_root;$/;"	m	language:C++	class:TrenchBroom::StringIndex
m_rotateHelper	View/RotateObjectsTool.h	/^            RotateHelper m_rotateHelper;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsTool
m_rotateObjectsTool	View/MapView.h	/^            RotateObjectsTool* m_rotateObjectsTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_rotateTool	View/TexturingView.h	/^            TexturingViewRotateTool* m_rotateTool;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_rotation	Controller/FaceAttributeCommand.h	/^            float m_rotation;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_rotation	Model/BrushFace.h	/^            float m_rotation;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_rotation	View/EntityBrowserView.h	/^            Quatf m_rotation;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_rotationCenter	View/TexturingViewHelper.h	/^            Vec2f m_rotationCenter;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_rotationEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_rotationEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_rotationOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_rotationOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_rowMargin	View/CellLayout.h	/^            float m_rowMargin;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_rowMargin	View/CellLayout.h	/^            float m_rowMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_rows	View/CellLayout.h	/^            RowList m_rows;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_rows	View/EntityPropertyGridTable.h	/^            RowManager m_rows;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_saveInstantly	PreferenceManager.h	/^        bool m_saveInstantly;$/;"	m	language:C++	class:TrenchBroom::PreferenceManager
m_saveInterval	View/Autosaver.h	/^            time_t m_saveInterval;$/;"	m	language:C++	class:TrenchBroom::View::Autosaver
m_savedDropReceiver	View/ToolBox.h	/^            Tool* m_savedDropReceiver;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_scale	Model/BrushFace.h	/^            Vec2f m_scale;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_scale	Model/TexCoordSystemHelper.h	/^            Vec2f m_scale;$/;"	m	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
m_scale	View/CellLayout.h	/^            float m_scale;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_scaleOrigin	View/TexturingViewHelper.h	/^            Vec2f m_scaleOrigin;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_scaleOriginTool	View/TexturingView.h	/^            TexturingViewScaleOriginTool* m_scaleOriginTool;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_scaleTool	View/TexturingView.h	/^            TexturingViewScaleTool* m_scaleTool;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_scrollBar	View/CellView.h	/^            wxScrollBar* m_scrollBar;$/;"	m	language:C++	class:TrenchBroom::View::CellView
m_scrollBar	View/EntityBrowser.h	/^            wxScrollBar* m_scrollBar;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_scrollBar	View/TextureBrowser.h	/^            wxScrollBar* m_scrollBar;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_scrollX	View/InputState.h	/^            float m_scrollX;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_scrollY	View/InputState.h	/^            float m_scrollY;$/;"	m	language:C++	class:TrenchBroom::View::InputState
m_scrolledWindow	View/SmartSpawnflagsEditor.h	/^            wxScrolledWindow* m_scrolledWindow;$/;"	m	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
m_searchBox	View/NavBar.h	/^            wxSearchCtrl* m_searchBox;$/;"	m	language:C++	class:TrenchBroom::View::NavBar
m_segments	Renderer/Compass.cpp	/^        const size_t Compass::m_segments = 32;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass	file:
m_segments	Renderer/Compass.h	/^            static const size_t m_segments;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_select	Model/Selection.cpp	/^            bool m_select;$/;"	m	language:C++	class:TrenchBroom::Model::SetSelection	file:
m_selected	Model/BrushFace.h	/^            bool m_selected;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_selected	Model/Object.h	/^            bool m_selected;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_selectedBrushFaces	Model/Selection.h	/^            BrushFaceList m_selectedBrushFaces;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_selectedBrushRenderer	Renderer/MapRenderer.h	/^            BrushRenderer m_selectedBrushRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_selectedBrushes	Model/Selection.h	/^            BrushList m_selectedBrushes;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_selectedCell	View/CellView.h	/^            typename Layout::Group::Row::Cell* m_selectedCell;$/;"	m	language:C++	class:TrenchBroom::View::CellView
m_selectedColor	Renderer/MapRenderer.cpp	/^            Color m_selectedColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkFilter	file:
m_selectedColors	View/ColorTable.h	/^            ColorList m_selectedColors;$/;"	m	language:C++	class:TrenchBroom::View::ColorTable
m_selectedEdgeArray	Renderer/MiniMapRenderer.h	/^            VertexArray m_selectedEdgeArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_selectedEdgeCount	View/VertexHandleManager.h	/^            size_t m_selectedEdgeCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedEdgeHandles	Controller/RebuildBrushGeometryCommand.h	/^            Vec3::List m_selectedEdgeHandles;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
m_selectedEdgeHandles	View/VertexHandleManager.h	/^            Model::VertexToEdgesMap m_selectedEdgeHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedEntities	Model/Selection.h	/^            EntityList m_selectedEntities;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_selectedEntityRenderer	Renderer/MapRenderer.h	/^            EntityRenderer m_selectedEntityRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_selectedFaceCount	View/VertexHandleManager.h	/^            size_t m_selectedFaceCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedFaceHandles	Controller/RebuildBrushGeometryCommand.h	/^            Vec3::List m_selectedFaceHandles;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
m_selectedFaceHandles	View/VertexHandleManager.h	/^            Model::VertexToFacesMap m_selectedFaceHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedFaces	Model/Selection.h	/^            BrushFaceList m_selectedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_selectedFaces	Model/SelectionResult.h	/^            BrushFaceSet m_selectedFaces;$/;"	m	language:C++	class:TrenchBroom::Model::SelectionResult
m_selectedHandlePositions	View/VertexHandleManager.h	/^            Vec3f::List m_selectedHandlePositions;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedObjects	Model/Selection.h	/^            ObjectList m_selectedObjects;$/;"	m	language:C++	class:TrenchBroom::Model::Selection
m_selectedObjects	Model/SelectionResult.h	/^            ObjectSet m_selectedObjects;$/;"	m	language:C++	class:TrenchBroom::Model::SelectionResult
m_selectedTexture	View/TextureBrowserView.h	/^            Assets::Texture* m_selectedTexture;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_selectedValid	Renderer/MiniMapRenderer.h	/^            bool m_selectedValid;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_selectedVertexCount	View/VertexHandleManager.h	/^            size_t m_selectedVertexCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selectedVertexHandles	Controller/RebuildBrushGeometryCommand.h	/^            Vec3::List m_selectedVertexHandles;$/;"	m	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
m_selectedVertexHandles	View/VertexHandleManager.h	/^            Model::VertexToBrushesMap m_selectedVertexHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_selection	View/MapDocument.h	/^            Model::Selection m_selection;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_selectionGuide	View/MapView.h	/^            Renderer::BoundsGuideRenderer m_selectionGuide;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_selectionTool	View/MapView.h	/^            SelectionTool* m_selectionTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_selector	View/TexturingViewScaleOriginTool.h	/^            Vec2f m_selector;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleOriginTool
m_selector	View/TexturingViewScaleTool.h	/^            Vec2b m_selector;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewScaleTool
m_separator	IO/Path.h	/^                char m_separator;$/;"	m	language:C++	struct:TrenchBroom::IO::Path::ToString
m_set	Renderer/Compass.h	/^            VertexArray m_set;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_setFlag	View/SmartSpawnflagsEditor.cpp	/^            bool m_setFlag;$/;"	m	language:C++	struct:TrenchBroom::View::UpdateSpawnflag	file:
m_setTexture	Controller/FaceAttributeCommand.h	/^            bool m_setTexture;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_setTo	SetBool.h	/^        bool m_setTo;$/;"	m	language:C++	class:TrenchBroom::SetBool
m_setTo	SetBool.h	/^        bool m_setTo;$/;"	m	language:C++	class:TrenchBroom::SetBoolFun
m_shaderId	Renderer/Shader.h	/^            GLuint m_shaderId;$/;"	m	language:C++	class:TrenchBroom::Renderer::Shader
m_shaderManager	Renderer/RenderContext.h	/^            ShaderManager& m_shaderManager;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_shaderManager	View/GLContextHolder.h	/^            Renderer::ShaderManager m_shaderManager;$/;"	m	language:C++	class:TrenchBroom::View::RootGLContextHolder
m_shaders	Renderer/ShaderManager.h	/^            ShaderCache m_shaders;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderManager
m_shaftLength	Renderer/Compass.cpp	/^        const float Compass::m_shaftLength = 28.0f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass	file:
m_shaftLength	Renderer/Compass.h	/^            static const float m_shaftLength;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_shaftRadius	Renderer/Compass.cpp	/^        const float Compass::m_shaftRadius = 1.2f;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass	file:
m_shaftRadius	Renderer/Compass.h	/^            static const float m_shaftRadius;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_sharedExecutable	View/ExecutableEvent.h	/^            Executable::Ptr m_sharedExecutable;$/;"	m	language:C++	class:TrenchBroom::View::ExecutableEvent
m_shiftIncrement	View/SpinControl.h	/^    double m_shiftIncrement;$/;"	m	language:C++	class:SpinControl
m_shortName	Assets/EntityDefinitionManager.cpp	/^            bool m_shortName;$/;"	m	language:C++	class:TrenchBroom::Assets::CompareByName	file:
m_shortcut	View/Menu.h	/^            mutable KeyboardShortcut m_shortcut;$/;"	m	language:C++	class:TrenchBroom::View::ShortcutMenuItem
m_showHiddenIssues	View/IssueBrowser.cpp	/^            bool m_showHiddenIssues;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
m_showHiddenIssuesCheckBox	View/IssueBrowser.h	/^            wxCheckBox* m_showHiddenIssuesCheckBox;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_showSelectionGuide	Renderer/RenderContext.h	/^            ShowSelectionGuide m_showSelectionGuide;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_showSizes	Renderer/BoundsGuideRenderer.h	/^            bool m_showSizes;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_side	Model/BrushFace.h	/^            BrushFaceGeometry* m_side;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_singleFrame	View/FrameManager.h	/^            bool m_singleFrame;$/;"	m	language:C++	class:TrenchBroom::View::FrameManager
m_size	Assets/Palette.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::Assets::Palette
m_size	IO/EntityDefinitionClassInfo.h	/^            BBox3 m_size;$/;"	m	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
m_size	IO/MappedFile.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::IO::MappedFile
m_size	IO/MappedFile.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::IO::PosixMappedFile
m_size	IO/Wad.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::IO::WadEntry
m_size	Renderer/FontDescriptor.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontDescriptor
m_size	Renderer/TextRenderer.h	/^                Vec2f m_size;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
m_size	View/Grid.h	/^            size_t m_size;$/;"	m	language:C++	class:TrenchBroom::View::Grid
m_skinIndex	Assets/ModelDefinition.h	/^            size_t m_skinIndex;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
m_skinKey	Assets/ModelDefinition.h	/^            Model::PropertyKey m_skinKey;$/;"	m	language:C++	class:TrenchBroom::Assets::DynamicModelDefinition
m_skins	Assets/Md2Model.h	/^            TextureCollection* m_skins;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model
m_skins	Assets/MdlModel.h	/^            MdlSkinList m_skins;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlModel
m_skipEol	IO/QuakeMapParser.h	/^            bool m_skipEol;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapTokenizer
m_smartEditorManager	View/EntityPropertyEditor.h	/^            SmartPropertyEditorManager* m_smartEditorManager;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyEditor
m_snap	View/Grid.h	/^            bool m_snap;$/;"	m	language:C++	class:TrenchBroom::View::Grid
m_snapTo	Controller/SnapBrushVerticesCommand.h	/^            size_t m_snapTo;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_snapTo	Model/SnapBrushVerticesAlgorithm.h	/^            size_t m_snapTo;$/;"	m	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
m_snapshot	Controller/EntityPropertyCommand.h	/^            PropertySnapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
m_snapshot	Controller/FaceAttributeCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_snapshot	Controller/FixPlanePointsCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
m_snapshot	Controller/MoveBrushEdgesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
m_snapshot	Controller/MoveBrushFacesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
m_snapshot	Controller/MoveBrushVerticesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
m_snapshot	Controller/SnapBrushVerticesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
m_snapshot	Controller/SplitBrushEdgesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
m_snapshot	Controller/SplitBrushFacesCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
m_snapshot	Controller/TransformObjectsCommand.h	/^            Model::Snapshot m_snapshot;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
m_solidBoundsRenderer	Renderer/EntityRenderer.h	/^            TriangleRenderer m_solidBoundsRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_sortOrder	View/EntityBrowserView.h	/^            Assets::EntityDefinitionManager::SortOrder m_sortOrder;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_sortOrder	View/TextureBrowserView.h	/^            Assets::TextureManager::SortOrder m_sortOrder;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_sortOrderChoice	View/EntityBrowser.h	/^            wxChoice* m_sortOrderChoice;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_sortOrderChoice	View/TextureBrowser.h	/^            wxChoice* m_sortOrderChoice;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_sortedGroups	Assets/TextureManager.h	/^            GroupList m_sortedGroups[2];$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_sortedTextures	Assets/TextureManager.h	/^            TextureList m_sortedTextures[2];$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_specialCellColor	View/EntityPropertyGridTable.h	/^            wxColor m_specialCellColor;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
m_sphere	Renderer/PointHandleRenderer.h	/^            Sphere m_sphere;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_spikeArray	Renderer/BoundsGuideRenderer.h	/^            VertexArray m_spikeArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_spin	View/SpinControl.h	/^    bool m_spin;$/;"	m	language:C++	class:SpinControlEvent
m_spin	View/SpinControl.h	/^    wxSpinButton* m_spin;$/;"	m	language:C++	class:SpinControl
m_splitBrushes	View/ResizeBrushesTool.h	/^            bool m_splitBrushes;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
m_startDirection	View/CameraAnimation.h	/^            const Vec3f m_startDirection;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_startPosition	View/CameraAnimation.h	/^            const Vec3f m_startPosition;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_startUp	View/CameraAnimation.h	/^            const Vec3f m_startUp;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_state	Controller/Command.h	/^            CommandState m_state;$/;"	m	language:C++	class:TrenchBroom::Controller::Command
m_state	IO/Tokenizer.h	/^            State m_state;$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
m_state	Renderer/Vbo.h	/^            VboState::Type m_state;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_statusBar	View/MapFrame.h	/^            StatusBar* m_statusBar;$/;"	m	language:C++	class:TrenchBroom::View::MapFrame
m_stream	IO/ImageLoaderImpl.h	/^            FIMEMORY* m_stream;$/;"	m	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
m_strip	Renderer/Compass.h	/^            VertexArray m_strip;$/;"	m	language:C++	class:TrenchBroom::Renderer::Compass
m_subDivisions	View/TexturingViewHelper.h	/^            Vec2i m_subDivisions;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_subModels	Assets/Bsp29Model.h	/^            SubModelList m_subModels;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model
m_surfaceContents	Model/BrushFace.h	/^            int m_surfaceContents;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_surfaceFlags	Controller/FaceAttributeCommand.h	/^            int m_surfaceFlags;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_surfaceFlags	Model/BrushFace.h	/^            int m_surfaceFlags;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_surfaceFlagsEditor	View/FaceAttribsEditor.h	/^            FlagsPopupEditor* m_surfaceFlagsEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_surfaceFlagsLabel	View/FaceAttribsEditor.h	/^            wxStaticText* m_surfaceFlagsLabel;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_surfaceFlagsOp	Controller/FaceAttributeCommand.h	/^            FlagOp m_surfaceFlagsOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_surfaceValue	Controller/FaceAttributeCommand.h	/^            float m_surfaceValue;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_surfaceValue	Model/BrushFace.h	/^            float m_surfaceValue;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_surfaceValueEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_surfaceValueEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_surfaceValueLabel	View/FaceAttribsEditor.h	/^            wxStaticText* m_surfaceValueLabel;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_surfaceValueOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_surfaceValueOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_table	View/EntityPropertyGrid.h	/^            EntityPropertyGridTable* m_table;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGrid
m_table	View/KeyboardPreferencePane.h	/^            KeyboardGridTable* m_table;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardPreferencePane
m_targetDirection	View/CameraAnimation.h	/^            const Vec3f m_targetDirection;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_targetPosition	View/CameraAnimation.h	/^            const Vec3f m_targetPosition;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_targetUp	View/CameraAnimation.h	/^            const Vec3f m_targetUp;$/;"	m	language:C++	class:TrenchBroom::View::CameraAnimation
m_texCoordSystem	Model/BrushFace.h	/^            TexCoordSystem* m_texCoordSystem;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_texCoords	Assets/Bsp29Model.h	/^                Vec2f::List m_texCoords;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
m_text	View/KeyboardShortcut.h	/^            String m_text;$/;"	m	language:C++	class:TrenchBroom::View::KeyboardShortcut
m_text	View/Menu.h	/^            String m_text;$/;"	m	language:C++	class:TrenchBroom::View::MenuItemParent
m_text	View/SpinControl.h	/^    wxTextCtrl* m_text;$/;"	m	language:C++	class:SpinControl
m_textAnchor	Renderer/TextRenderer.h	/^                TextAnchor::Ptr m_textAnchor;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
m_textColor	Renderer/EntityRenderer.h	/^                const Color& m_textColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameColorProvider
m_textColorPref	Renderer/TextRenderer.h	/^                Preference<Color>& m_textColorPref;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer::PrefTextColorProvider
m_textColorProvider	Renderer/BoundsInfoRenderer.h	/^            TextRenderer<size_t>::PrefTextColorProvider m_textColorProvider;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
m_textColorProvider	View/VertexHandleManager.h	/^            Renderer::TextRenderer<Vec3>::PrefTextColorProvider m_textColorProvider;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_textFilter	Renderer/BoundsInfoRenderer.h	/^            TextRenderer<size_t>::SimpleTextRendererFilter m_textFilter;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
m_textFilter	View/VertexHandleManager.h	/^            Renderer::TextRenderer<Vec3>::SimpleTextRendererFilter m_textFilter;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_textRenderer	Renderer/BoundsInfoRenderer.h	/^            TextRenderer<size_t> m_textRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
m_textRenderer	View/RotateToolHelper.h	/^            TextRenderer m_textRenderer;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_textRenderer	View/VertexHandleManager.h	/^            Renderer::TextRenderer<Vec3> m_textRenderer;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_texture	Assets/Bsp29Model.h	/^                Texture* m_texture;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
m_texture	Controller/FaceAttributeCommand.h	/^            Assets::Texture* m_texture;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_texture	Model/BrushFace.h	/^            Assets::Texture* m_texture;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_texture	Renderer/TextureFont.h	/^            FontTexture* m_texture;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_texture	View/TextureSelectedCommand.h	/^            Assets::Texture* m_texture;$/;"	m	language:C++	class:TrenchBroom::View::TextureSelectedCommand
m_textureBrowser	View/FaceInspector.h	/^            TextureBrowser* m_textureBrowser;$/;"	m	language:C++	class:TrenchBroom::View::FaceInspector
m_textureBrowserIconSizeChoice	View/GeneralPreferencePane.h	/^            wxChoice* m_textureBrowserIconSizeChoice;$/;"	m	language:C++	class:TrenchBroom::View::GeneralPreferencePane
m_textureCollection	Assets/Bsp29Model.h	/^            TextureCollection* m_textureCollection;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model
m_textureCollectionEditor	View/FaceInspector.h	/^            TextureCollectionEditor* m_textureCollectionEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceInspector
m_textureConfig	Model/GameConfig.h	/^            TextureConfig m_textureConfig;$/;"	m	language:C++	class:TrenchBroom::Model::GameConfig
m_textureCoordSystemHelper	View/TextureTool.h	/^            TextureCoordSystemHelper* m_textureCoordSystemHelper;$/;"	m	language:C++	class:TrenchBroom::View::TextureTool
m_textureId	Assets/Texture.h	/^            mutable GLuint m_textureId;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_textureId	Renderer/TextureFont.h	/^            GLuint m_textureId;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_textureIds	Assets/TextureCollection.h	/^            TextureIdList m_textureIds;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollection
m_textureLength	Renderer/TextureFont.h	/^            int m_textureLength;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextureFont
m_textureLock	View/MapDocument.h	/^            bool m_textureLock;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_textureLock	View/StatusBar.h	/^            bool m_textureLock;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_textureLockIconPanel	View/StatusBar.h	/^            ImagePanel* m_textureLockIconPanel;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_textureLockOff	View/StatusBar.h	/^            wxBitmap m_textureLockOff;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_textureLockOn	View/StatusBar.h	/^            wxBitmap m_textureLockOn;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_textureLockText	View/StatusBar.h	/^            wxStaticText* m_textureLockText;$/;"	m	language:C++	class:TrenchBroom::View::StatusBar
m_textureManager	View/MapDocument.cpp	/^            Assets::TextureManager& m_textureManager;$/;"	m	language:C++	class:TrenchBroom::View::SetTexture	file:
m_textureManager	View/MapDocument.h	/^            Assets::TextureManager m_textureManager;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_textureManager	View/TextureBrowserView.h	/^            Assets::TextureManager& m_textureManager;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_textureName	Model/BrushFace.h	/^            String m_textureName;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
m_textureTool	View/MapView.h	/^            TextureTool* m_textureTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_textures	Assets/MdlModel.h	/^            TextureList m_textures;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlSkin
m_textures	Assets/TextureCollection.h	/^            TextureList m_textures;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureCollection
m_texturesByName	Assets/TextureManager.h	/^            TextureMap m_texturesByName;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_texturingEditor	View/FaceAttribsEditor.h	/^            TexturingEditor* m_texturingEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_texturingView	View/TexturingEditor.h	/^            TexturingView* m_texturingView;$/;"	m	language:C++	class:TrenchBroom::View::TexturingEditor
m_threshold	View/AnimationCurve.h	/^            double m_threshold;$/;"	m	language:C++	class:TrenchBroom::View::EaseInEaseOutAnimationCurve
m_times	Assets/MdlModel.h	/^            MdlTimeList m_times;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
m_times	Assets/MdlModel.h	/^            MdlTimeList m_times;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlSkin
m_tintColor	Renderer/BrushRenderer.h	/^            Color m_tintColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_tintColor	Renderer/EntityModelRenderer.h	/^            Color m_tintColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
m_tintColor	Renderer/EntityRenderer.h	/^            Color m_tintColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_tintColor	Renderer/TriangleRenderer.h	/^            Color m_tintColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_tintFaces	Renderer/BrushRenderer.h	/^            bool m_tintFaces;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_tintSelection	Renderer/RenderContext.h	/^            bool m_tintSelection;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_titleBounds	View/CellLayout.h	/^            LayoutBounds m_titleBounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_titleBounds	View/CellLayout.h	/^            LayoutBounds m_titleBounds;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_titleHeight	View/CellLayout.h	/^            float m_titleHeight;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_titleMargin	View/CellLayout.h	/^            float m_titleMargin;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_titleMargin	View/CellLayout.h	/^            float m_titleMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_titleMargin	View/CellLayout.h	/^            float m_titleMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutGroup
m_titleMargin	View/CellLayout.h	/^            float m_titleMargin;$/;"	m	language:C++	class:TrenchBroom::View::LayoutRow
m_titleWidth	View/CellLayout.h	/^            float m_titleWidth;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_toFaceTransform	View/TexturingViewHelper.h	/^            Mat4x4 m_toFaceTransform;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_toRange	View/SmartColorEditor.cpp	/^            SmartColorEditor::ColorRange m_toRange;$/;"	m	language:C++	struct:TrenchBroom::View::ConvertColorRange	file:
m_toRemove	Assets/TextureManager.h	/^            TextureCollectionMap m_toRemove;$/;"	m	language:C++	class:TrenchBroom::Assets::TextureManager
m_tokenNames	IO/Parser.h	/^            mutable TokenNameMap m_tokenNames;$/;"	m	language:C++	class:TrenchBroom::IO::Parser
m_tokenStack	IO/Tokenizer.h	/^            TokenStack m_tokenStack;$/;"	m	language:C++	class:TrenchBroom::IO::Tokenizer
m_tokenizer	IO/ConfigParser.h	/^            ConfigTokenizer m_tokenizer;$/;"	m	language:C++	class:TrenchBroom::IO::ConfigParser
m_tokenizer	IO/DefParser.h	/^            DefTokenizer m_tokenizer;$/;"	m	language:C++	class:TrenchBroom::IO::DefParser
m_tokenizer	IO/FgdParser.h	/^            FgdTokenizer m_tokenizer;$/;"	m	language:C++	class:TrenchBroom::IO::FgdParser
m_tokenizer	IO/QuakeMapParser.h	/^            QuakeMapTokenizer m_tokenizer;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser
m_toolBar	View/PreferenceDialog.h	/^            wxToolBar* m_toolBar;$/;"	m	language:C++	class:TrenchBroom::View::PreferenceDialog
m_toolBox	View/MapView.h	/^            ToolBox m_toolBox;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_toolBox	View/TexturingView.h	/^            ToolBox m_toolBox;$/;"	m	language:C++	class:TrenchBroom::View::TexturingView
m_toolBox	View/ToolBoxDropTarget.h	/^            ToolBox& m_toolBox;$/;"	m	language:C++	class:TrenchBroom::View::ToolBoxDropTarget
m_toolChain	View/ToolBox.h	/^            Tool* m_toolChain;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_tooltip	View/EntityPropertyGridTable.h	/^                String m_tooltip;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
m_tooltip	View/EntityPropertyGridTable.h	/^                String m_tooltip;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_topFrame	View/FrameManager.h	/^            MapFrame* m_topFrame;$/;"	m	language:C++	class:TrenchBroom::View::FrameManager
m_totalCapacity	Renderer/Vbo.h	/^            size_t m_totalCapacity;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_totalDelta	View/ResizeBrushesTool.h	/^            Vec3 m_totalDelta;$/;"	m	language:C++	class:TrenchBroom::View::ResizeBrushesTool
m_totalEdgeCount	View/VertexHandleManager.h	/^            size_t m_totalEdgeCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_totalFaceCount	View/VertexHandleManager.h	/^            size_t m_totalFaceCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_totalVertexCount	View/VertexHandleManager.h	/^            size_t m_totalVertexCount;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_trace	View/MoveToolHelper.h	/^            Vec3f::List m_trace;$/;"	m	language:C++	class:TrenchBroom::View::MoveHelper
m_transformation	Controller/TransformObjectsCommand.h	/^            Mat4x4 m_transformation;$/;"	m	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
m_transformation	Model/ModelUtils.h	/^            const Mat4x4& m_transformation;$/;"	m	language:C++	struct:TrenchBroom::Model::Transform
m_transformation	Renderer/RenderContext.h	/^            Transformation m_transformation;$/;"	m	language:C++	class:TrenchBroom::Renderer::RenderContext
m_transformation	Renderer/Transformation.h	/^            Transformation& m_transformation;$/;"	m	language:C++	class:TrenchBroom::Renderer::MultiplyModelMatrix
m_transformation	Renderer/Transformation.h	/^            Transformation& m_transformation;$/;"	m	language:C++	class:TrenchBroom::Renderer::ReplaceModelMatrix
m_transformation	Renderer/Transformation.h	/^            Transformation& m_transformation;$/;"	m	language:C++	class:TrenchBroom::Renderer::ReplaceTransformation
m_tree	View/IssueBrowser.h	/^            wxDataViewCtrl* m_tree;$/;"	m	language:C++	class:TrenchBroom::View::IssueBrowser
m_tree	View/MapTreeView.h	/^            wxDataViewCtrl* m_tree;$/;"	m	language:C++	class:TrenchBroom::View::MapTreeView
m_triangleFans	Assets/Md2Model.h	/^                Mesh::TriangleSeries m_triangleFans;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
m_triangleFans	Renderer/Mesh.h	/^            TriangleSeriesMap m_triangleFans;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_triangleSets	Renderer/Mesh.h	/^            TriangleSetMap m_triangleSets;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_triangleStrips	Assets/Md2Model.h	/^                Mesh::TriangleSeries m_triangleStrips;$/;"	m	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
m_triangleStrips	Renderer/Mesh.h	/^            TriangleSeriesMap m_triangleStrips;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_triangles	Assets/MdlModel.h	/^            MdlFrameVertexList m_triangles;$/;"	m	language:C++	class:TrenchBroom::Assets::MdlFrame
m_type	Assets/PropertyDefinition.h	/^            Type m_type;$/;"	m	language:C++	class:TrenchBroom::Assets::PropertyDefinition
m_type	ConfigTypes.h	/^        Type m_type;$/;"	m	language:C++	class:TrenchBroom::ConfigEntry
m_type	Controller/Command.h	/^            CommandType m_type;$/;"	m	language:C++	class:TrenchBroom::Controller::Command
m_type	Hit.h	/^        HitType m_type;$/;"	m	language:C++	class:TrenchBroom::Hit
m_type	IO/QuakeMapParser.h	/^                Type m_type;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
m_type	IO/Token.h	/^            Type m_type;$/;"	m	language:C++	class:TrenchBroom::IO::TokenTemplate
m_type	IO/Wad.h	/^            char m_type;$/;"	m	language:C++	class:TrenchBroom::IO::WadEntry
m_type	Model/EntityPropertyIndex.h	/^            Type m_type;$/;"	m	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
m_type	Model/Issue.h	/^            IssueType m_type;$/;"	m	language:C++	class:TrenchBroom::Model::Issue
m_type	Model/ModelUtils.h	/^            Object::Type m_type;$/;"	m	language:C++	struct:TrenchBroom::Model::MatchObjectByType
m_type	Model/Object.h	/^            Type m_type;$/;"	m	language:C++	class:TrenchBroom::Model::Object
m_type	Model/QuickFix.h	/^            QuickFixType m_type;$/;"	m	language:C++	class:TrenchBroom::Model::QuickFix
m_type	Renderer/Shader.h	/^            GLenum m_type;$/;"	m	language:C++	class:TrenchBroom::Renderer::Shader
m_type	Renderer/Vbo.h	/^            GLenum m_type;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_type	View/Animation.h	/^            const Type m_type;$/;"	m	language:C++	class:TrenchBroom::View::Animation
m_type	View/Menu.h	/^            Type m_type;$/;"	m	language:C++	class:TrenchBroom::View::MenuItem
m_typeMask	HitFilter.h	/^        Hit::HitType m_typeMask;$/;"	m	language:C++	class:TrenchBroom::TypedHitFilter
m_undoable	Controller/Command.h	/^            bool m_undoable;$/;"	m	language:C++	class:TrenchBroom::Controller::Command
m_unsavedPreferences	PreferenceManager.h	/^        UnsavedPreferences m_unsavedPreferences;$/;"	m	language:C++	class:TrenchBroom::PreferenceManager
m_unselectedBrushRenderer	Renderer/MapRenderer.h	/^            BrushRenderer m_unselectedBrushRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_unselectedEdgeArray	Renderer/MiniMapRenderer.h	/^            VertexArray m_unselectedEdgeArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_unselectedEdgeHandlePositions	View/VertexHandleManager.h	/^            Vec3f::List m_unselectedEdgeHandlePositions;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_unselectedEdgeHandles	View/VertexHandleManager.h	/^            Model::VertexToEdgesMap m_unselectedEdgeHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_unselectedEntityRenderer	Renderer/MapRenderer.h	/^            EntityRenderer m_unselectedEntityRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::MapRenderer
m_unselectedFaceHandlePositions	View/VertexHandleManager.h	/^            Vec3f::List m_unselectedFaceHandlePositions;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_unselectedFaceHandles	View/VertexHandleManager.h	/^            Model::VertexToFacesMap m_unselectedFaceHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_unselectedValid	Renderer/MiniMapRenderer.h	/^            bool m_unselectedValid;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_unselectedVertexHandlePositions	View/VertexHandleManager.h	/^            Vec3f::List m_unselectedVertexHandlePositions;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_unselectedVertexHandles	View/VertexHandleManager.h	/^            Model::VertexToBrushesMap m_unselectedVertexHandles;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_up	Controller/MoveTexturesCommand.h	/^            const Vec3 m_up;$/;"	m	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
m_up	Renderer/Camera.h	/^            Vec3f m_up;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_usage	Renderer/Vbo.h	/^            GLenum m_usage;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_usageCount	Assets/EntityDefinition.h	/^            size_t m_usageCount;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityDefinition
m_usageCount	Assets/Texture.h	/^            size_t m_usageCount;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_useColor	Renderer/EdgeRenderer.h	/^            bool m_useColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
m_useColor	Renderer/TriangleRenderer.h	/^            bool m_useColor;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_usedBlocks	Renderer/Vbo.h	/^            VboBlockList m_usedBlocks;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_usedButton	View/EntityBrowser.h	/^            wxToggleButton* m_usedButton;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_usedButton	View/TextureBrowser.h	/^            wxToggleButton* m_usedButton;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_v	View/SmartColorEditor.h	/^                T m_v[3];$/;"	m	language:C++	class:TrenchBroom::View::SmartColorEditor::Color_
m_vInset	Renderer/TextRenderer.h	/^            float m_vInset;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_valid	Renderer/BoundsGuideRenderer.h	/^            bool m_valid;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_valid	Renderer/BoundsInfoRenderer.h	/^            bool m_valid;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
m_valid	Renderer/BrushRenderer.h	/^            bool m_valid;$/;"	m	language:C++	class:TrenchBroom::Renderer::BrushRenderer
m_valid	Renderer/Camera.h	/^            mutable bool m_valid;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_valid	Renderer/EntityLinkRenderer.h	/^            bool m_valid;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
m_valid	View/CellLayout.h	/^            bool m_valid;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_valid	View/Clipper.h	/^                bool m_valid;$/;"	m	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
m_value	Assets/ModelDefinition.h	/^            Model::PropertyValue m_value;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionPropertyMatcher
m_value	Assets/ModelDefinition.h	/^            int m_value;$/;"	m	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionFlagMatcher
m_value	Assets/PropertyDefinition.h	/^            String m_value;$/;"	m	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
m_value	Assets/PropertyDefinition.h	/^            int m_value;$/;"	m	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
m_value	ConfigTypes.h	/^        String m_value;$/;"	m	language:C++	class:TrenchBroom::ConfigValue
m_value	IO/QuakeMapParser.h	/^                String m_value;$/;"	m	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
m_value	Preference.h	/^        T m_value;$/;"	m	language:C++	class:TrenchBroom::Preference
m_value	Preference.h	/^        T m_value;$/;"	m	language:C++	class:TrenchBroom::ValueHolder
m_value	SetBool.h	/^        bool& m_value;$/;"	m	language:C++	class:TrenchBroom::SetBool
m_value	View/EntityPropertyGridTable.h	/^                String m_value;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
m_value	View/EntityPropertyGridTable.h	/^                String m_value;$/;"	m	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
m_value	View/SpinControl.h	/^    double m_value;$/;"	m	language:C++	class:SpinControl
m_value	View/SpinControl.h	/^    double m_value;$/;"	m	language:C++	class:SpinControlEvent
m_valueIndex	Model/EntityPropertyIndex.h	/^            StringIndex<Entity*> m_valueIndex;$/;"	m	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
m_values	StringIndex.h	/^            mutable ValueMap m_values;$/;"	m	language:C++	class:TrenchBroom::StringIndex::Node
m_values	View/FlagsEditor.h	/^            ValueList m_values;$/;"	m	language:C++	class:TrenchBroom::View::FlagsEditor
m_variableCache	Renderer/ShaderProgram.h	/^            mutable UniformVariableCache m_variableCache;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderProgram
m_vbo	Assets/EntityModelManager.h	/^            mutable Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Assets::EntityModelManager
m_vbo	Renderer/BoundsGuideRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
m_vbo	Renderer/ClipperRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
m_vbo	Renderer/EdgeRenderer.h	/^            Vbo::Ptr m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
m_vbo	Renderer/EntityLinkRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
m_vbo	Renderer/FaceRenderer.h	/^            Vbo::Ptr m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::FaceRenderer
m_vbo	Renderer/MiniMapRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
m_vbo	Renderer/MoveIndicatorRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
m_vbo	Renderer/PointHandleRenderer.h	/^            Vbo& m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
m_vbo	Renderer/TextRenderer.h	/^            Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer
m_vbo	Renderer/TriangleRenderer.h	/^            Vbo::Ptr m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_vbo	Renderer/Vbo.h	/^            Vbo& m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::SetVboState
m_vbo	Renderer/VboBlock.h	/^            Vbo& m_vbo;$/;"	m	language:C++	class:TrenchBroom::Renderer::VboBlock
m_vbo	View/EntityBrowserView.h	/^            Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowserView
m_vbo	View/RenderView.h	/^            Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::RenderView
m_vbo	View/RotateObjectsHandle.h	/^            mutable Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_vbo	View/RotateToolHelper.h	/^            Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::RotateHelper
m_vbo	View/TextureBrowserView.h	/^            Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowserView
m_vbo	View/VertexHandleManager.h	/^            Renderer::Vbo m_vbo;$/;"	m	language:C++	class:TrenchBroom::View::VertexHandleManager
m_vboId	Renderer/Vbo.h	/^            GLuint m_vboId;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vbo
m_vec	Vec.h	/^        const Vec<T,S>& m_vec;$/;"	m	language:C++	class:Vec::SelectionHeapCmp
m_vertexArray	Renderer/EdgeRenderer.h	/^            VertexArray m_vertexArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
m_vertexArray	Renderer/TriangleRenderer.h	/^            VertexArray m_vertexArray;$/;"	m	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
m_vertexCacheValid	Model/BrushFace.h	/^            mutable bool m_vertexCacheValid;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFace
m_vertexCount	Renderer/Mesh.h	/^            size_t m_vertexCount;$/;"	m	language:C++	class:TrenchBroom::Renderer::Mesh
m_vertexCount	Renderer/VertexArray.h	/^            size_t m_vertexCount;$/;"	m	language:C++	class:TrenchBroom::Renderer::Holder
m_vertexPositions	Model/MoveBrushVerticesAlgorithm.h	/^            const Vec3::List& m_vertexPositions;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
m_vertexPositions	Model/SnapBrushVerticesAlgorithm.h	/^            Vec3::Set m_vertexPositions;$/;"	m	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
m_vertexShaders	Renderer/ShaderManager.h	/^            StringList m_vertexShaders;$/;"	m	language:C++	class:TrenchBroom::Renderer::ShaderConfig
m_vertexTool	View/MapView.h	/^            VertexTool* m_vertexTool;$/;"	m	language:C++	class:TrenchBroom::View::MapView
m_verticalRestriction	View/MovementRestriction.h	/^            bool m_verticalRestriction;$/;"	m	language:C++	class:TrenchBroom::View::MovementRestriction
m_vertices	Assets/Bsp29Model.h	/^                Vec3f::List m_vertices;$/;"	m	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
m_vertices	Renderer/IndexedVertexList.h	/^            typename T::Vertex::List m_vertices;$/;"	m	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
m_vertices	Renderer/TextRenderer.h	/^                Vec2f::List m_vertices;$/;"	m	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
m_vertices	Renderer/VertexArray.h	/^            VertexList m_vertices;$/;"	m	language:C++	class:TrenchBroom::Renderer::CopyHolder
m_vertices	Renderer/VertexArray.h	/^            VertexList m_vertices;$/;"	m	language:C++	class:TrenchBroom::Renderer::SwapHolder
m_vertices	Renderer/VertexArray.h	/^            const VertexList& m_vertices;$/;"	m	language:C++	class:TrenchBroom::Renderer::RefHolder
m_vertices	View/ResizeBrushesTool.cpp	/^            Vertex::List& m_vertices;$/;"	m	language:C++	struct:TrenchBroom::View::CollectVertices	file:
m_view	View/EntityBrowser.h	/^            EntityBrowserView* m_view;$/;"	m	language:C++	class:TrenchBroom::View::EntityBrowser
m_view	View/TextureBrowser.h	/^            TextureBrowserView* m_view;$/;"	m	language:C++	class:TrenchBroom::View::TextureBrowser
m_viewInspector	View/Inspector.h	/^            ViewInspector* m_viewInspector;$/;"	m	language:C++	class:TrenchBroom::View::Inspector
m_viewMatrix	Renderer/Camera.h	/^            mutable Mat4x4f m_viewMatrix;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_viewStack	Renderer/Transformation.h	/^            Mat4x4f::List m_viewStack;$/;"	m	language:C++	class:TrenchBroom::Renderer::Transformation
m_viewport	Renderer/Camera.h	/^            Viewport m_viewport;$/;"	m	language:C++	class:TrenchBroom::Renderer::Camera
m_visible	View/Grid.h	/^            bool m_visible;$/;"	m	language:C++	class:TrenchBroom::View::Grid
m_width	Assets/Texture.h	/^            size_t m_width;$/;"	m	language:C++	class:TrenchBroom::Assets::Texture
m_width	Renderer/FontTexture.h	/^            size_t m_width;$/;"	m	language:C++	class:TrenchBroom::Renderer::FontTexture
m_width	View/CellLayout.h	/^            float m_width;$/;"	m	language:C++	class:TrenchBroom::View::CellLayout
m_width	View/CellLayout.h	/^            float m_width;$/;"	m	language:C++	class:TrenchBroom::View::LayoutBounds
m_window	View/PopupButton.h	/^            wxPopupTransientWindow* m_window;$/;"	m	language:C++	class:TrenchBroom::View::PopupButton
m_window	View/ToolBox.h	/^            wxWindow* m_window;$/;"	m	language:C++	class:TrenchBroom::View::ToolBox
m_wireframeBoundsRenderer	Renderer/EntityRenderer.h	/^            EdgeRenderer m_wireframeBoundsRenderer;$/;"	m	language:C++	class:TrenchBroom::Renderer::EntityRenderer
m_worldBounds	Controller/FixPlanePointsCommand.cpp	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	struct:TrenchBroom::Controller::FindPlanePoints	file:
m_worldBounds	Controller/FixPlanePointsCommand.cpp	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	struct:TrenchBroom::Controller::SnapPlanePoints	file:
m_worldBounds	Controller/NewDocumentCommand.h	/^            BBox3 m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
m_worldBounds	Controller/OpenDocumentCommand.h	/^            BBox3 m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
m_worldBounds	Model/ModelUtils.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	struct:TrenchBroom::Model::Transform
m_worldBounds	Model/MoveBrushEdgesAlgorithm.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushEdgesAlgorithm
m_worldBounds	Model/MoveBrushFacesAlgorithm.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushFacesAlgorithm
m_worldBounds	Model/MoveBrushVerticesAlgorithm.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Model::MoveBrushVerticesAlgorithm
m_worldBounds	Model/SplitBrushEdgeAlgorithm.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
m_worldBounds	Model/SplitBrushFaceAlgorithm.h	/^            const BBox3& m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
m_worldBounds	View/MapDocument.h	/^            BBox3 m_worldBounds;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
m_worldspawn	Model/Map.h	/^            mutable Entity* m_worldspawn;$/;"	m	language:C++	class:TrenchBroom::Model::Map
m_x	View/CellLayout.h	/^            float m_x;$/;"	m	language:C++	class:TrenchBroom::View::LayoutBounds
m_x	View/CellLayout.h	/^            float m_x;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_xAxis	Model/ParallelTexCoordSystem.h	/^            Vec3 m_xAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
m_xAxis	Model/ParaxialTexCoordSystem.h	/^            Vec3 m_xAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
m_xAxis	View/MovementRestriction.h	/^            Vec3 m_xAxis;$/;"	m	language:C++	class:TrenchBroom::View::MovementRestriction
m_xAxis	View/RotateObjectsHandle.h	/^            Vec3 m_xAxis;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_xAxis	View/TexturingViewHelper.h	/^            Vec3 m_xAxis;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_xOffset	Controller/FaceAttributeCommand.h	/^            float m_xOffset;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_xOffsetEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_xOffsetEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_xOffsetOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_xOffsetOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_xScale	Controller/FaceAttributeCommand.h	/^            float m_xScale;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_xScaleEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_xScaleEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_xScaleOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_xScaleOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_xSubDivisionEditor	View/TexturingEditor.h	/^            wxSpinCtrl* m_xSubDivisionEditor;$/;"	m	language:C++	class:TrenchBroom::View::TexturingEditor
m_xyRange	View/MiniMapZView.h	/^            BBox2f m_xyRange;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapZView
m_y	View/CellLayout.h	/^            float m_y;$/;"	m	language:C++	class:TrenchBroom::View::LayoutBounds
m_y	View/CellLayout.h	/^            float m_y;$/;"	m	language:C++	class:TrenchBroom::View::LayoutCell
m_yAxis	Model/ParallelTexCoordSystem.h	/^            Vec3 m_yAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
m_yAxis	Model/ParaxialTexCoordSystem.h	/^            Vec3 m_yAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
m_yAxis	View/MovementRestriction.h	/^            Vec3 m_yAxis;$/;"	m	language:C++	class:TrenchBroom::View::MovementRestriction
m_yAxis	View/RotateObjectsHandle.h	/^            Vec3 m_yAxis;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_yAxis	View/TexturingViewHelper.h	/^            Vec3 m_yAxis;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_yOffset	Controller/FaceAttributeCommand.h	/^            float m_yOffset;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_yOffsetEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_yOffsetEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_yOffsetOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_yOffsetOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_yScale	Controller/FaceAttributeCommand.h	/^            float m_yScale;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_yScaleEditor	View/FaceAttribsEditor.h	/^            SpinControl* m_yScaleEditor;$/;"	m	language:C++	class:TrenchBroom::View::FaceAttribsEditor
m_yScaleOp	Controller/FaceAttributeCommand.h	/^            ValueOp m_yScaleOp;$/;"	m	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
m_ySubDivisionEditor	View/TexturingEditor.h	/^            wxSpinCtrl* m_ySubDivisionEditor;$/;"	m	language:C++	class:TrenchBroom::View::TexturingEditor
m_zAxis	Model/ParallelTexCoordSystem.h	/^            Vec3 m_zAxis;$/;"	m	language:C++	class:TrenchBroom::Model::ParallelTexCoordSystem
m_zAxis	View/RotateObjectsHandle.h	/^            Vec3 m_zAxis;$/;"	m	language:C++	class:TrenchBroom::View::RotateObjectsHandle
m_zAxis	View/TexturingViewHelper.h	/^            Vec3 m_zAxis;$/;"	m	language:C++	class:TrenchBroom::View::TexturingViewHelper
m_zRange	View/MiniMapXYView.h	/^            BBox1f m_zRange;$/;"	m	language:C++	class:TrenchBroom::View::MiniMapXYView
m_zoom	Renderer/OrthographicCamera.h	/^            Vec2f m_zoom;$/;"	m	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
majorAxis	Vec.h	/^    const Vec<T,S> majorAxis(const size_t k) const {$/;"	f	language:C++	class:Vec
majorComponent	Vec.h	/^    size_t majorComponent(const size_t k) const {$/;"	f	language:C++	class:Vec
makeAbsolute	IO/DiskFileSystem.cpp	/^        const Path DiskFileSystem::makeAbsolute(const Path& relPath) const {$/;"	f	language:C++	class:TrenchBroom::IO::DiskFileSystem
makeAbsolute	IO/Path.cpp	/^        Path Path::makeAbsolute(const Path& relativePath) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
makeAbsolute	Vec.h	/^    Vec<T,S>& makeAbsolute() {$/;"	f	language:C++	class:Vec
makeAbsoluteAndCanonical	IO/Path.cpp	/^        Path::List Path::makeAbsoluteAndCanonical(const List& paths, const String& relativePath) {$/;"	f	language:C++	class:TrenchBroom::IO::Path
makeArrows	Renderer/Compass.cpp	/^        void Compass::makeArrows() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
makeBackground	Renderer/Compass.cpp	/^        void Compass::makeBackground() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
makeBackupName	View/Autosaver.cpp	/^        String Autosaver::makeBackupName(const IO::Path& mapBasename, const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
makeBreadcrump	View/NavBar.cpp	/^        wxStaticText* NavBar::makeBreadcrump(const wxString& text, bool link) {$/;"	f	language:C++	class:TrenchBroom::View::NavBar
makeCanonical	IO/Path.cpp	/^        Path Path::makeCanonical() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
makeCanonical	Line.h	/^    Line<T,S> makeCanonical() const {$/;"	f	language:C++	class:Line
makeEntityGroupsMenu	View/MapView.cpp	/^        wxMenu* MapView::makeEntityGroupsMenu(const Assets::EntityDefinitionGroups& groups, int id) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
makeHash	StringUtils.cpp	/^    long makeHash(const String& str) {$/;"	f	language:C++	namespace:StringUtils
makeLineArray	Renderer/ClipperRenderer.cpp	/^        VertexArray ClipperRenderer::makeLineArray(const Vec3f::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
makeLowerCase	IO/Path.cpp	/^        Path Path::makeLowerCase() const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
makeName	Controller/AddRemoveObjectsCommand.cpp	/^        String AddRemoveObjectsCommand::makeName(const Action action, const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
makeName	Controller/EntityPropertyCommand.cpp	/^        String EntityPropertyCommand::makeName(const Action command) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
makeName	Controller/FixPlanePointsCommand.cpp	/^        String FixPlanePointsCommand::makeName(const Action action, const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
makeName	Controller/MoveBrushEdgesCommand.cpp	/^        String MoveBrushEdgesCommand::makeName(const Model::VertexToEdgesMap& edges) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
makeName	Controller/MoveBrushFacesCommand.cpp	/^        String MoveBrushFacesCommand::makeName(const Model::VertexToFacesMap& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
makeName	Controller/MoveBrushVerticesCommand.cpp	/^        String MoveBrushVerticesCommand::makeName(const Model::VertexToBrushesMap& vertices) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
makeName	Controller/MoveTexturesCommand.cpp	/^        String MoveTexturesCommand::makeName(const Model::BrushFaceList& faces, const Math::Direction direction) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
makeName	Controller/ReparentBrushesCommand.cpp	/^        String ReparentBrushesCommand::makeName(const Model::BrushList& brushes, Model::Entity* newParent) {$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
makeName	Controller/ResizeBrushesCommand.cpp	/^        String ResizeBrushesCommand::makeName(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
makeName	Controller/RotateTexturesCommand.cpp	/^        String RotateTexturesCommand::makeName(const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
makeName	Controller/SelectionCommand.cpp	/^        String SelectionCommand::makeName(const Action action, const Model::ObjectList& objects, const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
makeName	Controller/SplitBrushEdgesCommand.cpp	/^        String SplitBrushEdgesCommand::makeName(const Model::VertexToEdgesMap& edges) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
makeName	Controller/SplitBrushFacesCommand.cpp	/^        String SplitBrushFacesCommand::makeName(const Model::VertexToFacesMap& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
makeName	Controller/TransformObjectsCommand.cpp	/^        String TransformObjectsCommand::makeName(const String& action, const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
makeObjectList	Model/ModelUtils.cpp	/^        ObjectList makeObjectList(const ObjectParentList& list) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeObjectParentList	Model/ModelUtils.cpp	/^        ObjectParentList makeObjectParentList(const BrushList& list) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeObjectParentList	Model/ModelUtils.cpp	/^        ObjectParentList makeObjectParentList(const BrushList& list, Entity* parent) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeObjectParentList	Model/ModelUtils.cpp	/^        ObjectParentList makeObjectParentList(const EntityBrushesMap& map) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeObjectParentList	Model/ModelUtils.cpp	/^        ObjectParentList makeObjectParentList(const EntityList& list) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeObjectParentList	Model/ModelUtils.cpp	/^        ObjectParentList makeObjectParentList(const ObjectList& list) {$/;"	f	language:C++	namespace:TrenchBroom::Model
makeOutlineXArrows	Renderer/MoveIndicatorRenderer.cpp	/^        void MoveIndicatorRenderer::makeOutlineXArrows(const float offset, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
makeOutlineYArrows	Renderer/MoveIndicatorRenderer.cpp	/^        void MoveIndicatorRenderer::makeOutlineYArrows(const float offset, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
makeRelative	IO/Path.cpp	/^        Path Path::makeRelative(const Path& absolutePath) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
makeRelativePath	View/ChoosePathTypeDialog.cpp	/^        IO::Path ChoosePathTypeDialog::makeRelativePath(const IO::Path& absPath, const IO::Path& newRootPath) {$/;"	f	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
makeSet	CollectionUtils.h	/^    std::set<T> makeSet(const std::vector<T>& vec) {$/;"	f	language:C++	namespace:SetUtils
makeSolidXArrows	Renderer/MoveIndicatorRenderer.cpp	/^        void MoveIndicatorRenderer::makeSolidXArrows(const float offset, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
makeSolidYArrows	Renderer/MoveIndicatorRenderer.cpp	/^        void MoveIndicatorRenderer::makeSolidYArrows(const float offset, Vertex::List& vertices) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
makeTriangleArray	Renderer/ClipperRenderer.cpp	/^        VertexArray ClipperRenderer::makeTriangleArray(const Vec3f::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
map	Controller/NewDocumentCommand.cpp	/^        Model::Map* NewDocumentCommand::map() const {$/;"	f	language:C++	class:TrenchBroom::Controller::NewDocumentCommand
map	Controller/OpenDocumentCommand.cpp	/^        Model::Map* OpenDocumentCommand::map() const {$/;"	f	language:C++	class:TrenchBroom::Controller::OpenDocumentCommand
map	Model/Entity.cpp	/^        Map* Entity::map() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
map	Renderer/Vbo.cpp	/^        void Vbo::map() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
map	View/MapDocument.cpp	/^        Model::Map* MapDocument::map() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
mapBasename	View/Autosaver.cpp	/^            const IO::Path& mapBasename;$/;"	m	language:C++	struct:TrenchBroom::View::BackupFileMatcher	file:
mapWriter	Model/GameImpl.cpp	/^        GameImpl::MapWriterPtr GameImpl::mapWriter(const MapFormat::Type format) const {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
mapped	Renderer/Vbo.cpp	/^        void SetVboState::mapped() {$/;"	f	language:C++	class:TrenchBroom::Renderer::SetVboState
mark	Model/BrushEdge.h	/^            Mark mark;$/;"	m	language:C++	class:TrenchBroom::Model::BrushEdge
mark	Model/BrushFaceGeometry.cpp	/^        BrushFaceGeometry::Mark BrushFaceGeometry::mark() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
mark	Model/BrushVertex.h	/^            Mark mark;$/;"	m	language:C++	class:TrenchBroom::Model::BrushVertex
markAsUnsaved	PreferenceManager.cpp	/^    void PreferenceManager::markAsUnsaved(PreferenceBase* preference, ValueHolderBase* valueHolder) {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
markDuplicates	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::markDuplicates(EntryList& entries) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
matches	Assets/ModelDefinition.cpp	/^        bool ModelDefinition::matches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::ModelDefinition
matches	Assets/ModelDefinition.cpp	/^        bool StaticModelDefinitionMatcher::matches(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionMatcher
matches	HitFilter.cpp	/^    bool HitFilterChain::matches(const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::HitFilterChain
matches	HitFilter.cpp	/^    bool TypedHitFilter::matches(const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::TypedHitFilter
matches	Model/HitAdapter.cpp	/^        bool DefaultHitFilter::matches(const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::Model::DefaultHitFilter
matches	Model/HitAdapter.cpp	/^        bool SelectionHitFilter::matches(const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionHitFilter
matches	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::matches(const int key, const int modifierKey1, const int modifierKey2, const int modifierKey3) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
matches	View/RotateObjectsHandle.cpp	/^        bool RotateObjectsHandle::Hit::matches() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
matches	View/SmartPropertyEditorMatcher.cpp	/^        bool SmartPropertyEditorMatcher::matches(const Model::PropertyKey& key, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorMatcher
matrixDeterminant	Mat.h	/^T matrixDeterminant(const Mat<T,S,S>& mat) {$/;"	f	language:C++
max	BBox.h	/^    Vec<T,S> max;$/;"	m	language:C++	class:BBox
max	MathUtils.h	/^    T max(const T v1, const T v2) {$/;"	f	language:C++	namespace:Math
max	VecMath.h	/^#undef max$/;"	d	language:C++
maxCellHeight	View/CellLayout.h	/^            float maxCellHeight() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
maxCellWidth	View/CellLayout.h	/^            float maxCellWidth() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
measure	Renderer/TextureFont.cpp	/^        Vec2f TextureFont::measure(const String& string) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
measureAngle	Model/TexCoordSystem.cpp	/^        float TexCoordSystem::measureAngle(const float currentAngle, const Vec2f& center, const Vec2f& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
measureRotationAngle	View/TexturingViewHelper.cpp	/^        float TexturingViewHelper::measureRotationAngle(const Vec2f& point) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
measureTextureAngle	Model/BrushFace.cpp	/^        float BrushFace::measureTextureAngle(const Vec2f& center, const Vec2f& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
menuById	View/Menu.cpp	/^        const Menu* MultiMenu::menuById(const int menuId) const {$/;"	f	language:C++	class:TrenchBroom::View::MultiMenu
menuId	View/Menu.cpp	/^        int MenuItemParent::menuId() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
menuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::menuText(const String& additionalText) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
mergeBoundsWith	Assets/Md2Model.cpp	/^        void Md2Model::Frame::mergeBoundsWith(BBox3f& bounds, const Mesh::TriangleSeries& series) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
mergeBoundsWith	Assets/Md2Model.cpp	/^        void Md2Model::Frame::mergeBoundsWith(BBox3f& bounds, const Mesh::TriangleSeries& series, const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
mergeEdges	Model/MoveBrushVertexAlgorithm.h	/^            void mergeEdges(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
mergeEdges	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::mergeEdges(Position::List::iterator it, Position::List::iterator end, Position::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
mergeEntityBrushesMap	Model/ModelUtils.cpp	/^        BrushList mergeEntityBrushesMap(const EntityBrushesMap& map) {$/;"	f	language:C++	namespace:TrenchBroom::Model
mergeNeighbours	Model/MoveBrushVertexAlgorithm.h	/^            void mergeNeighbours(BrushGeometry& geometry, BrushFaceGeometry* side, const size_t edgeIndex) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
mergeNode	StringIndex.h	/^            void mergeNode() const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
mergeProperties	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::mergeProperties(Assets::PropertyDefinition* classProperty, const Assets::PropertyDefinition* baseclassProperty) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
mergeSides	Model/MoveBrushVertexAlgorithm.h	/^            void mergeSides(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
mergeWith	BBox.h	/^    BBox<T,S>& mergeWith(const BBox<T,S>& right) {$/;"	f	language:C++	class:BBox
mergeWith	BBox.h	/^    BBox<T,S>& mergeWith(const Vec<T,S>& right) {$/;"	f	language:C++	class:BBox
mergeWith	Model/SelectionResult.cpp	/^        void SelectionResult::mergeWith(const SelectionResult& other) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
mergeWithSuccessor	Renderer/VboBlock.cpp	/^        VboBlock* VboBlock::mergeWithSuccessor() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
mergedWith	BBox.h	/^    const BBox<T,S> mergedWith(const BBox<T,S>& right) const {$/;"	f	language:C++	class:BBox
mergedWith	BBox.h	/^    const BBox<T,S> mergedWith(const Vec<T,S>& right) const {$/;"	f	language:C++	class:BBox
mesh	Renderer/BrushRenderer.h	/^                Model::BrushFace::Mesh mesh;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BrushRenderer::BuildBrushFaceMesh
midPoint	Renderer/RenderUtils.cpp	/^            size_t midPoint(Vec3f::List& vertices, MidPointCache& cache, const size_t index1, const size_t index2) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer::SphereBuilder
midX	View/CellLayout.h	/^            float midX() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
midY	View/CellLayout.h	/^            float midY() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
min	BBox.h	/^    Vec<T,S> min;$/;"	m	language:C++	class:BBox
min	MathUtils.h	/^    T min(const T v1, const T v2) {$/;"	f	language:C++	namespace:Math
min	VecMath.h	/^#undef min$/;"	d	language:C++
minCellHeight	View/CellLayout.h	/^            float minCellHeight() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
minCellWidth	View/CellLayout.h	/^            float minCellWidth() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
miniMapViewChangedEventFunction	View/MiniMapBaseView.h	/^typedef void (wxEvtHandler::*miniMapViewChangedEventFunction)(wxCommandEvent&);$/;"	t	language:C++
minorMatrix	Mat.h	/^const Mat<T,S-1,S-1> minorMatrix(const Mat<T,S,S>& mat, const size_t row, const size_t col) {$/;"	f	language:C++
minus	CollectionUtils.h	/^    std::set<T> minus(const std::set<T>& lhs, const std::set<T>& rhs) {$/;"	f	language:C++	namespace:SetUtils
minus	CollectionUtils.h	/^    void minus(const std::set<T>& lhs, const std::set<T>& rhs, std::set<T>& result) {$/;"	f	language:C++	namespace:SetUtils
mipData	IO/Wad.cpp	/^        const MipData Wad::mipData(const WadEntry& entry, const size_t mipLevel) {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
mipSize	IO/Wad.cpp	/^        const MipSize Wad::mipSize(const WadEntry& entry) const {$/;"	f	language:C++	class:TrenchBroom::IO::Wad
mirrorMatrix	Mat.h	/^const Mat<T,4,4>& mirrorMatrix(const Math::Axis::Type axis) {$/;"	f	language:C++
mixedChunks	Allocator.h	/^    static ChunkList& mixedChunks() {$/;"	f	language:C++	class:Allocator
mod	MathUtils.h	/^    T mod(const T v1, const T v2) {$/;"	f	language:C++	namespace:Math
model	Assets/EntityDefinition.cpp	/^        ModelSpecification PointEntityDefinition::model(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
model	Assets/EntityModelManager.cpp	/^        EntityModel* EntityModelManager::model(const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
model	Model/Entity.cpp	/^        Assets::EntityModel* Entity::model() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
modelDefinitions	Assets/EntityDefinition.cpp	/^        const ModelDefinitionList& PointEntityDefinition::modelDefinitions() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
modelFormats	Model/GameConfig.h	/^                StringSet modelFormats;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::EntityConfig
modelRenderer	View/EntityBrowserView.h	/^            Renderer::MeshRenderer* modelRenderer;$/;"	m	language:C++	class:TrenchBroom::View::EntityCellData
modelSpecification	Assets/ModelDefinition.cpp	/^        ModelSpecification ModelDefinition::modelSpecification(const Model::EntityProperties& properties) const {$/;"	f	language:C++	class:TrenchBroom::Assets::ModelDefinition
modelSpecification	Model/Entity.cpp	/^        Assets::ModelSpecification Entity::modelSpecification() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
models	IO/EntityDefinitionClassInfo.cpp	/^        const Assets::ModelDefinitionList& EntityDefinitionClassInfo::models() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
modified	View/MapDocument.cpp	/^        bool MapDocument::modified() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
modifierKey1	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::modifierKey1() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKey1	View/KeyboardShortcutEditor.h	/^            inline int modifierKey1() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
modifierKey1	View/KeyboardShortcutEvent.h	/^            inline int modifierKey1() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
modifierKey2	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::modifierKey2() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKey2	View/KeyboardShortcutEditor.h	/^            inline int modifierKey2() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
modifierKey2	View/KeyboardShortcutEvent.h	/^            inline int modifierKey2() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
modifierKey3	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::modifierKey3() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKey3	View/KeyboardShortcutEditor.h	/^            inline int modifierKey3() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
modifierKey3	View/KeyboardShortcutEvent.h	/^            inline int modifierKey3() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEvent
modifierKeyChange	View/Tool.h	/^            void modifierKeyChange(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
modifierKeyDisplayText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::modifierKeyDisplayText(const int key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKeyMenuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::modifierKeyMenuText() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKeyMenuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::modifierKeyMenuText(const int key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
modifierKeys	View/InputState.cpp	/^        ModifierKeyState InputState::modifierKeys() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
modifierKeys	View/ToolBox.cpp	/^        ModifierKeyState ToolBox::modifierKeys() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
modifierKeysDown	View/InputState.cpp	/^        bool InputState::modifierKeysDown(const ModifierKeyState keys) const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
modifierKeysPressed	View/InputState.cpp	/^        bool InputState::modifierKeysPressed(const ModifierKeyState keys) const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
modifiesDocument	Controller/Command.cpp	/^        bool Command::modifiesDocument() const {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
mods	View/MapDocument.cpp	/^        StringList MapDocument::mods() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
modsDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::modsDidChange() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
modsDidChange	View/EntityBrowser.cpp	/^        void EntityBrowser::modsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
modsDidChange	View/MapDocument.cpp	/^        void MapDocument::modsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
modsDidChange	View/MapView.cpp	/^        void MapView::modsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
modsDidChange	View/ModEditor.cpp	/^        void ModEditor::modsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
modsDidChangeNotifier	View/MapDocument.h	/^            Notifier0 modsDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
mouseButton	View/ToolBox.cpp	/^        MouseButtonState ToolBox::mouseButton(wxMouseEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
mouseButtons	View/InputState.cpp	/^        MouseButtonState InputState::mouseButtons() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseButtonsDown	View/InputState.cpp	/^        bool InputState::mouseButtonsDown(const MouseButtonState buttons) const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseButtonsPressed	View/InputState.cpp	/^        bool InputState::mouseButtonsPressed(const MouseButtonState buttons) const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseDX	View/InputState.cpp	/^        int InputState::mouseDX() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseDY	View/InputState.cpp	/^        int InputState::mouseDY() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseDoubleClick	View/Tool.h	/^            bool mouseDoubleClick(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
mouseDown	View/InputState.cpp	/^        void InputState::mouseDown(const MouseButtonState button) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseDown	View/Tool.h	/^            bool mouseDown(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
mouseDrag	View/Tool.h	/^            bool mouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
mouseMove	View/InputState.cpp	/^        void InputState::mouseMove(const int mouseX, const int mouseY) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseMove	View/Tool.h	/^            void mouseMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
mouseUp	View/InputState.cpp	/^        void InputState::mouseUp(const MouseButtonState button) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseUp	View/Tool.h	/^            bool mouseUp(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
mouseX	View/InputState.cpp	/^        int InputState::mouseX() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
mouseY	View/InputState.cpp	/^        int InputState::mouseY() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
move	View/CameraTool.cpp	/^        bool CameraTool::move(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
move	View/MoveToolHelper.cpp	/^        MoveResult MoveDelegate::move(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
moveBoundary	Controller/ResizeBrushesCommand.cpp	/^        bool ResizeBrushesCommand::moveBoundary(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
moveBoundary	Model/Brush.cpp	/^        void Brush::moveBoundary(const BBox3& worldBounds, BrushFace& face, const Vec3& delta, const bool lockTexture) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
moveBrushesToWorldspawn	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveBrushesToWorldspawn(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveBy	Renderer/Camera.cpp	/^        void Camera::moveBy(const Vec3f& delta) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
moveCursor	Model/PlanePointFinder.cpp	/^            size_t moveCursor(const size_t direction) {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
moveDelta	View/Grid.cpp	/^        Vec3 Grid::moveDelta(const BBox3& bounds, const BBox3& worldBounds, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDelta	View/Grid.cpp	/^        Vec3 Grid::moveDelta(const Model::BrushFace& face, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDelta	View/Grid.cpp	/^        Vec3 Grid::moveDelta(const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDelta	View/Grid.cpp	/^        Vec3 Grid::moveDelta(const Vec3& point, const BBox3& worldBounds, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDeltaForBounds	View/Grid.cpp	/^        Vec3 Grid::moveDeltaForBounds(const Model::BrushFace* face, const BBox3& bounds, const BBox3& worldBounds, const Ray3& ray, const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDeltaForPoint	View/Grid.cpp	/^        Vec3 Grid::moveDeltaForPoint(const Vec3& point, const BBox3& worldBounds, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
moveDirection	View/MapView.cpp	/^        Vec3 MapView::moveDirection(const Math::Direction direction) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
moveDown	Controller/TextureCollectionCommand.cpp	/^        TextureCollectionCommand::Ptr TextureCollectionCommand::moveDown(View::MapDocumentWPtr document, const String& name) {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
moveEdges	Controller/MoveBrushEdgesCommand.cpp	/^        MoveBrushEdgesCommand::Ptr MoveBrushEdgesCommand::moveEdges(View::MapDocumentWPtr document, const Model::VertexToEdgesMap& edges, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushEdgesCommand
moveEdges	Controller/SplitBrushEdgesCommand.cpp	/^        SplitBrushEdgesCommand::Ptr SplitBrushEdgesCommand::moveEdges(View::MapDocumentWPtr document, const Model::VertexToEdgesMap& edges, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushEdgesCommand
moveEdges	Model/Brush.cpp	/^        Edge3::List Brush::moveEdges(const BBox3& worldBounds, const Edge3::List& edgePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
moveEdges	Model/BrushGeometry.cpp	/^        MoveEdgesResult BrushGeometry::moveEdges(const BBox3& worldBounds, const Edge3::List& edgePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
moveEdges	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveEdges(const Model::VertexToEdgesMap& edges, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveExternalTextureCollectionDown	Assets/TextureManager.cpp	/^        void TextureManager::moveExternalTextureCollectionDown(const String& name) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
moveExternalTextureCollectionDown	View/MapDocument.cpp	/^        void MapDocument::moveExternalTextureCollectionDown(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
moveExternalTextureCollectionUp	Assets/TextureManager.cpp	/^        void TextureManager::moveExternalTextureCollectionUp(const String& name) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
moveExternalTextureCollectionUp	View/MapDocument.cpp	/^        void MapDocument::moveExternalTextureCollectionUp(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
moveFaces	Controller/MoveBrushFacesCommand.cpp	/^        MoveBrushFacesCommand::Ptr MoveBrushFacesCommand::moveFaces(View::MapDocumentWPtr document, const Model::VertexToFacesMap& faces, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushFacesCommand
moveFaces	Controller/SplitBrushFacesCommand.cpp	/^        SplitBrushFacesCommand::Ptr SplitBrushFacesCommand::moveFaces(View::MapDocumentWPtr document, const Model::VertexToFacesMap& faces, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::SplitBrushFacesCommand
moveFaces	Model/Brush.cpp	/^        Polygon3::List Brush::moveFaces(const BBox3& worldBounds, const Polygon3::List& facePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
moveFaces	Model/BrushGeometry.cpp	/^        MoveFacesResult BrushGeometry::moveFaces(const BBox3& worldBounds, const Polygon3::List& facePositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
moveFaces	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveFaces(const Model::VertexToFacesMap& faces, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveFile	IO/FileSystem.cpp	/^        void WritableFileSystem::moveFile(const Path& sourcePath, const Path& destPath, const bool overwrite) {$/;"	f	language:C++	class:TrenchBroom::IO::WritableFileSystem
moveHandle	View/VertexHandleManager.h	/^            inline size_t moveHandle(const Vec3f& position, std::map<Vec3, std::vector<Element*>, Vec3::LexicographicOrder >& from, std::map<Vec3, std::vector<Element*>, Vec3::LexicographicOrder >& to) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
moveObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveObjects(const Model::ObjectList& objects, const Vec3& delta, const bool lockTextures) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveObjects	View/MapView.cpp	/^        void MapView::moveObjects(const Math::Direction direction) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
moveSpeed	View/CameraTool.cpp	/^        float CameraTool::moveSpeed(const bool altMode) const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
moveTexture	Model/BrushFace.cpp	/^        void BrushFace::moveTexture(const Vec3& up, const Vec3& right, const Math::Direction direction, const float distance) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
moveTexture	Model/TexCoordSystem.cpp	/^        void TexCoordSystem::moveTexture(const Vec3& normal, const Vec3& up, const Vec3& right, const Math::Direction direction, const float distance, BrushFaceAttribs& attribs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
moveTextureCollectionDown	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveTextureCollectionDown(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveTextureCollectionUp	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveTextureCollectionUp(const String& name) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveTextures	Controller/MoveTexturesCommand.cpp	/^        MoveTexturesCommand::Ptr MoveTexturesCommand::moveTextures(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const Vec3& up, const Vec3& right, const Math::Direction direction, const float distance) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
moveTextures	Controller/MoveTexturesCommand.cpp	/^        void MoveTexturesCommand::moveTextures(const float distance) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveTexturesCommand
moveTextures	View/ControllerFacade.cpp	/^        bool ControllerFacade::moveTextures(const Model::BrushFaceList& faces, const Vec3& up, const Vec3& right, const Math::Direction direction, const float distance) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveTextures	View/MapView.cpp	/^        void MapView::moveTextures(const Math::Direction direction, const bool snapToGrid) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
moveTo	Renderer/Camera.cpp	/^        void Camera::moveTo(const Vec3f& position) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
moveUp	Controller/TextureCollectionCommand.cpp	/^        TextureCollectionCommand::Ptr TextureCollectionCommand::moveUp(View::MapDocumentWPtr document, const String& name) {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
moveVertex	Model/MoveBrushVertexAlgorithm.h	/^            MoveVertexResult moveVertex(BrushGeometry& geometry, BrushVertex* vertex, const bool allowMerge, const Vec3& start, const Vec3& end) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
moveVertices	Controller/MoveBrushVerticesCommand.cpp	/^        MoveBrushVerticesCommand::Ptr MoveBrushVerticesCommand::moveVertices(View::MapDocumentWPtr document, const Model::VertexToBrushesMap& vertices, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Controller::MoveBrushVerticesCommand
moveVertices	Model/Brush.cpp	/^        Vec3::List Brush::moveVertices(const BBox3& worldBounds, const Vec3::List& vertexPositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
moveVertices	Model/BrushGeometry.cpp	/^        MoveVerticesResult BrushGeometry::moveVertices(const BBox3& worldBounds, const Vec3::List& vertexPositions, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
moveVertices	View/ControllerFacade.cpp	/^        ControllerFacade::MoveVerticesResult ControllerFacade::moveVertices(const Model::VertexToBrushesMap& vertices, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
moveVertices	View/MapView.cpp	/^        void MapView::moveVertices(const Math::Direction direction) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
moveVertices	View/VertexTool.cpp	/^        MoveResult VertexTool::moveVertices(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
moveVerticesAndRebuildBrushGeometry	View/VertexTool.cpp	/^        void VertexTool::moveVerticesAndRebuildBrushGeometry(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
moveableVertices	Model/SnapBrushVerticesAlgorithm.cpp	/^        Vec3::Map SnapBrushVerticesAlgorithm::moveableVertices(const BrushGeometry& geometry) const {$/;"	f	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
mulRotation	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulRotation(const float rotation) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
mulSurfaceValue	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulSurfaceValue(const float surfaceValue) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
mulXOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulXOffset(const float xOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
mulXScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulXScale(const float xScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
mulYOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulYOffset(const float yOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
mulYScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::mulYScale(const float yScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
multi	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::PropertyRow::multi() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
multi	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::RowManager::multi(size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
multisample	View/MapView.cpp	/^        bool MapView::multisample() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
name	Assets/EntityDefinition.cpp	/^            String name;$/;"	m	language:C++	struct:TrenchBroom::Assets::FindPropertyDefinitionByName	file:
name	Assets/EntityDefinition.cpp	/^        const String& EntityDefinition::name() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
name	Assets/PropertyDefinition.cpp	/^        const String& PropertyDefinition::name() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
name	Assets/Texture.cpp	/^        const String& Texture::name() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
name	Assets/TextureCollection.cpp	/^        const String& TextureCollection::name() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
name	Assets/TextureCollectionSpec.cpp	/^        const String& TextureCollectionSpec::name() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
name	Controller/Command.cpp	/^        const String& Command::name() const {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
name	IO/EntityDefinitionClassInfo.cpp	/^        const String& EntityDefinitionClassInfo::name() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
name	IO/Md2Parser.h	/^                char name[Md2Layout::FrameNameLength];$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Frame
name	IO/Md2Parser.h	/^                char name[Md2Layout::SkinNameLength];$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Skin
name	IO/QuakeMapParser.cpp	/^        const String& QuakeMapParser::ExtraProperty::name() const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
name	IO/Wad.cpp	/^        const String& WadEntry::name() const {$/;"	f	language:C++	class:TrenchBroom::IO::WadEntry
name	Model/GameConfig.cpp	/^        const String& GameConfig::name() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
name	Model/GameConfig.h	/^                String name;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FlagConfig
name	Renderer/FontDescriptor.cpp	/^        const String& FontDescriptor::name() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
name	Renderer/ShaderManager.cpp	/^        const String& ShaderConfig::name() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderConfig
nameHash	Renderer/FontDescriptor.cpp	/^        long FontDescriptor::nameHash() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
nan	MathUtils.h	/^    T nan() {$/;"	f	language:C++	namespace:Math
nan	Vec.h	/^    bool nan() const {$/;"	f	language:C++	class:Vec
nearPlane	Renderer/Camera.cpp	/^        float Camera::nearPlane() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
neg	MathUtils.h	/^    bool neg(const T v, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
newDocument	TrenchBroomApp.cpp	/^        bool TrenchBroomApp::newDocument() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
newDocument	View/ControllerFacade.cpp	/^        bool ControllerFacade::newDocument(const BBox3& worldBounds, Model::GamePtr game) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
newDocument	View/MapDocument.cpp	/^        void MapDocument::newDocument(const BBox3& worldBounds, Model::GamePtr game) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
newDocument	View/MapFrame.cpp	/^        bool MapFrame::newDocument(Model::GamePtr game) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
newEdgePositions	Model/BrushGeometry.h	/^            Edge3::List newEdgePositions;$/;"	m	language:C++	struct:TrenchBroom::Model::MoveEdgesResult
newFacePositions	Model/BrushGeometry.h	/^            Polygon3::List newFacePositions;$/;"	m	language:C++	struct:TrenchBroom::Model::MoveFacesResult
newFrame	View/FrameManager.cpp	/^        MapFrame* FrameManager::newFrame() {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
newHolder	Holder.h	/^    static BaseHolder::Ptr newHolder(const T& object) {$/;"	f	language:C++	class:Holder
newKey	Controller/EntityPropertyCommand.cpp	/^        const Model::PropertyKey& EntityPropertyCommand::newKey() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
newKeyNames	View/EntityPropertyGridTable.cpp	/^        StringList EntityPropertyGridTable::RowManager::newKeyNames(const size_t count, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
newMap	Model/Game.cpp	/^        Map* Game::newMap(const MapFormat::Type format) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
newMapDocument	View/MapDocument.cpp	/^        MapDocumentSPtr MapDocument::newMapDocument() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
newValue	Controller/EntityPropertyCommand.cpp	/^        const Model::PropertyValue& EntityPropertyCommand::newValue() const {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
newVertexPosition	Model/BrushGeometry.h	/^            Vec3 newVertexPosition;$/;"	m	language:C++	struct:TrenchBroom::Model::SplitResult
newVertexPositions	Model/BrushGeometry.h	/^            Vec3::List newVertexPositions;$/;"	m	language:C++	struct:TrenchBroom::Model::MoveVerticesResult
newVertexPositions	Model/BrushGeometry.h	/^            Vec3::List newVertexPositions;$/;"	m	language:C++	struct:TrenchBroom::Model::SnapVerticesResult
next	Model/Issue.cpp	/^        Issue* Issue::next() const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
next	Renderer/VboBlock.cpp	/^        VboBlock* VboBlock::next() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
next	View/Tool.cpp	/^        Tool* Tool::next() const {$/;"	f	language:C++	class:TrenchBroom::View::Tool
nextCommandName	Controller/CommandProcessor.cpp	/^        const String& CommandProcessor::nextCommandName() const {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
nextCommandName	View/ControllerFacade.cpp	/^        const String& ControllerFacade::nextCommandName() const {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
nextPOT	MathUtils.h	/^    T nextPOT(T n) {$/;"	f	language:C++	namespace:Math
nextPoint	Model/PointFile.cpp	/^        const Vec3f& PointFile::nextPoint() {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
nextToken	IO/Tokenizer.h	/^            Token nextToken() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
nextToken	Preference.h	/^        wxString nextToken(wxStringTokenizer& tokenizer) const {$/;"	f	language:C++	class:TrenchBroom::Converter
nextTokenIgnoringNewlines	IO/DefParser.cpp	/^        DefParser::Token DefParser::nextTokenIgnoringNewlines() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
node1	Model/FaceAdjacencyGraph.cpp	/^        FaceAdjacencyGraph::Node* FaceAdjacencyGraph::Edge::node1() const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
node2	Model/FaceAdjacencyGraph.cpp	/^        FaceAdjacencyGraph::Node* FaceAdjacencyGraph::Edge::node2() const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph::Edge
normal	IO/Md2Parser.cpp	/^        const Vec3f& Md2Parser::Md2Frame::normal(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser::Md2Frame
normal	Plane.h	/^    Vec<T,S> normal;$/;"	m	language:C++	class:Plane
normalIndex	IO/Md2Parser.h	/^                unsigned char normalIndex;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Vertex
normalize	Vec.h	/^    Vec<T,S>& normalize() {$/;"	f	language:C++	class:Vec
normalized	Vec.h	/^    const Vec<T,S> normalized() const {$/;"	f	language:C++	class:Vec
normals	Renderer/RenderUtils.h	/^            Vec3f::List normals;$/;"	m	language:C++	struct:TrenchBroom::Renderer::VertsAndNormals
normals	View/Clipper.h	/^                Vec3::List normals;$/;"	m	language:C++	struct:TrenchBroom::View::Clipper::ClipHandlePoint
notify	Notifier.h	/^        void notify() {$/;"	f	language:C++	class:TrenchBroom::Notifier0
notify	Notifier.h	/^        void notify(A a1) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
notify	Notifier.h	/^        void notify(A1 a1, A2 a2) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
notify	Notifier.h	/^        void notify(A1 a1, A2 a2, A3 a3) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
notify	Notifier.h	/^        void notify(I it, I end) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
notify	Notifier.h	/^        void notify(I it, I end, A2 a2) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
notify	Notifier.h	/^        void notify(I it, I end, A2 a2, A3 a3) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
notifyParent	Model/Brush.cpp	/^        void Brush::notifyParent() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
notifyRowsAppended	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::notifyRowsAppended(size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
notifyRowsAppended	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::notifyRowsAppended(size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
notifyRowsDeleted	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::notifyRowsDeleted(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
notifyRowsDeleted	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::notifyRowsDeleted(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
notifyRowsInserted	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::notifyRowsInserted(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
notifyRowsInserted	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::notifyRowsInserted(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
notifyRowsUpdated	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::notifyRowsUpdated(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
notifyRowsUpdated	View/KeyboardPreferencePane.cpp	/^        void KeyboardGridTable::notifyRowsUpdated(size_t pos, size_t numRows) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
null	Mat.h	/^    bool null() const {$/;"	f	language:C++	class:Mat
null	Vec.h	/^    bool null() const {$/;"	f	language:C++	class:Vec
numPoints	View/Clipper.cpp	/^        size_t Clipper::ClipHandlePoints::numPoints() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
numPoints	View/Clipper.cpp	/^        size_t Clipper::numPoints() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
numbered	Model/EntityPropertyIndex.cpp	/^        EntityPropertyQuery EntityPropertyQuery::numbered(const String& pattern) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
numberedProperties	Model/EntityProperties.cpp	/^        EntityProperty::List EntityProperties::numberedProperties(const String& prefix) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
numberedPropertyPrefix	Model/EntityProperties.cpp	/^        String numberedPropertyPrefix(const String& key) {$/;"	f	language:C++	namespace:TrenchBroom::Model
object	Holder.h	/^    T& object() {$/;"	f	language:C++	class:BaseHolder
object	Holder.h	/^    T& object() {$/;"	f	language:C++	class:Holder
object	Holder.h	/^    const T& object() const {$/;"	f	language:C++	class:BaseHolder
object	Holder.h	/^    const T& object() const {$/;"	f	language:C++	class:Holder
object	Model/ModelTypes.h	/^            Object* object;$/;"	m	language:C++	struct:TrenchBroom::Model::ObjectParentPair
objectAdded	Model/IssueManager.cpp	/^        void IssueManager::objectAdded(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
objectChanged	Model/IssueManager.cpp	/^        void IssueManager::objectChanged(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
objectDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
objectDidChange	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
objectDidChange	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
objectDidChange	View/MapDocument.cpp	/^        void MapDocument::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
objectDidChange	View/MapTreeView.cpp	/^            void objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
objectDidChange	View/MapView.cpp	/^        void MapView::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
objectDidChange	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
objectDidChange	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
objectDidChange	View/TexturingView.cpp	/^        void TexturingView::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
objectDidChange	View/VertexTool.cpp	/^        void VertexTool::objectDidChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
objectDidChangeNotifier	View/MapDocument.h	/^            Notifier1<Model::Object*> objectDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
objectRemoved	Model/IssueManager.cpp	/^        void IssueManager::objectRemoved(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
objectWasAdded	Renderer/MapRenderer.cpp	/^        void MapRenderer::objectWasAdded(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
objectWasAdded	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::objectWasAdded(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
objectWasAdded	View/MapDocument.cpp	/^        void MapDocument::objectWasAdded(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
objectWasAdded	View/MapTreeView.cpp	/^            void objectWasAdded(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
objectWasAdded	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::objectWasAdded(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
objectWasAddedNotifier	View/MapDocument.h	/^            Notifier1<Model::Object*> objectWasAddedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
objectWasAddedOrRemoved	View/MapView.cpp	/^        void MapView::objectWasAddedOrRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
objectWasRemoved	View/MapDocument.cpp	/^        void MapDocument::objectWasRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
objectWasRemovedNotifier	View/MapDocument.h	/^            Notifier1<Model::Object*> objectWasRemovedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
objectWillBeRemoved	Renderer/MapRenderer.cpp	/^        void MapRenderer::objectWillBeRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
objectWillBeRemoved	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::objectWillBeRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
objectWillBeRemoved	View/MapDocument.cpp	/^        void MapDocument::objectWillBeRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
objectWillBeRemoved	View/MapTreeView.cpp	/^            void objectWillBeRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
objectWillBeRemoved	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::objectWillBeRemoved(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
objectWillBeRemovedNotifier	View/MapDocument.h	/^            Notifier1<Model::Object*> objectWillBeRemovedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
objectWillChange	View/MapDocument.cpp	/^        void MapDocument::objectWillChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
objectWillChange	View/VertexTool.cpp	/^        void VertexTool::objectWillChange(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
objectWillChangeNotifier	View/MapDocument.h	/^            Notifier1<Model::Object*> objectWillChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
occludedBoundsColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::occludedBoundsColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
occludedEdgeColor	Renderer/BrushRenderer.cpp	/^        const Color& BrushRenderer::occludedEdgeColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
octant	Model/Octree.h	/^            BBox<F,3> octant(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
offset	IO/Md2Parser.h	/^                Vec3f offset;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Frame
offset	IO/Tokenizer.h	/^            size_t offset(const char* ptr) const {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
offset	Model/BrushFace.cpp	/^        const Vec2f& BrushFace::offset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
offset	Model/BrushFace.cpp	/^        const Vec2f& BrushFaceAttribs::offset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
offset	Model/TexCoordSystemHelper.cpp	/^        const Vec2f& TexCoordSystemHelper::offset() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
offset	Renderer/TextRenderer.cpp	/^        Vec3f TextAnchor::offset(const Camera& camera, const Vec2f& size) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextAnchor
offset	Renderer/VboBlock.cpp	/^        size_t VboBlock::offset() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
offset	View/Grid.cpp	/^        FloatType Grid::offset(const FloatType f) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
offset	View/Grid.h	/^            Vec<T,S> offset(const Vec<T,S>& p) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
onseam	IO/MdlParser.h	/^                bool onseam;$/;"	m	language:C++	struct:TrenchBroom::IO::MdlParser::MdlSkinVertex
openDocument	TrenchBroomApp.cpp	/^        bool TrenchBroomApp::openDocument(const String& pathStr) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
openDocument	View/ControllerFacade.cpp	/^        bool ControllerFacade::openDocument(const BBox3& worldBounds, Model::GamePtr game, const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
openDocument	View/MapDocument.cpp	/^        void MapDocument::openDocument(const BBox3& worldBounds, Model::GamePtr game, const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
openDocument	View/MapFrame.cpp	/^        bool MapFrame::openDocument(Model::GamePtr game, const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
openFile	IO/DiskFileSystem.cpp	/^            MappedFile::Ptr openFile(const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
openFile	IO/FileSystem.cpp	/^        const MappedFile::Ptr FileSystem::openFile(const Path& path) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
openPreferences	TrenchBroomApp.cpp	/^        void TrenchBroomApp::openPreferences() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
operator !=	CastIterator.h	/^        bool operator!=(const CastIterator<Iterator, OutType>& other) const {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator !=	FilterIterator.h	/^        bool operator!=(const FilterIterator<Iterator, Filter>& other) const {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator !=	IO/Path.cpp	/^        bool Path::operator!= (const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
operator !=	Line.h	/^    bool operator!= (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator !=	NestedHierarchyIterator.h	/^        bool operator!=(const NestedHierarchyIterator<OuterIterator, InnerAdapter, ValueType>& other) const {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator !=	NestedIterator.h	/^        bool operator!=(const NestedIterator<OuterIterator, InnerAdapter>& other) const {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator !=	Plane.h	/^    bool operator!= (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator !=	Ray.h	/^    bool operator!= (const Ray<T,S>& other) const {$/;"	f	language:C++	class:Ray
operator !=	Vec.h	/^    bool operator!= (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator ()	Assets/EntityDefinition.cpp	/^            bool operator()(const PropertyDefinitionPtr propertyDefinition) const {$/;"	f	language:C++	struct:TrenchBroom::Assets::FindPropertyDefinitionByName
operator ()	Assets/EntityDefinition.cpp	/^            bool operator()(const PropertyDefinitionPtr propertyDefinition) const {$/;"	f	language:C++	struct:TrenchBroom::Assets::FindSpawnflagsDefinition
operator ()	Assets/EntityDefinitionManager.cpp	/^            bool operator() (const EntityDefinition* left, const EntityDefinition* right) const {$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByName
operator ()	Assets/EntityDefinitionManager.cpp	/^            bool operator() (const EntityDefinition* left, const EntityDefinition* right) const {$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByUsage
operator ()	Assets/PropertyDefinition.cpp	/^            bool operator()(const FlagsPropertyOption& option) const {$/;"	f	language:C++	struct:TrenchBroom::Assets::FindFlagByValue
operator ()	Assets/TextureManager.cpp	/^            bool operator() (const Texture* left, const Texture* right) const {$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByName
operator ()	Assets/TextureManager.cpp	/^            bool operator() (const Texture* left, const Texture* right) const {$/;"	f	language:C++	class:TrenchBroom::Assets::CompareByUsage
operator ()	BBox.h	/^    void operator()(const Vec<T,3>& vertex) {$/;"	f	language:C++	struct:RotateBBox
operator ()	BBox.h	/^    void operator()(const Vec<T,3>& vertex) {$/;"	f	language:C++	struct:TransformBBox
operator ()	CollectionUtils.h	/^        bool operator()(const T& lhs, const T& rhs) const {$/;"	f	language:C++	struct:Utils::EqualsUsingLess
operator ()	CollectionUtils.h	/^        bool operator()(const T* lhs, const T* rhs) const {$/;"	f	language:C++	struct:Utils::PtrCmp
operator ()	CollectionUtils.h	/^        void operator()(const T* ptr) const {$/;"	f	language:C++	struct:Utils::Deleter
operator ()	CollectionUtils.h	/^        void operator()(std::pair<K, V*>& entry) {$/;"	f	language:C++	struct:MapUtils::Deleter
operator ()	CollectionUtils.h	/^        void operator()(std::pair<K, std::vector<V*> >& entry) {$/;"	f	language:C++	struct:MapUtils::VectorDeleter
operator ()	CollectionUtils.h	/^        void operator()(std::pair<const K, V*>& entry) {$/;"	f	language:C++	struct:MapUtils::Deleter
operator ()	CollectionUtils.h	/^        void operator()(std::pair<const K, std::vector<V*> >& entry) {$/;"	f	language:C++	struct:MapUtils::VectorDeleter
operator ()	Controller/AddRemoveObjectsCommand.cpp	/^            void operator()(const Model::ObjectParentPair& pair) {$/;"	f	language:C++	struct:TrenchBroom::Controller::AddObjectToDocument
operator ()	Controller/AddRemoveObjectsCommand.cpp	/^            void operator()(const Model::ObjectParentPair& pair) {$/;"	f	language:C++	struct:TrenchBroom::Controller::RemoveObjectFromDocument
operator ()	Controller/FixPlanePointsCommand.cpp	/^            void operator()(Model::Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Controller::FindPlanePoints
operator ()	Controller/FixPlanePointsCommand.cpp	/^            void operator()(Model::Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Controller::SnapPlanePoints
operator ()	IO/FileSystem.cpp	/^        bool FileSystem::ExtensionMatcher::operator()(const Path& path, const bool directory) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem::ExtensionMatcher
operator ()	IO/FileSystem.cpp	/^        bool FileSystem::TypeMatcher::operator()(const Path& path, const bool directory) const {$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem::TypeMatcher
operator ()	IO/Path.h	/^                String operator()(const Path& path) const {$/;"	f	language:C++	struct:TrenchBroom::IO::Path::ToString
operator ()	IO/QuakeMapParser.cpp	/^        bool QuakeMapParser::FaceWeightOrder::operator()(const Model::BrushFace* lhs, const Model::BrushFace* rhs) const  {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::FaceWeightOrder
operator ()	IO/QuakeMapParser.h	/^                bool operator()(const Plane<T,S>& lhs, const Plane<T,S>& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::PlaneWeightOrder
operator ()	Mat.h	/^    T operator() (const Mat<T,1,1>& mat) const {$/;"	f	language:C++	struct:MatrixDeterminant
operator ()	Mat.h	/^    T operator() (const Mat<T,2,2>& mat) const {$/;"	f	language:C++	struct:MatrixDeterminant
operator ()	Mat.h	/^    T operator() (const Mat<T,3,3>& mat) const {$/;"	f	language:C++	struct:MatrixDeterminant
operator ()	Mat.h	/^    T operator() (const Mat<T,S,S>& mat) const {$/;"	f	language:C++	struct:MatrixDeterminant
operator ()	MathUtils.h	/^        bool operator()(const T lhs, const T rhs) const {$/;"	f	language:C++	struct:Math::Less
operator ()	MathUtils.h	/^        int operator()(const T lhs, const T rhs) const {$/;"	f	language:C++	struct:Math::Cmp
operator ()	Model/ModelUtils.cpp	/^        bool CheckBounds::operator()(const Model::Pickable* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::CheckBounds
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const BrushEdge* edge) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const BrushVertex* vertex) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchAll::operator()(const ObjectParentPair& pair) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchAll
operator ()	Model/ModelUtils.cpp	/^        bool MatchObjectByFilePosition::operator()(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchObjectByFilePosition
operator ()	Model/ModelUtils.cpp	/^        bool MatchObjectByType::operator()(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::MatchObjectByType
operator ()	Model/ModelUtils.cpp	/^        void NotifyParent::operator()(Object* object) {$/;"	f	language:C++	class:TrenchBroom::Model::NotifyParent
operator ()	Model/ModelUtils.cpp	/^        void NotifyParent::operator()(const ObjectParentPair& pair) {$/;"	f	language:C++	class:TrenchBroom::Model::NotifyParent
operator ()	Model/ModelUtils.cpp	/^        void Transform::operator()(Model::BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::Transform
operator ()	Model/ModelUtils.cpp	/^        void Transform::operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::Transform
operator ()	Model/Selection.cpp	/^            bool operator()(const Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchPartiallySelected
operator ()	Model/Selection.cpp	/^            bool operator()(const Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchSelected
operator ()	Model/Selection.cpp	/^            bool operator()(const Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchUnselected
operator ()	Model/Selection.cpp	/^            bool operator()(const BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchAnySelectedFace
operator ()	Model/Selection.cpp	/^            bool operator()(const BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchSelected
operator ()	Model/Selection.cpp	/^            bool operator()(const BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchUnselected
operator ()	Model/Selection.cpp	/^            bool operator()(const Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchPartiallySelected
operator ()	Model/Selection.cpp	/^            bool operator()(const Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchSelected
operator ()	Model/Selection.cpp	/^            bool operator()(const Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchUnselected
operator ()	Model/Selection.cpp	/^            bool operator()(const Object* object) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchSelected
operator ()	Model/Selection.cpp	/^            bool operator()(const Object* object) const {$/;"	f	language:C++	struct:TrenchBroom::Model::MatchUnselected
operator ()	Model/Selection.cpp	/^            void operator()(Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::Model::SetSelection
operator ()	Model/Selection.cpp	/^            void operator()(Brush* brush) {$/;"	f	language:C++	struct:TrenchBroom::Model::Collect
operator ()	Model/Selection.cpp	/^            void operator()(Brush* brush) {$/;"	f	language:C++	struct:TrenchBroom::Model::CollectFaces
operator ()	Model/Selection.cpp	/^            void operator()(BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::SetSelection
operator ()	Model/Selection.cpp	/^            void operator()(BrushFace* face) {$/;"	f	language:C++	struct:TrenchBroom::Model::Collect
operator ()	Model/Selection.cpp	/^            void operator()(Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::Model::SetSelection
operator ()	Model/Selection.cpp	/^            void operator()(Entity* entity) {$/;"	f	language:C++	struct:TrenchBroom::Model::Collect
operator ()	Model/Selection.cpp	/^            void operator()(Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::SetSelection
operator ()	Notifier.h	/^            bool operator()(const Observer* rhs) const {$/;"	f	language:C++	struct:TrenchBroom::Notifier0::CompareObservers
operator ()	Notifier.h	/^            bool operator()(const Observer* rhs) const {$/;"	f	language:C++	struct:TrenchBroom::Notifier1::CompareObservers
operator ()	Notifier.h	/^            bool operator()(const Observer* rhs) const {$/;"	f	language:C++	struct:TrenchBroom::Notifier2::CompareObservers
operator ()	Notifier.h	/^            bool operator()(const Observer* rhs) const {$/;"	f	language:C++	struct:TrenchBroom::Notifier3::CompareObservers
operator ()	Notifier.h	/^            void operator()() {$/;"	f	language:C++	class:TrenchBroom::Notifier0::CObserver
operator ()	Notifier.h	/^            void operator()(A1 a1) {$/;"	f	language:C++	class:TrenchBroom::Notifier1::CObserver
operator ()	Notifier.h	/^            void operator()(A1 a1, A2 a2) {$/;"	f	language:C++	class:TrenchBroom::Notifier2::CObserver
operator ()	Notifier.h	/^            void operator()(A1 a1, A2 a2, A3 a3) {$/;"	f	language:C++	class:TrenchBroom::Notifier3::CObserver
operator ()	Notifier.h	/^        void operator()() {$/;"	f	language:C++	class:TrenchBroom::Notifier0
operator ()	Notifier.h	/^        void operator()(A a1) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
operator ()	Notifier.h	/^        void operator()(A1 a1, A2 a2) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
operator ()	Notifier.h	/^        void operator()(A1 a1, A2 a2, A3 a3) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
operator ()	Notifier.h	/^        void operator()(I it, I end) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
operator ()	Notifier.h	/^        void operator()(I it, I end, A2 a2) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
operator ()	Notifier.h	/^        void operator()(I it, I end, A2 a2, A3 a3) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
operator ()	Plane.h	/^        bool operator()(const Plane<T,3>& lhs, const Plane<T,3>& rhs) const {$/;"	f	language:C++	class:Plane::WeightOrder
operator ()	Renderer/BrushRenderer.cpp	/^        bool BrushRenderer::BuildBrushFaceMesh::operator()(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer::BuildBrushFaceMesh
operator ()	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::BuildBrushEdges::operator()(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer::BuildBrushEdges
operator ()	Renderer/ClipperRenderer.cpp	/^            bool operator()(const Model::Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BrushFilter
operator ()	Renderer/ClipperRenderer.cpp	/^            bool operator()(const Model::BrushEdge* edge) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BrushFilter
operator ()	Renderer/ClipperRenderer.cpp	/^            bool operator()(const Model::BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BrushFilter
operator ()	Renderer/EntityRenderer.cpp	/^            void operator()(const Vec3& v1, const Vec3& v2) {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildColoredWireframeBoundsVertices
operator ()	Renderer/EntityRenderer.cpp	/^            void operator()(const Vec3& v1, const Vec3& v2) {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildWireframeBoundsVertices
operator ()	Renderer/EntityRenderer.cpp	/^            void operator()(const Vec3& v1, const Vec3& v2, const Vec3& v3, const Vec3& v4, const Vec3& n) {$/;"	f	language:C++	struct:TrenchBroom::Renderer::BuildColoredSolidBoundsVertices
operator ()	Renderer/FaceRenderer.cpp	/^            void operator()(const Assets::Texture* texture) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::SetShaderParms
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::SelectedBrushRendererFilter
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::Brush* brush) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::UnselectedBrushRendererFilter
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::BrushEdge* edge) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::SelectedBrushRendererFilter
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::BrushEdge* edge) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::UnselectedBrushRendererFilter
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::SelectedBrushRendererFilter
operator ()	Renderer/MapRenderer.cpp	/^            bool operator()(const Model::BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::Renderer::UnselectedBrushRendererFilter
operator ()	Renderer/MeshRenderer.cpp	/^            void operator()(const Assets::Texture* texture) const {}$/;"	f	language:C++	struct:TrenchBroom::Renderer::NopFunc
operator ()	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::BuildBrushEdges::operator()(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer::BuildBrushEdges
operator ()	Renderer/TextRenderer.h	/^            bool operator()(const Key& lhs, const Key& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::DefaultKeyComparator
operator ()	Renderer/Vbo.cpp	/^        bool CompareVboBlocksByCapacity::operator() (const VboBlock* lhs, const VboBlock* rhs) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::CompareVboBlocksByCapacity
operator ()	SharedPointer.h	/^    void operator ()(T const* p) const {$/;"	f	language:C++	struct:ArrayDeleter
operator ()	StringUtils.h	/^        bool operator()(const String& lhs, const String& rhs) const {$/;"	f	language:C++	struct:StringUtils::StringEqual
operator ()	StringUtils.h	/^        bool operator()(const String& lhs, const String& rhs) const {$/;"	f	language:C++	struct:StringUtils::StringLess
operator ()	StringUtils.h	/^        bool operator()(const char& lhs, const char& rhs) const {$/;"	f	language:C++	struct:StringUtils::CharEqual
operator ()	StringUtils.h	/^        bool operator()(const char& lhs, const char& rhs) const {$/;"	f	language:C++	struct:StringUtils::CharLess
operator ()	StringUtils.h	/^        const String& operator()(const String& str) const {$/;"	f	language:C++	struct:StringUtils::StringToString
operator ()	StringUtils.h	/^        int operator()(const char& lhs, const char& rhs) const {$/;"	f	language:C++	struct:StringUtils::CaseInsensitiveCharCompare
operator ()	StringUtils.h	/^        int operator()(const char& lhs, const char& rhs) const {$/;"	f	language:C++	struct:StringUtils::CaseSensitiveCharCompare
operator ()	Vec.h	/^        bool operator()(const Vec<T,S>& lhs, const Vec<T,S>& rhs) const {$/;"	f	language:C++	class:Vec::DotOrder
operator ()	Vec.h	/^        bool operator()(const Vec<T,S>& lhs, const Vec<T,S>& rhs) const {$/;"	f	language:C++	class:Vec::ErrorOrder
operator ()	Vec.h	/^        bool operator()(const Vec<T,S>& lhs, const Vec<T,S>& rhs) const {$/;"	f	language:C++	class:Vec::InverseDotOrder
operator ()	Vec.h	/^        bool operator()(const Vec<T,S>& lhs, const Vec<T,S>& rhs) const {$/;"	f	language:C++	class:Vec::LexicographicOrder
operator ()	Vec.h	/^        bool operator()(size_t lhs, size_t rhs) const {$/;"	f	language:C++	class:Vec::SelectionHeapCmp
operator ()	View/Autosaver.cpp	/^            bool operator()(const IO::Path& path, const bool directory) const {$/;"	f	language:C++	struct:TrenchBroom::View::BackupFileMatcher
operator ()	View/CreateBrushTool.cpp	/^            bool operator()(const Model::Brush* brush) const { return true; }$/;"	f	language:C++	struct:TrenchBroom::View::RendererFilter
operator ()	View/CreateBrushTool.cpp	/^            bool operator()(const Model::BrushEdge* edge) const { return true; }$/;"	f	language:C++	struct:TrenchBroom::View::RendererFilter
operator ()	View/CreateBrushTool.cpp	/^            bool operator()(const Model::BrushFace* face) const { return true; }$/;"	f	language:C++	struct:TrenchBroom::View::RendererFilter
operator ()	View/EntityBrowserView.cpp	/^            void operator()(const Vec3f& v1, const Vec3f& v2) {$/;"	f	language:C++	struct:TrenchBroom::View::CollectBoundsVertices
operator ()	View/ExecutableEvent.cpp	/^        void ExecutableEvent::Executable::operator()() {$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent::Executable
operator ()	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::MacModifierOrder::operator()(const int lhs, const int rhs) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut::MacModifierOrder
operator ()	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::WinModifierOrder::operator()(const int lhs, const int rhs) const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut::WinModifierOrder
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::View::AddToEntity
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Brush* brush) const {$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromEntity
operator ()	View/MapDocument.cpp	/^            void operator()(Model::BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::View::SetTexture
operator ()	View/MapDocument.cpp	/^            void operator()(Model::BrushFace* face) const {$/;"	f	language:C++	struct:TrenchBroom::View::UnsetTexture
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::View::AddToMap
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromMap
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::View::SetEntityDefinition
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	class:TrenchBroom::View::SetEntityModel
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::UnsetEntityDefinition
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::UnsetEntityModel
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::View::AddObjectToIssueManager
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::View::AddToPicker
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::View::RemoveFromPicker
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::View::RemoveObjectFromIssueManager
operator ()	View/MapDocument.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	class:TrenchBroom::View::UpdateObjectInIssueManager
operator ()	View/MapTreeView.cpp	/^            void operator()(Model::Object* object) const {$/;"	f	language:C++	struct:TrenchBroom::View::AddObjectToItemArray
operator ()	View/ResizeBrushesTool.cpp	/^            void operator()(Model::BrushEdge* edge) {$/;"	f	language:C++	struct:TrenchBroom::View::FindClosestFaceHit
operator ()	View/ResizeBrushesTool.cpp	/^            void operator()(Model::BrushFace* face) {$/;"	f	language:C++	struct:TrenchBroom::View::CollectDragFaces
operator ()	View/ResizeBrushesTool.cpp	/^            void operator()(const Model::BrushEdge* edge) {$/;"	f	language:C++	struct:TrenchBroom::View::CollectVertices
operator ()	View/SmartColorEditor.cpp	/^            bool operator()(const wxColor& lhs, const wxColor& rhs) const {$/;"	f	language:C++	struct:TrenchBroom::View::ColorCmp
operator ()	View/SmartColorEditor.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::ConvertColorRange
operator ()	View/SmartColorEditor.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::SetColor
operator ()	View/SmartSpawnflagsEditor.cpp	/^            void operator()(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::UpdateSpawnflag
operator *	CastIterator.h	/^        OutType& operator*() const {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator *	FilterIterator.h	/^        reference operator*() const {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator *	FilterIterator.h	/^        reference operator*() {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator *	Mat.h	/^    const Mat<T,R,C> operator* (const Mat<T,C,R>& right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^    const Mat<T,R,C> operator* (const T right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^    const Vec<T,C-1> operator* (const Vec<T,C-1>& right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^    const Vec<T,C> operator* (const Vec<T,C>& right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^    const typename Vec<T,C-1>::List operator* (const typename Vec<T,C-1>::List& right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^    const typename Vec<T,C>::List operator* (const typename Vec<T,C>::List& right) const {$/;"	f	language:C++	class:Mat
operator *	Mat.h	/^Mat<T,R,C> operator* (const T left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *	Mat.h	/^const Vec<T,R-1> operator* (const Vec<T,R-1>& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *	Mat.h	/^const Vec<T,R> operator* (const Vec<T,R> left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *	Mat.h	/^const typename Vec<T,R-1>::List operator* (const typename Vec<T,R-1>::List& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *	Mat.h	/^const typename Vec<T,R>::List operator* (const typename Vec<T,R>::List& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *	NestedHierarchyIterator.h	/^        ValueType& operator*() {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator *	NestedIterator.h	/^        reference operator*()  const {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator *	Quat.h	/^    const Quat<T> operator* (const Quat<T>& right) const {$/;"	f	language:C++	class:Quat
operator *	Quat.h	/^    const Quat<T> operator* (const T right) const {$/;"	f	language:C++	class:Quat
operator *	Quat.h	/^    const Vec<T,3> operator* (const Vec<T,3>& right) const {$/;"	f	language:C++	class:Quat
operator *	Quat.h	/^Quat<T> operator*(const T left, const Quat<T>& right) {$/;"	f	language:C++
operator *	Vec.h	/^    const Vec<T,S> operator* (const T right) const {$/;"	f	language:C++	class:Vec
operator *	Vec.h	/^    const Vec<T,S> operator* (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator *	Vec.h	/^Vec<T,S> operator*(const T left, const Vec<T,S>& right) {$/;"	f	language:C++
operator *	Vec.h	/^typename Vec<T,S>::List operator*(const T left, const typename Vec<T,S>::List& right) {$/;"	f	language:C++
operator *	Vec.h	/^typename Vec<T,S>::List operator*(const typename Vec<T,S>::List& left, const T right) {$/;"	f	language:C++
operator *=	Mat.h	/^    Mat<T,R,C>& operator*= (const Mat<T,C,R>& right) {$/;"	f	language:C++	class:Mat
operator *=	Mat.h	/^    Mat<T,R,C>& operator*= (const T right) {$/;"	f	language:C++	class:Mat
operator *=	Mat.h	/^Vec<T,R-1>& operator*= (Vec<T,R-1>& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *=	Mat.h	/^Vec<T,R>& operator*= (Vec<T,R>& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *=	Mat.h	/^const typename Vec<T,R>::List& operator*= (typename Vec<T,R>::List& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *=	Mat.h	/^typename Vec<T,R-1>::List& operator*= (typename Vec<T,R-1>::List& left, const Mat<T,R,C>& right) {$/;"	f	language:C++
operator *=	Quat.h	/^    Quat<T>& operator*= (const Quat<T>& right) {$/;"	f	language:C++	class:Quat
operator *=	Quat.h	/^    Quat<T>& operator*= (const T right) {$/;"	f	language:C++	class:Quat
operator *=	Vec.h	/^    Vec<T,S>& operator*= (const T right) {$/;"	f	language:C++	class:Vec
operator *=	Vec.h	/^    Vec<T,S>& operator*= (const Vec<T,S>& right) {$/;"	f	language:C++	class:Vec
operator +	IO/Path.cpp	/^        Path Path::operator+ (const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
operator +	Mat.h	/^    const Mat<T,R,C> operator+ (const Mat<T,R,C>& right) const {$/;"	f	language:C++	class:Mat
operator +	Model/SelectionResult.cpp	/^        SelectionResult SelectionResult::operator+(const SelectionResult& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
operator +	Vec.h	/^    const Vec<T,S> operator+ (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator +	Vec.h	/^typename Vec<T,S>::List operator+(const Vec<T,S>& left, const typename Vec<T,S>::List& right) {$/;"	f	language:C++
operator +	Vec.h	/^typename Vec<T,S>::List operator+(const typename Vec<T,S>::List& left, const Vec<T,S>& right) {$/;"	f	language:C++
operator ++	CastIterator.h	/^        CastIterator operator++(int) {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator ++	CastIterator.h	/^        CastIterator& operator++() {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator ++	FilterIterator.h	/^        FilterIterator operator++(int) {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator ++	FilterIterator.h	/^        FilterIterator& operator++() {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator ++	NestedHierarchyIterator.h	/^        NestedHierarchyIterator operator++(int) {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator ++	NestedHierarchyIterator.h	/^        NestedHierarchyIterator& operator++() {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator ++	NestedIterator.h	/^        NestedIterator operator++(int) {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator ++	NestedIterator.h	/^        NestedIterator& operator++() {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator +=	Mat.h	/^    Mat<T,R,C>& operator+= (const Mat<T,R,C>& right) {$/;"	f	language:C++	class:Mat
operator +=	Model/SelectionResult.cpp	/^        SelectionResult& SelectionResult::operator+=(const SelectionResult& rhs) {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
operator +=	Vec.h	/^    Vec<T,S>& operator+= (const Vec<T,S>& right) {$/;"	f	language:C++	class:Vec
operator -	Mat.h	/^    const Mat<T,R,C> operator- () const {$/;"	f	language:C++	class:Mat
operator -	Mat.h	/^    const Mat<T,R,C> operator- (const Mat<T,R,C>& right) const {$/;"	f	language:C++	class:Mat
operator -	Quat.h	/^    const Quat<T> operator- () const {$/;"	f	language:C++	class:Quat
operator -	Vec.h	/^    const Vec<T,S> operator- () const {$/;"	f	language:C++	class:Vec
operator -	Vec.h	/^    const Vec<T,S> operator- (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator -=	Mat.h	/^    Mat<T,R,C>& operator-= (const Mat<T,R,C>& right) {$/;"	f	language:C++	class:Mat
operator -=	Vec.h	/^    Vec<T,S>& operator-= (const Vec<T,S>& right) {$/;"	f	language:C++	class:Vec
operator ->	CastIterator.h	/^        OutType* operator->() const {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator ->	FilterIterator.h	/^        pointer operator->() const {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator ->	FilterIterator.h	/^        pointer operator->() {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator ->	NestedHierarchyIterator.h	/^        ValueType* operator->() const {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator ->	NestedIterator.h	/^        pointer operator->() const {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator /	Mat.h	/^    const Mat<T,R,C> operator\/ (const T right) const {$/;"	f	language:C++	class:Mat
operator /	Vec.h	/^    const Vec<T,S> operator\/ (const T right) const {$/;"	f	language:C++	class:Vec
operator /	Vec.h	/^    const Vec<T,S> operator\/ (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator /=	Mat.h	/^    Mat<T,R,C>& operator\/= (const T right) {$/;"	f	language:C++	class:Mat
operator /=	Vec.h	/^    Vec<T,S>& operator\/= (const T right) {$/;"	f	language:C++	class:Vec
operator /=	Vec.h	/^    Vec<T,S>& operator\/= (const Vec<T,S>& right) {$/;"	f	language:C++	class:Vec
operator <	Assets/ModelDefinition.cpp	/^        bool ModelSpecification::operator< (const ModelSpecification& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Assets::ModelSpecification
operator <	Hit.cpp	/^    bool Hit::operator< (const Hit& other) const {$/;"	f	language:C++	class:TrenchBroom::Hit
operator <	IO/Path.cpp	/^        bool Path::operator< (const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
operator <	Line.h	/^    bool operator< (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator <	Model/EntityProperties.cpp	/^        bool EntityProperty::operator<(const EntityProperty& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperty
operator <	Plane.h	/^    bool operator< (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator <	Renderer/FontDescriptor.cpp	/^        bool FontDescriptor::operator< (const FontDescriptor& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
operator <	Renderer/OutlineTracer.cpp	/^        bool OutlineTracer::Position::operator< (const Position& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer::Position
operator <	Renderer/RenderUtils.cpp	/^                bool operator< (const MidPointIndex& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SphereBuilder::MidPointIndex
operator <	StringIndex.h	/^            bool operator<(const Node& rhs) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
operator <	Vec.h	/^    bool operator< (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator <<	Exceptions.h	/^        C& operator<< (T value) {$/;"	f	language:C++	class:TrenchBroom::ExceptionStream
operator <=	Line.h	/^    bool operator<= (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator <=	Plane.h	/^    bool operator<= (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator <=	Vec.h	/^    bool operator<= (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator =	Assets/Palette.cpp	/^        void Palette::operator= (Palette other) {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
operator =	Mat.h	/^    Mat<T,R,C>& operator= (const Mat<T,R,C>& right) {$/;"	f	language:C++	class:Mat
operator =	Renderer/EdgeRenderer.cpp	/^        EdgeRenderer& EdgeRenderer::operator= (EdgeRenderer other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
operator =	Renderer/FaceRenderer.cpp	/^        FaceRenderer& FaceRenderer::operator= (FaceRenderer other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
operator =	Renderer/FontTexture.cpp	/^        FontTexture& FontTexture::operator=(FontTexture other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
operator =	Renderer/TriangleRenderer.cpp	/^        TriangleRenderer& TriangleRenderer::operator= (TriangleRenderer other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
operator =	Renderer/VertexArray.cpp	/^        VertexArray& VertexArray::operator= (VertexArray other) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
operator =	Vec.h	/^    Vec<T,S>& operator= (const Vec<T,O>& right) {$/;"	f	language:C++	class:Vec
operator ==	Assets/PropertyDefinition.cpp	/^        bool ChoicePropertyOption::operator==(const ChoicePropertyOption& other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
operator ==	Assets/PropertyDefinition.cpp	/^        bool FlagsPropertyOption::operator==(const FlagsPropertyOption& other) const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
operator ==	Assets/TextureCollectionSpec.cpp	/^        bool TextureCollectionSpec::operator==(const TextureCollectionSpec& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
operator ==	BBox.h	/^    bool operator== (const BBox<T,S>& right) const {$/;"	f	language:C++	class:BBox
operator ==	CastIterator.h	/^        bool operator==(const CastIterator<Iterator, OutType>& other) const {$/;"	f	language:C++	class:TrenchBroom::CastIterator
operator ==	Edge.h	/^        bool operator==(const Edge<T,S>& other) const {$/;"	f	language:C++	struct:TrenchBroom::Edge
operator ==	FilterIterator.h	/^        bool operator==(const FilterIterator<Iterator, Filter>& other) const {$/;"	f	language:C++	class:TrenchBroom::FilterIterator
operator ==	IO/Path.cpp	/^        bool Path::operator== (const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
operator ==	IO/Wad.cpp	/^        bool MipSize::operator== (const MipSize& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::MipSize
operator ==	Line.h	/^    bool operator== (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator ==	Mat.h	/^    bool operator== (const Mat<T,R,C>& right) const {$/;"	f	language:C++	class:Mat
operator ==	NestedHierarchyIterator.h	/^        bool operator==(const NestedHierarchyIterator<OuterIterator, InnerAdapter, ValueType>& other) const {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
operator ==	NestedIterator.h	/^        bool operator==(const NestedIterator<OuterIterator, InnerAdapter>& other) const {$/;"	f	language:C++	class:TrenchBroom::NestedIterator
operator ==	Notifier.h	/^            bool operator==(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier0::Observer
operator ==	Notifier.h	/^            bool operator==(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier1::Observer
operator ==	Notifier.h	/^            bool operator==(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier2::Observer
operator ==	Notifier.h	/^            bool operator==(const Observer& rhs) const {$/;"	f	language:C++	class:TrenchBroom::Notifier3::Observer
operator ==	Plane.h	/^    bool operator== (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator ==	Polygon.h	/^        bool operator==(const Polygon<T,S>& rhs) const {$/;"	f	language:C++	struct:TrenchBroom::Polygon
operator ==	Preference.h	/^        const bool operator== (const PreferenceBase& other) const {$/;"	f	language:C++	class:TrenchBroom::PreferenceBase
operator ==	Ray.h	/^    bool operator== (const Ray<T,S>& other) const {$/;"	f	language:C++	class:Ray
operator ==	Renderer/Camera.cpp	/^        bool Camera::Viewport::operator== (const Viewport& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera::Viewport
operator ==	Renderer/OutlineTracer.cpp	/^        bool OutlineTracer::Position::operator== (const Position& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer::Position
operator ==	Renderer/Vertex.h	/^            bool operator==(const Vertex1<A1>& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex1
operator ==	Renderer/Vertex.h	/^            bool operator==(const Vertex2<A1, A2>& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex2
operator ==	Renderer/Vertex.h	/^            bool operator==(const Vertex3<A1, A2, A3>& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex3
operator ==	Renderer/Vertex.h	/^            bool operator==(const Vertex4<A1, A2, A3, A4>& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex4
operator ==	Renderer/Vertex.h	/^            bool operator==(const Vertex5<A1, A2, A3, A4, A5>& other) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vertex5
operator ==	Vec.h	/^    bool operator== (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator >	IO/Path.cpp	/^        bool Path::operator> (const Path& rhs) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
operator >	Line.h	/^    bool operator> (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator >	Plane.h	/^    bool operator> (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator >	Vec.h	/^    bool operator> (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator >=	Line.h	/^    bool operator>= (const Line<T,S>& other) const {$/;"	f	language:C++	class:Line
operator >=	Plane.h	/^    bool operator>= (const Plane<T,S>& other) const {$/;"	f	language:C++	class:Plane
operator >=	Vec.h	/^    bool operator>= (const Vec<T,S>& right) const {$/;"	f	language:C++	class:Vec
operator []	BBox.h	/^        const Range& operator[] (const size_t index) const {$/;"	f	language:C++	class:BBox::RelativePosition
operator []	ByteBuffer.h	/^    T& operator[](const size_t index) {$/;"	f	language:C++	class:Buffer
operator []	ByteBuffer.h	/^    const T& operator[](const size_t index) const {$/;"	f	language:C++	class:Buffer
operator []	ConfigTypes.cpp	/^    const ConfigEntry& ConfigList::operator[](const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::ConfigList
operator []	ConfigTypes.cpp	/^    const ConfigEntry& ConfigTable::operator[](const String& key) const {$/;"	f	language:C++	class:TrenchBroom::ConfigTable
operator []	Mat.h	/^    Vec<T,R>& operator[] (const size_t index) {$/;"	f	language:C++	class:Mat
operator []	Mat.h	/^    const Vec<T,R>& operator[] (const size_t index) const {$/;"	f	language:C++	class:Mat
operator []	Renderer/RenderUtils.cpp	/^                const size_t& operator[] (size_t i) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::SphereBuilder::Triangle
operator []	Vec.h	/^    T& operator[] (const size_t index) {$/;"	f	language:C++	class:Vec
operator []	Vec.h	/^    const T& operator[] (const size_t index) const {$/;"	f	language:C++	class:Vec
operator []	View/CellLayout.h	/^            const Cell& operator[] (const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
operator []	View/CellLayout.h	/^            const Group& operator[] (const size_t index) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
operator []	View/CellLayout.h	/^            const Row& operator[] (const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
operator []	View/Clipper.cpp	/^        const Clipper::ClipHandlePoint& Clipper::ClipHandlePoints::operator[](const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
operator []	View/Clipper.cpp	/^        const Vec3& Clipper::ClipPoints::operator[](const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
operator const ConfigList&	ConfigTypes.cpp	/^    ConfigEntry::operator const ConfigList&() const {$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
operator const ConfigTable&	ConfigTypes.cpp	/^    ConfigEntry::operator const ConfigTable&() const {$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
operator const ConfigValue&	ConfigTypes.cpp	/^    ConfigEntry::operator const ConfigValue&() const {$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
operator const String&	ConfigTypes.cpp	/^    ConfigEntry::operator const String&() const {$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
operator const String&	ConfigTypes.cpp	/^    ConfigValue::operator const String&() const {$/;"	f	language:C++	class:TrenchBroom::ConfigValue
operator delete	Allocator.h	/^    void operator delete(void* block) {$/;"	f	language:C++	class:Allocator
operator new	Allocator.h	/^    void* operator new(size_t size) {$/;"	f	language:C++	class:Allocator
option	Assets/PropertyDefinition.cpp	/^        const FlagsPropertyOption* FlagsPropertyDefinition::option(const int value) const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
options	Assets/PropertyDefinition.cpp	/^        const ChoicePropertyOption::List& ChoicePropertyDefinition::options() const {$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyDefinition
options	Assets/PropertyDefinition.cpp	/^        const FlagsPropertyOption::List& FlagsPropertyDefinition::options() const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyDefinition
orbit	Renderer/Camera.cpp	/^        void Camera::orbit(const Vec3f& center, const float horizontal, const float vertical) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
orbit	View/CameraTool.cpp	/^        bool CameraTool::orbit(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
orderedDifference	CollectionUtils.h	/^    void orderedDifference(std::vector<T>& minuend, const std::vector<T>& subtrahend) {$/;"	f	language:C++	namespace:VectorUtils
orderedDifference	CollectionUtils.h	/^    void orderedDifference(std::vector<T>& minuend, const std::vector<T>& subtrahend, const Compare& cmp) {$/;"	f	language:C++	namespace:VectorUtils
orderedEdgeVec	Model/FaceAdjacencyGraph.cpp	/^        Vec3 FaceAdjacencyGraph::orderedEdgeVec(const BrushEdge* edge) const {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
origin	Model/Entity.cpp	/^        Vec3 Entity::origin() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
origin	Ray.h	/^    Vec<T,S> origin;$/;"	m	language:C++	class:Ray
origin	View/RotateToolHelper.h	/^            Vec3 origin;$/;"	m	language:C++	struct:TrenchBroom::View::RotateInfo
origin	View/TexturingViewHelper.cpp	/^        const Vec3& TexturingViewHelper::origin() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
orthoMatrix	Mat.h	/^const Mat<T,4,4> orthoMatrix(const T nearPlane, const T farPlane, const T left, const T top, const T right, const T bottom) {$/;"	f	language:C++
orthogonalBillboardMatrix	Renderer/Camera.cpp	/^        const Mat4x4f Camera::orthogonalBillboardMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
orthogonalDragPlane	Plane.h	/^const Plane<T,3> orthogonalDragPlane(const Vec<T,3>& position, const Vec<T,3>& direction) {$/;"	f	language:C++
os	.ycm_extra_conf.py	/^import os$/;"	i	language:Python
outerMargin	View/CellLayout.h	/^            float outerMargin() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
overLast	Vec.h	/^    Vec<T,S-1> overLast() const {$/;"	f	language:C++	class:Vec
overlayBackgroundColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::overlayBackgroundColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
overlayTextColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::overlayTextColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
overridden	Assets/Texture.cpp	/^        bool Texture::overridden() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
overrideBoundsColor	Renderer/EntityRenderer.cpp	/^        bool EntityRenderer::overrideBoundsColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
packageFormat	Model/GameConfig.h	/^                String packageFormat;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FileSystemConfig
paintMac	View/ContainerBar.cpp	/^        void ContainerBar::paintMac(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ContainerBar
paintOther	View/ContainerBar.cpp	/^        void ContainerBar::paintOther(wxPaintEvent& event) {$/;"	f	language:C++	class:TrenchBroom::View::ContainerBar
palette	IO/ImageLoader.cpp	/^        const Buffer<unsigned char>& ImageLoader::palette() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
palette	IO/ImageLoaderImpl.cpp	/^        const Buffer<unsigned char>& ImageLoaderImpl::palette() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
palette	Model/GameConfig.h	/^                IO::Path palette;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::TextureConfig
paletteSize	IO/ImageLoader.cpp	/^        size_t ImageLoader::paletteSize() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
paletteSize	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::paletteSize() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
pan	View/CameraTool.cpp	/^        bool CameraTool::pan(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
panSpeedH	View/CameraTool.cpp	/^        float CameraTool::panSpeedH() const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
panSpeedV	View/CameraTool.cpp	/^        float CameraTool::panSpeedV() const {$/;"	f	language:C++	class:TrenchBroom::View::CameraTool
panView	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::panView(const Vec3f& delta) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
panView	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::panView(const wxPoint& lastPos, const wxPoint& currentPos) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
parallel	Ray.h	/^        bool parallel;$/;"	m	language:C++	struct:Ray::LineDistance
parallelTo	Vec.h	/^    bool parallelTo(const Vec<T,S>& other, const T epsilon = Math::Constants<T>::AlmostZero) const {$/;"	f	language:C++	class:Vec
parent	Model/Brush.cpp	/^        Entity* Brush::parent() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
parent	Model/BrushFace.cpp	/^        Brush* BrushFace::parent() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
parent	Model/ModelTypes.h	/^            Object* parent;$/;"	m	language:C++	struct:TrenchBroom::Model::ObjectParentPair
parent	View/Menu.cpp	/^        const MenuItemParent* MenuItem::parent() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItem
parse	IO/ConfigParser.cpp	/^        ConfigEntry::Ptr ConfigParser::parse() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
parse	IO/GameConfigParser.cpp	/^        Model::GameConfig GameConfigParser::parse() {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseBaseClass	IO/FgdParser.cpp	/^        EntityDefinitionClassInfo FgdParser::parseBaseClass() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseBounds	IO/DefParser.cpp	/^        BBox3 DefParser::parseBounds() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseBrush	IO/QuakeMapParser.cpp	/^        Model::Brush* QuakeMapParser::parseBrush(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseBrushes	IO/MapParser.cpp	/^        Model::BrushList MapParser::parseBrushes(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::MapParser
parseBrushes	Model/Game.cpp	/^        Model::BrushList Game::parseBrushes(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
parseBrushes	View/MapDocument.cpp	/^        Model::BrushList MapDocument::parseBrushes(const String& str) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
parseChoicesProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseChoicesProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseClass	IO/FgdParser.cpp	/^        EntityDefinitionClassInfo FgdParser::parseClass() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseColor	IO/DefParser.cpp	/^        Color DefParser::parseColor() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseColor	IO/FgdParser.cpp	/^        Color FgdParser::parseColor() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::Color::parseColor(const String& str) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color
parseDefinition	IO/DefParser.cpp	/^        Assets::EntityDefinition* DefParser::parseDefinition() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseDefinition	IO/FgdParser.cpp	/^        Assets::EntityDefinition* FgdParser::parseDefinition() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseDefinitions	IO/EntityDefinitionParser.cpp	/^        Assets::EntityDefinitionList EntityDefinitionParser::parseDefinitions() {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionParser
parseDescription	IO/DefParser.cpp	/^        String DefParser::parseDescription() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseDynamicModel	IO/FgdParser.cpp	/^        Assets::ModelDefinitionPtr FgdParser::parseDynamicModel() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseEdgeInfos	IO/Bsp29Parser.cpp	/^        Bsp29Parser::EdgeInfoList Bsp29Parser::parseEdgeInfos() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseEntities	IO/MapParser.cpp	/^        Model::EntityList MapParser::parseEntities(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::MapParser
parseEntities	Model/Game.cpp	/^        Model::EntityList Game::parseEntities(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
parseEntities	View/MapDocument.cpp	/^        Model::EntityList MapDocument::parseEntities(const String& str) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
parseEntity	IO/QuakeMapParser.cpp	/^        Model::Entity* QuakeMapParser::parseEntity(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseEntityConfig	IO/GameConfigParser.cpp	/^        Model::GameConfig::EntityConfig GameConfigParser::parseEntityConfig(const ConfigTable& table) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseEntityProperty	IO/QuakeMapParser.cpp	/^        void QuakeMapParser::parseEntityProperty(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseEntry	IO/ConfigParser.cpp	/^        ConfigEntry::Ptr ConfigParser::parseEntry() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
parseExtraProperties	IO/QuakeMapParser.cpp	/^        void QuakeMapParser::parseExtraProperties(ExtraProperties& properties) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseFace	IO/QuakeMapParser.cpp	/^        Model::BrushFace* QuakeMapParser::parseFace(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseFaceAttribsConfig	IO/GameConfigParser.cpp	/^        Model::GameConfig::FaceAttribsConfig GameConfigParser::parseFaceAttribsConfig(const ConfigTable& table) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseFaceEdges	IO/Bsp29Parser.cpp	/^        Bsp29Parser::FaceEdgeIndexList Bsp29Parser::parseFaceEdges() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseFaceInfos	IO/Bsp29Parser.cpp	/^        Bsp29Parser::FaceInfoList Bsp29Parser::parseFaceInfos() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseFaces	IO/MapParser.cpp	/^        Model::BrushFaceList MapParser::parseFaces(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::MapParser
parseFaces	Model/Game.cpp	/^        Model::BrushFaceList Game::parseFaces(const BBox3& worldBounds, const String& str) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
parseFaces	View/MapDocument.cpp	/^        Model::BrushFaceList MapDocument::parseFaces(const String& str) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
parseFileSystemConfig	IO/GameConfigParser.cpp	/^        Model::GameConfig::FileSystemConfig GameConfigParser::parseFileSystemConfig(const ConfigTable& table) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseFlagConfig	IO/GameConfigParser.cpp	/^        Model::GameConfig::FlagConfigList GameConfigParser::parseFlagConfig(const ConfigList& list) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseFlagsProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseFlagsProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseFloatProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseFloatProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseFrame	IO/MdlParser.cpp	/^        Assets::MdlFrame* MdlParser::parseFrame(const char*& cursor, const MdlSkinTriangleList& skinTriangles, const MdlSkinVertexList& skinVertices, const size_t skinWidth, const size_t skinHeight, const Vec3f& origin, const Vec3f& scale) {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
parseFrames	IO/Md2Parser.cpp	/^        Md2Parser::Md2FrameList Md2Parser::parseFrames(const char* begin, const size_t frameCount, const size_t frameVertexCount) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
parseFrames	IO/MdlParser.cpp	/^        void MdlParser::parseFrames(const char*& cursor, Assets::MdlModel& model, const size_t count, const MdlSkinTriangleList& skinTriangles, const MdlSkinVertexList& skinVertices, const size_t skinWidth, const size_t skinHeight, const Vec3f& origin, const Vec3f& scale) {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
parseIntegerProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseIntegerProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseKeyDisplayText	View/KeyboardShortcut.cpp	/^        int KeyboardShortcut::parseKeyDisplayText(const wxString string) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
parseList	IO/ConfigParser.cpp	/^        ConfigEntry::Ptr ConfigParser::parseList() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
parseList	IO/GameConfigParser.cpp	/^        StringList GameConfigParser::parseList(const ConfigList& list) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseMap	IO/MapParser.cpp	/^        Model::Map* MapParser::parseMap(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::IO::MapParser
parseMeshes	IO/Md2Parser.cpp	/^        Md2Parser::Md2MeshList Md2Parser::parseMeshes(const char* begin, const size_t commandCount) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
parseModel	IO/EntityModelParser.cpp	/^        Assets::EntityModel* EntityModelParser::parseModel() {$/;"	f	language:C++	class:TrenchBroom::IO::EntityModelParser
parseModels	IO/Bsp29Parser.cpp	/^        Assets::Bsp29Model* Bsp29Parser::parseModels(Assets::TextureCollection* textureCollection, const TextureInfoList& textureInfos, const Vec3f::List& vertices, const EdgeInfoList& edgeInfos, const FaceInfoList& faceInfos, const FaceEdgeIndexList& faceEdges) {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseModels	IO/FgdParser.cpp	/^        Assets::ModelDefinitionList FgdParser::parseModels() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parsePointClass	IO/FgdParser.cpp	/^        Assets::EntityDefinition* FgdParser::parsePointClass() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseProperties	IO/DefParser.cpp	/^        void DefParser::parseProperties(Assets::PropertyDefinitionMap& properties, Assets::ModelDefinitionList& modelDefinitions, StringList& superClasses) {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseProperties	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionMap FgdParser::parseProperties() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseProperty	IO/DefParser.cpp	/^        bool DefParser::parseProperty(Assets::PropertyDefinitionMap& properties, Assets::ModelDefinitionList& modelDefinitions, StringList& superClasses) {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseSet	IO/GameConfigParser.cpp	/^        StringSet GameConfigParser::parseSet(const ConfigList& list) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseShortcut	View/KeyboardShortcut.cpp	/^        bool KeyboardShortcut::parseShortcut(const wxString& string, int& modifierKey1, int& modifierKey2, int& modifierKey3, int& key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
parseSize	IO/FgdParser.cpp	/^        BBox3 FgdParser::parseSize() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseSkinTriangles	IO/MdlParser.cpp	/^        MdlParser::MdlSkinTriangleList MdlParser::parseSkinTriangles(const char*& cursor, const size_t count) {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
parseSkinVertices	IO/MdlParser.cpp	/^        MdlParser::MdlSkinVertexList MdlParser::parseSkinVertices(const char*& cursor, const size_t count) {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
parseSkins	IO/Md2Parser.cpp	/^        Md2Parser::Md2SkinList Md2Parser::parseSkins(const char* begin, const size_t skinCount) {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser
parseSkins	IO/MdlParser.cpp	/^        void MdlParser::parseSkins(const char*& cursor, Assets::MdlModel& model, const size_t count, const size_t width, const size_t height) {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
parseSolidClass	IO/FgdParser.cpp	/^        Assets::EntityDefinition* FgdParser::parseSolidClass() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseSpawnflags	IO/DefParser.cpp	/^        Assets::PropertyDefinitionPtr DefParser::parseSpawnflags() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseStaticModel	IO/FgdParser.cpp	/^        Assets::ModelDefinitionPtr FgdParser::parseStaticModel() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseStringProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseStringProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseSuperClasses	IO/FgdParser.cpp	/^        StringList FgdParser::parseSuperClasses() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseTable	IO/ConfigParser.cpp	/^        ConfigEntry::Ptr ConfigParser::parseTable() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
parseTextureConfig	IO/GameConfigParser.cpp	/^        Model::GameConfig::TextureConfig GameConfigParser::parseTextureConfig(const ConfigTable& table) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
parseTextureInfos	IO/Bsp29Parser.cpp	/^        Bsp29Parser::TextureInfoList Bsp29Parser::parseTextureInfos() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseTextures	IO/Bsp29Parser.cpp	/^        Assets::TextureCollection* Bsp29Parser::parseTextures() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
parseType_TargetDestinationProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseType_TargetDestinationProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseType_TargetSourceProperty	IO/FgdParser.cpp	/^        Assets::PropertyDefinitionPtr FgdParser::parseType_TargetSourceProperty(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseValue	IO/ConfigParser.cpp	/^        ConfigEntry::Ptr ConfigParser::parseValue() {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
parseVector	IO/DefParser.cpp	/^        Vec3 DefParser::parseVector() {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
parseVector	IO/FgdParser.cpp	/^        Vec3 FgdParser::parseVector() {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
parseVector	IO/QuakeMapParser.cpp	/^        Vec3 QuakeMapParser::parseVector() {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
parseVertices	IO/Bsp29Parser.cpp	/^        Vec3f::List Bsp29Parser::parseVertices() {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
partiallySelected	Model/Object.cpp	/^        bool Object::partiallySelected() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
pasteObjects	View/MapFrame.cpp	/^        void MapFrame::pasteObjects(const Model::ObjectList& objects, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
pasteObjectsDelta	View/MapView.cpp	/^        Vec3 MapView::pasteObjectsDelta(const BBox3& bounds) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
path	Assets/ModelDefinition.h	/^            IO::Path path;$/;"	m	language:C++	struct:TrenchBroom::Assets::ModelSpecification
path	Assets/TextureCollectionSpec.cpp	/^        const IO::Path& TextureCollectionSpec::path() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollectionSpec
path	Model/EntityDefinitionFileSpec.cpp	/^        const IO::Path& EntityDefinitionFileSpec::path() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityDefinitionFileSpec
path	Model/GameConfig.cpp	/^        const IO::Path& GameConfig::path() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
path	Preference.h	/^        const IO::Path& path() const {$/;"	f	language:C++	class:TrenchBroom::Preference
path	View/ChoosePathTypeDialog.cpp	/^        const IO::Path& ChoosePathTypeDialog::path() const {$/;"	f	language:C++	class:TrenchBroom::View::ChoosePathTypeDialog
path	View/MapDocument.cpp	/^        const IO::Path& MapDocument::path() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
path	View/Menu.cpp	/^        String ShortcutMenuItem::path() const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
peekToken	IO/Tokenizer.h	/^            Token peekToken() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
performClip	View/ClipTool.cpp	/^        void ClipTool::performClip() {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
performClip	View/MapView.cpp	/^        void MapView::performClip() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
performDo	Controller/Command.cpp	/^        bool Command::performDo() {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
performMove	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::performMove(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
performMove	View/MoveTextureHelper.cpp	/^        void MoveTextureHelper::performMove(const Vec3& delta, const Model::BrushFaceList& faces, const Vec3::List& normals) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
performUndo	Controller/Command.cpp	/^        bool Command::performUndo() {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
perspectiveMatrix	Mat.h	/^const Mat<T,4,4> perspectiveMatrix(const T fov, const T nearPlane, const T farPlane, const int width, const int height) {$/;"	f	language:C++
pick	Model/Brush.cpp	/^        void Brush::pick(const Ray3& ray, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
pick	Model/Entity.cpp	/^        void Entity::pick(const Ray3& ray, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
pick	Model/Picker.cpp	/^        Hits Picker::pick(const Ray3& ray) {$/;"	f	language:C++	class:TrenchBroom::Model::Picker
pick	View/MapDocument.cpp	/^        Hits MapDocument::pick(const Ray3& ray) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
pick	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::Hit RotateObjectsHandle::pick(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
pick	View/TexturingViewHelper.cpp	/^        Hits TexturingViewHelper::pick(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
pick	View/Tool.h	/^            void pick(const InputState& inputState, Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
pick	View/ToolBox.cpp	/^        Hits ToolBoxHelper::pick(const Ray3& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxHelper
pick	View/VertexHandleManager.cpp	/^        void VertexHandleManager::pick(const Ray3& ray, Hits& hits, bool splitMode) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
pick3DCamera	View/MiniMapBaseView.cpp	/^        float MiniMapBaseView::pick3DCamera(const Ray3f& pickRay) const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
pickFrustum	Renderer/Camera.cpp	/^        float Camera::pickFrustum(const float size, const Ray3f& ray) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
pickHandle	View/VertexHandleManager.cpp	/^        Hit VertexHandleManager::pickHandle(const Ray3& ray, const Vec3& position, Hit::HitType type) const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
pickNearFaceHit	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::pickNearFaceHit(const InputState& inputState, Hits& hits) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
pickPointHandle	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::Hit RotateObjectsHandle::pickPointHandle(const Ray3& pickRay, const Vec3& position, const HitArea area) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
pickRay	Renderer/Camera.cpp	/^        Ray3f Camera::pickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
pickRay	View/InputState.cpp	/^        const Ray3& InputState::pickRay() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
pickRay	View/ToolBox.cpp	/^        Ray3 ToolBoxHelper::pickRay(const int x, const int y) const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxHelper
pickRay	View/ToolBox.cpp	/^        const Ray3& ToolBox::pickRay() const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
pickable	Model/ModelFilter.cpp	/^        bool ModelFilter::pickable(const BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
pickable	Model/ModelFilter.cpp	/^        bool ModelFilter::pickable(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
pixelSize	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::pixelSize(const ImageLoader::PixelFormat format) {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
pixels	IO/ImageLoader.cpp	/^        const Buffer<unsigned char>& ImageLoader::pixels(const PixelFormat format) const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
pixels	IO/ImageLoaderImpl.cpp	/^        const Buffer<unsigned char>& ImageLoaderImpl::pixels(const ImageLoader::PixelFormat format) const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
plane	View/RotateToolHelper.h	/^            Plane3 plane;$/;"	m	language:C++	struct:TrenchBroom::View::RotateInfo
planeContainingVector	Plane.h	/^    static const Plane<T,S> planeContainingVector(const Vec<T,S>& position, const Vec<T,S>& normalizedVector, const Vec<T,S>& viewPoint) {$/;"	f	language:C++	class:Plane
planeDrag	View/MoveToolHelper.cpp	/^        bool MoveHelper::planeDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
planeDrag	View/RotateToolHelper.cpp	/^        bool RotateHelper::planeDrag(const InputState& inputState, const Vec3& lastPoint, const Vec3& curPoint, Vec3& refPoint) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
planeNormalIndex	Model/ParaxialTexCoordSystem.cpp	/^        size_t ParaxialTexCoordSystem::planeNormalIndex(const Vec3& normal) {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
planeProjectionMatrix	Mat.h	/^const Mat<T,4,4> planeProjectionMatrix(const T distance, const Vec<T,3>& normal, const Vec<T,3>& direction) {$/;"	f	language:C++
point	Line.h	/^    Vec<T,S> point;$/;"	m	language:C++	class:Line
point	Ray.h	/^        Vec<T,S> point;$/;"	m	language:C++	struct:Ray::LineDistance
point	View/RotateObjectsHandle.cpp	/^        const Vec3& RotateObjectsHandle::Hit::point() const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle::Hit
pointAtDistance	Line.h	/^    const Vec<T,S> pointAtDistance(const T distance) const {$/;"	f	language:C++	class:Line
pointAtDistance	Ray.h	/^    const Vec<T,S> pointAtDistance(const T distance) const {$/;"	f	language:C++	class:Ray
pointDistance	Plane.h	/^    T pointDistance(const Vec<T,S>& point) const {$/;"	f	language:C++	class:Plane
pointFile	View/MapDocument.cpp	/^        Model::PointFile& MapDocument::pointFile() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
pointFilePath	Model/PointFile.cpp	/^        IO::Path PointFile::pointFilePath(const IO::Path& mapFilePath) {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
pointFileWasLoadedNotifier	View/MapDocument.h	/^            Notifier0 pointFileWasLoadedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
pointFileWasLoadedOrUnloaded	Renderer/MapRenderer.cpp	/^        void MapRenderer::pointFileWasLoadedOrUnloaded() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
pointFileWasUnloadedNotifier	View/MapDocument.h	/^            Notifier0 pointFileWasUnloadedNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
pointStatus	Model/BrushVertex.cpp	/^        Math::PointStatus::Type pointStatus(const Plane3& plane, const BrushVertexList& vertices) {$/;"	f	language:C++	namespace:TrenchBroom::Model
pointStatus	Plane.h	/^    Math::PointStatus::Type pointStatus(const Vec<T,S>& point, const T epsilon = Math::Constants<T>::PointStatusEpsilon) const {$/;"	f	language:C++	class:Plane
pointStatus	Ray.h	/^    Math::PointStatus::Type pointStatus(const Vec<T,S>& point) const {$/;"	f	language:C++	class:Ray
pointer	CastIterator.h	/^        typedef OutType* pointer;$/;"	t	language:C++	class:TrenchBroom::CastIterator
pointer	FilterIterator.h	/^        typedef typename Iterator::pointer pointer;$/;"	t	language:C++	class:TrenchBroom::FilterIterator
pointer	NestedHierarchyIterator.h	/^        typedef ValueType* pointer;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
pointer	NestedIterator.h	/^        typedef typename InnerIterator::pointer pointer;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
points	Model/BrushFace.cpp	/^        const BrushFace::Points& BrushFace::points() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
points	Model/PointFile.cpp	/^        const Vec3f::List& PointFile::points() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
points	View/Clipper.cpp	/^        const Vec3* Clipper::ClipPoints::points() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
pool	Allocator.h	/^    static Pool& pool() {$/;"	f	language:C++	class:Allocator
popGroupedCommand	Controller/CommandProcessor.cpp	/^        Command::Ptr CommandProcessor::popGroupedCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
popLastCommand	Controller/CommandProcessor.cpp	/^        Command::Ptr CommandProcessor::popLastCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
popModelMatrix	Renderer/Transformation.cpp	/^        void Transformation::popModelMatrix() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
popNextCommand	Controller/CommandProcessor.cpp	/^        Command::Ptr CommandProcessor::popNextCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
popToken	IO/Tokenizer.h	/^            Token popToken() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
popTransformation	Renderer/Transformation.cpp	/^        void Transformation::popTransformation() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
pos	MathUtils.h	/^    bool pos(const T v, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
position	IO/Md2Parser.h	/^                Vec<unsigned char, 3> position;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Vertex
position	IO/Token.h	/^            size_t position() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
position	Model/BrushVertex.h	/^            Vec3 position;$/;"	m	language:C++	class:TrenchBroom::Model::BrushVertex
position	Renderer/Camera.cpp	/^        const Vec3f& Camera::position() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
position	Renderer/TextRenderer.cpp	/^        Vec3f TextAnchor::position() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextAnchor
position	View/Clipper.h	/^                Vec3 position;$/;"	m	language:C++	struct:TrenchBroom::View::Clipper::ClipHandlePoint
positionOnScreen	View/MapFrame.cpp	/^        void MapFrame::positionOnScreen(wxFrame* reference) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
pred	MathUtils.h	/^    T pred(const T index, const T count) {$/;"	f	language:C++	namespace:Math
pred	MathUtils.h	/^    T pred(const T index, const T count, const O offset) {$/;"	f	language:C++	namespace:Math
preferenceDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
preferenceDidChange	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
preferenceDidChange	View/EntityBrowser.cpp	/^        void EntityBrowser::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
preferenceDidChange	View/MapDocument.cpp	/^        void MapDocument::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
preferenceDidChange	View/MapView.cpp	/^        void MapView::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
preferenceDidChange	View/ModEditor.cpp	/^        void ModEditor::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
preferenceDidChange	View/TextureBrowser.cpp	/^        void TextureBrowser::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
preferenceDidChange	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
preferenceDidChange	View/TexturingView.cpp	/^        void TexturingView::preferenceDidChange(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
preferenceDidChangeNotifier	PreferenceManager.h	/^        Notifier1<const IO::Path&> preferenceDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::PreferenceManager
prefix	IO/Path.cpp	/^        Path Path::prefix(const size_t count) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
prefix	Model/EntityPropertyIndex.cpp	/^        EntityPropertyQuery EntityPropertyQuery::prefix(const String& pattern) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyQuery
prepare	Assets/Texture.cpp	/^        void Texture::prepare() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
prepare	Assets/TextureCollection.cpp	/^        void TextureCollection::prepare() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
prepare	Renderer/Circle.cpp	/^        void Circle::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
prepare	Renderer/Compass.cpp	/^        void Compass::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
prepare	Renderer/EdgeRenderer.cpp	/^        void EdgeRenderer::prepare() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
prepare	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::prepare() {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
prepare	Renderer/MeshRenderer.cpp	/^        void MeshRenderer::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
prepare	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::prepare() {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
prepare	Renderer/Ring.cpp	/^        void Ring::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Ring
prepare	Renderer/Sphere.cpp	/^        void Sphere::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Sphere
prepare	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::prepare() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
prepare	Renderer/VertexArray.cpp	/^        void VertexArray::prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
prepare	Renderer/VertexArray.h	/^            virtual void prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
prepare	Renderer/VertexArray.h	/^            void prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::CopyHolder
prepare	Renderer/VertexArray.h	/^            void prepare(Vbo& vbo) {$/;"	f	language:C++	class:TrenchBroom::Renderer::SwapHolder
prepareRenderers	Assets/EntityModelManager.cpp	/^        void EntityModelManager::prepareRenderers() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
prepared	Renderer/Circle.cpp	/^        bool Circle::prepared() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
prepared	Renderer/Sphere.cpp	/^        bool Sphere::prepared() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Sphere
prepared	Renderer/VertexArray.cpp	/^        bool VertexArray::prepared() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
preprend	Model/IssueManager.cpp	/^        void IssueManager::IssuePair::preprend(Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager::IssuePair
previous	Model/Issue.cpp	/^        Issue* Issue::previous() const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
previous	Renderer/VboBlock.cpp	/^        VboBlock* VboBlock::previous() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
previousPoint	Model/PointFile.cpp	/^        const Vec3f& PointFile::previousPoint() {$/;"	f	language:C++	class:TrenchBroom::Model::PointFile
print	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::print(const Position::List& positions) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
print	View/SmartColorEditor.cpp	/^        void SmartColorEditor::FloatColor::print(StringStream& str, const float f) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
processBrushAlgorithmResult	Model/Brush.cpp	/^        void Brush::processBrushAlgorithmResult(const BBox3& worldBounds, const BrushAlgorithmResult& result) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
processEdges	Model/IntersectBrushGeometryWithFace.cpp	/^        void IntersectBrushGeometryWithFace::processEdges(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
processKeys	Model/EntityLinkIssueGenerator.cpp	/^        void EntityLinkIssueGenerator::processKeys(Entity* entity, const Model::PropertyKeyList& keys, Issue*& issue) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssueGenerator
processSides	Model/IntersectBrushGeometryWithFace.cpp	/^        void IntersectBrushGeometryWithFace::processSides(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
processVertices	Model/IntersectBrushGeometryWithFace.cpp	/^        AddFaceResult::Code IntersectBrushGeometryWithFace::processVertices(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
program	Renderer/ShaderManager.cpp	/^        ShaderProgram& ShaderManager::program(const ShaderConfig& config) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderManager
project	CoordinatePlane.h	/^    Vec<T,S> project(const Vec<T,S>& point) const {$/;"	f	language:C++	class:CoordinatePlane
project	Model/TexCoordSystem.cpp	/^        Vec3 TexCoordSystem::project(const Plane3& plane, const Vec3& vec) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
project	Model/TexCoordSystem.cpp	/^        Vec3 TexCoordSystem::project(const Vec3& normal, const Vec3& vec) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
project	Model/TexCoordSystemHelper.cpp	/^        bool TexCoordSystemHelper::project() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
project	Plane.h	/^    Vec<T,S> project(const Vec<T,S>& point) const {$/;"	f	language:C++	class:Plane
project	Plane.h	/^    Vec<T,S> project(const Vec<T,S>& point, const Vec<T,S>& direction) const {$/;"	f	language:C++	class:Plane
project	Plane.h	/^    typename Vec<T,S>::List project(const typename Vec<T,S>::List& points) const {$/;"	f	language:C++	class:Plane
project	Plane.h	/^    typename Vec<T,S>::List project(const typename Vec<T,S>::List& points, const Vec<T,S>& direction) const {$/;"	f	language:C++	class:Plane
project	Renderer/Camera.cpp	/^        Vec3f Camera::project(const Vec3f& point) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
projectionMatrix	Renderer/Camera.cpp	/^        const Mat4x4f& Camera::projectionMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
properties	Model/Entity.cpp	/^        const EntityProperty::List& Entity::properties() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
properties	Model/EntityProperties.cpp	/^        const EntityProperty::List& EntityProperties::properties() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
property	Model/Entity.cpp	/^        const PropertyValue& Entity::property(const PropertyKey& key, const PropertyValue& defaultValue) const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
property	Model/EntityProperties.cpp	/^        const PropertyValue* EntityProperties::property(const PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
property	Model/GameConfig.h	/^                String property;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::TextureConfig
property	Model/QuakeEntityRotationPolicy.h	/^                const PropertyKey property;$/;"	m	language:C++	struct:TrenchBroom::Model::QuakeEntityRotationPolicy::RotationInfo
propertyAffected	Controller/EntityPropertyCommand.cpp	/^        bool EntityPropertyCommand::propertyAffected(const Model::PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
propertyCount	View/EntityPropertyGridTable.cpp	/^        size_t EntityPropertyGridTable::RowManager::propertyCount() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
propertyDefinition	Assets/EntityDefinition.cpp	/^        const PropertyDefinition* EntityDefinition::propertyDefinition(const Model::PropertyKey& propertyKey) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
propertyDefinitions	Assets/EntityDefinition.cpp	/^        const PropertyDefinitionList& EntityDefinition::propertyDefinitions() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
propertyKey	View/EntityPropertyGridTable.cpp	/^        Model::PropertyKey EntityPropertyGridTable::propertyKey(const int row) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
propertyList	IO/EntityDefinitionClassInfo.cpp	/^        Assets::PropertyDefinitionList EntityDefinitionClassInfo::propertyList() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
propertyMap	IO/EntityDefinitionClassInfo.cpp	/^        const Assets::PropertyDefinitionMap& EntityDefinitionClassInfo::propertyMap() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
propertyRow	View/EntityPropertyGridTable.cpp	/^        EntityPropertyGridTable::PropertyRow& EntityPropertyGridTable::RowManager::propertyRow(const size_t rowIndex) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
propertyRow	View/EntityPropertyGridTable.cpp	/^        const EntityPropertyGridTable::PropertyRow& EntityPropertyGridTable::RowManager::propertyRow(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
propertyValue	View/SmartSpawnflagsEditor.cpp	/^            Model::PropertyValue propertyValue(Model::Entity* entity) const {$/;"	f	language:C++	struct:TrenchBroom::View::UpdateSpawnflag
ptr	ByteBuffer.h	/^    T* ptr() {$/;"	f	language:C++	class:Buffer
ptr	ByteBuffer.h	/^    const T* ptr() const {$/;"	f	language:C++	class:Buffer
pushGroupedCommand	Controller/CommandProcessor.cpp	/^        void CommandProcessor::pushGroupedCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
pushLastCommand	Controller/CommandProcessor.cpp	/^        void CommandProcessor::pushLastCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
pushModelMatrix	Renderer/Transformation.cpp	/^        void Transformation::pushModelMatrix(const Mat4x4f& matrix) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
pushNextCommand	Controller/CommandProcessor.cpp	/^        void CommandProcessor::pushNextCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
pushToken	IO/Tokenizer.h	/^            void pushToken(const Token& token) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
pushTransformation	Renderer/Transformation.cpp	/^        void Transformation::pushTransformation(const Mat4x4f& projection, const Mat4x4f& view, const Mat4x4f& model) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
quads	Renderer/TextureFont.cpp	/^        Vec2f::List TextureFont::quads(const String& string, const bool clockwise, const Vec2f& offset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
queryExact	StringIndex.h	/^            void queryExact(const String& key, ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
queryExactMatches	StringIndex.h	/^        ValueSet queryExactMatches(const String& prefix) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex
queryNumbered	StringIndex.h	/^            void queryNumbered(const String& prefix, ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
queryNumberedMatches	StringIndex.h	/^        ValueSet queryNumberedMatches(const String& prefix) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex
queryPrefix	StringIndex.h	/^            void queryPrefix(const String& prefix, ValueSet& result) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
queryPrefixMatches	StringIndex.h	/^        ValueSet queryPrefixMatches(const String& prefix) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex
quickFixes	Model/Issue.cpp	/^        const QuickFix::List& Issue::quickFixes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
r	Color.cpp	/^float Color::r() const {$/;"	f	language:C++	class:Color
r	Quat.h	/^    T r;$/;"	m	language:C++	class:Quat
r	View/SmartColorEditor.h	/^                T r() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color_
radians	MathUtils.h	/^    T radians(const T d) {$/;"	f	language:C++	namespace:Math
rayDistance	Ray.h	/^        T rayDistance;$/;"	m	language:C++	struct:Ray::LineDistance
rayDistance	Ray.h	/^        T rayDistance;$/;"	m	language:C++	struct:Ray::PointDistance
read	IO/IOUtils.h	/^        T read(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
read	IO/IOUtils.h	/^        T read(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBool	IO/IOUtils.h	/^        bool readBool(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBool	IO/IOUtils.h	/^        bool readBool(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBytes	IO/IOUtils.cpp	/^        void readBytes(const char* const& cursor, char* buffer, size_t n) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBytes	IO/IOUtils.cpp	/^        void readBytes(const char* const& cursor, unsigned char* buffer, size_t n) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBytes	IO/IOUtils.cpp	/^        void readBytes(const char*& cursor, char* buffer, size_t n) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readBytes	IO/IOUtils.cpp	/^        void readBytes(const char*& cursor, unsigned char* buffer, size_t n) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readDecimal	IO/Tokenizer.h	/^            const char* readDecimal(const String& delims) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
readDirectory	IO/PakFileSystem.cpp	/^        void PakFileSystem::readDirectory() {$/;"	f	language:C++	class:TrenchBroom::IO::PakFileSystem
readFloat	IO/IOUtils.h	/^        float readFloat(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readFloat	IO/IOUtils.h	/^        float readFloat(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readInt	IO/IOUtils.h	/^        int readInt(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readInt	IO/IOUtils.h	/^        int readInt(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readInteger	IO/Tokenizer.h	/^            const char* readInteger(const String& delims) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
readQuotedString	IO/Tokenizer.h	/^            const char* readQuotedString() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
readRemainder	IO/Tokenizer.h	/^            String readRemainder(unsigned int delimiterType) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
readSize	IO/IOUtils.h	/^        size_t readSize(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readSize	IO/IOUtils.h	/^        size_t readSize(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readString	IO/Tokenizer.h	/^            const char* readString(const String& delims) {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
readString	Preference.h	/^        String readString(wxStringTokenizer& tokenizer, wxString token) const {$/;"	f	language:C++	class:TrenchBroom::Converter
readTexture	IO/WalTextureLoader.cpp	/^        Assets::Texture* WalTextureLoader::readTexture(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::IO::WalTextureLoader
readUnsignedInt	IO/IOUtils.h	/^        unsigned int readUnsignedInt(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readUnsignedInt	IO/IOUtils.h	/^        unsigned int readUnsignedInt(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readVec3f	IO/IOUtils.cpp	/^        Vec3f readVec3f(const char* const& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readVec3f	IO/IOUtils.cpp	/^        Vec3f readVec3f(const char*& cursor) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readVector	IO/IOUtils.h	/^        void readVector(const char* const& cursor, std::vector<T>& vec, const size_t size = sizeof(T)) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readVector	IO/IOUtils.h	/^        void readVector(const char*& cursor, std::vector<T>& vec, const size_t size = sizeof(T)) {$/;"	f	language:C++	namespace:TrenchBroom::IO
readjustItems	View/CellLayout.h	/^            void readjustItems() {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
rebuildBrushGeometry	Controller/RebuildBrushGeometryCommand.cpp	/^        RebuildBrushGeometryCommand::Ptr RebuildBrushGeometryCommand::rebuildBrushGeometry(View::MapDocumentWPtr document, const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
rebuildBrushGeometry	View/ControllerFacade.cpp	/^        bool ControllerFacade::rebuildBrushGeometry(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
rebuildGeometry	Model/Brush.cpp	/^        void Brush::rebuildGeometry(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
rebuildMenuBar	View/MapFrame.cpp	/^        void MapFrame::rebuildMenuBar() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
receiver	Notifier.h	/^            void* receiver() const {$/;"	f	language:C++	class:TrenchBroom::Notifier0::CObserver
receiver	Notifier.h	/^            void* receiver() const {$/;"	f	language:C++	class:TrenchBroom::Notifier1::CObserver
receiver	Notifier.h	/^            void* receiver() const {$/;"	f	language:C++	class:TrenchBroom::Notifier2::CObserver
receiver	Notifier.h	/^            void* receiver() const {$/;"	f	language:C++	class:TrenchBroom::Notifier3::CObserver
recentDocumentSelectedEventFunction	View/RecentDocumentSelectedCommand.h	/^typedef void (wxEvtHandler::*recentDocumentSelectedEventFunction)(TrenchBroom::View::RecentDocumentSelectedCommand&);$/;"	t	language:C++
recentDocuments	TrenchBroomApp.cpp	/^        const IO::Path::List& TrenchBroomApp::recentDocuments() const {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
recentDocuments	View/RecentDocuments.h	/^            const IO::Path::List& recentDocuments() const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
redoNextCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::redoNextCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
redoNextCommand	View/ControllerFacade.cpp	/^        bool ControllerFacade::redoNextCommand() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
redoShortcut	View/Menu.cpp	/^        const KeyboardShortcut& Menu::redoShortcut() {$/;"	f	language:C++	class:TrenchBroom::View::Menu
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex1<A1> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex1<A1> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex2<A1, A2> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex2<A1, A2> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex3<A1, A2, A3> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex3<A1, A2, A3> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex4<A1, A2, A3, A4> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex4<A1, A2, A3, A4> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
ref	Renderer/VertexArray.h	/^            static VertexArray ref(const GLenum primType, const std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
reference	CastIterator.h	/^        typedef OutType& reference;$/;"	t	language:C++	class:TrenchBroom::CastIterator
reference	FilterIterator.h	/^        typedef typename Iterator::reference reference;$/;"	t	language:C++	class:TrenchBroom::FilterIterator
reference	NestedHierarchyIterator.h	/^        typedef ValueType& reference;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
reference	NestedIterator.h	/^        typedef typename InnerIterator::reference reference;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
referencePoint	View/Grid.cpp	/^        Vec3 Grid::referencePoint(const BBox3& bounds) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
refreshLineNumbers	View/IssueBrowser.cpp	/^            void refreshLineNumbers() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
registerGenerator	Model/IssueManager.cpp	/^        void IssueManager::registerGenerator(IssueGenerator* generator, bool showByDefault) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
registerIssueGenerators	View/MapDocument.cpp	/^        void MapDocument::registerIssueGenerators() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
registeredGenerators	Model/IssueManager.cpp	/^        const IssueManager::GeneratorList& IssueManager::registeredGenerators() const {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
relEq	MathUtils.h	/^    bool relEq(const T v1, const T v2, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
relativePosition	BBox.h	/^    const RelativePosition relativePosition(const Vec<T,S>& point) const {$/;"	f	language:C++	class:BBox
reload	View/CellView.h	/^            void reload() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
reload	View/EntityBrowser.cpp	/^        void EntityBrowser::reload() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
reload	View/IssueBrowser.cpp	/^            void reload() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
reload	View/TextureBrowser.cpp	/^        void TextureBrowser::reload() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
reloadGameInfos	View/GameListBox.cpp	/^        void GameListBox::reloadGameInfos() {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
reloadIssues	View/MapDocument.cpp	/^        void MapDocument::reloadIssues() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
reloadLayout	View/CellView.h	/^            void reloadLayout() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
reloadModels	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::reloadModels() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
remainder	MathUtils.h	/^    T remainder(const T v1, const T v2) {$/;"	f	language:C++	namespace:Math
remove	CollectionUtils.h	/^    void remove(std::vector<T*>& list, const T* item) {$/;"	f	language:C++	namespace:ListUtils
remove	CollectionUtils.h	/^    void remove(std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
remove	CollectionUtils.h	/^    void remove(std::vector<T>& vec, const T& item) {$/;"	f	language:C++	namespace:VectorUtils
remove	Controller/TextureCollectionCommand.cpp	/^        TextureCollectionCommand::Ptr TextureCollectionCommand::remove(View::MapDocumentWPtr document, const StringList& names) {$/;"	f	language:C++	class:TrenchBroom::Controller::TextureCollectionCommand
remove	Model/Issue.cpp	/^        void Issue::remove(Issue* last) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
remove	StringIndex.h	/^            bool remove(const String& key, const V& value) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
remove	StringIndex.h	/^        void remove(const String& key, const V& value) {$/;"	f	language:C++	class:TrenchBroom::StringIndex
removeAllKillSources	Model/Entity.cpp	/^        void Entity::removeAllKillSources() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeAllKillTargets	Model/Entity.cpp	/^        void Entity::removeAllKillTargets() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeAllLinkSources	Model/Entity.cpp	/^        void Entity::removeAllLinkSources() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeAllLinkTargets	Model/Entity.cpp	/^        void Entity::removeAllLinkTargets() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeAndDelete	CollectionUtils.h	/^    void removeAndDelete(std::vector<T*>& list, const T* item) {$/;"	f	language:C++	namespace:ListUtils
removeAndDelete	CollectionUtils.h	/^    void removeAndDelete(std::vector<T*>& vec, const T* item) {$/;"	f	language:C++	namespace:VectorUtils
removeAndDestroyFrame	View/FrameManager.cpp	/^        void FrameManager::removeAndDestroyFrame(MapFrame* frame) {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
removeBrush	Model/Entity.cpp	/^        void Entity::removeBrush(Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeBrush	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::removeBrush(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
removeBrush	View/MapDocument.cpp	/^        void MapDocument::removeBrush(Model::Brush* brush, Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
removeBrush	View/VertexHandleManager.cpp	/^        void VertexHandleManager::removeBrush(Model::Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
removeBrushes	Controller/BrushVertexHandleCommand.cpp	/^        void BrushVertexHandleCommand::removeBrushes(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
removeBrushes	Renderer/BrushRenderer.h	/^            void removeBrushes(I cur, I end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
removeBrushes	View/VertexHandleManager.cpp	/^        void VertexHandleManager::removeBrushes(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
removeEntities	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::removeEntities(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
removeEntities	Renderer/EntityRenderer.h	/^            void removeEntities(Iter cur, const Iter end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
removeEntity	Model/EntityPropertyIndex.cpp	/^        void EntityPropertyIndex::removeEntity(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
removeEntity	Model/Map.cpp	/^        void Map::removeEntity(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Map
removeEntity	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::removeEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
removeEntity	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::removeEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
removeEntity	View/MapDocument.cpp	/^        void MapDocument::removeEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
removeEntityProperty	Controller/EntityPropertyCommand.cpp	/^        Command::Ptr EntityPropertyCommand::removeEntityProperty(View::MapDocumentWPtr document, const Model::EntityList& entities, const Model::PropertyKey& key, const bool force) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
removeEntityProperty	Model/EntityPropertyIndex.cpp	/^        void EntityPropertyIndex::removeEntityProperty(Entity* entity, const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityPropertyIndex
removeEntityProperty	View/ControllerFacade.cpp	/^        bool ControllerFacade::removeEntityProperty(const Model::EntityList& entities, const Model::PropertyKey& key, const bool force) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
removeEntityPropertyFromIndex	Model/Map.cpp	/^        void Map::removeEntityPropertyFromIndex(Entity* entity, const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Map
removeExternalTextureCollection	Assets/TextureManager.cpp	/^        void TextureManager::removeExternalTextureCollection(const String& name) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
removeExternalTextureCollections	View/MapDocument.cpp	/^        void MapDocument::removeExternalTextureCollections(const StringList& names) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
removeFace	Model/BrushAlgorithm.h	/^            void removeFace(BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
removeFreeBlock	Renderer/Vbo.cpp	/^        void Vbo::removeFreeBlock(VboBlock* block) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
removeFreeBlock	Renderer/Vbo.cpp	/^        void Vbo::removeFreeBlock(const VboBlockList::iterator it) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
removeHandle	View/VertexHandleManager.h	/^            inline bool removeHandle(const Vec3& position, Element* element, std::map<Vec3, std::vector<Element*>, Vec3::LexicographicOrder >& map) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
removeIssue	View/IssueBrowser.cpp	/^            void removeIssue(Model::Issue* issue) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
removeKillSource	Model/Entity.cpp	/^        void Entity::removeKillSource(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeKillTarget	Model/Entity.cpp	/^        void Entity::removeKillTarget(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeKillTargets	Model/Entity.cpp	/^        void Entity::removeKillTargets(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeLinkSource	Model/Entity.cpp	/^        void Entity::removeLinkSource(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeLinkTarget	Model/Entity.cpp	/^        void Entity::removeLinkTarget(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeLinkTargets	Model/Entity.cpp	/^        void Entity::removeLinkTargets(const PropertyValue& targetname) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeLinks	Model/Entity.cpp	/^        void Entity::removeLinks(const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeMenu	View/RecentDocuments.h	/^            void removeMenu(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
removeObject	Model/Octree.h	/^            bool removeObject(const BBox<F,3>& bounds, T object) {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
removeObject	Model/Octree.h	/^            void removeObject(const BBox<F,3>& bounds, T object) {$/;"	f	language:C++	class:TrenchBroom::Model::Octree
removeObject	Model/Picker.cpp	/^        void Picker::removeObject(Pickable* object) {$/;"	f	language:C++	class:TrenchBroom::Model::Picker
removeObject	View/ControllerFacade.cpp	/^        bool ControllerFacade::removeObject(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
removeObject	View/MapDocument.cpp	/^        void MapDocument::removeObject(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
removeObjects	Controller/AddRemoveObjectsCommand.cpp	/^        AddRemoveObjectsCommand::Ptr AddRemoveObjectsCommand::removeObjects(View::MapDocumentWPtr document, const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
removeObjects	Controller/AddRemoveObjectsCommand.cpp	/^        void AddRemoveObjectsCommand::removeObjects(const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
removeObjects	Model/Picker.h	/^            void removeObjects(const std::vector<Object>& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Picker
removeObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::removeObjects(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
removeObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::removeObjects(const Model::ObjectParentList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
removeObserver	Notifier.h	/^        bool removeObserver(R* receiver, void (R::*function)()) {$/;"	f	language:C++	class:TrenchBroom::Notifier0
removeObserver	Notifier.h	/^        bool removeObserver(R* receiver, void (R::*function)(A1)) {$/;"	f	language:C++	class:TrenchBroom::Notifier1
removeObserver	Notifier.h	/^        bool removeObserver(R* receiver, void (R::*function)(A1, A2)) {$/;"	f	language:C++	class:TrenchBroom::Notifier2
removeObserver	Notifier.h	/^        bool removeObserver(R* receiver, void (R::*function)(A1, A2, A3)) {$/;"	f	language:C++	class:TrenchBroom::Notifier3
removePath	View/RecentDocuments.h	/^            void removePath(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
removeProperty	Model/Entity.cpp	/^        void Entity::removeProperty(const PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeProperty	Model/EntityProperties.cpp	/^        void EntityProperties::removeProperty(const PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
removePropertyFromIndex	Model/Entity.cpp	/^        void Entity::removePropertyFromIndex(const EntityProperty& property) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
removeRecentDocumentMenu	TrenchBroomApp.cpp	/^        void TrenchBroomApp::removeRecentDocumentMenu(wxMenu* menu) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
removeString	Renderer/TextRenderer.h	/^            void removeString(Key key)  {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
removeTextureCollections	View/ControllerFacade.cpp	/^        bool ControllerFacade::removeTextureCollections(const StringList& names) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
removeValue	StringIndex.h	/^            void removeValue(const V& value) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
removedFaces	Model/BrushAlgorithm.h	/^            const BrushFaceList& removedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
removedObjects	Controller/AddRemoveObjectsCommand.cpp	/^        const Model::ObjectList& AddRemoveObjectsCommand::removedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
renameEntityProperty	Controller/EntityPropertyCommand.cpp	/^        Command::Ptr EntityPropertyCommand::renameEntityProperty(View::MapDocumentWPtr document, const Model::EntityList& entities, const Model::PropertyKey& oldKey, const Model::PropertyKey& newKey, const bool force) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
renameEntityProperty	View/ControllerFacade.cpp	/^        bool ControllerFacade::renameEntityProperty(const Model::EntityList& entities, const Model::PropertyKey& oldKey, const Model::PropertyKey& newKey, const bool force) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
renameProperty	Model/Entity.cpp	/^        void Entity::renameProperty(const PropertyKey& key, const PropertyKey& newKey) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
renameProperty	Model/EntityProperties.cpp	/^        void EntityProperties::renameProperty(const PropertyKey& key, const PropertyKey& newKey) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
renameProperty	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::renameProperty(size_t rowIndex, const String& newKey, const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
render	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::render(RenderContext& renderContext, View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
render	Renderer/BoundsInfoRenderer.cpp	/^        void BoundsInfoRenderer::render(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
render	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
render	Renderer/Circle.cpp	/^        void Circle::render() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Circle
render	Renderer/Compass.cpp	/^        void Compass::render(RenderContext& renderContext, const View::MovementRestriction& restriction) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
render	Renderer/EdgeRenderer.cpp	/^        void EdgeRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
render	Renderer/EntityLinkRenderer.cpp	/^        void EntityLinkRenderer::render(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
render	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
render	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
render	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::render(RenderContext& context, bool grayscale, const Color* tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
render	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::render(RenderContext& context, const bool grayscale) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
render	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::render(RenderContext& context, const bool grayscale, const Color& tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
render	Renderer/MapRenderer.cpp	/^        void MapRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
render	Renderer/MeshRenderer.cpp	/^        void MeshRenderer::render() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
render	Renderer/MeshRenderer.h	/^            void render(const MeshFunc& func) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MeshRenderer
render	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::render(RenderContext& context, const BBox3f& bounds) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
render	Renderer/MoveIndicatorRenderer.cpp	/^        void MoveIndicatorRenderer::render(RenderContext& renderContext, const Vec3f& position, const Direction direction) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MoveIndicatorRenderer
render	Renderer/Ring.cpp	/^        void Ring::render() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Ring
render	Renderer/Sphere.cpp	/^        void Sphere::render() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Sphere
render	Renderer/TextRenderer.h	/^            void render(RenderContext& context, const TextRendererFilter& filter, const TextColorProvider& colorProvider, const ShaderConfig& textProgram, const ShaderConfig& backgroundProgram) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
render	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::render(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
render	Renderer/VertexArray.cpp	/^        void VertexArray::render() {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
render	View/MoveToolHelper.cpp	/^        void MoveHelper::render(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
render	View/RenderView.cpp	/^        void RenderView::render() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
render	View/RotateToolHelper.cpp	/^        void RotateHelper::render(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
render	View/TextureTool.cpp	/^        void TextureToolHelper::render(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
render	View/VertexHandleManager.cpp	/^        void VertexHandleManager::render(Renderer::RenderContext& renderContext, const bool splitMode) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
render3DCamera	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::render3DCamera(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
renderAngle	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderAngle(Renderer::RenderContext& renderContext, const HitArea handle, const FloatType angle) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderAngleIndicator	View/RotateToolHelper.cpp	/^        void RotateHelper::renderAngleIndicator(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
renderAxes	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderAxes(Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderAxis	Renderer/Compass.cpp	/^        void Compass::renderAxis(RenderContext& renderContext, const Mat4x4f& transformation) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
renderAxisOutline	Renderer/Compass.cpp	/^        void Compass::renderAxisOutline(RenderContext& renderContext, const Mat4x4f& transformation, const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
renderBackground	Renderer/Compass.cpp	/^        void Compass::renderBackground(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
renderBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::renderBounds(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderBounds	View/EntityBrowserView.cpp	/^        void EntityBrowserView::renderBounds(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
renderBounds	View/TextureBrowserView.cpp	/^        void TextureBrowserView::renderBounds(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
renderBrushes	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::renderBrushes(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
renderChain	View/Tool.h	/^            void renderChain(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
renderClassnames	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::renderClassnames(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderClipPoints	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::renderClipPoints(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
renderCompass	View/MapView.cpp	/^        void MapView::renderCompass(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderCoordinateSystem	View/MapView.cpp	/^        void MapView::renderCoordinateSystem(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderCoordinateSystem	View/MapView.cpp	/^        void MapView::renderCoordinateSystem(const Color& xColor, const Color& yColor, const Color& zColor) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderCurrentPoint	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::renderCurrentPoint(RenderContext& renderContext, const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
renderData	Renderer/Mesh.h	/^            typename MeshRenderData<Key>::List renderData() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
renderEdges	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::renderEdges(RenderContext& context, const BBox3f& bounds) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
renderEntities	Renderer/MapRenderer.cpp	/^        void MapRenderer::renderEntities(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
renderEntityLinks	Renderer/MapRenderer.cpp	/^        void MapRenderer::renderEntityLinks(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
renderFace	View/TexturingView.cpp	/^        void TexturingView::renderFace(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
renderFocusRect	View/RenderView.cpp	/^        void RenderView::renderFocusRect() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
renderFrustum	Renderer/Camera.cpp	/^        void Camera::renderFrustum(RenderContext& renderContext, Vbo& vbo, const float size, const Color& color) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
renderGeometry	Renderer/MapRenderer.cpp	/^        void MapRenderer::renderGeometry(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
renderGroupTitleBackgrounds	View/EntityBrowserView.cpp	/^        void EntityBrowserView::renderGroupTitleBackgrounds(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
renderGroupTitleBackgrounds	View/TextureBrowserView.cpp	/^        void TextureBrowserView::renderGroupTitleBackgrounds(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
renderHandle	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::renderHandle(const Vec3f& position, ActiveShader& shader) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
renderHandle	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderHandle(Renderer::RenderContext& renderContext, const HitArea highlight) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderHandleHighlight	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::renderHandleHighlight(RenderContext& renderContext, const Vec3f& position) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
renderHighlight	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::renderHighlight(RenderContext& renderContext, const size_t index) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
renderHighlight	View/VertexHandleManager.cpp	/^        void VertexHandleManager::renderHighlight(Renderer::RenderContext& renderContext, const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
renderMap	View/MapView.cpp	/^        void MapView::renderMap(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderMap	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::renderMap(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
renderModels	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::renderModels(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderModels	View/EntityBrowserView.cpp	/^        void EntityBrowserView::renderModels(Layout& layout, const float y, const float height, Renderer::Transformation& transformation) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
renderMoveIndicator	View/MoveTool.h	/^            void renderMoveIndicator(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveTool
renderMoveIndicator	View/MoveToolHelper.cpp	/^        void MoveHelper::renderMoveIndicator(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
renderMoveTrace	View/MoveToolHelper.cpp	/^        void MoveHelper::renderMoveTrace(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
renderMultipleHandles	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::renderMultipleHandles(RenderContext& renderContext, const Vec3f::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
renderNames	View/EntityBrowserView.cpp	/^        void EntityBrowserView::renderNames(Layout& layout, const float y, const float height, const Mat4x4f& projection) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
renderNames	View/TextureBrowserView.cpp	/^        void TextureBrowserView::renderNames(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
renderOccludedBounds	Renderer/EntityRenderer.cpp	/^        bool EntityRenderer::renderOccludedBounds() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderOccludedEdges	Renderer/BrushRenderer.cpp	/^        bool BrushRenderer::renderOccludedEdges() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
renderOnce	Renderer/TextRenderer.h	/^            void renderOnce(Key key, const String& string, TextAnchor::Ptr anchor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
renderOnly	View/Tool.h	/^            void renderOnly(const InputState& inputState, Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
renderOpaqueFaces	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::renderOpaqueFaces(ActiveShader& shader, const bool applyTexture) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
renderPlaneIndicators	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::renderPlaneIndicators(RenderContext& renderContext, VertexArray& lineArray, VertexArray& triangleArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
renderPointFile	Renderer/MapRenderer.cpp	/^        void MapRenderer::renderPointFile(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
renderPointHandle	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderPointHandle(Renderer::RenderContext& renderContext, const Vec3& position, const Color& color) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderPointHandleHighlight	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderPointHandleHighlight(Renderer::RenderContext& renderContext, const HitArea highlight) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderPointHandleHighlight	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderPointHandleHighlight(Renderer::RenderContext& renderContext, const Vec3& position) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderPointHandles	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderPointHandles(Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderRingIndicators	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderRingIndicators(Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderRings	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::renderRings(Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
renderSelectionGuide	View/MapView.cpp	/^        void MapView::renderSelectionGuide(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderSingleHandle	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::renderSingleHandle(RenderContext& renderContext, const Vec3f& position) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
renderSolidAxis	Renderer/Compass.cpp	/^        void Compass::renderSolidAxis(RenderContext& renderContext, const Mat4x4f& transformation, const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Compass
renderSolidBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::renderSolidBounds(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderStoredHandles	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::renderStoredHandles(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
renderStrings	View/EntityBrowserView.cpp	/^        void EntityBrowserView::renderStrings(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
renderStrings	View/TextureBrowserView.cpp	/^        void TextureBrowserView::renderStrings(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
renderText	View/RotateToolHelper.cpp	/^        void RotateHelper::renderText(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
renderTexture	View/TexturingView.cpp	/^        void TexturingView::renderTexture(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
renderTextures	View/TextureBrowserView.cpp	/^        void TextureBrowserView::renderTextures(Layout& layout, const float y, const float height) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
renderToolBox	View/MapView.cpp	/^        void MapView::renderToolBox(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
renderToolBox	View/TexturingView.cpp	/^        void TexturingView::renderToolBox(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
renderTools	View/ToolBox.cpp	/^        void ToolBox::renderTools(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
renderTransparentFaces	Renderer/FaceRenderer.cpp	/^        void FaceRenderer::renderTransparentFaces(ActiveShader& shader, const bool applyTexture) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FaceRenderer
renderWireframeBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::renderWireframeBounds(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
renderer	Assets/EntityModelManager.cpp	/^        Renderer::MeshRenderer* EntityModelManager::renderer(const Assets::ModelSpecification& spec) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
repair	BBox.h	/^    BBox<T,S>& repair() {$/;"	f	language:C++	class:BBox
repaired	BBox.h	/^    const BBox<T,S> repaired() const {$/;"	f	language:C++	class:BBox
reparent	Controller/ReparentBrushesCommand.cpp	/^        ReparentBrushesCommand::Ptr ReparentBrushesCommand::reparent(View::MapDocumentWPtr document, const Model::BrushList& brushes, Model::Entity* newParent) {$/;"	f	language:C++	class:TrenchBroom::Controller::ReparentBrushesCommand
reparentBrushes	View/ControllerFacade.cpp	/^        bool ControllerFacade::reparentBrushes(const Model::BrushList& brushes, Model::Entity* newParent) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
reparentBrushes	View/MapView.cpp	/^        void MapView::reparentBrushes(const Model::BrushList brushes, Model::Entity* newParent) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
replace	Renderer/OutlineTracer.cpp	/^        bool OutlineTracer::replace(Position::List::iterator it, const Position& position, Position::List& positions) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
replaceAndPushModelMatrix	Renderer/Transformation.cpp	/^        void Transformation::replaceAndPushModelMatrix(const Mat4x4f& matrix) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
replaceChars	StringUtils.cpp	/^    String replaceChars(const String& str, const String& needles, const String& replacements) {$/;"	f	language:C++	namespace:StringUtils
replaceContentFlags	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::replaceContentFlags(const int contentFlags) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
replaceEdgesWithBackwardEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::replaceEdgesWithBackwardEdge(const BrushEdgeList::iterator it1, const BrushEdgeList::iterator it2, BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
replaceEdgesWithEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::replaceEdgesWithEdge(const BrushEdgeList::iterator it1, const BrushEdgeList::iterator it2, BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
replaceEdgesWithEdge	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::replaceEdgesWithEdge(const size_t index1, const size_t index2, BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
replaceSurfaceFlags	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::replaceSurfaceFlags(const int surfaceFlags) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
reset	Assets/EntityModelManager.cpp	/^        void EntityModelManager::reset(Model::GamePtr game) {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
reset	Assets/TextureManager.cpp	/^        void TextureManager::reset(Model::GamePtr game) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
reset	IO/Tokenizer.h	/^            void reset() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
reset	View/Clipper.cpp	/^        void Clipper::reset() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
reset	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::PropertyRow::reset() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
resetCamera	View/MapView.cpp	/^        void MapView::resetCamera() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
resetHandlePosition	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::resetHandlePosition() {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
resetInner	NestedHierarchyIterator.h	/^        void resetInner() {$/;"	f	language:C++	class:TrenchBroom::NestedHierarchyIterator
resetPlane	View/MoveToolHelper.cpp	/^        void MoveHelper::resetPlane(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
resetPlane	View/RotateToolHelper.cpp	/^        void RotateHelper::resetPlane(const InputState& inputState, Plane3& plane, Vec3& initialPoint){}$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
resetPlane	View/Tool.cpp	/^        void PlaneDragPolicy::resetPlane(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
resetRotationCenter	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::resetRotationCenter() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
resetScaleOrigin	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::resetScaleOrigin() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
resetScrollPos	View/SmartSpawnflagsEditor.cpp	/^        void SmartSpawnflagsEditor::resetScrollPos() {$/;"	f	language:C++	class:TrenchBroom::View::SmartSpawnflagsEditor
resizeBrushes	Controller/ResizeBrushesCommand.cpp	/^        ResizeBrushesCommand::Ptr ResizeBrushesCommand::resizeBrushes(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const Vec3& delta, const bool lockTextures) {$/;"	f	language:C++	class:TrenchBroom::Controller::ResizeBrushesCommand
resizeBrushes	View/ControllerFacade.cpp	/^        bool ControllerFacade::resizeBrushes(const Model::BrushFaceList& faces, const Vec3& delta, const bool lockTextures) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
resolveBaseClasses	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::resolveBaseClasses(const EntityDefinitionClassInfoMap& baseClasses, const StringList& classnames) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
resolvePath	IO/DiskFileSystem.cpp	/^            IO::Path resolvePath(const Path::List& searchPaths, const Path& path) {$/;"	f	language:C++	namespace:TrenchBroom::IO::Disk
resolvePath	IO/Path.cpp	/^        StringList Path::resolvePath(const bool absolute, const StringList& components) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
resourceDirectory	IO/SystemPaths.cpp	/^            Path resourceDirectory() {$/;"	f	language:C++	namespace:TrenchBroom::IO::SystemPaths
restore	Model/Brush.cpp	/^        void BrushSnapshot::restore(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushSnapshot
restore	Model/BrushFace.cpp	/^        void BrushFaceSnapshot::restore() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceSnapshot
restore	Model/Entity.cpp	/^        void EntitySnapshot::restore() {$/;"	f	language:C++	class:TrenchBroom::Model::EntitySnapshot
restore	Model/Snapshot.cpp	/^        void Snapshot::restore(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Snapshot
restoreFaceGeometries	Model/BrushGeometry.cpp	/^        void BrushGeometry::restoreFaceGeometries() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
restoreFaces	Model/Brush.cpp	/^        void Brush::restoreFaces(const BBox3& worldBounds, const BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
resultCode	Model/BrushGeometry.h	/^            Code resultCode;$/;"	m	language:C++	struct:TrenchBroom::Model::AddFaceResult
retreat	IO/Tokenizer.h	/^            void retreat() {$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
rgbToHSB	Color.cpp	/^void Color::rgbToHSB(const float r, const float g, const float b, float& h, float& s, float& br) {$/;"	f	language:C++	class:Color
right	Model/BrushEdge.h	/^            BrushFaceGeometry* right;$/;"	m	language:C++	class:TrenchBroom::Model::BrushEdge
right	Renderer/Camera.cpp	/^        const Vec3f& Camera::right() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
right	View/CellLayout.h	/^            float right() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
rightFace	Model/BrushEdge.cpp	/^        BrushFace* BrushEdge::rightFace() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
rightFace	Model/BrushEdge.cpp	/^        const BrushFace* BrushEdge::rightFace() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
rollbackGroup	View/ControllerFacade.cpp	/^        void ControllerFacade::rollbackGroup() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
rotate	Renderer/Camera.cpp	/^        void Camera::rotate(const float yaw, const float pitch) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
rotate	View/RotateToolHelper.cpp	/^        bool RotateDelegate::rotate(const Vec3& center, const Vec3& axis, const FloatType angle) {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
rotateAxes	Model/ParaxialTexCoordSystem.cpp	/^        void ParaxialTexCoordSystem::rotateAxes(Vec3& xAxis, Vec3& yAxis, const FloatType angleInRadians, const size_t planeNormIndex) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
rotateBBox	BBox.h	/^BBox<T,3> rotateBBox(const BBox<T,3> bbox, const Mat<T,4,4>& transformation) {$/;"	f	language:C++
rotateBBox	BBox.h	/^BBox<T,3> rotateBBox(const BBox<T,3> bbox, const Quat<T>& rotation, const Vec<T,3>& center = Vec<T,3>::Null) {$/;"	f	language:C++
rotateDelta	View/MoveTextureHelper.cpp	/^        Vec3 MoveTextureHelper::rotateDelta(const Vec3& delta, const Model::BrushFace* face, const Vec3::List& normals) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
rotateObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::rotateObjects(const Model::ObjectList& objects, const Vec3& center, const Vec3& axis, const FloatType angle, const bool lockTextures) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
rotateObjects	View/MapView.cpp	/^        void MapView::rotateObjects(const RotationAxis axisSpec, const bool clockwise) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
rotateObjectsToolActive	View/MapView.cpp	/^        bool MapView::rotateObjectsToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
rotateTexture	Model/BrushFace.cpp	/^        void BrushFace::rotateTexture(const float angle) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
rotateTexture	Model/TexCoordSystem.cpp	/^        void TexCoordSystem::rotateTexture(const Vec3& normal, const float angle, BrushFaceAttribs& attribs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
rotateTextures	Controller/RotateTexturesCommand.cpp	/^        RotateTexturesCommand::Ptr RotateTexturesCommand::rotateTextures(View::MapDocumentWPtr document, const Model::BrushFaceList& faces, const float angle) {$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
rotateTextures	Controller/RotateTexturesCommand.cpp	/^        void RotateTexturesCommand::rotateTextures(const float angle) {$/;"	f	language:C++	class:TrenchBroom::Controller::RotateTexturesCommand
rotateTextures	View/ControllerFacade.cpp	/^        bool ControllerFacade::rotateTextures(const Model::BrushFaceList& faces, const float angle) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
rotateTextures	View/MapFrame.cpp	/^        void MapFrame::rotateTextures(const bool clockwise, const bool snapAngle) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
rotation	BBox.h	/^    Quat<T> rotation;$/;"	m	language:C++	struct:RotateBBox
rotation	Model/BrushFace.cpp	/^        float BrushFace::rotation() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
rotation	Model/BrushFace.cpp	/^        float BrushFaceAttribs::rotation() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
rotation	Model/Entity.cpp	/^        Quat3 Entity::rotation() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
rotation	Model/Entity.h	/^            Quat3 rotation() const {$/;"	f	language:C++	class:TrenchBroom::Model::ConfigurableEntity
rotationCenterInFaceCoords	View/TexturingViewHelper.cpp	/^        const Vec2f TexturingViewHelper::rotationCenterInFaceCoords() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
rotationInfo	Model/QuakeEntityRotationPolicy.cpp	/^        QuakeEntityRotationPolicy::RotationInfo QuakeEntityRotationPolicy::rotationInfo(const Entity& entity) {$/;"	f	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
rotationMatrix	Mat.h	/^const Mat<T,4,4> rotationMatrix(const Quat<T>& quat) {$/;"	f	language:C++
rotationMatrix	Mat.h	/^const Mat<T,4,4> rotationMatrix(const Vec<T,3>& axis, const T angle) {$/;"	f	language:C++
round	MathUtils.h	/^    T round(const T v) {$/;"	f	language:C++	namespace:Math
round	Vec.h	/^    Vec<T,S>& round() {$/;"	f	language:C++	class:Vec
rounded	Vec.h	/^    const Vec<T,S> rounded() const {$/;"	f	language:C++	class:Vec
roundedRect2D	Renderer/RenderUtils.cpp	/^        Vec2f::List roundedRect2D(const float width, const float height, const float cornerRadius, const size_t cornerSegments) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
rowAt	View/CellLayout.h	/^            bool rowAt(const float y, const Row** result) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
rowCount	View/EntityPropertyGridTable.cpp	/^        size_t EntityPropertyGridTable::RowManager::rowCount() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
rowForKey	View/EntityPropertyGridTable.cpp	/^        int EntityPropertyGridTable::rowForKey(const Model::PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
rowMargin	View/CellLayout.h	/^            float rowMargin() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
rowPosition	View/CellLayout.h	/^            float rowPosition(const float y, const int offset) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
runAnimation	View/Animation.cpp	/^        void AnimationManager::runAnimation(Animation* animation, const bool replace) {$/;"	f	language:C++	class:TrenchBroom::View::AnimationManager
s	IO/MdlParser.h	/^                int s;$/;"	m	language:C++	struct:TrenchBroom::IO::MdlParser::MdlSkinVertex
sAxis	IO/Bsp29Parser.h	/^                Vec3f sAxis;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::TextureInfo
sMax	Renderer/TextureFont.cpp	/^        float TextureFont::Char::sMax(const size_t textureWidth) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
sMin	Renderer/TextureFont.cpp	/^        float TextureFont::Char::sMin(const size_t textureWidth) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
sOffset	IO/Bsp29Parser.h	/^                float sOffset;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::TextureInfo
safeGetModel	View/ViewUtils.cpp	/^        Assets::EntityModel* safeGetModel(Assets::EntityModelManager& manager, const Assets::ModelSpecification& spec, Logger& logger) {$/;"	f	language:C++	namespace:TrenchBroom::View
safeGetPropertyDefinition	Model/ModelUtils.cpp	/^        const Assets::PropertyDefinition* safeGetPropertyDefinition(const Model::PropertyKey& key, const Model::Entity* entity) {$/;"	f	language:C++	namespace:TrenchBroom::Model
safeProperty	Model/EntityProperties.cpp	/^        const PropertyValue EntityProperties::safeProperty(const PropertyKey& key, const PropertyValue& defaultValue) const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
safeScaleAxis	Model/ParaxialTexCoordSystem.h	/^            Vec<T1,3> safeScaleAxis(const Vec<T1,3>& axis, const T2 factor) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
sanityCheck	Model/BrushGeometry.cpp	/^        bool BrushGeometry::sanityCheck() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
save	Preference.h	/^        void save(wxConfigBase* config) {$/;"	f	language:C++	class:TrenchBroom::Preference
saveBackup	View/MapDocument.cpp	/^        void MapDocument::saveBackup(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
saveChanges	PreferenceManager.cpp	/^    PreferenceBase::Set PreferenceManager::saveChanges() {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
saveDocument	View/MapDocument.cpp	/^        void MapDocument::saveDocument() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
saveDocument	View/MapFrame.cpp	/^        bool MapFrame::saveDocument() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
saveDocumentAs	View/MapDocument.cpp	/^        void MapDocument::saveDocumentAs(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
saveDocumentAs	View/MapFrame.cpp	/^        bool MapFrame::saveDocumentAs() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
saveShortcut	View/KeyboardPreferencePane.cpp	/^        void MenuKeyboardShortcutEntry::saveShortcut(const KeyboardShortcut& shortcut) const {$/;"	f	language:C++	class:TrenchBroom::View::MenuKeyboardShortcutEntry
saveShortcut	View/KeyboardPreferencePane.cpp	/^        void SimpleKeyboardShortcutEntry::saveShortcut(const KeyboardShortcut& shortcut) const {$/;"	f	language:C++	class:TrenchBroom::View::SimpleKeyboardShortcutEntry
saveToConfig	View/RecentDocuments.h	/^            void saveToConfig() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
scale	IO/Md2Parser.h	/^                Vec3f scale;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Frame
scale	Model/BrushFace.cpp	/^        const Vec2f& BrushFace::scale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
scale	Model/BrushFace.cpp	/^        const Vec2f& BrushFaceAttribs::scale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
scale	Model/TexCoordSystemHelper.cpp	/^        const Vec2f& TexCoordSystemHelper::scale() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
scale	View/CellLayout.h	/^            float scale() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
scaleOriginInFaceCoords	View/TexturingViewHelper.cpp	/^        const Vec2f TexturingViewHelper::scaleOriginInFaceCoords() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
scaleOriginInTexCoords	View/TexturingViewHelper.cpp	/^        const Vec2f TexturingViewHelper::scaleOriginInTexCoords() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
scalingMatrix	Mat.h	/^const Mat<T,S+1,S+1> scalingMatrix(const Vec<T,S>& factors) {$/;"	f	language:C++
scalingMatrix	Mat.h	/^const Mat<T,S,S> scalingMatrix(const T f) {$/;"	f	language:C++
scanWidth	IO/ImageLoader.cpp	/^        size_t ImageLoader::scanWidth() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
scanWidth	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::scanWidth() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
scroll	View/InputState.cpp	/^        void InputState::scroll(const float scrollX, const float scrollY) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
scroll	View/Tool.h	/^            void scroll(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
scrollX	View/InputState.cpp	/^        float InputState::scrollX() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
scrollY	View/InputState.cpp	/^        float InputState::scrollY() const {$/;"	f	language:C++	class:TrenchBroom::View::InputState
searchPath	Model/GameConfig.h	/^                IO::Path searchPath;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FileSystemConfig
secondAxis	Vec.h	/^    const Vec<T,3> secondAxis() const {$/;"	f	language:C++	class:Vec
secondComponent	Vec.h	/^    size_t secondComponent() const {$/;"	f	language:C++	class:Vec
select	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::select(View::MapDocumentWPtr document, const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
select	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::select(View::MapDocumentWPtr document, const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
select	Model/Brush.cpp	/^        void Brush::select() {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
select	Model/BrushFace.cpp	/^        void BrushFace::select() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
select	Model/Issue.cpp	/^        void BrushIssue::select(View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushIssue
select	Model/Issue.cpp	/^        void EntityIssue::select(View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityIssue
select	Model/Object.cpp	/^        void Object::select() {$/;"	f	language:C++	class:TrenchBroom::Model::Object
select	View/MapFrame.cpp	/^            const Menu* select(const MultiMenu& multiMenu) const {$/;"	f	language:C++	class:TrenchBroom::View::FrameMenuSelector
select	View/Menu.cpp	/^        const Menu* NullMenuSelector::select(const MultiMenu& multiMenu) const {$/;"	f	language:C++	class:TrenchBroom::View::NullMenuSelector
selectAllFaces	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::selectAllFaces(View::MapDocumentWPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
selectAllFaces	Model/Selection.cpp	/^        SelectionResult Selection::selectAllFaces(Map& map) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectAllFaces	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::selectAllFaces() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectAllObjects	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::selectAllObjects(View::MapDocumentWPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
selectAllObjects	Model/Selection.cpp	/^        SelectionResult Selection::selectAllObjects(Map& map) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectAllObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::selectAllObjects() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
selectAllObjects	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::selectAllObjects() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectAndKeepBrushes	Controller/SelectionCommand.cpp	/^        SelectionCommand::Ptr SelectionCommand::selectAndKeepBrushes(View::MapDocumentWPtr document, const Model::BrushFaceList& faces) {$/;"	f	language:C++	class:TrenchBroom::Controller::SelectionCommand
selectApplicableFaces	View/MoveTextureHelper.cpp	/^        Model::BrushFaceList MoveTextureHelper::selectApplicableFaces(const Model::BrushFaceList& faces, const Vec3::List& normals) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveTextureHelper
selectEdgeHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectEdgeHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectEdgeHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectEdgeHandles(const Edge3::List& edges) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectEditor	View/SmartPropertyEditorManager.cpp	/^        SmartPropertyEditorManager::EditorPtr SmartPropertyEditorManager::selectEditor(const Model::PropertyKey& key, const Model::EntityList& entities) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
selectEntityDefinition	Model/ModelUtils.cpp	/^        Assets::EntityDefinition* selectEntityDefinition(const Model::EntityList& entities) {$/;"	f	language:C++	namespace:TrenchBroom::Model
selectFace	View/ControllerFacade.cpp	/^        bool ControllerFacade::selectFace(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
selectFaceAndKeepBrushes	View/ControllerFacade.cpp	/^        bool ControllerFacade::selectFaceAndKeepBrushes(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
selectFaceHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectFaceHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectFaceHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectFaceHandles(const Polygon3::List& faces) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectFaces	Model/Selection.cpp	/^        SelectionResult Selection::selectFaces(const BrushFaceList& faces, const bool keepBrushSelection) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectFaces	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::selectFaces(const Model::BrushFaceList& faces, bool keepBrushSelection) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectFontSize	Renderer/FontManager.cpp	/^        FontDescriptor FontManager::selectFontSize(const FontDescriptor& fontDescriptor, const String& string, const float maxWidth, const size_t minFontSize) {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontManager
selectGame	View/GameListBox.cpp	/^        void GameListBox::selectGame(const int index) {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
selectHit	View/RotateObjectsHandle.cpp	/^        RotateObjectsHandle::Hit RotateObjectsHandle::selectHit(const Hit& closest, const Hit& hit) const {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
selectIssueObjects	View/IssueBrowser.cpp	/^        void IssueBrowser::selectIssueObjects(const wxDataViewItemArray& selections, View::ControllerSPtr controller) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
selectMenu	View/Menu.cpp	/^        const Menu* MultiMenu::selectMenu(const MultiMenuSelector& selector) const {$/;"	f	language:C++	class:TrenchBroom::View::MultiMenu
selectMin	MathUtils.h	/^    T selectMin(const T v1, const T v2) {$/;"	f	language:C++	namespace:Math
selectNewEdgeHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::selectNewEdgeHandlePositions(View::VertexHandleManager& manager) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
selectNewFaceHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::selectNewFaceHandlePositions(View::VertexHandleManager& manager) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
selectNewHandlePositions	Controller/BrushVertexHandleCommand.cpp	/^        void BrushVertexHandleCommand::selectNewHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
selectNewVertexHandlePositions	Controller/RebuildBrushGeometryCommand.cpp	/^        void RebuildBrushGeometryCommand::selectNewVertexHandlePositions(View::VertexHandleManager& manager) const {$/;"	f	language:C++	class:TrenchBroom::Controller::RebuildBrushGeometryCommand
selectNormal	View/Clipper.cpp	/^        Vec3 Clipper::ClipPoints::selectNormal(const Vec3::List& normals1, const Vec3::List& normals2) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
selectObject	View/ControllerFacade.cpp	/^        bool ControllerFacade::selectObject(Model::Object* object) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
selectObjects	Model/Selection.cpp	/^        SelectionResult Selection::selectObjects(const ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectObjects	View/ControllerFacade.cpp	/^        bool ControllerFacade::selectObjects(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
selectObjects	View/MapDocument.cpp	/^        Model::SelectionResult MapDocument::selectObjects(const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectOldHandlePositions	Controller/BrushVertexHandleCommand.cpp	/^        void BrushVertexHandleCommand::selectOldHandlePositions(View::VertexHandleManager& manager) {$/;"	f	language:C++	class:TrenchBroom::Controller::BrushVertexHandleCommand
selectPropertyDefinition	Model/ModelUtils.cpp	/^        const Assets::PropertyDefinition* selectPropertyDefinition(const Model::PropertyKey& key, const Model::EntityList& entities) {$/;"	f	language:C++	namespace:TrenchBroom::Model
selectPropertyValue	Model/ModelUtils.cpp	/^        Model::PropertyValue selectPropertyValue(const Model::PropertyKey& key, const Model::EntityList& entities) {$/;"	f	language:C++	namespace:TrenchBroom::Model
selectVertexHandle	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectVertexHandle(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectVertexHandles	View/VertexHandleManager.cpp	/^        void VertexHandleManager::selectVertexHandles(const Vec3::List& positions) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectable	Model/ModelFilter.cpp	/^        bool ModelFilter::selectable(const BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
selectable	Model/ModelFilter.cpp	/^        bool ModelFilter::selectable(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
selected	Model/BrushFace.cpp	/^        bool BrushFace::selected() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
selected	Model/Object.cpp	/^        bool Object::selected() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
selectedBrushes	Model/Selection.cpp	/^        const BrushList& Selection::selectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectedBrushes	View/MapDocument.cpp	/^        const Model::BrushList& MapDocument::selectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectedEdgeCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::selectedEdgeCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectedEdgeHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToEdgesMap& VertexHandleManager::selectedEdgeHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectedEntities	Model/Selection.cpp	/^        const EntityList& Selection::selectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectedEntities	View/MapDocument.cpp	/^        const Model::EntityList& MapDocument::selectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectedFaceCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::selectedFaceCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectedFaceHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToFacesMap& VertexHandleManager::selectedFaceHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectedFaces	Model/Selection.cpp	/^        const BrushFaceList& Selection::selectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectedFaces	Model/SelectionResult.cpp	/^        const BrushFaceSet& SelectionResult::selectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
selectedFaces	View/MapDocument.cpp	/^        const Model::BrushFaceList& MapDocument::selectedFaces() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectedGameName	View/ChooseGameDialog.cpp	/^        const String ChooseGameDialog::selectedGameName() const {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
selectedGameName	View/GameListBox.cpp	/^        String GameListBox::selectedGameName() const {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
selectedObjects	Model/Selection.cpp	/^        const ObjectList& Selection::selectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
selectedObjects	Model/SelectionResult.cpp	/^        const ObjectSet& SelectionResult::selectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::Model::SelectionResult
selectedObjects	View/MapDocument.cpp	/^        const Model::ObjectList& MapDocument::selectedObjects() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectedRowKey	View/EntityPropertyGrid.cpp	/^        Model::PropertyKey EntityPropertyGrid::selectedRowKey() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
selectedTexture	View/TextureBrowser.cpp	/^        Assets::Texture* TextureBrowser::selectedTexture() const {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
selectedTexture	View/TextureBrowserView.cpp	/^        Assets::Texture* TextureBrowserView::selectedTexture() const {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
selectedVertexCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::selectedVertexCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectedVertexHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToBrushesMap& VertexHandleManager::selectedVertexHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
selectionBounds	View/MapDocument.cpp	/^        BBox3 MapDocument::selectionBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
selectionDidChange	Renderer/MapRenderer.cpp	/^        void MapRenderer::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
selectionDidChange	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
selectionDidChange	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
selectionDidChange	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
selectionDidChange	View/MapFrame.cpp	/^        void MapFrame::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
selectionDidChange	View/MapTreeView.cpp	/^        void MapTreeView::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
selectionDidChange	View/MapView.cpp	/^        void MapView::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
selectionDidChange	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
selectionDidChange	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
selectionDidChange	View/TexturingView.cpp	/^        void TexturingView::selectionDidChange(const Model::SelectionResult& result) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
selectionDidChange	View/VertexTool.cpp	/^        void VertexTool::selectionDidChange(const Model::SelectionResult& selection) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
selectionDidChangeNotifier	View/MapDocument.h	/^            Notifier1<const Model::SelectionResult&> selectionDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
separator	IO/Path.cpp	/^        char Path::separator() {$/;"	f	language:C++	class:TrenchBroom::IO::Path
separators	IO/Path.cpp	/^        const String& Path::separators() {$/;"	f	language:C++	class:TrenchBroom::IO::Path
set	PreferenceManager.h	/^        void set(Preference<T>& preference, const T& value) {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
set	Renderer/ShaderManager.h	/^            void set(const String& name, const T& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ActiveShader
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Mat2x2f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Mat3x3f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Mat4x4f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Vec2f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Vec3f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const Vec4f& value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const bool value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const double value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const float value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const int value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Renderer/ShaderProgram.cpp	/^        void ShaderProgram::set(const String& name, const size_t value) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
set	Vec.h	/^    void set(const T value) {$/;"	f	language:C++	class:Vec
setAdditionalSearchPaths	Model/Game.cpp	/^        void Game::setAdditionalSearchPaths(const IO::Path::List& searchPaths) {$/;"	f	language:C++	class:TrenchBroom::Model::Game
setAll	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setAll(const Model::BrushFace& original) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setAnchor	Renderer/TextRenderer.h	/^                void setAnchor(TextAnchor::Ptr textAnchor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
setAngle	Model/QuakeEntityRotationPolicy.cpp	/^        void QuakeEntityRotationPolicy::setAngle(Entity& entity, const PropertyKey& key, const Vec3& direction) {$/;"	f	language:C++	class:TrenchBroom::Model::QuakeEntityRotationPolicy
setApplyTinting	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::setApplyTinting(const bool applyTinting) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
setApplyTinting	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setApplyTinting(const bool applyTinting) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setApplyTinting	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::setApplyTinting(const bool applyTinting) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
setAttribs	Model/BrushFace.cpp	/^        void BrushFace::setAttribs(const BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setAttributes	Model/BrushFace.cpp	/^        void BrushFace::setAttributes(const BrushFace& other) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setBounds	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::setBounds(const BBox3& bounds) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
setBounds	Renderer/BoundsInfoRenderer.cpp	/^        void BoundsInfoRenderer::setBounds(const BBox3& bounds) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
setBoundsColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setBoundsColor(const Color& boundsColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setBrushes	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setBrushes(const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setBrushes	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::setBrushes(const Model::BrushList& frontBrushes, const Model::BrushList& backBrushes) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
setBuiltinTextureCollections	Assets/TextureManager.cpp	/^        void TextureManager::setBuiltinTextureCollections(const IO::Path::List& paths) {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
setCameraZoom	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::setCameraZoom(const float cameraZoom) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
setCapacity	Renderer/VboBlock.cpp	/^        void VboBlock::setCapacity(const size_t capacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
setCellHeight	View/CellLayout.h	/^            void setCellHeight(const float minCellHeight, const float maxCellHeight) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setCellMargin	View/CellLayout.h	/^            void setCellMargin(const float cellMargin) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setCellWidth	View/CellLayout.h	/^            void setCellWidth(const float minCellWidth, const float maxCellWidth) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setCheckBoxCount	View/FlagsEditor.cpp	/^        void FlagsEditor::setCheckBoxCount(const size_t count) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
setClickToActivate	View/ToolBox.cpp	/^        void ToolBox::setClickToActivate(const bool clickToActivate) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
setClipPlaneNormal	View/Clipper.cpp	/^        void Clipper::setClipPlaneNormal() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
setCollection	Assets/Texture.cpp	/^        void Texture::setCollection(TextureCollection* collection) {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
setColor	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::setColor(const Color& color) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
setColor	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::setColor(const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
setColor	Renderer/EdgeRenderer.cpp	/^        void EdgeRenderer::setColor(const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
setColor	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setColor(const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setColor	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::setColor(const Color& color) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
setColor	View/ColorTableSelectedCommand.cpp	/^        void ColorTableSelectedCommand::setColor(const wxColor& color) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTableSelectedCommand
setColor	View/SmartColorEditor.cpp	/^        void SmartColorEditor::setColor(const wxColor& wxColor) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
setColors	View/ColorTable.cpp	/^        void ColorTable::setColors(const ColorList& colors) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
setContains	CollectionUtils.h	/^    bool setContains(const std::vector<T>& vec, const T& object) {$/;"	f	language:C++	namespace:VectorUtils
setContentFlag	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setContentFlag(const size_t contentFlag) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setContentFlag	View/ControllerFacade.cpp	/^        bool ControllerFacade::setContentFlag(const Model::BrushFaceList& faces, const size_t index, const bool set) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setContentFlags	View/ControllerFacade.cpp	/^        bool ControllerFacade::setContentFlags(const Model::BrushFaceList& faces, int flags) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setCount	Renderer/OutlineTracer.cpp	/^        void OutlineTracer::setCount(Position::List::iterator insertPos, Position& position, Position::List& positions) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OutlineTracer
setCreate	CollectionUtils.h	/^    void setCreate(std::vector<T>& vec) {$/;"	f	language:C++	namespace:VectorUtils
setCurrent	View/GLContextHolder.cpp	/^        bool GLContextHolder::setCurrent(wxGLCanvas* canvas) {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
setDefaultPlanePoints	Model/PlanePointFinder.cpp	/^        void setDefaultPlanePoints(const Plane3& plane, BrushFace::Points& points) {$/;"	f	language:C++	namespace:TrenchBroom::Model
setDefinition	Model/Entity.cpp	/^        void Entity::setDefinition(Assets::EntityDefinition* definition) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setDescription	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::setDescription(const String& description) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
setDirection	Renderer/Camera.cpp	/^        void Camera::setDirection(const Vec3f& direction, const Vec3f& up) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
setDocumentPath	View/MapDocument.cpp	/^        void MapDocument::setDocumentPath(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
setDocumentPath	View/RecentDocumentSelectedCommand.cpp	/^        void RecentDocumentSelectedCommand::setDocumentPath(const IO::Path& documentPath) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentSelectedCommand
setDuplicate	View/KeyboardPreferencePane.h	/^            inline void setDuplicate(bool duplicate) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
setEdgeColor	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setEdgeColor(const Color& edgeColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setEntityDefinitionFile	Controller/SetEntityDefinitionFileCommand.cpp	/^        SetEntityDefinitionFileCommand::Ptr SetEntityDefinitionFileCommand::setEntityDefinitionFile(View::MapDocumentWPtr document, const IO::Path& file) {$/;"	f	language:C++	class:TrenchBroom::Controller::SetEntityDefinitionFileCommand
setEntityDefinitionFile	View/ControllerFacade.cpp	/^        bool ControllerFacade::setEntityDefinitionFile(const IO::Path& file) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setEntityProperty	Controller/EntityPropertyCommand.cpp	/^        Command::Ptr EntityPropertyCommand::setEntityProperty(View::MapDocumentWPtr document, const Model::EntityList& entities, const Model::PropertyKey& key, const Model::PropertyKey& newValue, const bool force) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
setEntityProperty	View/ControllerFacade.cpp	/^        bool ControllerFacade::setEntityProperty(Model::Entity& entity, const Model::PropertyKey& key, const Model::PropertyValue& newValue, const bool force) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setEntityProperty	View/ControllerFacade.cpp	/^        bool ControllerFacade::setEntityProperty(const Model::EntityList& entities, const Model::PropertyKey& key, const Model::PropertyValue& newValue, const bool force) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setExtraObjectProperties	IO/QuakeMapParser.cpp	/^        void QuakeMapParser::setExtraObjectProperties(Model::Object* object, const ExtraProperties properties) const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
setFace	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::setFace(Model::BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
setFaceAttributes	View/Clipper.cpp	/^        void Clipper::setFaceAttributes(const Model::BrushFaceList& faces, Model::BrushFace& frontFace, Model::BrushFace& backFace) const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
setFaceAttributes	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceAttributes(const Model::BrushFaceList& faces, const Model::BrushFace& source) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFaceColor	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setFaceColor(const Color& faceColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setFaceRotation	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceRotation(const Model::BrushFaceList& faces, const float rotation, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFaceXOffset	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceXOffset(const Model::BrushFaceList& faces, const float xOffset, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFaceXScale	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceXScale(const Model::BrushFaceList& faces, const float xScale, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFaceYOffset	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceYOffset(const Model::BrushFaceList& faces, const float yOffset, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFaceYScale	View/ControllerFacade.cpp	/^        bool ControllerFacade::setFaceYScale(const Model::BrushFaceList& faces, const float yScale, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setFadeDistance	Renderer/TextRenderer.h	/^            void setFadeDistance(float fadeDistance)  {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
setFarPlane	Renderer/Camera.cpp	/^        void Camera::setFarPlane(const float farPlane) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
setFilePosition	Model/BrushFace.cpp	/^        void BrushFace::setFilePosition(const size_t lineNumber, const size_t lineCount) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setFilePosition	Model/Object.cpp	/^        void Object::setFilePosition(const size_t lineNumber, const size_t lineCount) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
setFilterText	View/EntityBrowserView.cpp	/^        void EntityBrowserView::setFilterText(const String& filterText) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
setFilterText	View/TextureBrowserView.cpp	/^        void TextureBrowserView::setFilterText(const String& filterText) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
setFlagValue	View/FlagsEditor.cpp	/^        void FlagsEditor::setFlagValue(const int on, const int mixed) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
setFlagValue	View/FlagsPopupEditor.cpp	/^        void FlagsPopupEditor::setFlagValue(const int set, const int mixed) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
setFlags	View/FlagsEditor.cpp	/^        void FlagsEditor::setFlags(const wxArrayInt& values, const wxArrayString& labels, const wxArrayString& tooltips) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
setFlags	View/FlagsEditor.cpp	/^        void FlagsEditor::setFlags(const wxArrayString& labels, const wxArrayString& tooltips) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsEditor
setFlags	View/FlagsPopupEditor.cpp	/^        void FlagsPopupEditor::setFlags(const wxArrayInt& values, const wxArrayString& labels, const wxArrayString& tooltips) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
setFlags	View/FlagsPopupEditor.cpp	/^        void FlagsPopupEditor::setFlags(const wxArrayString& labels, const wxArrayString& tooltips) {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
setForceHideSelectionGuide	Renderer/RenderContext.cpp	/^        void RenderContext::setForceHideSelectionGuide() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setForceShowSelectionGuide	Renderer/RenderContext.cpp	/^        void RenderContext::setForceShowSelectionGuide() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setFov	Renderer/PerspectiveCamera.cpp	/^        void PerspectiveCamera::setFov(const float fov) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PerspectiveCamera
setFree	Renderer/VboBlock.cpp	/^        void VboBlock::setFree(const bool free) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
setGameName	View/GameSelectionCommand.cpp	/^        void GameSelectionCommand::setGameName(const String& gameName) {$/;"	f	language:C++	class:TrenchBroom::View::GameSelectionCommand
setGamePath	Model/Game.cpp	/^        void Game::setGamePath(const IO::Path& gamePath) {$/;"	f	language:C++	class:TrenchBroom::Model::Game
setGamePath	Model/GameFactory.cpp	/^        void GameFactory::setGamePath(const String& gameName, const IO::Path& gamePath) {$/;"	f	language:C++	class:TrenchBroom::Model::GameFactory
setGrayscale	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setGrayscale(const bool grayscale) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setGroup	View/EntityBrowserView.cpp	/^        void EntityBrowserView::setGroup(const bool group) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
setGroup	View/TextureBrowserView.cpp	/^        void TextureBrowserView::setGroup(const bool group) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
setGroupMargin	View/CellLayout.h	/^            void setGroupMargin(const float groupMargin) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setHandler	View/RecentDocuments.h	/^            void setHandler(EventHandler* handler, Function function) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
setHidden	Model/Issue.cpp	/^        void Issue::setHidden(const bool hidden) {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
setHiddenGenerators	View/IssueBrowser.cpp	/^            void setHiddenGenerators(const Model::IssueType hiddenGenerators) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
setHiddenIssues	Model/Object.cpp	/^        void Object::setHiddenIssues(IssueType hiddenIssues) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
setHideSelection	Renderer/RenderContext.cpp	/^        void RenderContext::setHideSelection() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setHideSelectionGuide	Renderer/RenderContext.cpp	/^        void RenderContext::setHideSelectionGuide() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setHideUnused	View/EntityBrowserView.cpp	/^        void EntityBrowserView::setHideUnused(const bool hideUnused) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
setHideUnused	View/TextureBrowserView.cpp	/^        void TextureBrowserView::setHideUnused(const bool hideUnused) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
setHighlightColor	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setHighlightColor(const Color& highlightColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setHits	View/InputState.cpp	/^        void InputState::setHits(const Hits& hits) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
setIdentity	Mat.h	/^    Mat<T,R,C>& setIdentity() {$/;"	f	language:C++	class:Mat
setInsert	CollectionUtils.h	/^    bool setInsert(std::vector<T>& vec, const T& object) {$/;"	f	language:C++	namespace:VectorUtils
setInsert	CollectionUtils.h	/^    void setInsert(std::vector<T>& vec, I cur, const I end) {$/;"	f	language:C++	namespace:VectorUtils
setIntersection	CollectionUtils.h	/^    std::vector<T> setIntersection(const std::vector<T> vec1, const std::vector<T> vec2) {$/;"	f	language:C++	namespace:VectorUtils
setIsSet	CollectionUtils.h	/^    bool setIsSet(const std::vector<T>& set) {$/;"	f	language:C++	namespace:VectorUtils
setIsWorldspawn	Model/Entity.cpp	/^        void Entity::setIsWorldspawn() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setIssueHidden	Model/IssueManager.cpp	/^        void IssueManager::setIssueHidden(Issue* issue, const bool hidden) {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
setIssueHidden	Model/Object.cpp	/^        void Object::setIssueHidden(const IssueType type, const bool hidden) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
setIssueVisibility	View/IssueBrowser.cpp	/^        void IssueBrowser::setIssueVisibility(const bool show) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
setKey	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::setKey(const Model::PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
setKey	View/EntityPropertySelectedCommand.cpp	/^        void EntityPropertySelectedCommand::setKey(const Model::PropertyKey& key) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertySelectedCommand
setLeftNull	Model/BrushEdge.cpp	/^        void BrushEdge::setLeftNull() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
setLocked	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::setLocked(const bool locked) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
setMap	Model/Entity.cpp	/^        void Entity::setMap(Map* map) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setMaxUpScale	View/CellLayout.h	/^            void setMaxUpScale(const float maxUpScale) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setMinus	CollectionUtils.h	/^    std::vector<T> setMinus(const std::vector<T> minuend, const std::vector<T> subtrahend) {$/;"	f	language:C++	namespace:VectorUtils
setMipBufferSize	Assets/Texture.cpp	/^        void setMipBufferSize(Assets::TextureBuffer::List& buffers, const size_t width, const size_t height) {$/;"	f	language:C++	namespace:TrenchBroom::Assets
setModel	Model/Entity.cpp	/^        void Entity::setModel(Assets::EntityModel* model) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setModifierKeys	View/InputState.cpp	/^        void InputState::setModifierKeys(const ModifierKeyState keys) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
setMods	Controller/SetModsCommand.cpp	/^        SetModsCommand::Ptr SetModsCommand::setMods(View::MapDocumentWPtr document, const StringList& mods) {$/;"	f	language:C++	class:TrenchBroom::Controller::SetModsCommand
setMods	View/ControllerFacade.cpp	/^        bool ControllerFacade::setMods(const StringList& mods) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setName	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::setName(const String& name) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
setNearPlane	Renderer/Camera.cpp	/^        void Camera::setNearPlane(const float nearPlane) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
setNewKey	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::setNewKey(const Model::PropertyKey& newKey) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
setNewValue	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::setNewValue(const Model::PropertyValue& newValue) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
setNext	Renderer/VboBlock.cpp	/^        void VboBlock::setNext(VboBlock* next) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
setNull	Mat.h	/^    Mat<T,R,C>& setNull() {$/;"	f	language:C++	class:Mat
setNull	Vec.h	/^    void setNull() {$/;"	f	language:C++	class:Vec
setOccludedBoundsColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setOccludedBoundsColor(const Color& occludedBoundsColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setOccludedColor	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setOccludedColor(const Color& occludedColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setOccludedEdgeColor	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setOccludedEdgeColor(const Color& occludedEdgeColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setOrigin	Model/Entity.cpp	/^        void Entity::setOrigin(const Vec3& origin) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setOuterMargin	View/CellLayout.h	/^            void setOuterMargin(const float outerMargin) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setOverlayBackgroundColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setOverlayBackgroundColor(const Color& overlayBackgroundColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setOverlayTextColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setOverlayTextColor(const Color& overlayTextColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setOverridden	Assets/Texture.cpp	/^        void Texture::setOverridden(const bool overridden) {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
setOverrideBoundsColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setOverrideBoundsColor(const bool overrideBoundsColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setOverrideScale	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::setOverrideScale(const Vec2f& scale) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
setOverrideTranslate	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::setOverrideTranslate(const Vec2f& offset) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
setParent	Model/Brush.cpp	/^        void Brush::setParent(Entity* parent) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
setParent	Model/BrushFace.cpp	/^        void BrushFace::setParent(Brush* parent) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setParentLogger	View/CachingLogger.cpp	/^        void CachingLogger::setParentLogger(Logger* logger) {$/;"	f	language:C++	class:TrenchBroom::View::CachingLogger
setPickRay	View/InputState.cpp	/^        void InputState::setPickRay(const Ray3& pickRay) {$/;"	f	language:C++	class:TrenchBroom::View::InputState
setPlanePoints	Plane.h	/^bool setPlanePoints(Plane<T,3>& plane, const Vec<T,3>& point0, const Vec<T,3>& point1, const Vec<T,3>& point2) {$/;"	f	language:C++
setPlanePoints	Plane.h	/^bool setPlanePoints(Plane<T,3>& plane, const Vec<T,3>* points) {$/;"	f	language:C++
setPoints	Model/BrushFace.cpp	/^        void BrushFace::setPoints(const Vec3& point0, const Vec3& point1, const Vec3& point2) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setPosition	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::setPosition(const Vec3& position) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
setPositions	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setPositions(Vec3f::List& positions) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setPrevious	Renderer/VboBlock.cpp	/^        void VboBlock::setPrevious(VboBlock* previous) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
setProject	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::setProject(const bool project) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
setProperties	Model/Entity.cpp	/^        void Entity::setProperties(const EntityProperty::List& properties) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
setProperties	Model/EntityProperties.cpp	/^        void EntityProperties::setProperties(const EntityProperty::List& properties) {$/;"	f	language:C++	class:TrenchBroom::Model::EntityProperties
setRadius	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setRadius(float radius, size_t iterations) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setRemove	CollectionUtils.h	/^    bool setRemove(std::vector<T>& vec, const T& object) {$/;"	f	language:C++	namespace:VectorUtils
setRemove	CollectionUtils.h	/^    void setRemove(std::vector<T>& vec, I cur, const I end) {$/;"	f	language:C++	namespace:VectorUtils
setRenderOccluded	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setRenderOccluded(const bool renderOccluded) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
setRenderOccludedBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setRenderOccludedBounds(const bool renderOccludedBounds) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setRenderOccludedEdges	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setRenderOccludedEdges(const bool renderOccludedEdges) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setRenderOptions	View/MapView.cpp	/^        void MapView::setRenderOptions(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
setRenderOptions	View/TextureTool.cpp	/^        void TextureToolHelper::setRenderOptions(const InputState& inputState, const bool dragging, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
setRenderOptions	View/Tool.h	/^            void setRenderOptions(const InputState& inputState, Renderer::RenderContext& renderContext) const {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
setRenderOptions	View/ToolBox.cpp	/^        void ToolBox::setRenderOptions(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
setRightNull	Model/BrushEdge.cpp	/^        void BrushEdge::setRightNull() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
setRotation	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setRotation(const float rotation) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setRotation	Model/BrushFace.cpp	/^        void BrushFace::setRotation(const float rotation) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setRotation	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setRotation(const float rotation) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setRotation	Quat.h	/^    Quat<T>& setRotation(const Vec<T,3>& axis, const T angle) {$/;"	f	language:C++	class:Quat
setRotationCenter	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::setRotationCenter(const Vec2f& rotationCenterInFaceCoords) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
setRowMargin	View/CellLayout.h	/^            void setRowMargin(const float rowMargin) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setScale	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::setScale(const bool on) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
setScaleOrigin	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::setScaleOrigin(const Vec2f& scaleOriginInFaceCoords) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
setSelectedTexture	View/TextureBrowser.cpp	/^        void TextureBrowser::setSelectedTexture(Assets::Texture* selectedTexture) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
setSelectedTexture	View/TextureBrowserView.cpp	/^        void TextureBrowserView::setSelectedTexture(Assets::Texture* selectedTexture) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
setSelection	View/ColorTable.cpp	/^        void ColorTable::setSelection(const ColorList& colors) {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
setShortcut	View/Menu.cpp	/^        void ShortcutMenuItem::setShortcut(const KeyboardShortcut& shortcut) const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
setShowHiddenIssues	View/IssueBrowser.cpp	/^            void setShowHiddenIssues(const bool showHiddenIssues) {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
setShowSelectionGuide	Renderer/RenderContext.cpp	/^        void RenderContext::setShowSelectionGuide() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setShowSelectionGuide	Renderer/RenderContext.cpp	/^        void RenderContext::setShowSelectionGuide(const ShowSelectionGuide showSelectionGuide) {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
setShowSizes	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::setShowSizes(const bool showSizes) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
setSide	Model/BrushFace.cpp	/^        void BrushFace::setSide(BrushFaceGeometry* side) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setSize	IO/EntityDefinitionClassInfo.cpp	/^        void EntityDefinitionClassInfo::setSize(const BBox3& size) {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
setSize	View/Grid.cpp	/^        void Grid::setSize(const size_t size) {$/;"	f	language:C++	class:TrenchBroom::View::Grid
setSkipEol	IO/QuakeMapParser.cpp	/^        void QuakeMapTokenizer::setSkipEol(bool skipEol) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapTokenizer
setSortOrder	View/EntityBrowserView.cpp	/^        void EntityBrowserView::setSortOrder(const Assets::EntityDefinitionManager::SortOrder sortOrder) {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
setSortOrder	View/TextureBrowserView.cpp	/^        void TextureBrowserView::setSortOrder(const Assets::TextureManager::SortOrder sortOrder) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
setState	Renderer/Vbo.cpp	/^        void SetVboState::setState(const VboState::Type newState) {$/;"	f	language:C++	class:TrenchBroom::Renderer::SetVboState
setSubDivisions	View/TexturingView.cpp	/^        void TexturingView::setSubDivisions(const Vec2i& subDivisions) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
setSubDivisions	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::setSubDivisions(const Vec2i& subDivisions) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
setSurfaceContents	Model/BrushFace.cpp	/^        void BrushFace::setSurfaceContents(const int surfaceContents) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setSurfaceContents	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setSurfaceContents(const int surfaceContents) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setSurfaceFlag	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setSurfaceFlag(const size_t surfaceFlag) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setSurfaceFlag	View/ControllerFacade.cpp	/^        bool ControllerFacade::setSurfaceFlag(const Model::BrushFaceList& faces, const size_t index, const bool set) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setSurfaceFlags	Model/BrushFace.cpp	/^        void BrushFace::setSurfaceFlags(const int surfaceFlags) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setSurfaceFlags	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setSurfaceFlags(const int surfaceFlags) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setSurfaceValue	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setSurfaceValue(const float surfaceValue) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setSurfaceValue	Model/BrushFace.cpp	/^        void BrushFace::setSurfaceValue(const float surfaceValue) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setSurfaceValue	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setSurfaceValue(const float surfaceValue) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setSurfaceValue	View/ControllerFacade.cpp	/^        bool ControllerFacade::setSurfaceValue(const Model::BrushFaceList& faces, const float value, const bool add) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setTexture	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setTexture(Assets::Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setTexture	Model/BrushFace.cpp	/^        void BrushFace::setTexture(Assets::Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setTexture	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setTexture(Assets::Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setTexture	View/ControllerFacade.cpp	/^        bool ControllerFacade::setTexture(const Model::BrushFaceList& faces, Assets::Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
setTexture	View/TextureSelectedCommand.cpp	/^        void TextureSelectedCommand::setTexture(Assets::Texture* texture) {$/;"	f	language:C++	class:TrenchBroom::View::TextureSelectedCommand
setTextureLock	View/MapDocument.cpp	/^        void MapDocument::setTextureLock(const bool textureLock) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
setTintColor	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setTintColor(const Color& tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setTintColor	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::setTintColor(const Color& tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
setTintColor	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::setTintColor(const Color& tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
setTintColor	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::setTintColor(const Color& tintColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
setTintFaces	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::setTintFaces(const bool tintFaces) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
setTitleMargin	View/CellLayout.h	/^            void setTitleMargin(const float titleMargin) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setTranslate	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::setTranslate(const bool on) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
setUnion	CollectionUtils.h	/^    std::vector<T> setUnion(const std::vector<T> vec1, const std::vector<T> vec2) {$/;"	f	language:C++	namespace:VectorUtils
setUseColor	Renderer/EdgeRenderer.cpp	/^        void EdgeRenderer::setUseColor(bool useColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EdgeRenderer
setUseColor	Renderer/TriangleRenderer.cpp	/^        void TriangleRenderer::setUseColor(const bool useColor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TriangleRenderer
setValue	Preference.h	/^        void setValue(const T& value) {$/;"	f	language:C++	class:TrenchBroom::Preference
setValue	Preference.h	/^        void setValue(const ValueHolderBase* valueHolder) {$/;"	f	language:C++	class:TrenchBroom::Preference
setValues	View/FlagChangedCommand.cpp	/^        void FlagChangedCommand::setValues(const size_t index, const int flagSetValue, const int flagMixedValue) {$/;"	f	language:C++	class:TrenchBroom::View::FlagChangedCommand
setVerticalRestriction	View/MovementRestriction.cpp	/^        void MovementRestriction::setVerticalRestriction(const bool verticalRestriction) {$/;"	f	language:C++	class:TrenchBroom::View::MovementRestriction
setViewport	Renderer/Camera.cpp	/^        void Camera::setViewport(const Viewport& viewport) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
setWidth	View/CellLayout.h	/^            void setWidth(const float width) {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
setXOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setXOffset(const float xOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setXOffset	Model/BrushFace.cpp	/^        void BrushFace::setXOffset(const float i_xOffset) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setXOffset	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setXOffset(const float xOffset) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setXScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setXScale(const float xScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setXScale	Model/BrushFace.cpp	/^        void BrushFace::setXScale(const float i_xScale) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setXScale	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setXScale(const float xScale) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setXYRange	View/MiniMapZView.cpp	/^        void MiniMapZView::setXYRange(const BBox2f& xyRange) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
setYOffset	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setYOffset(const float yOffset) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setYOffset	Model/BrushFace.cpp	/^        void BrushFace::setYOffset(const float i_yOffset) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setYOffset	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setYOffset(const float yOffset) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setYScale	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::setYScale(const float yScale) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
setYScale	Model/BrushFace.cpp	/^        void BrushFace::setYScale(const float i_yScale) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
setYScale	Model/BrushFace.cpp	/^        void BrushFaceAttribs::setYScale(const float yScale) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
setZRange	View/MiniMapXYView.cpp	/^        void MiniMapXYView::setZRange(const BBox1f& zRange) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
setZoom	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::setZoom(const Vec2f& zoom) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
setZoom	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::setZoom(const float zoom) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
setup	Renderer/AttributeSpec.h	/^            static void setup(const size_t index, const size_t stride, const size_t offset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::AttributeSpec
setup	Renderer/AttributeSpec.h	/^            static void setup(const size_t index, const size_t stride, const size_t offset) {}$/;"	f	language:C++	class:TrenchBroom::Renderer::AttributeSpec
setup	Renderer/VertexArray.h	/^            virtual void setup() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
setup	Renderer/VertexSpec.h	/^            static void setup(const size_t baseOffset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec1
setup	Renderer/VertexSpec.h	/^            static void setup(const size_t baseOffset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec2
setup	Renderer/VertexSpec.h	/^            static void setup(const size_t baseOffset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec3
setup	Renderer/VertexSpec.h	/^            static void setup(const size_t baseOffset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec4
setup	Renderer/VertexSpec.h	/^            static void setup(const size_t baseOffset) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexSpec5
setupBrushRenderer	Renderer/ClipperRenderer.cpp	/^        void ClipperRenderer::setupBrushRenderer(BrushRenderer& renderer, const bool keep) {$/;"	f	language:C++	class:TrenchBroom::Renderer::ClipperRenderer
setupCamera	View/TexturingView.cpp	/^        void TexturingView::setupCamera() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
setupGL	Renderer/MapRenderer.cpp	/^        void MapRenderer::setupGL(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
setupGL	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::setupGL(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
setupGL	View/CellView.h	/^            void setupGL() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
setupGL	View/MapView.cpp	/^        void MapView::setupGL(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
setupGL	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::setupGL(Renderer::RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
setupGL	View/TexturingView.cpp	/^        void TexturingView::setupGL(Renderer::RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
setupHandle	Renderer/PointHandleRenderer.cpp	/^        void PointHandleRenderer::setupHandle(RenderContext& renderContext, ActiveShader& shader) {$/;"	f	language:C++	class:TrenchBroom::Renderer::PointHandleRenderer
shader	Renderer/FaceRenderer.cpp	/^            ActiveShader& shader;$/;"	m	language:C++	struct:TrenchBroom::Renderer::SetShaderParms	file:
shaderManager	Renderer/RenderContext.cpp	/^        ShaderManager& RenderContext::shaderManager() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
shaderManager	View/GLContextHolder.cpp	/^        Renderer::ShaderManager& GLContextHolder::shaderManager() {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
shift	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::shift(const size_t offset) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
shiftLeft	CollectionUtils.h	/^    void shiftLeft(std::vector<T>& vec, const size_t offset) {$/;"	f	language:C++	namespace:VectorUtils
shiftRight	CollectionUtils.h	/^    void shiftRight(std::vector<T>& vec, const size_t offset) {$/;"	f	language:C++	namespace:VectorUtils
shortName	Assets/EntityDefinition.cpp	/^        String EntityDefinition::shortName() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
shortcut	View/KeyboardPreferencePane.cpp	/^        const KeyboardShortcut& MenuKeyboardShortcutEntry::shortcut() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuKeyboardShortcutEntry
shortcut	View/KeyboardPreferencePane.cpp	/^        const KeyboardShortcut& SimpleKeyboardShortcutEntry::shortcut() const {$/;"	f	language:C++	class:TrenchBroom::View::SimpleKeyboardShortcutEntry
shortcut	View/Menu.cpp	/^        const KeyboardShortcut& ShortcutMenuItem::shortcut() const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
shortcutByKeys	View/Menu.cpp	/^        const KeyboardShortcut* MenuItem::shortcutByKeys(const int key, const int modifierKey1, const int modifierKey2, const int modifierKey3) const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItem
shortcutByKeys	View/Menu.cpp	/^        const KeyboardShortcut* MenuItemParent::shortcutByKeys(const int key, const int modifierKey1, const int modifierKey2, const int modifierKey3) const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
shortcutByKeys	View/Menu.cpp	/^        const KeyboardShortcut* ShortcutMenuItem::shortcutByKeys(const int key, const int modifierKey1, const int modifierKey2, const int modifierKey3) const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
shortcutDisplayText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::shortcutDisplayText() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
shortcutDisplayText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::shortcutDisplayText(int modifierKey1, int modifierKey2, int modifierKey3, const int key) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
shortcutMenuText	View/KeyboardShortcut.cpp	/^        wxString KeyboardShortcut::shortcutMenuText() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
showIssue	View/IssueBrowser.cpp	/^            bool showIssue(Model::Issue* issue) const {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
showLink	Renderer/EntityLinkRenderer.cpp	/^        bool EntityLinkRenderer::Filter::showLink(const Model::Entity* source, const Model::Entity* target, const bool isConnectedToSelected) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer::Filter
showPopupMenu	View/ToolBox.cpp	/^        void ToolBox::showPopupMenu() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
showPopupMenu	View/ToolBox.cpp	/^        void ToolBoxHelper::showPopupMenu() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxHelper
showSelectionGuide	Renderer/RenderContext.cpp	/^        bool RenderContext::showSelectionGuide() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
showSurfaceAttribEditors	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::showSurfaceAttribEditors() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
showWelcomeFrame	TrenchBroomApp.cpp	/^        void TrenchBroomApp::showWelcomeFrame() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
side	Model/BrushFace.cpp	/^        BrushFaceGeometry* BrushFace::side() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
sides	Model/BrushGeometry.h	/^            BrushFaceGeometryList sides;$/;"	m	language:C++	class:TrenchBroom::Model::BrushGeometry
sides	Model/IntersectBrushGeometryWithFace.cpp	/^        const BrushFaceGeometryList& IntersectBrushGeometryWithFace::sides() const {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
size	BBox.h	/^    const Vec<T,S> size() const {$/;"	f	language:C++	class:BBox
size	ByteBuffer.h	/^    size_t size() const {$/;"	f	language:C++	class:Buffer
size	Hit.cpp	/^    size_t Hits::size() const {$/;"	f	language:C++	class:TrenchBroom::Hits
size	IO/EntityDefinitionClassInfo.cpp	/^        const BBox3& EntityDefinitionClassInfo::size() const {$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionClassInfo
size	IO/MappedFile.cpp	/^        size_t MappedFile::size() const {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
size	IO/Wad.cpp	/^        size_t WadEntry::size() const {$/;"	f	language:C++	class:TrenchBroom::IO::WadEntry
size	Renderer/FontDescriptor.cpp	/^        size_t FontDescriptor::size() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontDescriptor
size	Renderer/Mesh.h	/^            const size_t size() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
size	Renderer/TextRenderer.h	/^                const Vec2f& size() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
size	Renderer/VertexArray.cpp	/^        size_t VertexArray::size() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
size	Renderer/VertexArray.h	/^            size_t size() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
size	View/CellLayout.h	/^            size_t size() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
size	View/CellLayout.h	/^            size_t size() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutRow
size	View/CellLayout.h	/^            size_t size() {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
size	View/Grid.cpp	/^        size_t Grid::size() const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
size_t	View/MoveTextureHelper.cpp	/^        Vec3::List MoveTextureHelper::selectApplicablePlaneNormals(const size_t (&counts)[3], const Model::BrushFace* face) const {$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper	file:
size_t	View/MoveTextureHelper.h	/^            Vec3::List selectApplicablePlaneNormals(const size_t (&counts)[3], const Model::BrushFace* face) const;$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper
size_t	View/MoveTextureHelper.h	/^            void getPlaneNormals(const size_t (&counts)[3], Vec3::List& normals) const;$/;"	m	language:C++	class:TrenchBroom::View::MoveTextureHelper
skinIndex	Assets/ModelDefinition.h	/^            size_t skinIndex;$/;"	m	language:C++	struct:TrenchBroom::Assets::ModelSpecification
slice	Renderer/Transformation.cpp	/^        Transformation Transformation::slice() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
snap	View/Grid.cpp	/^        FloatType Grid::snap(const FloatType f) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snap	View/Grid.cpp	/^        Vec3 Grid::snap(const Vec3& p, const Plane3& onPlane) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snap	View/Grid.cpp	/^        bool Grid::snap() const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snap	View/Grid.h	/^            Vec<T,S> snap(const Vec<T,S>& p) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapAllVertices	Controller/SnapBrushVerticesCommand.cpp	/^        SnapBrushVerticesCommand::Ptr SnapBrushVerticesCommand::snapAllVertices(View::MapDocumentWPtr document, const Model::BrushList& brushes, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
snapAngle	View/Grid.cpp	/^        FloatType Grid::snapAngle(const FloatType a) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapBoth	View/TexturingViewHelper.cpp	/^        Vec2f snapBoth(const Vec2f& delta, const Vec2f& distance, const float cameraZoom) {$/;"	f	language:C++	namespace:TrenchBroom::View
snapDelta	View/MoveToolHelper.cpp	/^        Vec3 MoveDelegate::snapDelta(const InputState& inputState, const Vec3& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
snapDown	View/Grid.cpp	/^        FloatType Grid::snapDown(const FloatType f, bool skip) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapDown	View/Grid.h	/^            Vec<T,S> snapDown(const Vec<T,S>& p, const bool skip = false) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapIndividual	View/TexturingViewHelper.cpp	/^        Vec2f snapIndividual(const Vec2f& delta, const Vec2f& distance, const float cameraZoom) {$/;"	f	language:C++	namespace:TrenchBroom::View
snapOffset	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::snapOffset(const Vec2f& delta) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapPlanePoints	Controller/FixPlanePointsCommand.cpp	/^        FixPlanePointsCommand::Ptr FixPlanePointsCommand::snapPlanePoints(View::MapDocumentWPtr document, const Model::BrushList& brushes) {$/;"	f	language:C++	class:TrenchBroom::Controller::FixPlanePointsCommand
snapPlanePoints	View/ControllerFacade.cpp	/^        bool ControllerFacade::snapPlanePoints(Model::Brush& brush) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
snapPlanePointsToInteger	Model/Brush.cpp	/^        void Brush::snapPlanePointsToInteger(const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
snapPlanePointsToInteger	Model/BrushFace.cpp	/^        void BrushFace::snapPlanePointsToInteger() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
snapRotationAngle	View/TexturingViewHelper.cpp	/^        float TexturingViewHelper::snapRotationAngle(const float angle) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapRotationCenter	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::snapRotationCenter(const Vec2f& rotationCenterInFaceCoords) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapScaleHandle	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::snapScaleHandle(const Vec2f& scaleHandleInFaceCoords) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapScaleOrigin	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::snapScaleOrigin(const Vec2f& deltaInFaceCoords) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapToPoints	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::snapToPoints(const Vec2f& pointInFaceCoords, const Vec3::List& points) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
snapTowards	View/Grid.h	/^            Vec<T,S> snapTowards(const Vec<T,S>& p, const Vec<T,S>& d, const bool skip = false) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapUp	View/Grid.cpp	/^        FloatType Grid::snapUp(const FloatType f, bool skip) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapUp	View/Grid.h	/^            Vec<T,S> snapUp(const Vec<T,S>& p, const bool skip = false) const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
snapVertex	Model/SnapBrushVerticesAlgorithm.cpp	/^        Vec3 SnapBrushVerticesAlgorithm::snapVertex(const Vec3& position, const size_t snapTo) const {$/;"	f	language:C++	class:TrenchBroom::Model::SnapBrushVerticesAlgorithm
snapVertices	Controller/SnapBrushVerticesCommand.cpp	/^        SnapBrushVerticesCommand::Ptr SnapBrushVerticesCommand::snapVertices(View::MapDocumentWPtr document, const Model::VertexToBrushesMap& vertices, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::Controller::SnapBrushVerticesCommand
snapVertices	Model/Brush.cpp	/^        Vec3::List Brush::snapVertices(const BBox3& worldBounds, const Vec3::List& vertexPositions, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
snapVertices	Model/BrushGeometry.cpp	/^        SnapVerticesResult BrushGeometry::snapVertices(const Vec3::List& vertexPositions, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
snapVertices	View/ControllerFacade.cpp	/^        bool ControllerFacade::snapVertices(const Model::BrushList& brushes, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
snapVertices	View/ControllerFacade.cpp	/^        bool ControllerFacade::snapVertices(const Model::VertexToBrushesMap& vertices, const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
snapVertices	View/MapView.cpp	/^        void MapView::snapVertices(const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::View::MapView
snapVertices	View/VertexTool.cpp	/^        void VertexTool::snapVertices(const size_t snapTo) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
sortAndRemoveDuplicates	CollectionUtils.h	/^    void sortAndRemoveDuplicates(std::vector<T>& vec) {$/;"	f	language:C++	namespace:VectorUtils
sortAndRemoveDuplicates	CollectionUtils.h	/^    void sortAndRemoveDuplicates(std::vector<T>& vec, const Cmp& cmp) {$/;"	f	language:C++	namespace:VectorUtils
sortCaseInsensitive	StringUtils.cpp	/^    void sortCaseInsensitive(StringList& strs) {$/;"	f	language:C++	namespace:StringUtils
sortCaseSensitive	StringUtils.cpp	/^    void sortCaseSensitive(StringList& strs) {$/;"	f	language:C++	namespace:StringUtils
sortModifierKeys	View/KeyboardShortcut.cpp	/^        void KeyboardShortcut::sortModifierKeys(int& key1, int& key2, int& key3) {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
spawnflags	Assets/EntityDefinition.cpp	/^        const FlagsPropertyDefinition* EntityDefinition::spawnflags() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
sphere3D	Renderer/RenderUtils.cpp	/^        Vec3f::List sphere3D(const float radius, const size_t iterations) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
spinControlEventFunction	View/SpinControl.h	/^typedef void (wxEvtHandler::*spinControlEventFunction)(SpinControlEvent&);$/;"	t	language:C++
split	Model/BrushEdge.cpp	/^        BrushVertex* BrushEdge::split(const Plane3& plane) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
split	Renderer/VboBlock.cpp	/^        VboBlock* VboBlock::split(const size_t capacity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
split	StringUtils.h	/^    StringList split(const String& str, D d) {$/;"	f	language:C++	namespace:StringUtils
splitAndTrim	StringUtils.h	/^    StringList splitAndTrim(const String& str, D d) {$/;"	f	language:C++	namespace:StringUtils
splitBrushes	View/ResizeBrushesTool.cpp	/^        bool ResizeBrushesTool::splitBrushes(const InputState& inputState) const {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
splitBrushes	View/ResizeBrushesTool.cpp	/^        bool ResizeBrushesTool::splitBrushes(const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
splitEdge	Model/Brush.cpp	/^        Vec3 Brush::splitEdge(const BBox3& worldBounds, const Edge3& edgePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
splitEdge	Model/BrushGeometry.cpp	/^        SplitResult BrushGeometry::splitEdge(const BBox3& worldBounds, const Edge3& edgePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
splitEdge	Model/SplitBrushEdgeAlgorithm.cpp	/^        BrushVertex* SplitBrushEdgeAlgorithm::splitEdge(BrushGeometry& geometry, BrushEdge* edge) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushEdgeAlgorithm
splitEdges	View/ControllerFacade.cpp	/^        bool ControllerFacade::splitEdges(const Model::VertexToEdgesMap& edges, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
splitFace	Model/Brush.cpp	/^        Vec3 Brush::splitFace(const BBox3& worldBounds, const Polygon3& facePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
splitFace	Model/BrushGeometry.cpp	/^        SplitResult BrushGeometry::splitFace(const BBox3& worldBounds, const Polygon3& facePosition, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
splitFace	Model/SplitBrushFaceAlgorithm.cpp	/^        BrushVertex* SplitBrushFaceAlgorithm::splitFace(BrushGeometry& geometry, BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::SplitBrushFaceAlgorithm
splitFaces	View/ControllerFacade.cpp	/^        bool ControllerFacade::splitFaces(const Model::VertexToFacesMap& faces, const Vec3& delta) {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
splitNode	StringIndex.h	/^            void splitNode(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::StringIndex::Node
splitUsingEdgeMarks	Model/BrushFaceGeometry.cpp	/^        BrushEdge* BrushFaceGeometry::splitUsingEdgeMarks() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
squaredDistanceTo	Renderer/Camera.cpp	/^        float Camera::squaredDistanceTo(const Vec3f& point) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
squaredDistanceTo	Vec.h	/^    T squaredDistanceTo(const Vec<T,S>& other) const {$/;"	f	language:C++	class:Vec
squaredDistanceToPoint	Ray.h	/^    const PointDistance squaredDistanceToPoint(const Vec<T,S>& point) const {$/;"	f	language:C++	class:Ray
squaredDistanceToSegment	Ray.h	/^    const LineDistance squaredDistanceToSegment(const Vec<T,S>& start, const Vec<T,3>& end) const {$/;"	f	language:C++	class:Ray
squaredLength	Vec.h	/^    T squaredLength() const {$/;"	f	language:C++	class:Vec
start	Edge.h	/^        Vec<T,S> start;$/;"	m	language:C++	struct:TrenchBroom::Edge
start	Model/BrushEdge.h	/^            BrushVertex* start;$/;"	m	language:C++	class:TrenchBroom::Model::BrushEdge
startDrag	View/TextureTool.cpp	/^        bool TextureToolHelper::startDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
startMouseDrag	View/Tool.h	/^            Tool* startMouseDrag(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ToolImpl
startMove	View/MoveToolHelper.cpp	/^        bool MoveDelegate::startMove(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
startPlaneDrag	View/MoveToolHelper.cpp	/^        bool MoveHelper::startPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::MoveHelper
startPlaneDrag	View/RotateToolHelper.cpp	/^        bool RotateHelper::startPlaneDrag(const InputState& inputState, Plane3& plane, Vec3& initialPoint) {$/;"	f	language:C++	class:TrenchBroom::View::RotateHelper
startRotate	View/RotateToolHelper.cpp	/^        bool RotateDelegate::startRotate(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
startVertex	Model/BrushEdge.cpp	/^        BrushVertex* BrushEdge::startVertex(const BrushFaceGeometry* side) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
startVertex	Model/BrushEdge.cpp	/^        const BrushVertex* BrushEdge::startVertex(const BrushFaceGeometry* side) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
state	Controller/Command.cpp	/^        Command::CommandState Command::state() const {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
state	Renderer/Vbo.cpp	/^        VboState::Type Vbo::state() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
step	View/Animation.cpp	/^        bool Animation::step(const wxLongLong delta) {$/;"	f	language:C++	class:TrenchBroom::View::Animation
storeCommand	Controller/CommandProcessor.cpp	/^        void CommandProcessor::storeCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
str	View/CachingLogger.h	/^                wxString str;$/;"	m	language:C++	struct:TrenchBroom::View::CachingLogger::Message
strValue	IO/QuakeMapParser.cpp	/^        const String& QuakeMapParser::ExtraProperty::strValue() const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
stringVisible	Renderer/EntityRenderer.cpp	/^        bool EntityRenderer::EntityClassnameFilter::stringVisible(RenderContext& context, const Key& entity) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameFilter
stringVisible	Renderer/TextRenderer.h	/^                bool stringVisible(RenderContext& context, const Key& key) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::SimpleTextRendererFilter
stringVisible	View/RotateToolHelper.cpp	/^            bool stringVisible(Renderer::RenderContext& context, const size_t& key) const {$/;"	f	language:C++	class:TrenchBroom::View::TextRendererHelper
stripTranslation	Mat.h	/^const Mat<T,S,S> stripTranslation(const Mat<T,S,S>& mat) {$/;"	f	language:C++
subDivisions	View/TexturingViewHelper.cpp	/^        const Vec2i& TexturingViewHelper::subDivisions() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
subPath	IO/Path.cpp	/^        Path Path::subPath(const size_t index, const size_t count) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
submitAndStoreCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::submitAndStoreCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
submitCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::submitCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
subset	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::PropertyRow::subset() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
subset	View/EntityPropertyGridTable.cpp	/^        bool EntityPropertyGridTable::RowManager::subset(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
subtitle	View/GameListBox.cpp	/^        wxString GameListBox::subtitle(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
subtitle	View/GameListBox.h	/^                wxString subtitle;$/;"	m	language:C++	struct:TrenchBroom::View::GameListBox::Info
subtitle	View/RecentDocumentListBox.cpp	/^        wxString RecentDocumentListBox::subtitle(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentListBox
succ	MathUtils.h	/^    T succ(const T index, const C count) {$/;"	f	language:C++	namespace:Math
succ	MathUtils.h	/^    T succ(const T index, const C count, const O offset) {$/;"	f	language:C++	namespace:Math
success	View/ControllerFacade.h	/^                bool success;$/;"	m	language:C++	struct:TrenchBroom::View::ControllerFacade::MoveVerticesResult
success	View/ResizeBrushesTool.cpp	/^            bool success() const {$/;"	f	language:C++	struct:TrenchBroom::View::FindClosestFaceHit
suffix	IO/Path.cpp	/^        Path Path::suffix(const size_t count) const {$/;"	f	language:C++	class:TrenchBroom::IO::Path
surfaceContents	Model/BrushFace.cpp	/^        int BrushFace::surfaceContents() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
surfaceContents	Model/BrushFace.cpp	/^        int BrushFaceAttribs::surfaceContents() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
surfaceFlags	Model/BrushFace.cpp	/^        int BrushFace::surfaceFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
surfaceFlags	Model/BrushFace.cpp	/^        int BrushFaceAttribs::surfaceFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
surfaceFlags	Model/Game.cpp	/^        const GameConfig::FlagsConfig& Game::surfaceFlags() const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
surfaceFlags	Model/GameConfig.h	/^                FlagsConfig surfaceFlags;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::FaceAttribsConfig
surfaceValue	Model/BrushFace.cpp	/^        float BrushFace::surfaceValue() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
surfaceValue	Model/BrushFace.cpp	/^        float BrushFaceAttribs::surfaceValue() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
swap	Renderer/EdgeRenderer.cpp	/^        void swap(EdgeRenderer& left, EdgeRenderer& right) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
swap	Renderer/FaceRenderer.cpp	/^        void swap(FaceRenderer& left, FaceRenderer& right)  {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
swap	Renderer/TriangleRenderer.cpp	/^        void swap(TriangleRenderer& left, TriangleRenderer& right) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
swap	Renderer/VertexArray.cpp	/^        void swap(VertexArray& left, VertexArray& right) {$/;"	f	language:C++	namespace:TrenchBroom::Renderer
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex1<A1> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex1<A1> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex2<A1, A2> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex2<A1, A2> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex3<A1, A2, A3> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex3<A1, A2, A3> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex4<A1, A2, A3, A4> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex4<A1, A2, A3, A4> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, IndexArray& indices, CountArray& counts) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
swap	Renderer/VertexArray.h	/^            static VertexArray swap(const GLenum primType, std::vector<Vertex5<A1, A2, A3, A4, A5> >& vertices, const IndexArray& indices = EmptyIndexArray, const CountArray& counts = EmptyCountArray) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
switchEditor	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::switchEditor(const Model::PropertyKey& key, const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
switchToPage	View/Inspector.cpp	/^        void Inspector::switchToPage(const InspectorPage page) {$/;"	f	language:C++	class:TrenchBroom::View::Inspector
switchToPane	View/PreferenceDialog.cpp	/^        void PreferenceDialog::switchToPane(const PrefPane pane) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
swizzle	CoordinatePlane.h	/^Vec<T,3> swizzle(const Vec<T,3>& point, const size_t axis) {$/;"	f	language:C++
t	IO/MdlParser.h	/^                int t;$/;"	m	language:C++	struct:TrenchBroom::IO::MdlParser::MdlSkinVertex
tAxis	IO/Bsp29Parser.h	/^                Vec3f tAxis;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::TextureInfo
tMax	Renderer/TextureFont.cpp	/^        float TextureFont::Char::tMax(const size_t textureHeight) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
tMin	Renderer/TextureFont.cpp	/^        float TextureFont::Char::tMin(const size_t textureHeight) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont::Char
tOffset	IO/Bsp29Parser.h	/^                float tOffset;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::TextureInfo
takeSnapshot	Model/Brush.cpp	/^        BrushSnapshot Brush::takeSnapshot() {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
takeSnapshot	Model/BrushFace.cpp	/^        BrushFaceSnapshot BrushFace::takeSnapshot() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
takeSnapshot	Model/Entity.cpp	/^        EntitySnapshot Entity::takeSnapshot() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
target	Hit.h	/^        T target() const {$/;"	f	language:C++	class:TrenchBroom::Hit
texCoordSystem	Model/TexCoordSystemHelper.cpp	/^        TexCoordSystemHelper TexCoordSystemHelper::texCoordSystem(const BrushFace* face) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texCoords	IO/Md2Parser.h	/^                Vec2f texCoords;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2MeshVertex
texToFace	Model/TexCoordSystemHelper.h	/^            static T texToFace(const BrushFace* face, const T& v) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToTex	Model/TexCoordSystemHelper.cpp	/^        Vec2f TexCoordSystemHelper::texToTex(const Vec2f& v, const TexCoordSystemHelper& other) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToTex	Model/TexCoordSystemHelper.cpp	/^        Vec2f::List TexCoordSystemHelper::texToTex(const Vec2f::List& vs, const TexCoordSystemHelper& other) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToTex	Model/TexCoordSystemHelper.cpp	/^        Vec3 TexCoordSystemHelper::texToTex(const Vec3& v, const TexCoordSystemHelper& other) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToTex	Model/TexCoordSystemHelper.cpp	/^        Vec3::List TexCoordSystemHelper::texToTex(const Vec3::List& vs, const TexCoordSystemHelper& other) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToWorld	Model/TexCoordSystemHelper.cpp	/^        Vec2f TexCoordSystemHelper::texToWorld(const Vec2f& v) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToWorld	Model/TexCoordSystemHelper.cpp	/^        Vec2f::List TexCoordSystemHelper::texToWorld(const Vec2f::List& vs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToWorld	Model/TexCoordSystemHelper.cpp	/^        Vec3 TexCoordSystemHelper::texToWorld(const Vec3& v) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
texToWorld	Model/TexCoordSystemHelper.cpp	/^        Vec3::List TexCoordSystemHelper::texToWorld(const Vec3::List& vs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
text	View/KeyboardShortcut.cpp	/^        const String& KeyboardShortcut::text() const {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcut
text	View/Menu.cpp	/^        const String& MenuItemParent::text() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
text	View/Menu.cpp	/^        const String& ShortcutMenuItem::text() const {$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
textAnchor	Renderer/TextRenderer.h	/^                const TextAnchor& textAnchor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
textColor	Renderer/EntityRenderer.cpp	/^        Color EntityRenderer::EntityClassnameColorProvider::textColor(RenderContext& context, const Key& entity) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer::EntityClassnameColorProvider
textColor	Renderer/TextRenderer.h	/^                Color textColor(RenderContext& context, const Key& key) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::PrefTextColorProvider
textColor	View/RotateToolHelper.cpp	/^            Color textColor(Renderer::RenderContext& context, const size_t& key) const {$/;"	f	language:C++	class:TrenchBroom::View::TextRendererHelper
texture	Assets/Bsp29Model.cpp	/^        Assets::Texture* Bsp29Model::Face::texture() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
texture	Assets/TextureManager.cpp	/^        Texture* TextureManager::texture(const String& name) const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
texture	Model/BrushFace.cpp	/^        Assets::Texture* BrushFace::texture() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
texture	Model/BrushFace.cpp	/^        Assets::Texture* BrushFaceAttribs::texture() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
texture	View/TextureBrowserView.h	/^            Assets::Texture* texture;$/;"	m	language:C++	class:TrenchBroom::View::TextureCellData
texture	View/TextureSelectedCommand.cpp	/^        Assets::Texture* TextureSelectedCommand::texture() const {$/;"	f	language:C++	class:TrenchBroom::View::TextureSelectedCommand
texture	View/TexturingViewHelper.cpp	/^        const Assets::Texture* TexturingViewHelper::texture() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
textureCollectionsDidChange	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::textureCollectionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
textureCollectionsDidChange	View/MapDocument.cpp	/^        void MapDocument::textureCollectionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
textureCollectionsDidChange	View/TextureBrowser.cpp	/^        void TextureBrowser::textureCollectionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
textureCollectionsDidChange	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::textureCollectionsDidChange() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
textureCollectionsDidChangeNotifier	View/MapDocument.h	/^            Notifier0 textureCollectionsDidChangeNotifier;$/;"	m	language:C++	class:TrenchBroom::View::MapDocument
textureColor	View/TextureBrowserView.cpp	/^        const Color& TextureBrowserView::textureColor(const Assets::Texture& texture) const {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
textureConfig	Model/GameConfig.cpp	/^        const GameConfig::TextureConfig& GameConfig::textureConfig() const {$/;"	f	language:C++	class:TrenchBroom::Model::GameConfig
textureCoords	IO/Bsp29Parser.cpp	/^        Vec2f Bsp29Parser::textureCoords(const Vec3f& vertex, const TextureInfo& textureInfo, const Assets::Texture& texture) const {$/;"	f	language:C++	class:TrenchBroom::IO::Bsp29Parser
textureCoords	Model/BrushFace.cpp	/^        Vec2f BrushFace::textureCoords(const Vec3& point) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
textureCoords	View/TexturingViewHelper.cpp	/^        Vec2f TexturingViewHelper::textureCoords(const Vec3f& point) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
textureIndex	IO/Bsp29Parser.h	/^                size_t textureIndex;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::TextureInfo
textureInfoIndex	IO/Bsp29Parser.h	/^                size_t textureInfoIndex;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::FaceInfo
textureList	Assets/TextureManager.cpp	/^        TextureList TextureManager::textureList() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
textureLock	View/MapDocument.cpp	/^        bool MapDocument::textureLock() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
textureManager	View/MapDocument.cpp	/^        Assets::TextureManager& MapDocument::textureManager() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
textureName	Model/BrushFace.cpp	/^        const String& BrushFace::textureName() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
textureName	Model/BrushFace.cpp	/^        const String& BrushFaceAttribs::textureName() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
textureSelectedEventFunction	View/TextureSelectedCommand.h	/^typedef void (wxEvtHandler::*textureSelectedEventFunction)(TrenchBroom::View::TextureSelectedCommand&);$/;"	t	language:C++
textureToolActive	View/MapView.cpp	/^        bool MapView::textureToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
textures	Assets/TextureCollection.cpp	/^        const TextureList& TextureCollection::textures() const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
textures	Assets/TextureManager.cpp	/^        const TextureList& TextureManager::textures(const SortOrder sortOrder) const {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
thinBackups	View/Autosaver.cpp	/^        void Autosaver::thinBackups(IO::WritableDiskFileSystem& fs, IO::Path::List& backups) const {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
thirdAxis	Vec.h	/^    const Vec<T,3> thirdAxis() const {$/;"	f	language:C++	class:Vec
thirdComponent	Vec.h	/^    size_t thirdComponent() const {$/;"	f	language:C++	class:Vec
tintColor	Renderer/BrushRenderer.cpp	/^        const Color& BrushRenderer::tintColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
tintColor	Renderer/EntityModelRenderer.cpp	/^        const Color& EntityModelRenderer::tintColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
tintColor	Renderer/EntityRenderer.cpp	/^        const Color& EntityRenderer::tintColor() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
tintFaces	Renderer/BrushRenderer.cpp	/^        bool BrushRenderer::tintFaces() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
tintSelection	Renderer/RenderContext.cpp	/^        bool RenderContext::tintSelection() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
title	View/GameListBox.cpp	/^        wxString GameListBox::title(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::GameListBox
title	View/GameListBox.h	/^                wxString title;$/;"	m	language:C++	struct:TrenchBroom::View::GameListBox::Info
title	View/RecentDocumentListBox.cpp	/^        wxString RecentDocumentListBox::title(const size_t n) const {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocumentListBox
titleBounds	View/CellLayout.h	/^            const LayoutBounds& titleBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
titleBounds	View/CellLayout.h	/^            const LayoutBounds& titleBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
titleBoundsForVisibleRect	View/CellLayout.h	/^            const LayoutBounds titleBoundsForVisibleRect(const Group& group, const float y, const float height) const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
titleBoundsForVisibleRect	View/CellLayout.h	/^            const LayoutBounds titleBoundsForVisibleRect(const float y, const float height, const float groupMargin) const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutGroup
toByteColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::ByteColor::toByteColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::ByteColor
toByteColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::FloatColor::toByteColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
toColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::Color::toColor(const ColorRange range) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::Color
toFloat	IO/Token.h	/^            T toFloat() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
toFloatColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::ByteColor::toFloatColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::ByteColor
toFloatColor	View/SmartColorEditor.cpp	/^        SmartColorEditor::ColorPtr SmartColorEditor::FloatColor::toFloatColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
toInteger	IO/Token.h	/^            T toInteger() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
toLower	StringUtils.cpp	/^    String toLower(const String& str) {$/;"	f	language:C++	namespace:StringUtils
toMatrix	Model/TexCoordSystem.cpp	/^        Mat4x4 TexCoordSystem::toMatrix(const Vec2f& offset, const Vec2f& scale) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
toTexCoordSystemMatrix	Model/BrushFace.cpp	/^        Mat4x4 BrushFace::toTexCoordSystemMatrix(const Vec2f& offset, const Vec2f& scale) const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
toTexMatrix	Model/TexCoordSystemHelper.cpp	/^        Mat4x4 TexCoordSystemHelper::toTexMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
toTexMatrix	Model/TexCoordSystemHelper.cpp	/^        Mat4x4 TexCoordSystemHelper::toTexMatrix(const bool project) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
toWorldMatrix	Model/TexCoordSystemHelper.cpp	/^        Mat4x4 TexCoordSystemHelper::toWorldMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
toWorldMatrix	Model/TexCoordSystemHelper.cpp	/^        Mat4x4 TexCoordSystemHelper::toWorldMatrix(const bool project) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
toWxColor	View/SmartColorEditor.cpp	/^        wxColor SmartColorEditor::ByteColor::toWxColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::ByteColor
toWxColor	View/SmartColorEditor.cpp	/^        wxColor SmartColorEditor::FloatColor::toWxColor() const {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor::FloatColor
toWxColor	View/wxUtils.cpp	/^        wxColor toWxColor(const Color& color) {$/;"	f	language:C++	namespace:TrenchBroom::View
toWxString	Preference.h	/^        wxString toWxString(const Color& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const IO::Path& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const String& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const StringMap& values) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const T& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const View::KeyboardShortcut& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const bool& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const double& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const float& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toWxString	Preference.h	/^        wxString toWxString(const int& value) const {$/;"	f	language:C++	class:TrenchBroom::Converter
toggleClipSide	View/ClipTool.cpp	/^        void ClipTool::toggleClipSide() {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
toggleClipSide	View/Clipper.cpp	/^        void Clipper::toggleClipSide() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
toggleClipSide	View/MapView.cpp	/^        void MapView::toggleClipSide() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleClipTool	View/MapView.cpp	/^        void MapView::toggleClipTool() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleHorizontalRestriction	View/MovementRestriction.cpp	/^        void MovementRestriction::toggleHorizontalRestriction(const Renderer::Camera& camera) {$/;"	f	language:C++	class:TrenchBroom::View::MovementRestriction
toggleMode	Model/TexCoordSystemHelper.cpp	/^        void TexCoordSystemHelper::toggleMode(const Mode mode, const bool on) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
toggleMovementRestriction	View/MapView.cpp	/^        void MapView::toggleMovementRestriction() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleRotateObjectsTool	View/MapView.cpp	/^        void MapView::toggleRotateObjectsTool() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleSnap	View/Grid.cpp	/^        void Grid::toggleSnap() {$/;"	f	language:C++	class:TrenchBroom::View::Grid
toggleTextureTool	View/MapView.cpp	/^        void MapView::toggleTextureTool() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleTool	View/ToolBox.cpp	/^        void ToolBox::toggleTool(Tool* tool) {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
toggleTools	View/PreferenceDialog.cpp	/^        void PreferenceDialog::toggleTools(const PrefPane pane) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
toggleVertexTool	View/MapView.cpp	/^        void MapView::toggleVertexTool() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
toggleVisible	View/Grid.cpp	/^        void Grid::toggleVisible() {$/;"	f	language:C++	class:TrenchBroom::View::Grid
tokenName	IO/Parser.h	/^            String tokenName(const TokenType typeMask) const {$/;"	f	language:C++	class:TrenchBroom::IO::Parser
tokenNames	IO/ConfigParser.cpp	/^        ConfigParser::TokenNameMap ConfigParser::tokenNames() const {$/;"	f	language:C++	class:TrenchBroom::IO::ConfigParser
tokenNames	IO/DefParser.cpp	/^        DefParser::TokenNameMap DefParser::tokenNames() const {$/;"	f	language:C++	class:TrenchBroom::IO::DefParser
tokenNames	IO/FgdParser.cpp	/^        FgdParser::TokenNameMap FgdParser::tokenNames() const {$/;"	f	language:C++	class:TrenchBroom::IO::FgdParser
tokenNames	IO/QuakeMapParser.cpp	/^        QuakeMapParser::TokenNameMap QuakeMapParser::tokenNames() const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser
toolActive	View/ToolBox.cpp	/^        bool ToolBox::toolActive(const Tool* tool) const {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
tooltip	View/CellView.h	/^            virtual wxString tooltip(const typename Layout::Group::Row::Cell& cell) { return ""; }$/;"	f	language:C++	class:TrenchBroom::View::CellView
tooltip	View/EntityPropertyGridTable.cpp	/^        String EntityPropertyGridTable::tooltip(const wxGridCellCoords cellCoords) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
tooltip	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::DefaultRow::tooltip() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
tooltip	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::PropertyRow::tooltip() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
tooltip	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::RowManager::tooltip(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
tooltip	View/TextureBrowserView.cpp	/^        wxString TextureBrowserView::tooltip(const Layout::Group::Row::Cell& cell) {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
top	View/CellLayout.h	/^            float top() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
totalEdgeCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::totalEdgeCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
totalSelectedFaceCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::totalSelectedFaceCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
totalVertexCount	View/VertexHandleManager.cpp	/^        size_t VertexHandleManager::totalVertexCount() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
transferString	Renderer/TextRenderer.h	/^            void transferString(Key key, TextRenderer& destination)  {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
transform	Model/BrushFace.cpp	/^        void BrushFace::transform(const Mat4x4& transform, const bool lockTexture) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
transform	Model/Object.cpp	/^        void Object::transform(const Mat4x4& transformation, const bool lockTextures, const BBox3& worldBounds) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
transform	Plane.h	/^    Plane<T,S>& transform(const Mat<T,S+1,S+1>& transform) {$/;"	f	language:C++	class:Plane
transformAxis	Model/ParaxialTexCoordSystem.cpp	/^        Vec3 ParaxialTexCoordSystem::transformAxis(const Vec3& normal, const Vec3& axis, const Mat4x4& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Model::ParaxialTexCoordSystem
transformFromFace	View/TexturingViewHelper.cpp	/^        Vec3 TexturingViewHelper::transformFromFace(const Vec3& point) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
transformObjects	Controller/TransformObjectsCommand.cpp	/^        TransformObjectsCommand::Ptr TransformObjectsCommand::transformObjects(View::MapDocumentWPtr document, const Mat4x4& transformation, const bool lockTextures, const String& action, const Model::ObjectList& objects) {$/;"	f	language:C++	class:TrenchBroom::Controller::TransformObjectsCommand
transformToFace	View/TexturingViewHelper.cpp	/^        Vec3 TexturingViewHelper::transformToFace(const Vec3& point) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
transformToTex	View/TexturingViewHelper.cpp	/^        Vec3 TexturingViewHelper::transformToTex(const Vec3& worldPoint, const bool withOffset) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
transformToTex	View/TexturingViewHelper.cpp	/^        Vec3::List TexturingViewHelper::transformToTex(const Vec3::List& worldPoints, const bool withOffset) const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
transformation	BBox.h	/^    Mat<T,4,4> transformation;$/;"	m	language:C++	struct:TransformBBox
transformation	Renderer/RenderContext.cpp	/^        Transformation& RenderContext::transformation() {$/;"	f	language:C++	class:TrenchBroom::Renderer::RenderContext
transformation	View/EntityBrowserView.cpp	/^            const Mat4x4f& transformation;$/;"	m	language:C++	struct:TrenchBroom::View::CollectBoundsVertices	file:
transformed	Plane.h	/^    Plane<T,S> transformed(const Mat<T,S+1,S+1>& transform) const {$/;"	f	language:C++	class:Plane
transformedBounds	Assets/Bsp29Model.cpp	/^        BBox3f Bsp29Model::SubModel::transformedBounds(const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::SubModel
transformedBounds	Assets/EntityModel.cpp	/^        BBox3f EntityModel::transformedBounds(const size_t skinIndex, const size_t frameIndex, const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModel
transformedBounds	Assets/Md2Model.cpp	/^        BBox3f Md2Model::Frame::transformedBounds(const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
transformedBounds	Assets/MdlModel.cpp	/^        BBox3f MdlFrame::transformedBounds(const Mat4x4f& transformation) const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrame
translate	BBox.h	/^    BBox<T,S>& translate(const Vec<T,S>& delta) {$/;"	f	language:C++	class:BBox
translateFormat	IO/ImageLoaderImpl.cpp	/^        FREE_IMAGE_FORMAT ImageLoaderImpl::translateFormat(const ImageLoader::Format format) {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
translateToOrigin	BBox.h	/^    BBox<T,S>& translateToOrigin() {$/;"	f	language:C++	class:BBox
translated	BBox.h	/^    const BBox<T,S> translated(const Vec<T,S>& delta) const {$/;"	f	language:C++	class:BBox
translatedToOrigin	BBox.h	/^    const BBox<T,S> translatedToOrigin() const {$/;"	f	language:C++	class:BBox
translationMatrix	Mat.h	/^const Mat<T,S+1,S+1> translationMatrix(const Vec<T,S>& delta) {$/;"	f	language:C++
translationMatrix	Mat.h	/^const Mat<T,S,S> translationMatrix(const Mat<T,S,S>& mat) {$/;"	f	language:C++
transposeMatrix	Mat.h	/^Mat<T,S,S>& transposeMatrix(Mat<T,S,S>& mat) {$/;"	f	language:C++
transposed	Mat.h	/^    const Mat<T,C,R> transposed() const {$/;"	f	language:C++	class:Mat
triangleFans	Assets/Md2Model.cpp	/^        const Md2Model::Mesh::TriangleSeries& Md2Model::Frame::triangleFans() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
triangleFans	Renderer/Mesh.h	/^            VertexArray triangleFans;$/;"	m	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
triangleFans	Renderer/Mesh.h	/^            const TriangleSeriesMap& triangleFans() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
triangleSeriesArray	Renderer/Mesh.h	/^            VertexArray triangleSeriesArray(const GLenum primType, TriangleSeries& series) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
triangleSets	Renderer/Mesh.h	/^            const TriangleSetMap& triangleSets() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
triangleStrips	Assets/Md2Model.cpp	/^        const Md2Model::Mesh::TriangleSeries& Md2Model::Frame::triangleStrips() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model::Frame
triangleStrips	Renderer/Mesh.h	/^            VertexArray triangleStrips;$/;"	m	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
triangleStrips	Renderer/Mesh.h	/^            const TriangleSeriesMap& triangleStrips() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Mesh
triangles	Assets/MdlModel.cpp	/^        const MdlFrameVertexList& MdlFrame::triangles() const {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrame
triangles	Renderer/Mesh.h	/^            VertexArray triangles;$/;"	m	language:C++	struct:TrenchBroom::Renderer::MeshRenderData
triggerAutosave	View/Autosaver.cpp	/^        void Autosaver::triggerAutosave(Logger* logger) {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
trim	StringUtils.cpp	/^    String trim(const String& str, const String& chars) {$/;"	f	language:C++	namespace:StringUtils
true	Preferences.cpp	/^        Preference<bool> ShadeFaces(IO::Path("Renderer\/ShadeFaces"), true);$/;"	m	language:C++	namespace:TrenchBroom::Preferences	file:
type	Assets/EntityDefinition.cpp	/^        EntityDefinition::Type BrushEntityDefinition::type() const {$/;"	f	language:C++	class:TrenchBroom::Assets::BrushEntityDefinition
type	Assets/EntityDefinition.cpp	/^        EntityDefinition::Type PointEntityDefinition::type() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PointEntityDefinition
type	Assets/PropertyDefinition.cpp	/^        PropertyDefinition::Type PropertyDefinition::type() const {$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
type	ConfigTypes.cpp	/^    ConfigEntry::Type ConfigEntry::type() const {$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
type	Controller/Command.cpp	/^        Command::CommandType Command::type() const {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
type	Hit.cpp	/^    Hit::HitType Hit::type() const {$/;"	f	language:C++	class:TrenchBroom::Hit
type	IO/Md2Parser.h	/^                Type type;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Mesh
type	IO/QuakeMapParser.cpp	/^        QuakeMapParser::ExtraProperty::Type QuakeMapParser::ExtraProperty::type() const {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapParser::ExtraProperty
type	IO/Token.h	/^            Type type() const {$/;"	f	language:C++	class:TrenchBroom::IO::TokenTemplate
type	IO/Wad.cpp	/^        char WadEntry::type() const {$/;"	f	language:C++	class:TrenchBroom::IO::WadEntry
type	Model/EmptyBrushEntityIssueGenerator.cpp	/^        IssueType EmptyBrushEntityIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::EmptyBrushEntityIssueGenerator
type	Model/EntityLinkIssueGenerator.cpp	/^        IssueType EntityLinkIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::EntityLinkIssueGenerator
type	Model/FloatPointsIssueGenerator.cpp	/^        IssueType FloatPointsIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatPointsIssueGenerator
type	Model/FloatVerticesIssueGenerator.cpp	/^        IssueType FloatVerticesIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::FloatVerticesIssueGenerator
type	Model/GameConfig.h	/^                String type;$/;"	m	language:C++	struct:TrenchBroom::Model::GameConfig::TextureConfig
type	Model/Issue.cpp	/^        IssueType Issue::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
type	Model/MissingEntityClassnameIssueGenerator.cpp	/^        IssueType MissingEntityClassnameIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityClassnameIssueGenerator
type	Model/MissingEntityDefinitionIssueGenerator.cpp	/^        IssueType MissingEntityDefinitionIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::MissingEntityDefinitionIssueGenerator
type	Model/MixedBrushContentsIssueGenerator.cpp	/^        IssueType MixedBrushContentsIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::MixedBrushContentsIssueGenerator
type	Model/MoveBrushVertexAlgorithm.h	/^                const Type type;$/;"	m	language:C++	struct:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult
type	Model/Object.cpp	/^        Object::Type Object::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::Object
type	Model/PointEntityWithBrushesIssueGenerator.cpp	/^        IssueType PointEntityWithBrushesIssueGenerator::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::PointEntityWithBrushesIssueGenerator
type	Model/QuakeEntityRotationPolicy.h	/^                const RotationType type;$/;"	m	language:C++	struct:TrenchBroom::Model::QuakeEntityRotationPolicy::RotationInfo
type	Model/QuickFix.cpp	/^        QuickFixType QuickFix::type() const {$/;"	f	language:C++	class:TrenchBroom::Model::QuickFix
type	View/Animation.cpp	/^        Animation::Type Animation::type() const {$/;"	f	language:C++	class:TrenchBroom::View::Animation
type	View/Menu.cpp	/^        MenuItem::Type MenuItem::type() const {$/;"	f	language:C++	class:TrenchBroom::View::MenuItem
typeNames	IO/GameConfigParser.cpp	/^        String GameConfigParser::typeNames(const int typeMask) const {$/;"	f	language:C++	class:TrenchBroom::IO::GameConfigParser
unbindEvents	View/ToolBox.cpp	/^        void ToolBox::unbindEvents() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
unbindObservers	Renderer/MapRenderer.cpp	/^        void MapRenderer::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
unbindObservers	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
unbindObservers	View/ChooseGameDialog.cpp	/^        void ChooseGameDialog::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
unbindObservers	View/EntityBrowser.cpp	/^        void EntityBrowser::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
unbindObservers	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
unbindObservers	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
unbindObservers	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
unbindObservers	View/IssueBrowser.cpp	/^            void unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel	file:
unbindObservers	View/IssueBrowser.cpp	/^        void IssueBrowser::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
unbindObservers	View/MapDocument.cpp	/^        void MapDocument::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
unbindObservers	View/MapFrame.cpp	/^        void MapFrame::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
unbindObservers	View/MapTreeView.cpp	/^            void unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
unbindObservers	View/MapTreeView.cpp	/^        void MapTreeView::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
unbindObservers	View/MapView.cpp	/^        void MapView::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
unbindObservers	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
unbindObservers	View/ModEditor.cpp	/^        void ModEditor::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
unbindObservers	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
unbindObservers	View/TextureBrowser.cpp	/^        void TextureBrowser::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
unbindObservers	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
unbindObservers	View/TexturingView.cpp	/^        void TexturingView::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
unbindObservers	View/VertexTool.cpp	/^        void VertexTool::unbindObservers() {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
undoCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::undoCommand(Command::Ptr command) {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
undoGroup	Controller/CommandProcessor.cpp	/^        void CommandProcessor::undoGroup() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
undoLastCommand	Controller/CommandProcessor.cpp	/^        bool CommandProcessor::undoLastCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::CommandProcessor
undoLastCommand	View/ControllerFacade.cpp	/^        bool ControllerFacade::undoLastCommand() {$/;"	f	language:C++	class:TrenchBroom::View::ControllerFacade
undoRemove	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::undoRemove(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
undoRename	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::undoRename(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
undoSetValue	Controller/EntityPropertyCommand.cpp	/^        void EntityPropertyCommand::undoSetValue(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Controller::EntityPropertyCommand
undoShortcut	View/Menu.cpp	/^        const KeyboardShortcut& Menu::undoShortcut() {$/;"	f	language:C++	class:TrenchBroom::View::Menu
undoable	Controller/Command.cpp	/^        bool Command::undoable() const {$/;"	f	language:C++	class:TrenchBroom::Controller::Command
unescape	StringUtils.cpp	/^    String unescape(const String& str, const String& chars) {$/;"	f	language:C++	namespace:StringUtils
unit	Vec.h	/^    static Vec<T,S> unit(const size_t index) {$/;"	f	language:C++	class:Vec
unloadPointFile	View/MapDocument.cpp	/^        void MapDocument::unloadPointFile() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
unmap	Renderer/Vbo.cpp	/^        void Vbo::unmap() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
unpackFrameVertex	IO/MdlParser.cpp	/^        Vec3f MdlParser::unpackFrameVertex(const PackedFrameVertex& vertex, const Vec3f& origin, const Vec3f& scale) const {$/;"	f	language:C++	class:TrenchBroom::IO::MdlParser
unproject	Renderer/Camera.cpp	/^        Vec3f Camera::unproject(const float x, const float y, const float depth) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
unselectedBrushes	Model/Selection.cpp	/^        BrushList Selection::unselectedBrushes(Map& map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
unselectedBrushes	View/MapDocument.cpp	/^        Model::BrushList MapDocument::unselectedBrushes() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
unselectedEdgeHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToEdgesMap& VertexHandleManager::unselectedEdgeHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
unselectedEntities	Model/Selection.cpp	/^        EntityList Selection::unselectedEntities(Map& map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
unselectedEntities	View/MapDocument.cpp	/^        Model::EntityList MapDocument::unselectedEntities() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
unselectedFaceHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToFacesMap& VertexHandleManager::unselectedFaceHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
unselectedFaces	Model/Selection.cpp	/^        BrushFaceList Selection::unselectedFaces(Map& map) const {$/;"	f	language:C++	class:TrenchBroom::Model::Selection
unselectedVertexHandles	View/VertexHandleManager.cpp	/^        const Model::VertexToBrushesMap& VertexHandleManager::unselectedVertexHandles() const {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
unsetContentFlag	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::unsetContentFlag(const size_t contentFlag) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
unsetSurfaceFlag	Controller/FaceAttributeCommand.cpp	/^        void FaceAttributeCommand::unsetSurfaceFlag(const size_t surfaceFlag) {$/;"	f	language:C++	class:TrenchBroom::Controller::FaceAttributeCommand
unswizzle	CoordinatePlane.h	/^Vec<T,3> unswizzle(const Vec<T,3>& point, const size_t axis) {$/;"	f	language:C++
up	Renderer/Camera.cpp	/^        const Vec3f& Camera::up() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
update	Model/TexCoordSystem.cpp	/^        void TexCoordSystem::update(const Vec3& normal, const BrushFaceAttribs& attribs) {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
update	View/Animation.cpp	/^        void Animation::update() {$/;"	f	language:C++	class:TrenchBroom::View::Animation
update	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::update() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
update	View/KeyboardPreferencePane.cpp	/^        bool KeyboardGridTable::update() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
update	View/KeyboardShortcutEditor.cpp	/^        void KeyboardShortcutEditor::update() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEditor
update	View/SmartPropertyEditor.cpp	/^        void SmartPropertyEditor::update(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
updateAcceleratorTable	View/PreferenceDialog.cpp	/^        void PreferenceDialog::updateAcceleratorTable(const PrefPane pane) {$/;"	f	language:C++	class:TrenchBroom::View::PreferenceDialog
updateAnchor	Renderer/TextRenderer.h	/^            void updateAnchor(Key key, TextAnchor::Ptr anchor) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
updateAvailableMods	View/ModEditor.cpp	/^        void ModEditor::updateAvailableMods() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
updateAxes	View/RotateObjectsHandle.cpp	/^        void RotateObjectsHandle::updateAxes(const Vec3& viewPos) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsHandle
updateBindings	View/RecentDocuments.h	/^            void updateBindings() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
updateBounds	Model/BrushGeometry.cpp	/^        void BrushGeometry::updateBounds() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
updateBreadcrump	View/NavBar.cpp	/^        void NavBar::updateBreadcrump() {$/;"	f	language:C++	class:TrenchBroom::View::NavBar
updateBrushRenderer	View/CreateBrushTool.cpp	/^        void CreateBrushTool::updateBrushRenderer() {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
updateBrushes	View/ClipTool.cpp	/^        void ClipTool::updateBrushes() {$/;"	f	language:C++	class:TrenchBroom::View::ClipTool
updateCache	Assets/EntityDefinitionManager.cpp	/^        void EntityDefinitionManager::updateCache() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
updateClipPoint	View/Clipper.cpp	/^        void Clipper::updateClipPoint(const size_t index, const Vec3& position, const Model::BrushFace& face) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
updateClipPoints	View/Clipper.cpp	/^        void Clipper::updateClipPoints() {$/;"	f	language:C++	class:TrenchBroom::View::Clipper
updateColorHistory	View/SmartColorEditor.cpp	/^        void SmartColorEditor::updateColorHistory(const wxColorList& selectedColors) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
updateColorPicker	View/SmartColorEditor.cpp	/^        void SmartColorEditor::updateColorPicker(const wxColor& color) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
updateColorRange	View/SmartColorEditor.cpp	/^        void SmartColorEditor::updateColorRange(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartColorEditor
updateControls	View/EntityDefinitionFileChooser.cpp	/^        void EntityDefinitionFileChooser::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
updateControls	View/EntityPropertyGrid.cpp	/^        void EntityPropertyGrid::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
updateControls	View/FaceAttribsEditor.cpp	/^        void FaceAttribsEditor::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
updateControls	View/GamesPreferencePane.cpp	/^        void GamesPreferencePane::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::GamesPreferencePane
updateControls	View/GeneralPreferencePane.cpp	/^        void GeneralPreferencePane::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::GeneralPreferencePane
updateControls	View/TextureCollectionEditor.cpp	/^        void TextureCollectionEditor::updateControls() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
updateDragFaces	View/ResizeBrushesTool.cpp	/^        void ResizeBrushesTool::updateDragFaces(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::ResizeBrushesTool
updateEditor	View/SmartPropertyEditorManager.cpp	/^        void SmartPropertyEditorManager::updateEditor() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
updateEntities	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::updateEntities(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
updateEntities	Renderer/EntityRenderer.h	/^            void updateEntities(Iter cur, const Iter end) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
updateEntity	Renderer/EntityModelRenderer.cpp	/^        void EntityModelRenderer::updateEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
updateEntity	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::updateEntity(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
updateEntityDefinition	View/MapDocument.cpp	/^        void MapDocument::updateEntityDefinition(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateEntityDefinitions	View/MapDocument.cpp	/^        void MapDocument::updateEntityDefinitions(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateEntityModel	View/MapDocument.cpp	/^        void MapDocument::updateEntityModel(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateEntityModels	View/MapDocument.cpp	/^        void MapDocument::updateEntityModels(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateEntityPosition	View/CreateEntityTool.cpp	/^        void CreateEntityTool::updateEntityPosition(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::CreateEntityTool
updateErrors	Model/PlanePointFinder.cpp	/^            void updateErrors() {$/;"	f	language:C++	class:TrenchBroom::Model::GridSearchCursor	file:
updateExternalTextureCollectionProperty	View/MapDocument.cpp	/^        void MapDocument::updateExternalTextureCollectionProperty() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateExternalTextureCollections	Model/Game.cpp	/^        void Game::updateExternalTextureCollections(Map* map, const StringList& collections) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
updateFacePoints	Model/MoveBrushVertexAlgorithm.h	/^            void updateFacePoints(BrushGeometry& geometry) {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
updateFilterFlags	View/IssueBrowser.cpp	/^        void IssueBrowser::updateFilterFlags() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
updateFlagsText	View/FlagsPopupEditor.cpp	/^        void FlagsPopupEditor::updateFlagsText() {$/;"	f	language:C++	class:TrenchBroom::View::FlagsPopupEditor
updateGameSearchPaths	View/MapDocument.cpp	/^        void MapDocument::updateGameSearchPaths() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateGuideRenderer	View/CreateBrushTool.cpp	/^        void CreateBrushTool::updateGuideRenderer(const BBox3& bounds) {$/;"	f	language:C++	class:TrenchBroom::View::CreateBrushTool
updateHandleAxes	View/RotateObjectsTool.cpp	/^        void RotateObjectsTool::updateHandleAxes(const InputState& inputState) {$/;"	f	language:C++	class:TrenchBroom::View::RotateObjectsTool
updateHits	View/ToolBox.cpp	/^        void ToolBox::updateHits() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
updateLastActivation	View/ToolBox.cpp	/^        void ToolBox::updateLastActivation() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
updateLastModificationTime	View/Autosaver.cpp	/^        void Autosaver::updateLastModificationTime() {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
updateLayout	View/CellLayout.h	/^            void updateLayout(const float maxUpScale,$/;"	f	language:C++	class:TrenchBroom::View::LayoutCell
updateLinkSourcesInIssueManager	View/MapDocument.cpp	/^        void MapDocument::updateLinkSourcesInIssueManager(Model::Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateLinks	Model/Entity.cpp	/^        void Entity::updateLinks(const EntityProperty& oldProperty, const EntityProperty& newProperty) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
updateMark	Model/BrushEdge.cpp	/^        void BrushEdge::updateMark() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
updateMark	Model/BrushVertex.cpp	/^        void BrushVertex::updateMark(const Plane3& plane) {$/;"	f	language:C++	class:TrenchBroom::Model::BrushVertex
updateMenuBar	View/MapFrame.cpp	/^        void MapFrame::updateMenuBar(const bool showModifiers) {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
updateMenus	View/RecentDocuments.h	/^            void updateMenus() {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
updateModifierKeys	View/ToolBox.cpp	/^        bool ToolBox::updateModifierKeys() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
updateMods	View/ModEditor.cpp	/^        void ModEditor::updateMods() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
updateMoveBrushesToWorldMenuItem	View/MapView.cpp	/^        void MapView::updateMoveBrushesToWorldMenuItem(wxUpdateUIEvent& event) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
updateNewAndDroppedFaces	Model/MoveBrushVertexAlgorithm.h	/^            void updateNewAndDroppedFaces() {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm
updatePath	View/RecentDocuments.h	/^            void updatePath(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::RecentDocuments
updatePoint	View/Clipper.cpp	/^        void Clipper::ClipHandlePoints::updatePoint(const size_t index, const Vec3& position, const Vec3::List& normals) {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipHandlePoints
updatePointsFromVertices	Model/BrushFace.cpp	/^        void BrushFace::updatePointsFromVertices() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
updateProperty	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::updateProperty(size_t rowIndex, const String& newValue, const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable
updatePropertyIndex	Model/Entity.cpp	/^        void Entity::updatePropertyIndex(const EntityProperty& oldProperty, const EntityProperty& newProperty) {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
updateRecentDocument	TrenchBroomApp.cpp	/^        void TrenchBroomApp::updateRecentDocument(const IO::Path& path) {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
updateReparentBrushesMenuItem	View/MapView.cpp	/^        void MapView::updateReparentBrushesMenuItem(wxUpdateUIEvent& event) const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
updateRows	View/EntityPropertyGridTable.cpp	/^        void EntityPropertyGridTable::RowManager::updateRows(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
updateScrollBar	View/CellView.h	/^            void updateScrollBar() {$/;"	f	language:C++	class:TrenchBroom::View::CellView
updateString	Renderer/TextRenderer.h	/^            void updateString(Key key, const String& string) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
updateTextures	Assets/TextureManager.cpp	/^        void TextureManager::updateTextures() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
updateTextures	View/MapDocument.cpp	/^        void MapDocument::updateTextures() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
updateTitle	View/MapFrame.cpp	/^        void MapFrame::updateTitle() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
updateVertices	Renderer/TextRenderer.h	/^                void updateVertices(const Vec2f::List& vertices, const Vec2f& size) {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
updateVerticesFromEdges	Model/BrushFaceGeometry.cpp	/^        void BrushFaceGeometry::updateVerticesFromEdges() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
updateViewport	View/RenderView.cpp	/^        void RenderView::updateViewport() {$/;"	f	language:C++	class:TrenchBroom::View::RenderView
updateVirtualSize	View/ColorTable.cpp	/^        void ColorTable::updateVirtualSize() {$/;"	f	language:C++	class:TrenchBroom::View::ColorTable
updateVisual	View/SmartPropertyEditor.cpp	/^        void SmartPropertyEditor::updateVisual(const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
usageCount	Assets/EntityDefinition.cpp	/^        size_t EntityDefinition::usageCount() const {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
usageCount	Assets/Texture.cpp	/^        size_t Texture::usageCount() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
useSDI	TrenchBroomApp.cpp	/^        bool TrenchBroomApp::useSDI() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
usesKey	View/SmartPropertyEditor.cpp	/^        bool SmartPropertyEditor::usesKey(const Model::PropertyKey& key) const {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
v	Mat.h	/^    Vec<T,R> v[C];$/;"	m	language:C++	class:Mat
v	Quat.h	/^    Vec<T,3> v;$/;"	m	language:C++	class:Quat
v	Vec.h	/^    T v[S];$/;"	m	language:C++	class:Vec
v1	Renderer/Vertex.h	/^            typename A1::ElementType v1;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex1
v1	Renderer/Vertex.h	/^            typename A1::ElementType v1;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex2
v1	Renderer/Vertex.h	/^            typename A1::ElementType v1;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex3
v1	Renderer/Vertex.h	/^            typename A1::ElementType v1;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex4
v1	Renderer/Vertex.h	/^            typename A1::ElementType v1;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex5
v2	Renderer/Vertex.h	/^            typename A2::ElementType v2;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex2
v2	Renderer/Vertex.h	/^            typename A2::ElementType v2;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex3
v2	Renderer/Vertex.h	/^            typename A2::ElementType v2;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex4
v2	Renderer/Vertex.h	/^            typename A2::ElementType v2;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex5
v3	Renderer/Vertex.h	/^            typename A3::ElementType v3;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex3
v3	Renderer/Vertex.h	/^            typename A3::ElementType v3;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex4
v3	Renderer/Vertex.h	/^            typename A3::ElementType v3;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex5
v4	Renderer/Vertex.h	/^            typename A4::ElementType v4;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex4
v4	Renderer/Vertex.h	/^            typename A4::ElementType v4;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex5
v5	Renderer/Vertex.h	/^            typename A5::ElementType v5;$/;"	m	language:C++	class:TrenchBroom::Renderer::Vertex5
valid	Renderer/EntityLinkRenderer.cpp	/^        bool EntityLinkRenderer::valid() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
valid	View/Clipper.cpp	/^        bool Clipper::ClipPoints::valid() const {$/;"	f	language:C++	class:TrenchBroom::View::Clipper::ClipPoints
valid	View/TexturingViewHelper.cpp	/^        bool TexturingViewHelper::valid() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
validate	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::validate(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
validate	Renderer/BoundsInfoRenderer.cpp	/^        void BoundsInfoRenderer::validate(RenderContext& renderContext) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsInfoRenderer
validate	Renderer/BrushRenderer.cpp	/^        void BrushRenderer::validate() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
validate	Renderer/EntityLinkRenderer.cpp	/^        void EntityLinkRenderer::validate(const Filter& filter, const Model::EntityList& entities) {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityLinkRenderer
validate	View/CellLayout.h	/^            void validate() {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
validate	View/PreferencePane.cpp	/^        bool PreferencePane::validate() {$/;"	f	language:C++	class:TrenchBroom::View::PreferencePane
validate	View/TexturingViewHelper.cpp	/^        void TexturingViewHelper::validate() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
validateBounds	Model/Entity.cpp	/^        void Entity::validateBounds() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
validateBounds	Renderer/EntityRenderer.cpp	/^        void EntityRenderer::validateBounds() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
validateBox	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::validateBox() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
validateEdges	Renderer/MiniMapRenderer.cpp	/^        void MiniMapRenderer::validateEdges(RenderContext& context) {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
validateMatrices	Renderer/Camera.cpp	/^        void Camera::validateMatrices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
validatePoints	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::validatePoints(View::MapDocumentSPtr document) {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
validateRenderState	View/VertexHandleManager.cpp	/^        void VertexHandleManager::validateRenderState(const bool splitMode) {$/;"	f	language:C++	class:TrenchBroom::View::VertexHandleManager
validateSpikes	Renderer/BoundsGuideRenderer.cpp	/^        void BoundsGuideRenderer::validateSpikes() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BoundsGuideRenderer
validateVertexCache	Model/BrushFace.cpp	/^        void BrushFace::validateVertexCache() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
value	Assets/PropertyDefinition.cpp	/^            int value;$/;"	m	language:C++	struct:TrenchBroom::Assets::FindFlagByValue	file:
value	Assets/PropertyDefinition.cpp	/^        const String& ChoicePropertyOption::value() const {$/;"	f	language:C++	class:TrenchBroom::Assets::ChoicePropertyOption
value	Assets/PropertyDefinition.cpp	/^        int FlagsPropertyOption::value() const {$/;"	f	language:C++	class:TrenchBroom::Assets::FlagsPropertyOption
value	Model/EntityProperties.h	/^            PropertyValue value;$/;"	m	language:C++	struct:TrenchBroom::Model::EntityProperty
value	Preference.h	/^        const T& value() const {$/;"	f	language:C++	class:TrenchBroom::Preference
value	Preference.h	/^        const T& value() const {$/;"	f	language:C++	class:TrenchBroom::ValueHolder
value	TemplateUtils.h	/^        static const bool value = false;$/;"	m	language:C++	struct:TemplateUtils::IsPointer
value	TemplateUtils.h	/^        static const bool value = true;$/;"	m	language:C++	struct:TemplateUtils::IsPointer
value	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::DefaultRow::value() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::DefaultRow
value	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::PropertyRow::value() const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::PropertyRow
value	View/EntityPropertyGridTable.cpp	/^        const String& EntityPropertyGridTable::RowManager::value(const size_t rowIndex) const {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGridTable::RowManager
value_type	CastIterator.h	/^        typedef OutType value_type;$/;"	t	language:C++	class:TrenchBroom::CastIterator
value_type	FilterIterator.h	/^        typedef typename Iterator::value_type value_type;$/;"	t	language:C++	class:TrenchBroom::FilterIterator
value_type	NestedHierarchyIterator.h	/^        typedef ValueType value_type;$/;"	t	language:C++	class:TrenchBroom::NestedHierarchyIterator
value_type	NestedIterator.h	/^        typedef typename InnerIterator::value_type value_type;$/;"	t	language:C++	class:TrenchBroom::NestedIterator
vbo	Renderer/VboBlock.cpp	/^        Vbo& VboBlock::vbo() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
vector	Model/BrushEdge.cpp	/^        Vec3 BrushEdge::vector() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
vertex	BBox.h	/^    const Vec<T,3> vertex(const Corner x, const Corner y, const Corner z) const {$/;"	f	language:C++	class:BBox
vertex	BBox.h	/^    const Vec<T,S> vertex(const Corner c[S]) const {$/;"	f	language:C++	class:BBox
vertex	IO/Md2Parser.cpp	/^        Vec3f Md2Parser::Md2Frame::vertex(const size_t index) const {$/;"	f	language:C++	class:TrenchBroom::IO::Md2Parser::Md2Frame
vertex	Model/MoveBrushVertexAlgorithm.h	/^                BrushVertex* vertex;$/;"	m	language:C++	struct:TrenchBroom::Model::MoveBrushVertexAlgorithm::MoveVertexResult
vertexCount	IO/Md2Parser.h	/^                size_t vertexCount;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Mesh
vertexCount	Renderer/VertexArray.cpp	/^        size_t VertexArray::vertexCount() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::VertexArray
vertexCount	Renderer/VertexArray.h	/^            size_t vertexCount() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
vertexHandleClicked	View/VertexTool.cpp	/^        void VertexTool::vertexHandleClicked(const InputState& inputState, const Hits::List& hits) {$/;"	f	language:C++	class:TrenchBroom::View::VertexTool
vertexIndex	IO/Md2Parser.h	/^                size_t vertexIndex;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2MeshVertex
vertexIndex1	IO/Bsp29Parser.h	/^                size_t vertexIndex1, vertexIndex2;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::EdgeInfo
vertexIndex2	IO/Bsp29Parser.h	/^                size_t vertexIndex1, vertexIndex2;$/;"	m	language:C++	struct:TrenchBroom::IO::Bsp29Parser::EdgeInfo
vertexPositions	Assets/Bsp29Model.cpp	/^        const Vec3f::List& Bsp29Model::Face::vertexPositions() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
vertexPositions	Model/BrushVertex.cpp	/^        Vec3::List vertexPositions(const BrushVertexList& vertices) {$/;"	f	language:C++	namespace:TrenchBroom::Model
vertexShaders	Renderer/ShaderManager.cpp	/^        const StringList& ShaderConfig::vertexShaders() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderConfig
vertexToolActive	View/MapView.cpp	/^        bool MapView::vertexToolActive() const {$/;"	f	language:C++	class:TrenchBroom::View::MapView
verticalBillboardMatrix	Renderer/Camera.cpp	/^        const Mat4x4f Camera::verticalBillboardMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
verticalDragPlane	Plane.h	/^const Plane<T,3> verticalDragPlane(const Vec<T,3>& position, const Vec<T,3>& direction) {$/;"	f	language:C++
vertices	Assets/Bsp29Model.cpp	/^        Renderer::VertexSpecs::P3T2::Vertex::List Bsp29Model::Face::vertices() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model::Face
vertices	IO/Md2Parser.h	/^                Md2MeshVertexList vertices;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Mesh
vertices	IO/Md2Parser.h	/^                Md2VertexList vertices;$/;"	m	language:C++	struct:TrenchBroom::IO::Md2Parser::Md2Frame
vertices	IO/MdlParser.h	/^                size_t vertices[3];$/;"	m	language:C++	struct:TrenchBroom::IO::MdlParser::MdlSkinTriangle
vertices	Model/Brush.cpp	/^        const BrushVertexList& Brush::vertices() const {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
vertices	Model/BrushFace.cpp	/^        const BrushVertexList& BrushFace::vertices() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
vertices	Model/BrushFaceGeometry.h	/^            BrushVertexList vertices;$/;"	m	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
vertices	Model/BrushGeometry.h	/^            BrushVertexList vertices;$/;"	m	language:C++	class:TrenchBroom::Model::BrushGeometry
vertices	Model/IntersectBrushGeometryWithFace.cpp	/^        const BrushVertexList& IntersectBrushGeometryWithFace::vertices() const {$/;"	f	language:C++	class:TrenchBroom::Model::IntersectBrushGeometryWithFace
vertices	Polygon.h	/^        typename Vec<T,S>::List vertices;$/;"	m	language:C++	struct:TrenchBroom::Polygon
vertices	Renderer/BrushRenderer.h	/^                VertexSpecs::P3::Vertex::List vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BrushRenderer::BuildBrushEdges
vertices	Renderer/EntityRenderer.cpp	/^            VertexSpecs::P3::Vertex::List& vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BuildWireframeBoundsVertices	file:
vertices	Renderer/EntityRenderer.cpp	/^            VertexSpecs::P3C4::Vertex::List& vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BuildColoredWireframeBoundsVertices	file:
vertices	Renderer/EntityRenderer.cpp	/^            VertexSpecs::P3NC4::Vertex::List& vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::BuildColoredSolidBoundsVertices	file:
vertices	Renderer/IndexedVertexList.h	/^            typename T::Vertex::List& vertices() {$/;"	f	language:C++	class:TrenchBroom::Renderer::IndexedVertexList
vertices	Renderer/MiniMapRenderer.h	/^                VertexSpecs::P3::Vertex::List vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::MiniMapRenderer::BuildBrushEdges
vertices	Renderer/RenderUtils.h	/^            Vec3f::List vertices;$/;"	m	language:C++	struct:TrenchBroom::Renderer::VertsAndNormals
vertices	Renderer/TextRenderer.h	/^                const Vec2f::List& vertices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextEntry
vertices	View/EntityBrowserView.cpp	/^            typename Vertex::List& vertices;$/;"	m	language:C++	struct:TrenchBroom::View::CollectBoundsVertices	file:
viewCamera	View/MiniMapBaseView.cpp	/^        const Renderer::Camera& MiniMapBaseView::viewCamera() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
viewMatrix	Mat.h	/^const Mat<T,4,4> viewMatrix(const Vec<T,3>& direction, const Vec<T,3>& up) {$/;"	f	language:C++
viewMatrix	Renderer/Camera.cpp	/^        const Mat4x4f& Camera::viewMatrix() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
viewRay	Renderer/Camera.cpp	/^        Ray3f Camera::viewRay() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
viewport	Renderer/Camera.cpp	/^        const Camera::Viewport& Camera::viewport() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
viewportVertices	Renderer/OrthographicCamera.cpp	/^        Vec3::List OrthographicCamera::viewportVertices() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
visible	Model/ModelFilter.cpp	/^        bool ModelFilter::visible(const BrushFace* face) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
visible	Model/ModelFilter.cpp	/^        bool ModelFilter::visible(const Object* object) const {$/;"	f	language:C++	class:TrenchBroom::Model::ModelFilter
visible	View/Grid.cpp	/^        bool Grid::visible() const {$/;"	f	language:C++	class:TrenchBroom::View::Grid
visibleEntries	Renderer/TextRenderer.h	/^            EntryList visibleEntries(RenderContext& context, const TextRendererFilter& filter) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
visibleEntries	Renderer/TextRenderer.h	/^            void visibleEntries(RenderContext& context, const TextRendererFilter& filter, const TextMap& entries, EntryList& result) const {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
visit	Model/Object.cpp	/^        void Object::visit(ObjectVisitor& visitor) {$/;"	f	language:C++	class:TrenchBroom::Model::Object
visit	Model/Object.cpp	/^        void ObjectVisitor::visit(Brush* brush) {$/;"	f	language:C++	class:TrenchBroom::Model::ObjectVisitor
visit	Model/Object.cpp	/^        void ObjectVisitor::visit(Entity* entity) {$/;"	f	language:C++	class:TrenchBroom::Model::ObjectVisitor
w	Renderer/TextureFont.h	/^                int x, y, w, h, a;$/;"	m	language:C++	struct:TrenchBroom::Renderer::TextureFont::Char
w	Vec.h	/^    T w() const {$/;"	f	language:C++	class:Vec
warn	Logger.cpp	/^    void Logger::warn(const String& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
warn	Logger.cpp	/^    void Logger::warn(const char* format, ...) {$/;"	f	language:C++	class:TrenchBroom::Logger
warn	Logger.cpp	/^    void Logger::warn(const wxString& message) {$/;"	f	language:C++	class:TrenchBroom::Logger
weight	Vec.h	/^    int weight() const {$/;"	f	language:C++	class:Vec
weight	Vec.h	/^    int weight(T c) const {$/;"	f	language:C++	class:Vec
what	Exceptions.h	/^        const char* what() const throw() {$/;"	f	language:C++	class:TrenchBroom::Exception
width	Assets/Texture.cpp	/^        size_t Texture::width() const {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
width	IO/ImageLoader.cpp	/^        size_t ImageLoader::width() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
width	IO/ImageLoaderImpl.cpp	/^        size_t ImageLoaderImpl::width() const {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
width	IO/Wad.h	/^            size_t width;$/;"	m	language:C++	struct:TrenchBroom::IO::MipSize
width	Renderer/Camera.h	/^                unsigned int width, height;$/;"	m	language:C++	struct:TrenchBroom::Renderer::Camera::Viewport
width	Renderer/FontTexture.cpp	/^        size_t FontTexture::width() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
width	View/CellLayout.h	/^            float width() const {$/;"	f	language:C++	class:TrenchBroom::View::CellLayout
width	View/CellLayout.h	/^            float width() const {$/;"	f	language:C++	class:TrenchBroom::View::LayoutBounds
worldBounds	View/MapDocument.cpp	/^        const BBox3& MapDocument::worldBounds() const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
worldToTex	Model/TexCoordSystemHelper.cpp	/^        Vec2f TexCoordSystemHelper::worldToTex(const Vec2f& v) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
worldToTex	Model/TexCoordSystemHelper.cpp	/^        Vec2f::List TexCoordSystemHelper::worldToTex(const Vec2f::List& vs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
worldToTex	Model/TexCoordSystemHelper.cpp	/^        Vec3 TexCoordSystemHelper::worldToTex(const Vec3& v) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
worldToTex	Model/TexCoordSystemHelper.cpp	/^        Vec3::List TexCoordSystemHelper::worldToTex(const Vec3::List& vs) const {$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystemHelper
worldToTexMatrix	View/TexturingViewHelper.cpp	/^        Mat4x4 TexturingViewHelper::worldToTexMatrix() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
worldspawn	Model/Entity.cpp	/^        bool Entity::worldspawn() const {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
worldspawn	Model/Map.cpp	/^        Entity* Map::worldspawn() const {$/;"	f	language:C++	class:TrenchBroom::Model::Map
worldspawn	View/MapDocument.cpp	/^        Model::Entity* MapDocument::worldspawn() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
write	Mat.h	/^    void write(T* buffer) const {$/;"	f	language:C++	class:Mat
write	Vec.h	/^    void write(std::ostream& str, const size_t components = S) const {$/;"	f	language:C++	class:Vec
writeBrush	IO/MapWriter.cpp	/^        size_t MapWriter::writeBrush(Model::Brush& brush, const size_t lineNumber, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeBrush	IO/MapWriter.cpp	/^        void MapWriter::writeBrush(const Model::Brush& brush, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeBuffer	Renderer/Vbo.h	/^            size_t writeBuffer(const size_t address, const std::vector<T>& buffer) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
writeBuffer	Renderer/VboBlock.h	/^            size_t writeBuffer(const size_t address, const std::vector<T>& buffer) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
writeElement	Renderer/Vbo.h	/^            size_t writeElement(const size_t address, const T& element) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
writeElement	Renderer/VboBlock.h	/^            size_t writeElement(const size_t address, const T& element) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
writeElements	Renderer/Vbo.h	/^            size_t writeElements(const size_t address, const std::vector<T>& elements) {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
writeElements	Renderer/VboBlock.h	/^            size_t writeElements(const size_t address, const std::vector<T>& elements) {$/;"	f	language:C++	class:TrenchBroom::Renderer::VboBlock
writeEntity	IO/MapWriter.cpp	/^        size_t MapWriter::writeEntity(Model::Entity& entity, const Model::BrushList& brushes, const size_t lineNumber, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntity	IO/MapWriter.cpp	/^        void MapWriter::writeEntity(const Model::Entity& entity, const Model::BrushList& brushes, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityFooter	IO/MapWriter.cpp	/^        size_t MapWriter::writeEntityFooter(FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityFooter	IO/MapWriter.cpp	/^        void MapWriter::writeEntityFooter(std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityHeader	IO/MapWriter.cpp	/^        size_t MapWriter::writeEntityHeader(Model::Entity& entity, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityHeader	IO/MapWriter.cpp	/^        void MapWriter::writeEntityHeader(const Model::Entity& entity, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityProperty	IO/MapWriter.cpp	/^        size_t MapWriter::writeEntityProperty(const Model::EntityProperty& property, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeEntityProperty	IO/MapWriter.cpp	/^        void MapWriter::writeEntityProperty(const Model::EntityProperty& property, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeExtraProperties	IO/MapWriter.cpp	/^        size_t MapWriter::writeExtraProperties(const Model::Object& object, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeExtraProperties	IO/MapWriter.cpp	/^        void MapWriter::writeExtraProperties(const Model::Object& object, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeFace	IO/Hexen2MapWriter.cpp	/^        size_t Hexen2MapWriter::writeFace(Model::BrushFace& face, const size_t lineNumber, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::Hexen2MapWriter
writeFace	IO/Hexen2MapWriter.cpp	/^        void Hexen2MapWriter::writeFace(const Model::BrushFace& face, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::Hexen2MapWriter
writeFace	IO/Quake2MapWriter.cpp	/^        size_t Quake2MapWriter::writeFace(Model::BrushFace& face, const size_t lineNumber, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::Quake2MapWriter
writeFace	IO/Quake2MapWriter.cpp	/^        void Quake2MapWriter::writeFace(const Model::BrushFace& face, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::Quake2MapWriter
writeFace	IO/QuakeMapWriter.cpp	/^        size_t QuakeMapWriter::writeFace(Model::BrushFace& face, const size_t lineNumber, FILE* stream) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapWriter
writeFace	IO/QuakeMapWriter.cpp	/^        void QuakeMapWriter::writeFace(const Model::BrushFace& face, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::QuakeMapWriter
writeFacesToStream	IO/MapWriter.cpp	/^        void MapWriter::writeFacesToStream(const Model::BrushFaceList& faces, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeFacesToStream	Model/Game.cpp	/^        void Game::writeFacesToStream(const MapFormat::Type format, const Model::BrushFaceList& faces, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
writeFacesToStream	View/MapDocument.cpp	/^        void MapDocument::writeFacesToStream(const Model::BrushFaceList& faces, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
writeMap	Model/Game.cpp	/^        void Game::writeMap(Map& map, const IO::Path& path) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
writeObjectsToStream	IO/MapWriter.cpp	/^        void MapWriter::writeObjectsToStream(const Model::ObjectList& objects, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeObjectsToStream	Model/Game.cpp	/^        void Game::writeObjectsToStream(const MapFormat::Type format, const Model::ObjectList& objects, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::Model::Game
writeObjectsToStream	View/MapDocument.cpp	/^        void MapDocument::writeObjectsToStream(const Model::ObjectList& objects, std::ostream& stream) const {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
writeToFileAtPath	IO/MapWriter.cpp	/^        void MapWriter::writeToFileAtPath(Model::Map& map, const Path& path, const bool overwrite) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
writeToStream	IO/MapWriter.cpp	/^        void MapWriter::writeToStream(const Model::Map& map, std::ostream& stream) {$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
wxColorList	View/SmartColorEditor.h	/^            typedef std::vector<wxColour> wxColorList;$/;"	t	language:C++	class:TrenchBroom::View::SmartColorEditor
x	Renderer/Camera.h	/^                int x, y;$/;"	m	language:C++	struct:TrenchBroom::Renderer::Camera::Viewport
x	Renderer/OutlineTracer.h	/^                FloatType x;$/;"	m	language:C++	struct:TrenchBroom::Renderer::OutlineTracer::Position
x	Renderer/TextureFont.h	/^                int x, y, w, h, a;$/;"	m	language:C++	struct:TrenchBroom::Renderer::TextureFont::Char
x	Vec.h	/^    T x() const {$/;"	f	language:C++	class:Vec
xAt	Plane.h	/^    T xAt(const Vec<T,S-1>& point) const {$/;"	f	language:C++	class:Plane
xAxis	View/TexturingViewHelper.cpp	/^        const Vec3& TexturingViewHelper::xAxis() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
xOffset	Model/BrushFace.cpp	/^        float BrushFace::xOffset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
xOffset	Model/BrushFace.cpp	/^        float BrushFaceAttribs::xOffset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
xScale	Model/BrushFace.cpp	/^        float BrushFace::xScale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
xScale	Model/BrushFace.cpp	/^        float BrushFaceAttribs::xScale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
xy	Vec.h	/^    Vec<T,2> xy() const {$/;"	f	language:C++	class:Vec
xyRange	View/MiniMapXYView.cpp	/^        BBox2f MiniMapXYView::xyRange() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
xyz	Vec.h	/^    Vec<T,3> xyz() const {$/;"	f	language:C++	class:Vec
xyzw	Vec.h	/^    Vec<T,4> xyzw() const {$/;"	f	language:C++	class:Vec
xz	Vec.h	/^    Vec<T,2> xz() const {$/;"	f	language:C++	class:Vec
y	Renderer/Camera.h	/^                int x, y;$/;"	m	language:C++	struct:TrenchBroom::Renderer::Camera::Viewport
y	Renderer/TextureFont.h	/^                int x, y, w, h, a;$/;"	m	language:C++	struct:TrenchBroom::Renderer::TextureFont::Char
y	Vec.h	/^    T y() const {$/;"	f	language:C++	class:Vec
yAt	Plane.h	/^    T yAt(const Vec<T,S-1>& point) const {$/;"	f	language:C++	class:Plane
yAxis	View/TexturingViewHelper.cpp	/^        const Vec3& TexturingViewHelper::yAxis() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
yOffset	Model/BrushFace.cpp	/^        float BrushFace::yOffset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
yOffset	Model/BrushFace.cpp	/^        float BrushFaceAttribs::yOffset() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
yScale	Model/BrushFace.cpp	/^        float BrushFace::yScale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
yScale	Model/BrushFace.cpp	/^        float BrushFaceAttribs::yScale() const {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceAttribs
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i	language:Python
yz	Vec.h	/^    Vec<T,2> yz() const {$/;"	f	language:C++	class:Vec
z	Vec.h	/^    T z() const {$/;"	f	language:C++	class:Vec
zAt	Plane.h	/^    T zAt(const Vec<T,S-1>& point) const {$/;"	f	language:C++	class:Plane
zAxis	View/TexturingViewHelper.cpp	/^        const Vec3& TexturingViewHelper::zAxis() const {$/;"	f	language:C++	class:TrenchBroom::View::TexturingViewHelper
zRange	View/MiniMapZView.cpp	/^        BBox1f MiniMapZView::zRange() const {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
zero	MathUtils.h	/^    bool zero(const T v, const T epsilon = Constants<T>::AlmostZero) {$/;"	f	language:C++	namespace:Math
zoom	Renderer/OrthographicCamera.cpp	/^        const Vec2f& OrthographicCamera::zoom() const {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
zoom	Renderer/OrthographicCamera.cpp	/^        void OrthographicCamera::zoom(const Vec2f& factors) {$/;"	f	language:C++	class:TrenchBroom::Renderer::OrthographicCamera
zoomView	View/MiniMapBaseView.cpp	/^        void MiniMapBaseView::zoomView(const Vec3f& factors) {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
~ActivationPolicy	View/Tool.cpp	/^        ActivationPolicy::~ActivationPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::ActivationPolicy
~ActiveShader	Renderer/ShaderManager.cpp	/^        ActiveShader::~ActiveShader() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ActiveShader
~AddRemoveObjectsCommand	Controller/AddRemoveObjectsCommand.cpp	/^        AddRemoveObjectsCommand::~AddRemoveObjectsCommand() {$/;"	f	language:C++	class:TrenchBroom::Controller::AddRemoveObjectsCommand
~Animation	View/Animation.cpp	/^        Animation::~Animation() {$/;"	f	language:C++	class:TrenchBroom::View::Animation
~AnimationCurve	View/AnimationCurve.cpp	/^        AnimationCurve::~AnimationCurve() {}$/;"	f	language:C++	class:TrenchBroom::View::AnimationCurve
~AssetException	Exceptions.h	/^        ~AssetException() throw() {}$/;"	f	language:C++	class:TrenchBroom::AssetException
~Autosaver	View/Autosaver.cpp	/^        Autosaver::~Autosaver() {$/;"	f	language:C++	class:TrenchBroom::View::Autosaver
~BaseHolder	Holder.h	/^    virtual ~BaseHolder() {}$/;"	f	language:C++	class:BaseHolder
~BaseHolder	Renderer/VertexArray.h	/^            virtual ~BaseHolder() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::BaseHolder
~Brush	Model/Brush.cpp	/^        Brush::~Brush() {$/;"	f	language:C++	class:TrenchBroom::Model::Brush
~BrushAlgorithm	Model/BrushAlgorithm.h	/^            virtual ~BrushAlgorithm() {}$/;"	f	language:C++	class:TrenchBroom::Model::BrushAlgorithm
~BrushEdge	Model/BrushEdge.cpp	/^        BrushEdge::~BrushEdge() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushEdge
~BrushFace	Model/BrushFace.cpp	/^        BrushFace::~BrushFace() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFace
~BrushFaceGeometry	Model/BrushFaceGeometry.cpp	/^        BrushFaceGeometry::~BrushFaceGeometry() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushFaceGeometry
~BrushGeometry	Model/BrushGeometry.cpp	/^        BrushGeometry::~BrushGeometry() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushGeometry
~BrushRenderer	Renderer/BrushRenderer.cpp	/^        BrushRenderer::~BrushRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer
~Bsp29Model	Assets/Bsp29Model.cpp	/^        Bsp29Model::~Bsp29Model() {$/;"	f	language:C++	class:TrenchBroom::Assets::Bsp29Model
~Camera	Renderer/Camera.cpp	/^        Camera::~Camera() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::Camera
~ChooseGameDialog	View/ChooseGameDialog.cpp	/^        ChooseGameDialog::~ChooseGameDialog() {$/;"	f	language:C++	class:TrenchBroom::View::ChooseGameDialog
~CommandProcessorException	Exceptions.h	/^        ~CommandProcessorException() throw() {}$/;"	f	language:C++	class:TrenchBroom::CommandProcessorException
~ConfigEntry	ConfigTypes.cpp	/^    ConfigEntry::~ConfigEntry() {}$/;"	f	language:C++	class:TrenchBroom::ConfigEntry
~DropPolicy	View/Tool.cpp	/^        DropPolicy::~DropPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::DropPolicy
~Entity	Model/Entity.cpp	/^        Entity::~Entity() {$/;"	f	language:C++	class:TrenchBroom::Model::Entity
~EntityBrowser	View/EntityBrowser.cpp	/^        EntityBrowser::~EntityBrowser() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowser
~EntityBrowserView	View/EntityBrowserView.cpp	/^        EntityBrowserView::~EntityBrowserView() {$/;"	f	language:C++	class:TrenchBroom::View::EntityBrowserView
~EntityDefinition	Assets/EntityDefinition.cpp	/^        EntityDefinition::~EntityDefinition() {}$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinition
~EntityDefinitionFileChooser	View/EntityDefinitionFileChooser.cpp	/^        EntityDefinitionFileChooser::~EntityDefinitionFileChooser() {$/;"	f	language:C++	class:TrenchBroom::View::EntityDefinitionFileChooser
~EntityDefinitionManager	Assets/EntityDefinitionManager.cpp	/^        EntityDefinitionManager::~EntityDefinitionManager() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityDefinitionManager
~EntityDefinitionParser	IO/EntityDefinitionParser.cpp	/^        EntityDefinitionParser::~EntityDefinitionParser() {}$/;"	f	language:C++	class:TrenchBroom::IO::EntityDefinitionParser
~EntityModel	Assets/EntityModel.cpp	/^        EntityModel::~EntityModel() {}$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModel
~EntityModelManager	Assets/EntityModelManager.cpp	/^        EntityModelManager::~EntityModelManager() {$/;"	f	language:C++	class:TrenchBroom::Assets::EntityModelManager
~EntityModelParser	IO/EntityModelParser.cpp	/^        EntityModelParser::~EntityModelParser() {}$/;"	f	language:C++	class:TrenchBroom::IO::EntityModelParser
~EntityModelRenderer	Renderer/EntityModelRenderer.cpp	/^        EntityModelRenderer::~EntityModelRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityModelRenderer
~EntityPropertyException	Exceptions.h	/^        ~EntityPropertyException() throw() {}$/;"	f	language:C++	class:TrenchBroom::EntityPropertyException
~EntityPropertyGrid	View/EntityPropertyGrid.cpp	/^        EntityPropertyGrid::~EntityPropertyGrid() {$/;"	f	language:C++	class:TrenchBroom::View::EntityPropertyGrid
~EntityRenderer	Renderer/EntityRenderer.cpp	/^        EntityRenderer::~EntityRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::EntityRenderer
~Exception	Exceptions.h	/^        virtual ~Exception() throw() {}$/;"	f	language:C++	class:TrenchBroom::Exception
~ExceptionStream	Exceptions.h	/^        virtual ~ExceptionStream() throw() {}$/;"	f	language:C++	class:TrenchBroom::ExceptionStream
~Executable	View/ExecutableEvent.cpp	/^        ExecutableEvent::Executable::~Executable() {}$/;"	f	language:C++	class:TrenchBroom::View::ExecutableEvent::Executable
~FaceAdjacencyGraph	Model/FaceAdjacencyGraph.cpp	/^        FaceAdjacencyGraph::~FaceAdjacencyGraph() {$/;"	f	language:C++	class:TrenchBroom::Model::FaceAdjacencyGraph
~FaceAttribsEditor	View/FaceAttribsEditor.cpp	/^        FaceAttribsEditor::~FaceAttribsEditor() {$/;"	f	language:C++	class:TrenchBroom::View::FaceAttribsEditor
~FaceManager	Model/MoveBrushVertexAlgorithm.h	/^                ~FaceManager() {$/;"	f	language:C++	class:TrenchBroom::Model::MoveBrushVertexAlgorithm::FaceManager
~FacesHolder	Model/Brush.cpp	/^        BrushSnapshot::FacesHolder::~FacesHolder() {$/;"	f	language:C++	class:TrenchBroom::Model::BrushSnapshot::FacesHolder
~FileFormatException	Exceptions.h	/^        ~FileFormatException() throw() {}$/;"	f	language:C++	class:TrenchBroom::FileFormatException
~FileSystem	IO/FileSystem.cpp	/^        FileSystem::~FileSystem() {}$/;"	f	language:C++	class:TrenchBroom::IO::FileSystem
~FileSystemException	Exceptions.h	/^        ~FileSystemException() throw() {}$/;"	f	language:C++	class:TrenchBroom::FileSystemException
~Filter	Renderer/BrushRenderer.cpp	/^        BrushRenderer::Filter::~Filter() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::BrushRenderer::Filter
~FontManager	Renderer/FontManager.cpp	/^        FontManager::~FontManager() {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontManager
~FontTexture	Renderer/FontTexture.cpp	/^        FontTexture::~FontTexture() {$/;"	f	language:C++	class:TrenchBroom::Renderer::FontTexture
~FrameManager	View/FrameManager.cpp	/^        FrameManager::~FrameManager() {$/;"	f	language:C++	class:TrenchBroom::View::FrameManager
~GLContextHolder	View/GLContextHolder.cpp	/^        GLContextHolder::~GLContextHolder() {$/;"	f	language:C++	class:TrenchBroom::View::GLContextHolder
~Game	Model/Game.cpp	/^        Game::~Game() {}$/;"	f	language:C++	class:TrenchBroom::Model::Game
~GameException	Exceptions.h	/^        ~GameException() throw() {}$/;"	f	language:C++	class:TrenchBroom::GameException
~GameImpl	Model/GameImpl.cpp	/^        GameImpl::~GameImpl() {$/;"	f	language:C++	class:TrenchBroom::Model::GameImpl
~GenericDropSource	View/GenericDropSource.cpp	/^        GenericDropSource::~GenericDropSource() {$/;"	f	language:C++	class:TrenchBroom::View::GenericDropSource
~GeometryException	Exceptions.h	/^        ~GeometryException() throw() {}$/;"	f	language:C++	class:TrenchBroom::GeometryException
~HitFilter	HitFilter.cpp	/^    HitFilter::~HitFilter() {}$/;"	f	language:C++	class:TrenchBroom::HitFilter
~Holder	Renderer/VertexArray.h	/^            virtual ~Holder() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Holder
~ImageLoader	IO/ImageLoader.cpp	/^        ImageLoader::~ImageLoader() {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoader
~ImageLoaderImpl	IO/ImageLoaderImpl.cpp	/^        ImageLoaderImpl::~ImageLoaderImpl() {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl
~InitFreeImage	IO/ImageLoaderImpl.cpp	/^        ImageLoaderImpl::InitFreeImage::~InitFreeImage() {$/;"	f	language:C++	class:TrenchBroom::IO::ImageLoaderImpl::InitFreeImage
~InputState	View/InputState.cpp	/^        InputState::~InputState() {}$/;"	f	language:C++	class:TrenchBroom::View::InputState
~Issue	Model/Issue.cpp	/^        Issue::~Issue() {$/;"	f	language:C++	class:TrenchBroom::Model::Issue
~IssueBrowser	View/IssueBrowser.cpp	/^        IssueBrowser::~IssueBrowser() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowser
~IssueBrowserDataModel	View/IssueBrowser.cpp	/^            ~IssueBrowserDataModel() {$/;"	f	language:C++	class:TrenchBroom::View::IssueBrowserDataModel
~IssueGenerator	Model/IssueGenerator.cpp	/^        IssueGenerator::~IssueGenerator() {}$/;"	f	language:C++	class:TrenchBroom::Model::IssueGenerator
~IssueManager	Model/IssueManager.cpp	/^        IssueManager::~IssueManager() {$/;"	f	language:C++	class:TrenchBroom::Model::IssueManager
~KeyboardGridTable	View/KeyboardPreferencePane.cpp	/^        KeyboardGridTable::~KeyboardGridTable() {$/;"	f	language:C++	class:TrenchBroom::View::KeyboardGridTable
~KeyboardShortcutEntry	View/KeyboardPreferencePane.h	/^            virtual ~KeyboardShortcutEntry() {}$/;"	f	language:C++	class:TrenchBroom::View::KeyboardShortcutEntry
~Logger	Logger.cpp	/^    Logger::~Logger() {}$/;"	f	language:C++	class:TrenchBroom::Logger
~Map	Model/Map.cpp	/^        Map::~Map() {$/;"	f	language:C++	class:TrenchBroom::Model::Map
~MapDocument	View/MapDocument.cpp	/^        MapDocument::~MapDocument() {$/;"	f	language:C++	class:TrenchBroom::View::MapDocument
~MapFrame	View/MapFrame.cpp	/^        MapFrame::~MapFrame() {$/;"	f	language:C++	class:TrenchBroom::View::MapFrame
~MapParser	IO/MapParser.cpp	/^        MapParser::~MapParser() {}$/;"	f	language:C++	class:TrenchBroom::IO::MapParser
~MapRenderer	Renderer/MapRenderer.cpp	/^        MapRenderer::~MapRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MapRenderer
~MapTreeView	View/MapTreeView.cpp	/^        MapTreeView::~MapTreeView() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeView
~MapTreeViewDataModel	View/MapTreeView.cpp	/^            ~MapTreeViewDataModel() {$/;"	f	language:C++	class:TrenchBroom::View::MapTreeViewDataModel
~MapView	View/MapView.cpp	/^        MapView::~MapView() {$/;"	f	language:C++	class:TrenchBroom::View::MapView
~MapWriter	IO/MapWriter.cpp	/^        MapWriter::~MapWriter() {}$/;"	f	language:C++	class:TrenchBroom::IO::MapWriter
~MappedFile	IO/MappedFile.cpp	/^        MappedFile::~MappedFile() {$/;"	f	language:C++	class:TrenchBroom::IO::MappedFile
~Md2Model	Assets/Md2Model.cpp	/^        Md2Model::~Md2Model() {$/;"	f	language:C++	class:TrenchBroom::Assets::Md2Model
~MdlBaseFrame	Assets/MdlModel.cpp	/^        MdlBaseFrame::~MdlBaseFrame() {}$/;"	f	language:C++	class:TrenchBroom::Assets::MdlBaseFrame
~MdlFrameGroup	Assets/MdlModel.cpp	/^        MdlFrameGroup::~MdlFrameGroup() {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlFrameGroup
~MdlModel	Assets/MdlModel.cpp	/^        MdlModel::~MdlModel() {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlModel
~MdlSkin	Assets/MdlModel.cpp	/^        MdlSkin::~MdlSkin() {$/;"	f	language:C++	class:TrenchBroom::Assets::MdlSkin
~Menu	View/Menu.cpp	/^        Menu::~Menu() {}$/;"	f	language:C++	class:TrenchBroom::View::Menu
~MenuItem	View/Menu.cpp	/^        MenuItem::~MenuItem() {}$/;"	f	language:C++	class:TrenchBroom::View::MenuItem
~MenuItemParent	View/Menu.cpp	/^        MenuItemParent::~MenuItemParent() {}$/;"	f	language:C++	class:TrenchBroom::View::MenuItemParent
~MiniMapBaseView	View/MiniMapBaseView.cpp	/^        MiniMapBaseView::~MiniMapBaseView() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapBaseView
~MiniMapRenderer	Renderer/MiniMapRenderer.cpp	/^        MiniMapRenderer::~MiniMapRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MiniMapRenderer
~MiniMapXYView	View/MiniMapXYView.cpp	/^        MiniMapXYView::~MiniMapXYView() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapXYView
~MiniMapZView	View/MiniMapZView.cpp	/^        MiniMapZView::~MiniMapZView() {$/;"	f	language:C++	class:TrenchBroom::View::MiniMapZView
~ModEditor	View/ModEditor.cpp	/^        ModEditor::~ModEditor() {$/;"	f	language:C++	class:TrenchBroom::View::ModEditor
~ModelDefinition	Assets/ModelDefinition.cpp	/^        ModelDefinition::~ModelDefinition() {}$/;"	f	language:C++	class:TrenchBroom::Assets::ModelDefinition
~MouseDragPolicy	View/Tool.cpp	/^        MouseDragPolicy::~MouseDragPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::MouseDragPolicy
~MousePolicy	View/Tool.cpp	/^        MousePolicy::~MousePolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::MousePolicy
~MoveDelegate	View/MoveToolHelper.cpp	/^        MoveDelegate::~MoveDelegate() {}$/;"	f	language:C++	class:TrenchBroom::View::MoveDelegate
~MultiMenuSelector	View/Menu.cpp	/^        MultiMenuSelector::~MultiMenuSelector() {}$/;"	f	language:C++	class:TrenchBroom::View::MultiMenuSelector
~MultiplyModelMatrix	Renderer/Transformation.cpp	/^        MultiplyModelMatrix::~MultiplyModelMatrix() {$/;"	f	language:C++	class:TrenchBroom::Renderer::MultiplyModelMatrix
~NoActivationPolicy	View/Tool.cpp	/^        NoActivationPolicy::~NoActivationPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::NoActivationPolicy
~NoDropPolicy	View/Tool.cpp	/^        NoDropPolicy::~NoDropPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::NoDropPolicy
~NoMouseDragPolicy	View/Tool.cpp	/^        NoMouseDragPolicy::~NoMouseDragPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::NoMouseDragPolicy
~NoMousePolicy	View/Tool.cpp	/^        NoMousePolicy::~NoMousePolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::NoMousePolicy
~NoPickingPolicy	View/Tool.cpp	/^        NoPickingPolicy::~NoPickingPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::NoPickingPolicy
~Notifier0	Notifier.h	/^        ~Notifier0() {$/;"	f	language:C++	class:TrenchBroom::Notifier0
~Notifier1	Notifier.h	/^        ~Notifier1() {$/;"	f	language:C++	class:TrenchBroom::Notifier1
~Notifier2	Notifier.h	/^        ~Notifier2() {$/;"	f	language:C++	class:TrenchBroom::Notifier2
~Notifier3	Notifier.h	/^        ~Notifier3() {$/;"	f	language:C++	class:TrenchBroom::Notifier3
~Object	Model/Object.cpp	/^        Object::~Object() {}$/;"	f	language:C++	class:TrenchBroom::Model::Object
~ObjectVisitor	Model/Object.cpp	/^        ObjectVisitor::~ObjectVisitor() {}$/;"	f	language:C++	class:TrenchBroom::Model::ObjectVisitor
~Observer	Notifier.h	/^            virtual ~Observer() {}$/;"	f	language:C++	class:TrenchBroom::Notifier0::Observer
~Observer	Notifier.h	/^            virtual ~Observer() {}$/;"	f	language:C++	class:TrenchBroom::Notifier1::Observer
~Observer	Notifier.h	/^            virtual ~Observer() {}$/;"	f	language:C++	class:TrenchBroom::Notifier2::Observer
~Observer	Notifier.h	/^            virtual ~Observer() {}$/;"	f	language:C++	class:TrenchBroom::Notifier3::Observer
~OctreeException	Exceptions.h	/^        ~OctreeException() throw() {}$/;"	f	language:C++	class:TrenchBroom::OctreeException
~OctreeNode	Model/Octree.h	/^            ~OctreeNode() {$/;"	f	language:C++	class:TrenchBroom::Model::OctreeNode
~OpenClipboard	View/MapFrame.cpp	/^            ~OpenClipboard() {$/;"	f	language:C++	class:TrenchBroom::View::OpenClipboard
~Palette	Assets/Palette.cpp	/^        Palette::~Palette() {$/;"	f	language:C++	class:TrenchBroom::Assets::Palette
~Parser	IO/Parser.h	/^            virtual ~Parser() {}$/;"	f	language:C++	class:TrenchBroom::IO::Parser
~ParserException	Exceptions.h	/^        ~ParserException() throw() {}$/;"	f	language:C++	class:TrenchBroom::ParserException
~PathException	Exceptions.h	/^        ~PathException() throw() {}$/;"	f	language:C++	class:TrenchBroom::PathException
~Pickable	Model/Pickable.h	/^            virtual ~Pickable() {}$/;"	f	language:C++	class:TrenchBroom::Model::Pickable
~PickingPolicy	View/Tool.cpp	/^        PickingPolicy::~PickingPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::PickingPolicy
~PlaneDragPolicy	View/Tool.cpp	/^        PlaneDragPolicy::~PlaneDragPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::PlaneDragPolicy
~PosixMappedFile	IO/MappedFile.cpp	/^        PosixMappedFile::~PosixMappedFile() {$/;"	f	language:C++	class:TrenchBroom::IO::PosixMappedFile
~PreferenceBase	Preference.h	/^        virtual ~PreferenceBase() {}$/;"	f	language:C++	class:TrenchBroom::PreferenceBase
~PreferenceManager	PreferenceManager.cpp	/^    PreferenceManager::~PreferenceManager() {$/;"	f	language:C++	class:TrenchBroom::PreferenceManager
~PreferencePane	View/PreferencePane.cpp	/^        PreferencePane::~PreferencePane() {}$/;"	f	language:C++	class:TrenchBroom::View::PreferencePane
~PropertyDefinition	Assets/PropertyDefinition.cpp	/^        PropertyDefinition::~PropertyDefinition() {}$/;"	f	language:C++	class:TrenchBroom::Assets::PropertyDefinition
~RenderException	Exceptions.h	/^        ~RenderException() throw() {}$/;"	f	language:C++	class:TrenchBroom::RenderException
~RenderPolicy	View/Tool.cpp	/^        RenderPolicy::~RenderPolicy() {}$/;"	f	language:C++	class:TrenchBroom::View::RenderPolicy
~ReplaceModelMatrix	Renderer/Transformation.cpp	/^        ReplaceModelMatrix::~ReplaceModelMatrix() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ReplaceModelMatrix
~ReplaceTransformation	Renderer/Transformation.cpp	/^        ReplaceTransformation::~ReplaceTransformation() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ReplaceTransformation
~ResourceNotFoundException	Exceptions.h	/^        ~ResourceNotFoundException() throw() {}$/;"	f	language:C++	class:TrenchBroom::ResourceNotFoundException
~RotateDelegate	View/RotateToolHelper.cpp	/^        RotateDelegate::~RotateDelegate() {}$/;"	f	language:C++	class:TrenchBroom::View::RotateDelegate
~SetBool	SetBool.cpp	/^    SetBool::~SetBool() {$/;"	f	language:C++	class:TrenchBroom::SetBool
~SetBoolFun	SetBool.h	/^        ~SetBoolFun() {$/;"	f	language:C++	class:TrenchBroom::SetBoolFun
~SetTemporaryPreference	PreferenceManager.h	/^        ~SetTemporaryPreference() {$/;"	f	language:C++	class:TrenchBroom::SetTemporaryPreference
~SetVboState	Renderer/Vbo.cpp	/^        SetVboState::~SetVboState() {$/;"	f	language:C++	class:TrenchBroom::Renderer::SetVboState
~Shader	Renderer/Shader.cpp	/^        Shader::~Shader() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Shader
~ShaderManager	Renderer/ShaderManager.cpp	/^        ShaderManager::~ShaderManager() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderManager
~ShaderProgram	Renderer/ShaderProgram.cpp	/^        ShaderProgram::~ShaderProgram() {$/;"	f	language:C++	class:TrenchBroom::Renderer::ShaderProgram
~ShortcutMenuItem	View/Menu.cpp	/^        ShortcutMenuItem::~ShortcutMenuItem() {}$/;"	f	language:C++	class:TrenchBroom::View::ShortcutMenuItem
~SmartPropertyEditor	View/SmartPropertyEditor.cpp	/^        SmartPropertyEditor::~SmartPropertyEditor() {}$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditor
~SmartPropertyEditorManager	View/SmartPropertyEditorManager.cpp	/^        SmartPropertyEditorManager::~SmartPropertyEditorManager() {$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorManager
~SmartPropertyEditorMatcher	View/SmartPropertyEditorMatcher.cpp	/^        SmartPropertyEditorMatcher::~SmartPropertyEditorMatcher() {}$/;"	f	language:C++	class:TrenchBroom::View::SmartPropertyEditorMatcher
~StaticModelDefinition	Assets/ModelDefinition.cpp	/^        StaticModelDefinition::~StaticModelDefinition() {$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinition
~StaticModelDefinitionMatcher	Assets/ModelDefinition.cpp	/^        StaticModelDefinitionMatcher::~StaticModelDefinitionMatcher() {}$/;"	f	language:C++	class:TrenchBroom::Assets::StaticModelDefinitionMatcher
~StringIndex	StringIndex.h	/^        ~StringIndex() {$/;"	f	language:C++	class:TrenchBroom::StringIndex
~TexCoordSystem	Model/TexCoordSystem.cpp	/^        TexCoordSystem::~TexCoordSystem() {}$/;"	f	language:C++	class:TrenchBroom::Model::TexCoordSystem
~TextAnchor	Renderer/TextRenderer.h	/^            virtual ~TextAnchor() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::TextAnchor
~TextColorProvider	Renderer/TextRenderer.h	/^                virtual ~TextColorProvider() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextColorProvider
~TextMenuItem	View/Menu.cpp	/^        TextMenuItem::~TextMenuItem() {}$/;"	f	language:C++	class:TrenchBroom::View::TextMenuItem
~TextRenderer	Renderer/TextRenderer.h	/^            ~TextRenderer() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer
~TextRendererFilter	Renderer/TextRenderer.h	/^                virtual ~TextRendererFilter() {}$/;"	f	language:C++	class:TrenchBroom::Renderer::TextRenderer::TextRendererFilter
~Texture	Assets/Texture.cpp	/^        Texture::~Texture() {$/;"	f	language:C++	class:TrenchBroom::Assets::Texture
~TextureBrowser	View/TextureBrowser.cpp	/^        TextureBrowser::~TextureBrowser() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowser
~TextureBrowserView	View/TextureBrowserView.cpp	/^        TextureBrowserView::~TextureBrowserView() {$/;"	f	language:C++	class:TrenchBroom::View::TextureBrowserView
~TextureCollection	Assets/TextureCollection.cpp	/^        TextureCollection::~TextureCollection() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureCollection
~TextureCollectionEditor	View/TextureCollectionEditor.cpp	/^        TextureCollectionEditor::~TextureCollectionEditor() {$/;"	f	language:C++	class:TrenchBroom::View::TextureCollectionEditor
~TextureFont	Renderer/TextureFont.cpp	/^        TextureFont::~TextureFont() {$/;"	f	language:C++	class:TrenchBroom::Renderer::TextureFont
~TextureLoader	IO/TextureLoader.cpp	/^        TextureLoader::~TextureLoader() {}$/;"	f	language:C++	class:TrenchBroom::IO::TextureLoader
~TextureManager	Assets/TextureManager.cpp	/^        TextureManager::~TextureManager() {$/;"	f	language:C++	class:TrenchBroom::Assets::TextureManager
~TextureTool	View/TextureTool.cpp	/^        TextureTool::~TextureTool() {$/;"	f	language:C++	class:TrenchBroom::View::TextureTool
~TextureToolHelper	View/TextureTool.cpp	/^        TextureToolHelper::~TextureToolHelper() {}$/;"	f	language:C++	class:TrenchBroom::View::TextureToolHelper
~TexturingView	View/TexturingView.cpp	/^        TexturingView::~TexturingView() {$/;"	f	language:C++	class:TrenchBroom::View::TexturingView
~Tokenizer	IO/Tokenizer.h	/^            virtual ~Tokenizer() {}$/;"	f	language:C++	class:TrenchBroom::IO::Tokenizer
~Tool	View/Tool.cpp	/^        Tool::~Tool() {}$/;"	f	language:C++	class:TrenchBroom::View::Tool
~ToolBox	View/ToolBox.cpp	/^        ToolBox::~ToolBox() {$/;"	f	language:C++	class:TrenchBroom::View::ToolBox
~ToolBoxHelper	View/ToolBox.cpp	/^        ToolBoxHelper::~ToolBoxHelper() {}$/;"	f	language:C++	class:TrenchBroom::View::ToolBoxHelper
~Transformation	Renderer/Transformation.cpp	/^        Transformation::~Transformation() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Transformation
~TrenchBroomApp	TrenchBroomApp.cpp	/^        TrenchBroomApp::~TrenchBroomApp() {$/;"	f	language:C++	class:TrenchBroom::View::TrenchBroomApp
~Vbo	Renderer/Vbo.cpp	/^        Vbo::~Vbo() {$/;"	f	language:C++	class:TrenchBroom::Renderer::Vbo
~VboException	Exceptions.h	/^        ~VboException() throw() {}$/;"	f	language:C++	class:TrenchBroom::VboException
~WinMappedFile	IO/MappedFile.cpp	/^        WinMappedFile::~WinMappedFile() {$/;"	f	language:C++	class:TrenchBroom::IO::WinMappedFile
~WritableFileSystem	IO/FileSystem.cpp	/^        WritableFileSystem::~WritableFileSystem() {}$/;"	f	language:C++	class:TrenchBroom::IO::WritableFileSystem
