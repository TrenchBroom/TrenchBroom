# Run this workflow every time a new commit pushed to your repository
on: push

env:
  # FIXME: replace 'test-github-actions-' with 'v'
  TB_CREATE_RELEASE: ${{ startsWith(github.ref, 'refs/tags/test-github-actions-') }}

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  test-and-package:
    # Name the Job
    name: Test and package
    # Set the type of machine to run on
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel the macOS build if the Linux build fails, etc.
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-16.04, macos-10.15, windows-2019]
        tbdebug: [false]
        # Placeholder value since we can't have an empty array here
        gcc-package: ['']
        tb-arch: ['']
        exclude:
          - os: ubuntu-16.04
            gcc-package: ['']
          - os: windows-2019
            tb-arch: ['']
        include:
          - os: ubuntu-16.04
            gcc-package: g++-7
          - os: ubuntu-16.04
            gcc-package: g++-8
          - os: macos-10.15
            tbdebug: true
          - os: windows-2019
            tb-arch: x64
          - os: windows-2019
            tb-arch: Win32

    steps:
      # See: https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Dependencies

      - name: Install Linux dependencies
        if: ${{ matrix.os == 'ubuntu-16.04' }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository ppa:beineri/opt-qt595-xenial
          sudo apt update
          sudo apt install ${{ matrix.gcc-package }} qt59base qt59svg freeglut3-dev libglew-dev mesa-common-dev build-essential libglm-dev libxxf86vm-dev libfreeimage-dev pandoc cmake p7zip-full ninja-build xvfb rpm

      - name: Install Windows dependencies
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          choco install --no-progress --yes pandoc

      - name: Install Qt on Windows (x64)
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'x64' }}
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          arch: 'win64_msvc2019_64'

      - name: Install Qt on Windows (Win32)
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'Win32' }}
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          arch: 'win32_msvc2019'

      # Run build script

      - name: Linux build (GCC8)
        if: ${{ matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-8' }}
        run: ./travis-linux.sh
        env:
          TB_GCC8: 'true'

      - name: Linux build (GCC7)
        if: ${{ matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-7' }}
        run: ./travis-linux.sh

      - name: macOS build
        if: ${{ matrix.os == 'macos-10.15' }}
        run: ./travis-macos.sh
        env:
          TB_DEBUG_BUILD: ${{ matrix.tbdebug }}

      - name: Windows build
        if: ${{ matrix.os == 'windows-2019' }}
        # NOTE: docs at https://github.com/jurplel/install-qt-action
        # mention that it sets a Qt5_DIR environment variable.
        # Our script expects it in QT5_INSTALL_DIR
        # NOTE: cmd.exe /c = run a command and terminate
        run: |
          $Env:QT5_INSTALL_DIR = $env:Qt5_DIR
          cmd.exe /c appveyor.bat
        env:
          TB_ARCH: ${{ matrix.tb-arch }}

      # Upload artifacts

      # win64
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'x64' }}
        with:
          name: win64
          path: |
            cmakebuild/*.7z
            cmakebuild/*.7z.md5

      # win32
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'Win32' }}
        with:
          name: win32
          path: |
            cmakebuild/*.7z
            cmakebuild/*.7z.md5

      # Linux
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-7' }}
        with:
          name: linux
          path: |
            build/*.deb
            build/*.rpm
            build/*.md5

      # macOS
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'macos-10.15' && matrix.tbdebug == false }}
        with:
          name: macos
          path: |
            build/*.dmg
            build/*.md5

      # Create release

      - name: Create Release
        if: ${{ env.TB_CREATE_RELEASE == true }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Github Actions Test Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true

      # Upload release assets

      # - name: Upload Release Asset
      #   if: ${{ env.TB_CREATE_RELEASE }}
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./my-artifact.zip
      #     asset_name: my-artifact.zip
      #     asset_content_type: application/zip
