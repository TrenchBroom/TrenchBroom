on:
  # Run on pushes to tags, the "master" branch, and PR's
  push:
    tags:
      - '**'
    branches:
      - master
  pull_request:

name: CI

jobs:
  # Job key
  ci:
    # Label displayed in UI
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel the macOS build if the Linux build fails, etc.
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, macos-10.15, windows-2019]
        tb-build-type: [release]
        gcc-package: [default-compiler]
        tb-arch: [default-arch]
        exclude:
          - os: ubuntu-16.04
            gcc-package: default-compiler
          - os: windows-2019
            tb-arch: default-arch
        include:
          - os: ubuntu-16.04
            gcc-package: g++-7
          - os: ubuntu-16.04
            gcc-package: g++-8
          - os: macos-10.15
            tb-build-type: asan
          - os: windows-2019
            tb-arch: x64
          - os: windows-2019
            tb-arch: Win32
    env:
      # Record pull request head commit SHA
      TB_PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
    steps:
      # See: https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Dependencies

      - name: Install Linux dependencies
        if: ${{ matrix.os == 'ubuntu-16.04' }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository ppa:beineri/opt-qt595-xenial
          sudo apt update
          sudo apt install ${{ matrix.gcc-package }} qt59base qt59svg freeglut3-dev libglew-dev mesa-common-dev build-essential libglm-dev libxxf86vm-dev libfreeimage-dev pandoc cmake p7zip-full ninja-build xvfb rpm

      - name: Install Pandoc (Windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          # Chocolatey was taking 3 minutes to install pandoc; just install it directly
          Invoke-WebRequest 'https://github.com/jgm/pandoc/releases/download/2.11.3.1/pandoc-2.11.3.1-windows-x86_64.zip' -OutFile 'pandoc.zip'
          if ("668A62A8990DEB2753753DF0C8D3F1BE567026FE" -ne (Get-FileHash -Path 'pandoc.zip' -Algorithm SHA1).Hash) { exit }
          7z x pandoc.zip -o'.'
          $tb_pandoc_path = "$(pwd)\pandoc-2.11.3.1"
          # Add this to the system path
          echo "Pandoc path: $tb_pandoc_path"
          # See: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#environment-files
          echo "$tb_pandoc_path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Qt on Windows (x64)
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'x64' }}
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          arch: 'win64_msvc2019_64'

      - name: Install Qt on Windows (Win32)
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'Win32' }}
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          arch: 'win32_msvc2019'

      # Run build script

      - name: Linux build (GCC8)
        if: ${{ matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-8' }}
        run: ./CI-linux.sh
        env:
          TB_GCC8: 'true'

      - name: Linux build (GCC7)
        if: ${{ matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-7' }}
        run: ./CI-linux.sh

      - name: macOS build
        if: ${{ matrix.os == 'macos-10.15' }}
        run: |
          if [ '${{ matrix.tb-build-type }}' = 'asan' ]; then
            export TB_DEBUG_BUILD=true
          fi
          ./CI-macos.sh

      - name: Windows build
        if: ${{ matrix.os == 'windows-2019' }}
        # NOTE: docs at https://github.com/jurplel/install-qt-action
        # mention that it sets a Qt5_DIR environment variable.
        # Our script expects it in QT5_INSTALL_DIR
        # NOTE: cmd.exe /c = run a command and terminate
        run: |
          $Env:QT5_INSTALL_DIR = $env:Qt5_DIR
          cmd.exe /c CI-windows.bat
        env:
          TB_ARCH: ${{ matrix.tb-arch }}

      # Upload artifacts.
      # These need to be separate, otherwise all of the artifacts are bundled into
      # one .zip file.

      # win64
      - name: Upload win64 artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows-2019' && matrix.tb-arch == 'x64' }}
        with:
          name: win64
          path: |
            cmakebuild/*.7z
            cmakebuild/*.7z.md5

      # The other OS'es are disabled to save storage space. Can remove the `false` if necessary
      # to re-enable them.

      # win32
      - name: Upload win32 artifact
        uses: actions/upload-artifact@v2
        if: ${{ false && matrix.os == 'windows-2019' && matrix.tb-arch == 'Win32' }}
        with:
          name: win32
          path: |
            cmakebuild/*.7z
            cmakebuild/*.7z.md5

      # Linux
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        if: ${{ false && matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-7' }}
        with:
          name: linux
          path: |
            build/*.deb
            build/*.rpm
            build/*.md5

      # macOS
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v2
        if: ${{ false && matrix.os == 'macos-10.15' && matrix.tb-build-type != 'asan' }}
        with:
          name: macos
          path: |
            build/*.dmg
            build/*.md5

      # Create release

      # Official action upload-release-asset doesn't support uploading files
      # based on a glob, so use https://github.com/softprops/action-gh-release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && !(matrix.tb-build-type == 'asan' || matrix.gcc-package == 'g++-8') }}
        with:
          draft: true
          files: |
            build/*.deb
            build/*.rpm
            build/*.dmg
            build/*.md5
            cmakebuild/*.7z
            cmakebuild/*.7z.md5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload compiled manual
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-16.04' && matrix.gcc-package == 'g++-8' }}
        with:
          # I've created a SSH key pair following https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key
          # The TrenchBroom/TrenchBroom repo has a repository secret ACTIONS_DEPLOY_KEY set to the SSH private key
          # The TrenchBroom/manual repo has a deploy key set to the SSH public key
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: TrenchBroom/manual # Repo to deploy to
          publish_branch: gh-pages # Branch to deploy to
          publish_dir: ./build/app/gen-manual # Source directory tree
          destination_dir: latest # Deploy to this directory in target repo
