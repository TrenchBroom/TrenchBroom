// Heretic 2 demo forge game definition file (.fgd)
// for Worldcraft 1.6 and above
// last update: 8 nov 98
// Ver 0.00000000008

// Written by Manly Jack / jarad@ihug.co.nz
// email me with improvements and suggestions.
// Based on the default quake2 fdg so most comments are from that. Things I have added are with a
// h2 comment.
// Damn this is a mess. I wrote most of this up within a week or 2 of the demo being released.
//
// special thanks to: Tiglari for the .ent files
//

//----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------

//
// worldspawn
//

@SolidClass = worldspawn : "World entity"
[
	message(string) : "Level name"
	nextmap(string) : "Next map (DM only)"
	sky(string) : "Environment map name"
	skyaxis(string) : "Vector axis for rotating sky"
	skyrotate(string) : "Speed of rotation (degrees/second)"
	sounds(integer) : "CD Track Number" : 1
	gravity(integer) : "Gravity" : 800
  offensive(string)	: "Offensive"
  defensive(string)	: "Defensive"
	light(integer)	: "Light"
]

//
// base marker definitions - Appearflags=Spawnflags
//

@baseclass = Appearflags [
	spawnflags(Flags) =
	[
		256 : "Not in Easy" : 0
		512 : "Not in Normal" : 0
		1024 : "Not in Hard" : 0
		2048 : "Not in Deathmatch" : 0
	]
]

@baseclass = Targetname [ targetname(target_source) : "Name" ]
@baseclass = Target [ target(target_destination) : "Target" ]

//
// player start, deathmatch, coop, deathmatch intermission
//

@baseclass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 32) color(0 255 0) = PlayerClass []


@PointClass base(PlayerClass) = info_player_start : "Player 1 start" []
@PointClass base(PlayerClass) = info_player_deathmatch : "Player deathmatch start" []
@PointClass base(PlayerClass) = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) = info_player_intermission : "Deathmatch intermission point"
[
	angles(string) : "pitch yaw roll"
]

// H2 - Check
@PointClass base(PlayerClass, Target, Targetname) = info_bouy : "Bouy"
[

		delay(integer)	: "Delay"
		height(integer)	: "Height"
		jumptarget(string)	: "JumpTarget"
		pathtarget(string)	: "Path Target"
	  speed(integer)	: "Speed"
		target2(string)	: "Target 2"
		wait(integer)	: "Wait"
]


// Notes on the 'team' key: First of all, it's really only useful in DM because it creates a
// random respawn pattern. Let's say that in one spot, you want to have the shotgun, Quad
// damage and mega health item to respawn in alternance. Place all of them in approximately
// the same location, team them and voila! The FIRST item that you place in the map will be
// the team MASTER - the others will be SLAVES. In DM play, the Master will be the first one
// to spawn. Once the Master is picked up, the respawn pattern becomes RANDOM: it could be
// the same or one of the other 2. If you try to use this in a Single Player map, it's
// pretty useless because only the team MASTER spawns and the others never appear obviously.


// Keep in mind when using func_areaportal that it must
// *completely* separate two areas.  otherwise, you will
// get an error message and the areaportal will not work
//

@SolidClass base(Appearflags, Targetname) = func_areaportal : "Area portal (Vis blocker)" []

@SolidClass base(Appearflags, Target, Targetname) color(0 128 204) = func_button : "Button"
[
	killtarget(string) : "Kill Target"
	pathtarget(string) : "Elevator level target"
	speed(integer) : "Speed" : 40
	wait(choices) : "Wait before reset" : 1 =
	[
		-1 : "Never Return"
	]
	lip(integer) : "Lip remaining after move" : 4
	health(integer) : "Health (shootable)"
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
	message(string) : "Activation message"
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname) color(0 0 255) size(-8 -8 -8, 8 8 8) = func_clock : "Clock"
[
	spawnflags(Flags) =
	[
		1 : "Timer Up" : 0
		2 : "Timer Down" : 0
		4 : "Start Off" : 0
		8 : "Multi Use" : 0
	]
	count(integer) : "Clock Count"
	pathtarget(string) : "Target"
	style(choices) : "Style" : 0 =
	[
		0 : "xx"
		1 : "xx:xx"
		2 : "xx:xx:xx"
	]
]

// func_conveyor code is incomplete.  use the surface attribute "flowing"
// and the "current" content flag.  (texture won't scroll)
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_conveyor : "Conveyor belt"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
	]
	speed(integer) : "Speed" : 100
	_minlight(integer) : "Minimum light (optional)"
]

// H2
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_monsterspawner : "Monster Spawner"
[
	style(integer) : "Style"
	count(integer) : "Count"
	distance(integer) : "Distance"
	jump_chance(integer) : "Jump Chance"
	melee_range(integer) : "Melee Range"
	wait(integer) : "Wait"
]

@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_door : "Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Animated" : 0
		32 : "Toggle" : 0
		64 : "Animated Fast" : 0
	]
	killtarget(string) : "Kill Target"
	team(string) : "Team"
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	lip(integer) : "Lip remaining after move" : 8
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
	_minlight(integer) : "Minimum light (optional)"
]

@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_door_rotating : "Rotating Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		2 : "Reverse" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Animated" : 0
		32 : "Toggle" : 0
		64 : "X Axis" : 0
		128 : "Y Axis" : 0
	]
	killtarget(string) : "Kill Target"
	team(string) : "Team"
	distance(integer) : "Degrees of rotation" : 90
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
//	sounds(choices) : "Sounds" : 3 =
//	[
//		1 : "Silent"
//		2 : "Light"
//		3 : "Medium"
//		4 : "Heavy"
//	]
	_minlight(integer) : "Minimum light (optional)"
]


@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_door_secret : "Secret Door"
[
	spawnflags(Flags) =
	[
		1 : "Always shoot" : 0
		2 : "1st Left" : 0
		4 : "1st Down" : 0
	]
	dmg(integer) : "Damage when blocked" : 2
	wait(choices) : "Wait before close" : 5 =
	[
		-1 : "Stay open"
	]
	message(string) : "Message"
	_minlight(integer) : "Minimum light (optional)"
]

// h2
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = breakable_brush : "Exploding/Breakable brush"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Animated" : 0
		4 : "Animated Fast" : 0
	]
        materialtype(string) : "Material Type"
        model(string): "Model"
	health(integer) : "Health" : 100
	mass(integer) : "Mass (debris)" : 75
	dmg(integer) : "Damage" : 0

	_minlight(integer) : "Minimum light (optional)"
]

// not visible in DM mode
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_explosive : "Exploding/Breakable brush"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Animated" : 0
		4 : "Animated Fast" : 0
	]
	health(integer) : "Health" : 100
	mass(integer) : "Mass (debris)" : 75
	dmg(integer) : "Damage" : 0
	_minlight(integer) : "Minimum light (optional)"
]

@SolidClass base(Appearflags, Targetname) color(255 0 0) = func_killbox : "Instant death" []


@SolidClass base(Appearflags, Targetname) color (0 128 204) = func_object : "Solid bmodel, will fall if its support is removed"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Animated" : 0
		4 : "Animated Fast" : 0
	]
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - removed "sounds" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_plat : "Platform"
[
	spawnflags(Flags) =
	[
		1 : "Plat Low Trigger" : 0
	]
	speed(integer) : "Speed" : 100
	accel(integer) : "Acceleration" : 500
	lip(integer) : "Lip remaining after move" : 8
	height(integer) : "Movement distance"
	_minlight(integer) : "Minimum light (optional)"
]


@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_rotating : "Rotating brush"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Reverse" : 0
		4 : "X Axis" : 0
		8 : "Y Axis" : 0
		16 : "Pain on Touch" : 0
		32 : "Block Stops" : 0
		64 : "Animated" : 0
		128 : "Animated Fast" : 0
	]
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname, Target) color(76 25 153) size(-8 -8 -8, 8 8 8) = func_timer : "Timer"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
	]
	wait(integer) : "Base wait time" : 1
	random(integer) : "Wait variance (+/-)"
	delay(integer) : "Delay before first firing"
	pausetime(integer) : "Additional delay"
]


@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_train : "Moving platform"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Block Stops" : 0
	]
	target(string) : "First stop target"
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	noise(string) : "Sound (path/file.wav)"
	_minlight(integer) : "Minimum light (optional)"
]


@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_wall : "Solid Wall"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Toggle" : 0
		4 : "Start On" : 0
		8 : "Animated" : 0
		16 : "Animated Fast" : 0
	]
	_minlight(integer) : "Minimum light (optional)"
]

@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_water : "Moveable water"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
	]
	speed(integer) : "Speed" : 25
	wait(choices) : "Wait before return" : -1 =
	[
		-1 : "Toggle"
	]
	lip(integer) : "Lip remaining after move"
	sounds(Choices) : "Sounds" : 1 =
	[
		0 : "No Sounds"
		1 : "Water"
		2 : "Lava"
	]
	team(string) : "Team"
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname) color(0 128 0) size(-4 -4 -4, 4 4 4) = info_null : "Spotlight target" []
@PointClass base(info_null) = info_notnull : "Lightning target" []

@BaseClass base(Appearflags, Target, Targetname) color(76 76 255) size(-16 -16 -16, 16 16 16) = Items
[
	team(string) : "Team"
]
//H2
@PointClass base(Items) = item_ammo_hellstaff : "Hellstaff ammo" []
@PointClass base(Items) = item_ammo_phoenix : "Phoenix ammo" []
@PointClass base(Items) = item_ammo_redrain : "Red rain ammo" []

@PointClass base(Items) = item_health_full : "Full Health" []
@PointClass base(Items) = item_health_half : "Half Health" []

@PointClass base(Items) = item_mana_combo_half : "Half Combo Mana" []
@PointClass base(Items) = item_mana_combo_quarter : "Quater Combo Mana" []

@PointClass base(Items) = item_mana_defensive_full : "Full Defensive Mana" []
@PointClass base(Items) = item_mana_defensive_half : "Half Defensive Mana" []
@PointClass base(Items) = item_mana_offensive_full : "Full Offensive Mana" []
@PointClass base(Items) = item_mana_offensive_half : "Half Offensive Mana" []

@PointClass base(Items) = item_defense_meteorbarrier : "Meteo Barrier spell" []
@PointClass base(Items) = item_defense_polymorph : "Polymorph Spell" []
@PointClass base(Items) = item_defense_teleport : "Teleport Spell" []
@PointClass base(Items) = item_defense_ringofrepulsion : "Ring of Repulsion" []
@PointClass base(Items) = item_defense_powerup : "Tome Powerup" []

@PointClass base(Items) = item_puzzle_tavernkey : "Tavern Key" []
@PointClass base(Items) = item_puzzle_townkey : "Town Key" []
@PointClass base(Items) = item_spitter : "spitter"
[
        angles(integer) : "Angles"
	count(integer) : "Count"
	radius(integer) : "Radius"
]




@PointClass base(Keys, Targetname) = key_power_cube : "Warehouse circuits"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "No Touch" : 0
	]
]
@PointClass base(Keys) = key_pyramid : "Key for entrance to jail3" []
@PointClass base(Keys) = key_red_key : "normal door key - red" []

@PointClass base(Appearflags, Target, Targetname) color(0 255 0) size(-8 -8 -8, 8 8 8) = light : "Light"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
	]
	light(integer) : "Brightness" : 300
	_color(color1) : "RGB Color"
	style(Choices) : "Style" : 0 =
	[
		0 : "Normal"
		1 : "Flicker #1"
		6 : "Flicker #2"
		2 : "Slow Strong Pulse"
		3 : "Candle #1"
		7 : "Candle #2"
		8 : "Candle #3"
		4 : "Fast Strobe"
		5 : "Gentle Pulse #1"
		9 : "Slow Strobe"
		10 : "Fluorescent Flicker"
		11 : "Slow pulse, no black"
	]
	_cone(integer) : "Size of light (spotlight)" : 10
]

@PointClass base(light) = light_chandelier2 : "Chandelier" []
@PointClass base(light) = light_gem2 : "Gem" []
@PointClass base(light) = light_lantern1 : "Lantern" []
@PointClass base(light) = light_lantern2 : "Lantern 2" []
@PointClass base(light) = light_lantern3 : "Lantern 3" []
@PointClass base(light) = light_lantern2 : "Lantern 5" []
@PointClass base(light) = light_torch1 : "Torch" []
@PointClass base(light) = light_walltorch : "Wall Torch" []

// actor code is still broken...leaving this in because i know *someone* will fix
// this because its pretty damn cool.
@PointClass base(PlayerClass, Target) = misc_actor : "Actor"
[
	health(integer) : "Health" : 100
]
@PointClass base(Appearflags, Targetname) = target_actor : "Actor path"
[
	spawnflags(Flags) =
	[
		1 : "Jump" : 0
		2 : "Shoot" : 0
		4 : "Attack" : 0
		16 : "Hold" : 0
		32 : "Brutal" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Action target"
	wait(integer) : "Pause time"
	message(string) : "Message"
	speed(integer) : "Forward (jump)" : 200
	height(integer) : "Height (jump)" : 200
]




// 0225 - removed "target" key - id concluded being able to target
// something with a movable barrel was a bug and removed that function :(
@PointClass base(Appearflags, Targetname) color(0 128 204) size(-16 -16 0, 16 16 40) = misc_explobox : "Large exploding box"
[
	mass(integer) : "Mass" : 100
	health(integer) : "Health" : 80
	dmg(integer) : "Damage" : 150
]


// place teleporter units 10 units into a brush to get rid of teleport pad
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) = misc_teleporter : "Teleporter"
[
	target(string) : "Teleport Destination"
]
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) = misc_teleporter_dest : "Teleport Destination" []
// H2 - Check
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) = misc_magic_portal : "Magic Portal"
[
  count(integer) : "Count"
]

// H2
@PointClass base(Appearflags, Targetname, Target) color(255 0 0) size(-32 -32 -24, 32 32 -16) = misc_remote_camera : "Remote Camera"
[
	delay(integer) : "Delay"
]


//
// Monsters!
//


@BaseClass base(Appearflags, Target, Targetname) color(255 128 0) size(-16 -16 -24, 16 16 32) = Monsters
[
	spawnflags(Flags) =
	[
		1 : "Ambush" : 0
		2 : "Trigger Spawn" : 0
		4 : "Sight" : 0
	]
	combattarget(string) : "Point combat target"
	deathtarget(string) : "Entity to trigger at death"
	killtarget(string) : "Entity to remove at death"
	item(string) : "Spawn Item"
        //h2
        health(integer) : "Health"
        melee_range(integer) : "Melee range"
        scale(integer) : "Scale"
        wakeup_distance(integer) : "Wakeup Distance"
        jump_chance(integer) : "Jump chance"
        bypass_missle_chance(integer) : "bypass missile chance"
]


@PointClass base(Monsters) = monster_gkrokon : "Gkrokon" []
@PointClass base(Monsters) = monster_chicken : "Chicken" []
@PointClass base(Monsters) = monster_fish : "Fish" []
@PointClass base(Monsters) = monster_harpy : "Harpy" []
@PointClass base(Monsters) = monster_gorgon : "Gorgon" []
@PointClass base(Monsters) = monster_spreader : "Spreader" []
@PointClass base(Monsters) = monster_plagueElf : "Elf" []
@PointClass base(Monsters) = monster_rat : "Rat" []
@PointClass base(Monsters) = monster_rat_giant : "Giant Rat" []
@PointClass base(Monsters) = monster_assasin : "Assasin" []
@PointClass base(Monsters) = monster_nothing : "Nothing" []

@PointClass base(Monsters) = monster_bee : "Bee" []
@PointClass base(Monsters) = monster_monster_high_priestess : "High Priestess" []
@PointClass base(Monsters) = monster_imp : "Imp" []
@PointClass base(Monsters) = monster_morcalavin : "Morcalavin" []
@PointClass base(Monsters) = monster_mssithra : "Mssithra" []
@PointClass base(Monsters) = monster_ogle : "Ogle" []
@PointClass base(Monsters) = monster_palace_plague_guard : "Plague Guard" []
@PointClass base(Monsters) = monster_palace_plague_guard_invisible : "Invisible Plague Guard" []
@PointClass base(Monsters) = monster_seraph_guard : "Seraph Guard" []
@PointClass base(Monsters) = monster_seraph_overlord : "Seraph Overlord" []
@PointClass base(Monsters) = monster_ssithra : "Plague Ssithra" []
@PointClass base(Monsters) = monster_tcheckrik_female : "Female Tcheckrik" []
@PointClass base(Monsters) = monster_tcheckrik_male : "Male Tcheckrik" []
@PointClass base(Monsters) = monster_tcheckrik_mothers : "Tcheckrik Mother" []
@PointClass base(Monsters) = monster_trial_beast : "Trial Beast" []


// using a "wait" value of -1 on a path corner causes a func_train to go silent between
// itself and the next path corner when the train is restarted. The train's sound will
// resume as soon as it reaches a path corner with a "wait" value other than -1
@PointClass base(Appearflags, Targetname) color(128 76 0) size(-8 -8 -8, 8 8 8) = path_corner : "Path marker"
[
	spawnflags(Flags) =
	[
		1 : "Teleport" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Event to trigger"
	wait(choices) : "Wait" : 0 =
	[
		-1 : "Wait for retrigger"
	]
]

// "target" doesn't work (for now)...a separate trigger is needed
@PointClass base(Appearflags, Targetname, Target) color(128 76 9) size(-8 -8 -8, 8 8 8) = point_combat : "1st point of combat"
[
	spawnflags(Flags) =
	[
		1 : "Hold" : 0
	]
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_blaster : "Blaster"
[
	spawnflags(Flags) =
	[
		1 : "No Trail" : 0
		2 : "No Effects" : 0
	]
	dmg(integer) : "Damage" : 15
	speed(integer) : "Speed" : 1000
]

// set "map" value to "mapname$playername" where playername equals
// the targetname of a corresponding info_player_start in the
// next map.  To play a cinematic before starting the level, the
// "map" value should be "cinemeatic.cin+mapname$playername". Note
// that a playername is not required if the corresponding info_player_start
// doesn't have a targetname.  If you want this to be designated as the last
// level of a unit, place an asterix (*) before the map name.
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_changelevel : "Change level"
[
	map(string) : "Next map"
]


@SolidClass base(Appearflags, Targetname) color(0 0 255) = target_character : "Use with target_string and func_clock"
[
	team(string) : "Team"
	count(integer) : "Position in the string"
	_minlight(string) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_crosslevel_trigger : "Cross-level trigger"
[
	spawnflags(Flags) =
	[
		1 : "Trigger 1" : 0
		2 : "Trigger 2" : 0
		4 : "Trigger 3" : 0
		8 : "Trigger 4" : 0
		16 : "Trigger 5" : 0
		32 : "Trigger 6" : 0
		64 : "Trigger 7" : 0
		128 : "Trigger 8" : 0
	]
	killtarget(string) : "Kill Target"
	message(string) : "Message"
	delay(integer) : "Trigger delay"
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_crosslevel_target : "Cross-level trigger"
[
	spawnflags(Flags) =
	[
		1 : "Trigger 1" : 0
		2 : "Trigger 2" : 0
		4 : "Trigger 3" : 0
		8 : "Trigger 4" : 0
		16 : "Trigger 5" : 0
		32 : "Trigger 6" : 0
		64 : "Trigger 7" : 0
		128 : "Trigger 8" : 0
	]
	killtarget(string) : "Kill Target"
	delay(integer) : "Trigger delay (if activated)" : 1
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_earthquake : "Level wide earthquake"
[
	speed(integer) : "Severity of quake" : 200
	count(integer) : "Duration" : 5
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_explosion : "Explosion"
[
	delay(integer) : "Delay before explosion"
	dmg(integer) : "Radius damage" : 0
]

@PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_goal : "Counts a goal completed" []

@PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_help : "Computer help message"
[
	spawnflags(Flags) =
	[
		1 : "Main Objective" : 0
	]
	message(string) : "Computer message"
]

// if no color spawnflags are set, the laser color defaults to dim gray (and hard to see
// setting the damage to 0 makes it use the default damage of 1
// setting the damage to a negative number will actually give health
@PointClass base(Appearflags, Targetname, Target) color(0 128 204) size(-8 -8 -8, 8 8 8) = target_laser : "Laser"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Red" : 0
		4 : "Green" : 0
		8 : "Blue" : 0
		16 : "Yellow" : 0
		32 : "Orange" : 0
		64 : "Fat" : 0
	]
	dmg(integer) : "Damage"
]


@PointClass base(Appearflags, Targetname, Target) color(0 128 204) size(-8 -8 -8, 8 8 8) = target_lightramp : "Light ramp"
[
	spawnflags(Flags) =
	[
		1 : "Toggle" : 0
	]
	speed(integer) : "Speed"
	message(string) : "start/end light level"
]

@PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_secret : "Counts a secret found"
[
	message(string) : "Message to print" : "You have found a secret."
]

// set speed and angle, otherwise spawned object drops
//
// 0221 - changed "target" key description for clarity
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_spawner : "Monster/Item spawner"
[
	target(string) : "Monster/Item to spawn"
	speed(integer) : "Speed"
]

// looped sounds are automatically volume 1, attenuation 3 :\
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_speaker : "Sound player"
[
	spawnflags(Flags) =
	[
		1 : "Looped On" : 0
		2 : "Looped Off" : 0
		4 : "Reliable" : 0
	]
	noise(string) : "Sound (path/file.wav)"
	attenuation(Choices) : "Attenuation" : 1 =
	[
		-1 : "None, send to whole level"
		1 : "Normal fighting sounds"
		2 : "Idle sound level"
		3 : "Ambient sound level"
	]
	volume(integer) : "Volume (0.0 - 1.0)" : 1
]


// 0221 - removed "message" key (?)
@PointClass base(Appearflags, Targetname) color(0 0 255) size(-8 -8 -8, 8 8 8) = target_string : "String"
[
	team(string) : "Team"
]

// eye candy... Particles #2 (style 22) is quite cool
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_temp_entity : "Temp entity"
[
	style(choices) : "Style" : 22 =
	[
		20 : "Green Fireball"
		21 : "Particles #1"
		22 : "Particles #2"
	]
]


@PointClass base(Appearflags, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_always : "Always triggers"
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
]


@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_counter : "Counter"
[
	spawnflags(Flags) =
	[
		1 : "No Message" : 0
	]
	killtarget(string) : "Kill Target"
	count(integer) : "Count before trigger" : 2
]

@PointClass base(Appearflags, Targetname, Target) color(76 25 153) = trigger_elevator : "Elevator trigger" []

@SolidClass base(Appearflags) color(128 128 128) = trigger_gravity : "Change gravity"
[
	gravity(integer) : "Gravity (standard = 1.0)" : 1
]

@SolidClass base(Appearflags, Targetname) color(128 128 128) = trigger_hurt : "Hurts on touch"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
		2 : "Toggle" : 0
		4 : "Silent" : 0
		8 : "No Protection" : 0
		16 : "Slow hurt" : 0
	]
	dmg(integer) : "Damage" : 5
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_key : "Triggers with key"
[
	killtarget(string) : "Kill target"
	item(string) : "Item classname" : "item_tavern_key"
]

// H2
@SolidClass base(Appearflags, Targetname, Target) = trigger_Deactivate : "Deactivate" []

@SolidClass base(Appearflags, Targetname, Target) = trigger_goto_buoy : "Go to bouy"
[
	pathtarget(string) : "path target"
]
@SolidClass base(Appearflags) = trigger_mappercentage : "Map percentage"
[
  count(integer) : "Count"
]

@SolidClass base(Appearflags, Targetname, Target) = trigger_mission_give : "Mission Give"
[
	message(string) : "Message"
]

@SolidClass base(Appearflags, Targetname, Target) = trigger_mission_take : "Mission take" []
@SolidClass base(Appearflags, Targetname, Target) = trigger_playerpushbutton : "Player pushbutton" []
@SolidClass base(Appearflags, Targetname, Target) = trigger_playerpushlever : "Player Push lever" []
@SolidClass base(Appearflags, Targetname, Target) = trigger_playerusepuzzle : "Player use puzzle" []
@PointClass base(Appearflags, Targetname, Target) = trigger_puzzle : "Puzzle"
[
  item(string) : "Item"
]
@SolidClass base(Appearflags, Targetname, Target) = trigger_quit_to_menu : "Quit to menu" []
@PointClass base(Appearflags, Targetname, Target) = trigger_relay : "Relay"
[
	delay(integer) : "Delay"
	wait(integer) : "Wait"
]


@SolidClass base(Appearflags) color(128 128 128) = trigger_monsterjump : "Makes monsters jump"
[
	speed(integer) : "Speed thrown forward" : 200
	height(integer) : "Height thrown upward" : 200
]

// 0221 - switched around _relay, _once, and _multiple
@PointClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_relay : "Relay trigger"
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
	message(string) : "Trigger message"
]

@SolidClass base(trigger_relay) = trigger_once : "Single fire trigger"
[
	spawnflags(Flags) =
	[
		4 : "Triggered" : 0
	]
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Beep beep"
		1 : "Secret"
		2 : "F1 prompt"
		3 : "Silent"
	]
]
@SolidClass base(trigger_once) = trigger_multiple : "Multiple fire trigger"
[
	spawnflags(Flags) =
	[
		1 : "Monster" : 0
		2 : "Not Player" : 0
	]
	wait(integer) : "Seconds between triggers" : 0
]

@SolidClass base(Appearflags) color(128 128 128) = trigger_push : "Push trigger"
[
	spawnflags(Flags) =
	[
		1 : "Push Once" : 0
	]
	speed(integer) : "Speed of push" : 1000
]

@PointClass base(Appearflags) color(0 128 204) size(-8 -8 -8, 8 8 8) = viewthing : "Just for debugging level - dont use" []

//H2 Done ()
@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Weapons
[
	team(string) : "Team"
]
@PointClass base(Weapons) = item_weapon_firewall : "Firewall" []
@PointClass base(Weapons) = item_weapon_maceballs : "Maceballs" []
@PointClass base(Weapons) = item_weapon_phoenixbow : "Phoenix Bow" []
@PointClass base(Weapons) = item_weapon_sphereofannihilation : "Sphere of Annihilation" []
@PointClass base(Weapons) = item_weapon_redrain_bow : "Red Rain Bow" []
@PointClass base(Weapons) = item_weapon_magicmissile : "Magic Missile" []


//H2 stuff
//Character -  fix
@BaseClass base(Appearflags, Targetname) color(76 76 255) size(-16 -16 -24, 16 16 32) = Character []
@SolidClass base(character) = character_corvus5 : "Corvus 5" []
@SolidClass base(character) = character_dranor1 : "Dranor" []

//Env - fix
@BaseClass base(Appearflags, Target) color(76 76 255) size(-8 -8 -8, 8 8 8) = Env
[

]

@PointClass base(Env) = env_bubbler : "bubbler" []
@PointClass base(Env) = env_dust : "dust"
[
		model(integer) : "Model"
]
@PointClass base(Env) = env_fire : "fire"
[
	scale(integer) : "Scale"
]
@PointClass base(Env) = env_smoke : "smoke" []
@PointClass base(Env) = env_sun1 : "sun1" []
@PointClass base(Env) = env_water_drip : "water drip" []
@PointClass base(Env) = env_fountain : "fountain" []
@PointClass base(Env) = env_waterfall_base : "waterfall base" []

// H2: Shrines
@BaseClass base(Appearflags, Target, Targetname) color(76 76 255) size(-8 -8 -8, 8 8 8) = Shrine
[

]

@SolidClass base(Shrine) = shrine_random : "Random Shrine" []
@SolidClass base(Shrine) = shrine_armor : "Armor Shrine" []
@SolidClass base(Shrine) = shrine_heal : "Health Shrine" []
@SolidClass base(Shrine) = shrine_light : "Light Shrine" []
@SolidClass base(Shrine) = shrine_mana : "Mana Shrine" []
@SolidClass base(Shrine) = shrine_reflect : "Reflect Shrine" []
@SolidClass base(Shrine) = shrine_staff : "Staff Shrine" []
@SolidClass base(Shrine) = shrine_powerup : "Powerup Shrine" []
@SolidClass base(Shrine) = shrine_ghost : "Ghost Shrine" []
@SolidClass base(Shrine) = shrine_armor_gold : "Gold Armor Shrine" []
@SolidClass base(Shrine) = shrine_lung : "Lung Shrine" []

@BaseClass base(Appearflags, Target, Targetname) color(76 76 255) size(-8 -8 -8, 8 8 8) = object
[

]

@PointClass base(object) = obj_shrine : "Shrine"
[
	style(choices) : "Type of shrine" : 1 =
	[
		0 : "heal"
		1 : "mana"
		2 : "lungs"
		3 : "light"
		4 : "powerup"
		5 : "armor"
		6 : "gold armor"
		7 : "random"
		8 : "reflection"
		9 : "staff"
		10 : "ghost"
		11 : "speed"
	]
]


@PointClass base(object) = obj_banner : "Banner"
[
	skinnum(integer) : "Skin Number?"
	scale(integer) : "Scale"
]
@PointClass base(object) = obj_banneronpole : "Banner on Pole" []
@PointClass base(object) = obj_barrel : "Barrel"
[
	killtarget(string) : "Killtarget"
]
@PointClass base(object) = obj_biotank : "Bio Tank"
[
	scale(integer) : "Scale"
]
@PointClass base(object) = obj_bookopen : "Open Book" []
@PointClass base(object) = obj_broom : "Broom" []
@PointClass base(object) = obj_bucket : "Bucket" []
@PointClass base(object) = obj_bush1 : "Bush" []
@PointClass base(object) = obj_bush2 : "Bush 2" []
@PointClass base(object) = obj_cactus : "Cactus" []
@PointClass base(object) = obj_cactus3 : "Cactus 3" []
@PointClass base(object) = obj_cactus4 : "Cactus 4" []
@PointClass base(object) = obj_cauldron : "Cauldron" []
@PointClass base(object) = obj_chair1 : "Chair 1" []
@PointClass base(object) = obj_chest1 : "Chest 1" []
@PointClass base(object) = obj_clayjar : "Clay jar" []
@PointClass base(object) = obj_corpse1 : "Corpse 1"
[
	style(integer) : "Style"
]
@PointClass base(object) = obj_corpse2 : "Corpse 2"
[
	style(integer) : "Style"
]
@PointClass base(object) = obj_dying_elf : "Dying elf"
[
	style(integer) : "Style"
]
@PointClass base(object) = obj_firepot : "Firepot" []
@PointClass base(object) = obj_fishhead2 : "Fishhead2" []
@PointClass base(object) = obj_fishtrap : "Fish trap" []
@PointClass base(object) = obj_flagonpole : "Flag on pole" []
@PointClass base(object) = obj_floor_candelabrum : "Floor candelbrum"
[
  _color(color1) : "RGB Color"
  light(integer) : "Light"
]
@PointClass base(object) = obj_gorgonbones : "Gorgon bones" []
@PointClass base(object) = obj_hangingdude : "Hanging dude" []
@PointClass base(object) = obj_jawbone : "Jawbone" []
@PointClass base(object) = obj_lever3 : "Lever 3" []
@PointClass base(object) = obj_moss2 : "Moss 2" []
@PointClass base(object) = obj_moss4 : "Moss 4" []
@PointClass base(object) = obj_nest : "Nest" []
@PointClass base(object) = obj_rocks1 : "Rocks 1" []
@PointClass base(object) = obj_rocks2 : "Rocks 2" []
@SolidClass base(object) = obj_rope : "Rope" []
@PointClass base(object) = obj_ropechain : "Rope chain"
[
	skinnum(integer) : "Skin Number"
]
@PointClass base(object) = obj_sign1 : "Sign 1"
[
  style(integer) : "Style"
]
@PointClass base(object) = obj_sign4 : "Sign 4"
[
	style(integer) : "Sytle"
]
@PointClass base(object) = obj_skullpole : "Skull pole" []
@PointClass base(object) = obj_statue_guardian : "Guardain statue"
[
	scale(integer) : "Scale"
]

@PointClass base(object) = obj_statue_techeckrikleft : "techeckrik statue left"
[
	scale(integer) : "Scale"
]
@PointClass base(object) = obj_statue_techeckrikright : "techeckrik statue right"
[
	scale(integer) : "Scale"
]
@PointClass base(object) = obj_stein : "Stein" []
@PointClass base(object) = obj_table1 : "Table 1" []
@PointClass base(object) = obj_tapper : "Tapper" []
@PointClass base(object) = obj_torture_ironmaiden : "Iron Maiden" []
@PointClass base(object) = obj_treefallen : "Fallen tree" []
@PointClass base(object) = obj_wallringplaque : "Wall ring plaque" []
@PointClass base(object) = obj_wheelbarrowdamaged : "Wheebarrow"
[
	angles(integer) : "Angles"
]
@PointClass base(object) = obj_woodpile : "Wood Pile" []

@PointClass base(Targetname) = script_runner : "Script Runner"
[
	script(string) : "String"
]

@BaseClass base(Appearflags) color(76 76 255) size(-8 -8 -8, 8 8 8) = Sound
[
	style(integer) : "Style"
	attenuation(integer) : "Attenuation"
	volume(integer) : "Volume"
	wait(integer) : "Wait"
]
@PointClass base(Sound) = sound_ambient_mine : "Mine" []
@PointClass base(Sound) = sound_ambient_silverspring : "Silverspring" []
@PointClass base(Sound) = sound_ambient_swampcanyon : "Swamp Canyon" []
